/*
* Copyright 2013 by the digital.me project (http:\\www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.nie;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> CharacterSet </li>
 *   <li> Comment </li>
 *   <li> ContentCreated </li>
 *   <li> ContentLastModified </li>
 *   <li> ContentModified </li>
 *   <li> ContentSize </li>
 *   <li> EncryptionStatus </li>
 *   <li> Generator </li>
 *   <li> GeneratorOption </li>
 *   <li> HtmlContent </li>
 *   <li> InformationElementDate </li>
 *   <li> IsLogicalPartOf </li>
 *   <li> IsStoredAs </li>
 *   <li> Keyword </li>
 *   <li> Legal </li>
 *   <li> Links </li>
 *   <li> LogicalPart </li>
 *   <li> MimeType </li>
 *   <li> NcoContributor </li>
 *   <li> NcoCreator </li>
 *   <li> NieDescription </li>
 *   <li> NieIdentifier </li>
 *   <li> NieLanguage </li>
 *   <li> NieTitle </li>
 *   <li> NieVersion </li>
 *   <li> Part </li>
 *   <li> PlainTextContent </li>
 *   <li> Publisher </li>
 *   <li> RelatedTo </li>
 *   <li> RootElementOf </li>
 *   <li> Subject </li>
 *   <li> Writeable </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class InformationElement extends eu.dime.ps.semantic.model.RDFReactorThing {

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#InformationElement */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#InformationElement", false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#characterSet */
    @SuppressWarnings("hiding")
	public static final URI CHARACTERSET = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#characterSet",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#comment */
    @SuppressWarnings("hiding")
	public static final URI COMMENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#comment",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentCreated */
    @SuppressWarnings("hiding")
	public static final URI CONTENTCREATED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentCreated",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentLastModified */
    @SuppressWarnings("hiding")
	public static final URI CONTENTLASTMODIFIED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentLastModified",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentModified */
    @SuppressWarnings("hiding")
	public static final URI CONTENTMODIFIED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentModified",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentSize */
    @SuppressWarnings("hiding")
	public static final URI CONTENTSIZE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentSize",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#encryptionStatus */
    @SuppressWarnings("hiding")
	public static final URI ENCRYPTIONSTATUS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#encryptionStatus",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generator */
    @SuppressWarnings("hiding")
	public static final URI GENERATOR = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generator",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generatorOption */
    @SuppressWarnings("hiding")
	public static final URI GENERATOROPTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generatorOption",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#htmlContent */
    @SuppressWarnings("hiding")
	public static final URI HTMLCONTENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#htmlContent",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#informationElementDate */
    @SuppressWarnings("hiding")
	public static final URI INFORMATIONELEMENTDATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#informationElementDate",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isLogicalPartOf */
    @SuppressWarnings("hiding")
	public static final URI ISLOGICALPARTOF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isLogicalPartOf",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isStoredAs */
    @SuppressWarnings("hiding")
	public static final URI ISSTOREDAS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isStoredAs",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#keyword */
    @SuppressWarnings("hiding")
	public static final URI KEYWORD = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#keyword",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#legal */
    @SuppressWarnings("hiding")
	public static final URI LEGAL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#legal",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links */
    @SuppressWarnings("hiding")
	public static final URI LINKS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart */
    @SuppressWarnings("hiding")
	public static final URI LOGICALPART = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#mimeType */
    @SuppressWarnings("hiding")
	public static final URI MIMETYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#mimeType",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contributor */
    @SuppressWarnings("hiding")
	public static final URI NCOCONTRIBUTOR = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contributor",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator */
    @SuppressWarnings("hiding")
	public static final URI NCOCREATOR = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#description */
    @SuppressWarnings("hiding")
	public static final URI NIEDESCRIPTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#description",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier */
    @SuppressWarnings("hiding")
	public static final URI NIEIDENTIFIER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language */
    @SuppressWarnings("hiding")
	public static final URI NIELANGUAGE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title */
    @SuppressWarnings("hiding")
	public static final URI NIETITLE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#version */
    @SuppressWarnings("hiding")
	public static final URI NIEVERSION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#version",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart */
    @SuppressWarnings("hiding")
	public static final URI PART = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent */
    @SuppressWarnings("hiding")
	public static final URI PLAINTEXTCONTENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#publisher */
    @SuppressWarnings("hiding")
	public static final URI PUBLISHER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#publisher",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#relatedTo */
    @SuppressWarnings("hiding")
	public static final URI RELATEDTO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#relatedTo",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#rootElementOf */
    @SuppressWarnings("hiding")
	public static final URI ROOTELEMENTOF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#rootElementOf",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#subject */
    @SuppressWarnings("hiding")
	public static final URI SUBJECT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#subject",false);

    /** http://www.semanticdesktop.org/2011/10/05/ontologies/dcon#writeable */
    @SuppressWarnings("hiding")
	public static final URI WRITEABLE = new URIImpl("http://www.semanticdesktop.org/2011/10/05/ontologies/dcon#writeable",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#characterSet",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#comment",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentCreated",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentLastModified",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentModified",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#contentSize",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#encryptionStatus",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generator",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#generatorOption",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#htmlContent",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#informationElementDate",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isLogicalPartOf",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#isStoredAs",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#keyword",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#legal",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#links",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasLogicalPart",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#mimeType",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contributor",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#creator",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#description",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#identifier",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#language",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#title",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#version",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#hasPart",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#plainTextContent",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#publisher",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#relatedTo",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#rootElementOf",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#subject",false),
      new URIImpl("http://www.semanticdesktop.org/2011/10/05/ontologies/dcon#writeable",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected InformationElement (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public InformationElement (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public InformationElement (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public InformationElement (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public InformationElement (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of InformationElement  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static InformationElement  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, InformationElement.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/01/19/nie#InformationElement).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends InformationElement> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, InformationElement.class );
	}

    /**
	 * Remove rdf:type InformationElement from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ActiveFile' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllActiveFile_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.dcon.Attention.ACTIVEFILE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ActiveFile' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllActiveFile_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.dcon.Attention.ACTIVEFILE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ActiveFile' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllActiveFile_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.dcon.Attention.ACTIVEFILE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Referrer' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReferrer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.ndo.DownloadEvent.REFERRER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Referrer' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReferrer_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.ndo.DownloadEvent.REFERRER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Referrer' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllReferrer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.ndo.DownloadEvent.REFERRER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InterpretedAs' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInterpretedAs_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nie.DataObject.INTERPRETEDAS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InterpretedAs' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInterpretedAs_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nie.DataObject.INTERPRETEDAS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InterpretedAs' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInterpretedAs_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nie.DataObject.INTERPRETEDAS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'IsPartOf' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsPartOf_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nie.DataObject.ISPARTOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'IsPartOf' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsPartOf_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nie.DataObject.ISPARTOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'IsPartOf' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllIsPartOf_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nie.DataObject.ISPARTOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'IsLogicalPartOf' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsLogicalPartOf_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nie.InformationElement.ISLOGICALPARTOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'IsLogicalPartOf' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsLogicalPartOf_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nie.InformationElement.ISLOGICALPARTOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'IsLogicalPartOf' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllIsLogicalPartOf_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nie.InformationElement.ISLOGICALPARTOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'LogicalPart' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLogicalPart_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nie.InformationElement.LOGICALPART, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'LogicalPart' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLogicalPart_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nie.InformationElement.LOGICALPART, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'LogicalPart' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllLogicalPart_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nie.InformationElement.LOGICALPART, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TargettedResource' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTargettedResource_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nuao.Event.TARGETTEDRESOURCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TargettedResource' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTargettedResource_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nuao.Event.TARGETTEDRESOURCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TargettedResource' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTargettedResource_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nuao.Event.TARGETTEDRESOURCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GroundingOccurrence' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGroundingOccurrence_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.pimo.Thing.GROUNDINGOCCURRENCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GroundingOccurrence' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGroundingOccurrence_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.pimo.Thing.GROUNDINGOCCURRENCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GroundingOccurrence' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGroundingOccurrence_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.pimo.Thing.GROUNDINGOCCURRENCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ReferencingOccurrence' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReferencingOccurrence_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.pimo.Thing.REFERENCINGOCCURRENCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ReferencingOccurrence' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReferencingOccurrence_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.pimo.Thing.REFERENCINGOCCURRENCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ReferencingOccurrence' to this InformationElement instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllReferencingOccurrence_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.pimo.Thing.REFERENCINGOCCURRENCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3fa48382 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCharacterSet(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CHARACTERSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3fa48382 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCharacterSet() {
		return Base.has(this.model, this.getResource(), CHARACTERSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3fa48382 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCharacterSet(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CHARACTERSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3fa48382 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCharacterSet( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CHARACTERSET);
	}

    /**
     * Get single value of property CharacterSet as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getCharacterSet_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, CHARACTERSET);
	}
	
    /**
     * Get single value of property CharacterSet as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getCharacterSet_asNode() {
		return Base.get_asNode(this.model, this.getResource(), CHARACTERSET);
	}
     /**
     * Get single value of property CharacterSet     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getCharacterSet(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, CHARACTERSET, java.lang.String.class);
	}
	
    /**
     * Get single value of property CharacterSet  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getCharacterSet() {
		return (java.lang.String) Base.get(this.model, this.getResource(), CHARACTERSET, java.lang.String.class);
	}
  
    /**
     * Adds a value to property CharacterSet as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addCharacterSet(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CHARACTERSET, value, 1);
	}
	
    /**
     * Adds a value to property CharacterSet as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addCharacterSet( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CHARACTERSET, value, 1);
	}
    /**
     * Adds a value to property CharacterSet from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addCharacterSet(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, CHARACTERSET, value, 1);
	}
	
    /**
     * Adds a value to property CharacterSet from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addCharacterSet(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CHARACTERSET, value, 1);
	}
 
 

    /**
     * Sets a value of property CharacterSet from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCharacterSet( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CHARACTERSET, value);
	}
	
    /**
     * Sets a value of property CharacterSet from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCharacterSet( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CHARACTERSET, value);
	}
    /**
     * Sets a value of property CharacterSet from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCharacterSet(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, CHARACTERSET, value);
	}
	
    /**
     * Sets a value of property CharacterSet from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCharacterSet(java.lang.String value) {
		Base.set(this.model, this.getResource(), CHARACTERSET, value);
	}
  


    /**
     * Removes a value of property CharacterSet as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCharacterSet( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CHARACTERSET, value);
	}
	
    /**
     * Removes a value of property CharacterSet as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCharacterSet( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CHARACTERSET, value);
	}
    /**
     * Removes a value of property CharacterSet given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCharacterSet(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, CHARACTERSET, value);
	}
	
    /**
     * Removes a value of property CharacterSet given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCharacterSet(java.lang.String value) {
		Base.remove(this.model, this.getResource(), CHARACTERSET, value);
	}
  
    /**
     * Removes all values of property CharacterSet     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCharacterSet( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CHARACTERSET);
	}
	
    /**
     * Removes all values of property CharacterSet	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCharacterSet() {
		Base.removeAll(this.model, this.getResource(), CHARACTERSET);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b305866 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COMMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b305866 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasComment() {
		return Base.has(this.model, this.getResource(), COMMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b305866 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COMMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b305866 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasComment( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COMMENT);
	}

     /**
     * Get all values of property Comment as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComment_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COMMENT);
	}
	
    /**
     * Get all values of property Comment as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComment_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMMENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Comment as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComment_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COMMENT);
	}

    /**
     * Get all values of property Comment as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComment_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COMMENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Comment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COMMENT, java.lang.String.class);
	}
	
    /**
     * Get all values of property Comment as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllComment_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMMENT, java.lang.String.class);
	}

    /**
     * Get all values of property Comment     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllComment() {
		return Base.getAll(this.model, this.getResource(), COMMENT, java.lang.String.class);
	}

    /**
     * Get all values of property Comment as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllComment_as() {
		return Base.getAll_as(this.model, this.getResource(), COMMENT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Comment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COMMENT, value);
	}
	
    /**
     * Adds a value to property Comment as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addComment( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COMMENT, value);
	}
    /**
     * Adds a value to property Comment from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, COMMENT, value);
	}
	
    /**
     * Adds a value to property Comment from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addComment(java.lang.String value) {
		Base.add(this.model, this.getResource(), COMMENT, value);
	}
  

    /**
     * Sets a value of property Comment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COMMENT, value);
	}
	
    /**
     * Sets a value of property Comment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setComment( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COMMENT, value);
	}
    /**
     * Sets a value of property Comment from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, COMMENT, value);
	}
	
    /**
     * Sets a value of property Comment from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setComment(java.lang.String value) {
		Base.set(this.model, this.getResource(), COMMENT, value);
	}
  


    /**
     * Removes a value of property Comment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COMMENT, value);
	}
	
    /**
     * Removes a value of property Comment as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeComment( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COMMENT, value);
	}
    /**
     * Removes a value of property Comment given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, COMMENT, value);
	}
	
    /**
     * Removes a value of property Comment given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeComment(java.lang.String value) {
		Base.remove(this.model, this.getResource(), COMMENT, value);
	}
  
    /**
     * Removes all values of property Comment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COMMENT);
	}
	
    /**
     * Removes all values of property Comment	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllComment() {
		Base.removeAll(this.model, this.getResource(), COMMENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75bf2167 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContentCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTENTCREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75bf2167 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContentCreated() {
		return Base.has(this.model, this.getResource(), CONTENTCREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75bf2167 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContentCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTENTCREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75bf2167 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContentCreated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTENTCREATED);
	}

    /**
     * Get single value of property ContentCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getContentCreated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, CONTENTCREATED);
	}
	
    /**
     * Get single value of property ContentCreated as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getContentCreated_asNode() {
		return Base.get_asNode(this.model, this.getResource(), CONTENTCREATED);
	}
     /**
     * Get single value of property ContentCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getContentCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, CONTENTCREATED, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property ContentCreated  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getContentCreated() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), CONTENTCREATED, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property ContentCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addContentCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CONTENTCREATED, value, 1);
	}
	
    /**
     * Adds a value to property ContentCreated as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addContentCreated( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTENTCREATED, value, 1);
	}
    /**
     * Adds a value to property ContentCreated from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addContentCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, CONTENTCREATED, value, 1);
	}
	
    /**
     * Adds a value to property ContentCreated from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addContentCreated(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTENTCREATED, value, 1);
	}
 
 

    /**
     * Sets a value of property ContentCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContentCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTENTCREATED, value);
	}
	
    /**
     * Sets a value of property ContentCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContentCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTENTCREATED, value);
	}
    /**
     * Sets a value of property ContentCreated from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContentCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, CONTENTCREATED, value);
	}
	
    /**
     * Sets a value of property ContentCreated from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContentCreated(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), CONTENTCREATED, value);
	}
  


    /**
     * Removes a value of property ContentCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContentCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTENTCREATED, value);
	}
	
    /**
     * Removes a value of property ContentCreated as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContentCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTENTCREATED, value);
	}
    /**
     * Removes a value of property ContentCreated given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContentCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, CONTENTCREATED, value);
	}
	
    /**
     * Removes a value of property ContentCreated given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContentCreated(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), CONTENTCREATED, value);
	}
  
    /**
     * Removes all values of property ContentCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContentCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTENTCREATED);
	}
	
    /**
     * Removes all values of property ContentCreated	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContentCreated() {
		Base.removeAll(this.model, this.getResource(), CONTENTCREATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26861bee has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContentLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTENTLASTMODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26861bee has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContentLastModified() {
		return Base.has(this.model, this.getResource(), CONTENTLASTMODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26861bee has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContentLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTENTLASTMODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26861bee has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContentLastModified( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTENTLASTMODIFIED);
	}

    /**
     * Get single value of property ContentLastModified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getContentLastModified_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, CONTENTLASTMODIFIED);
	}
	
    /**
     * Get single value of property ContentLastModified as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getContentLastModified_asNode() {
		return Base.get_asNode(this.model, this.getResource(), CONTENTLASTMODIFIED);
	}
     /**
     * Get single value of property ContentLastModified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getContentLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, CONTENTLASTMODIFIED, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property ContentLastModified  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getContentLastModified() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), CONTENTLASTMODIFIED, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property ContentLastModified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addContentLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CONTENTLASTMODIFIED, value, 1);
	}
	
    /**
     * Adds a value to property ContentLastModified as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addContentLastModified( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTENTLASTMODIFIED, value, 1);
	}
    /**
     * Adds a value to property ContentLastModified from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addContentLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, CONTENTLASTMODIFIED, value, 1);
	}
	
    /**
     * Adds a value to property ContentLastModified from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addContentLastModified(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTENTLASTMODIFIED, value, 1);
	}
 
 

    /**
     * Sets a value of property ContentLastModified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContentLastModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTENTLASTMODIFIED, value);
	}
	
    /**
     * Sets a value of property ContentLastModified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContentLastModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTENTLASTMODIFIED, value);
	}
    /**
     * Sets a value of property ContentLastModified from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContentLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, CONTENTLASTMODIFIED, value);
	}
	
    /**
     * Sets a value of property ContentLastModified from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContentLastModified(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), CONTENTLASTMODIFIED, value);
	}
  


    /**
     * Removes a value of property ContentLastModified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContentLastModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTENTLASTMODIFIED, value);
	}
	
    /**
     * Removes a value of property ContentLastModified as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContentLastModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTENTLASTMODIFIED, value);
	}
    /**
     * Removes a value of property ContentLastModified given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContentLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, CONTENTLASTMODIFIED, value);
	}
	
    /**
     * Removes a value of property ContentLastModified given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContentLastModified(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), CONTENTLASTMODIFIED, value);
	}
  
    /**
     * Removes all values of property ContentLastModified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContentLastModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTENTLASTMODIFIED);
	}
	
    /**
     * Removes all values of property ContentLastModified	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContentLastModified() {
		Base.removeAll(this.model, this.getResource(), CONTENTLASTMODIFIED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@331b8c47 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContentModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTENTMODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@331b8c47 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContentModified() {
		return Base.has(this.model, this.getResource(), CONTENTMODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@331b8c47 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContentModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTENTMODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@331b8c47 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContentModified( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTENTMODIFIED);
	}

     /**
     * Get all values of property ContentModified as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContentModified_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTENTMODIFIED);
	}
	
    /**
     * Get all values of property ContentModified as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContentModified_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTENTMODIFIED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ContentModified as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContentModified_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTENTMODIFIED);
	}

    /**
     * Get all values of property ContentModified as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContentModified_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTENTMODIFIED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ContentModified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllContentModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTENTMODIFIED, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property ContentModified as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllContentModified_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTENTMODIFIED, java.util.Calendar.class);
	}

    /**
     * Get all values of property ContentModified     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllContentModified() {
		return Base.getAll(this.model, this.getResource(), CONTENTMODIFIED, java.util.Calendar.class);
	}

    /**
     * Get all values of property ContentModified as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllContentModified_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTENTMODIFIED, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property ContentModified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addContentModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTENTMODIFIED, value);
	}
	
    /**
     * Adds a value to property ContentModified as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addContentModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTENTMODIFIED, value);
	}
    /**
     * Adds a value to property ContentModified from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addContentModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, CONTENTMODIFIED, value);
	}
	
    /**
     * Adds a value to property ContentModified from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addContentModified(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), CONTENTMODIFIED, value);
	}
  

    /**
     * Sets a value of property ContentModified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContentModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTENTMODIFIED, value);
	}
	
    /**
     * Sets a value of property ContentModified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContentModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTENTMODIFIED, value);
	}
    /**
     * Sets a value of property ContentModified from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContentModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, CONTENTMODIFIED, value);
	}
	
    /**
     * Sets a value of property ContentModified from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContentModified(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), CONTENTMODIFIED, value);
	}
  


    /**
     * Removes a value of property ContentModified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContentModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTENTMODIFIED, value);
	}
	
    /**
     * Removes a value of property ContentModified as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContentModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTENTMODIFIED, value);
	}
    /**
     * Removes a value of property ContentModified given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContentModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, CONTENTMODIFIED, value);
	}
	
    /**
     * Removes a value of property ContentModified given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContentModified(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), CONTENTMODIFIED, value);
	}
  
    /**
     * Removes all values of property ContentModified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContentModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTENTMODIFIED);
	}
	
    /**
     * Removes all values of property ContentModified	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContentModified() {
		Base.removeAll(this.model, this.getResource(), CONTENTMODIFIED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2752702 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContentSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTENTSIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2752702 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContentSize() {
		return Base.has(this.model, this.getResource(), CONTENTSIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2752702 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContentSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTENTSIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2752702 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContentSize( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTENTSIZE);
	}

    /**
     * Get single value of property ContentSize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getContentSize_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, CONTENTSIZE);
	}
	
    /**
     * Get single value of property ContentSize as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getContentSize_asNode() {
		return Base.get_asNode(this.model, this.getResource(), CONTENTSIZE);
	}
     /**
     * Get single value of property ContentSize     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getContentSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, CONTENTSIZE, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property ContentSize  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getContentSize() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), CONTENTSIZE, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property ContentSize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addContentSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CONTENTSIZE, value, 1);
	}
	
    /**
     * Adds a value to property ContentSize as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addContentSize( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTENTSIZE, value, 1);
	}
    /**
     * Adds a value to property ContentSize from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addContentSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, CONTENTSIZE, value, 1);
	}
	
    /**
     * Adds a value to property ContentSize from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addContentSize(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTENTSIZE, value, 1);
	}
 
 

    /**
     * Sets a value of property ContentSize from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContentSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTENTSIZE, value);
	}
	
    /**
     * Sets a value of property ContentSize from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContentSize( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTENTSIZE, value);
	}
    /**
     * Sets a value of property ContentSize from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContentSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, CONTENTSIZE, value);
	}
	
    /**
     * Sets a value of property ContentSize from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContentSize(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), CONTENTSIZE, value);
	}
  


    /**
     * Removes a value of property ContentSize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContentSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTENTSIZE, value);
	}
	
    /**
     * Removes a value of property ContentSize as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContentSize( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTENTSIZE, value);
	}
    /**
     * Removes a value of property ContentSize given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContentSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, CONTENTSIZE, value);
	}
	
    /**
     * Removes a value of property ContentSize given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContentSize(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), CONTENTSIZE, value);
	}
  
    /**
     * Removes all values of property ContentSize     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContentSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTENTSIZE);
	}
	
    /**
     * Removes all values of property ContentSize	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContentSize() {
		Base.removeAll(this.model, this.getResource(), CONTENTSIZE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39b52b43 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEncryptionStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ENCRYPTIONSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39b52b43 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEncryptionStatus() {
		return Base.has(this.model, this.getResource(), ENCRYPTIONSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39b52b43 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEncryptionStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ENCRYPTIONSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39b52b43 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEncryptionStatus( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ENCRYPTIONSTATUS);
	}

    /**
     * Get single value of property EncryptionStatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getEncryptionStatus_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, ENCRYPTIONSTATUS);
	}
	
    /**
     * Get single value of property EncryptionStatus as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getEncryptionStatus_asNode() {
		return Base.get_asNode(this.model, this.getResource(), ENCRYPTIONSTATUS);
	}
     /**
     * Get single value of property EncryptionStatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.nfo.EncryptionStatus getEncryptionStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.nfo.EncryptionStatus) Base.get(model, instanceResource, ENCRYPTIONSTATUS, eu.dime.ps.semantic.model.nfo.EncryptionStatus.class);
	}
	
    /**
     * Get single value of property EncryptionStatus  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.nfo.EncryptionStatus getEncryptionStatus() {
		return (eu.dime.ps.semantic.model.nfo.EncryptionStatus) Base.get(this.model, this.getResource(), ENCRYPTIONSTATUS, eu.dime.ps.semantic.model.nfo.EncryptionStatus.class);
	}
  
    /**
     * Adds a value to property EncryptionStatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addEncryptionStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, ENCRYPTIONSTATUS, value, 1);
	}
	
    /**
     * Adds a value to property EncryptionStatus as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addEncryptionStatus( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ENCRYPTIONSTATUS, value, 1);
	}
    /**
     * Adds a value to property EncryptionStatus from an instance of EncryptionStatus 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addEncryptionStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nfo.EncryptionStatus value)
    throws CardinalityException {
		Base.add(model, instanceResource, ENCRYPTIONSTATUS, value, 1);
	}
	
    /**
     * Adds a value to property EncryptionStatus from an instance of EncryptionStatus 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addEncryptionStatus(eu.dime.ps.semantic.model.nfo.EncryptionStatus value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ENCRYPTIONSTATUS, value, 1);
	}
 
 

    /**
     * Sets a value of property EncryptionStatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEncryptionStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ENCRYPTIONSTATUS, value);
	}
	
    /**
     * Sets a value of property EncryptionStatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEncryptionStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ENCRYPTIONSTATUS, value);
	}
    /**
     * Sets a value of property EncryptionStatus from an instance of EncryptionStatus 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEncryptionStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nfo.EncryptionStatus value) {
		Base.set(model, instanceResource, ENCRYPTIONSTATUS, value);
	}
	
    /**
     * Sets a value of property EncryptionStatus from an instance of EncryptionStatus 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEncryptionStatus(eu.dime.ps.semantic.model.nfo.EncryptionStatus value) {
		Base.set(this.model, this.getResource(), ENCRYPTIONSTATUS, value);
	}
  


    /**
     * Removes a value of property EncryptionStatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEncryptionStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ENCRYPTIONSTATUS, value);
	}
	
    /**
     * Removes a value of property EncryptionStatus as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEncryptionStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ENCRYPTIONSTATUS, value);
	}
    /**
     * Removes a value of property EncryptionStatus given as an instance of EncryptionStatus 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEncryptionStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nfo.EncryptionStatus value) {
		Base.remove(model, instanceResource, ENCRYPTIONSTATUS, value);
	}
	
    /**
     * Removes a value of property EncryptionStatus given as an instance of EncryptionStatus 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEncryptionStatus(eu.dime.ps.semantic.model.nfo.EncryptionStatus value) {
		Base.remove(this.model, this.getResource(), ENCRYPTIONSTATUS, value);
	}
  
    /**
     * Removes all values of property EncryptionStatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEncryptionStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ENCRYPTIONSTATUS);
	}
	
    /**
     * Removes all values of property EncryptionStatus	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEncryptionStatus() {
		Base.removeAll(this.model, this.getResource(), ENCRYPTIONSTATUS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4671e502 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGenerator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENERATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4671e502 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGenerator() {
		return Base.has(this.model, this.getResource(), GENERATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4671e502 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGenerator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENERATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4671e502 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGenerator( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENERATOR);
	}

     /**
     * Get all values of property Generator as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenerator_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENERATOR);
	}
	
    /**
     * Get all values of property Generator as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenerator_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERATOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Generator as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenerator_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENERATOR);
	}

    /**
     * Get all values of property Generator as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenerator_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENERATOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Generator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGenerator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENERATOR, java.lang.String.class);
	}
	
    /**
     * Get all values of property Generator as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGenerator_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERATOR, java.lang.String.class);
	}

    /**
     * Get all values of property Generator     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGenerator() {
		return Base.getAll(this.model, this.getResource(), GENERATOR, java.lang.String.class);
	}

    /**
     * Get all values of property Generator as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGenerator_as() {
		return Base.getAll_as(this.model, this.getResource(), GENERATOR, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Generator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGenerator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENERATOR, value);
	}
	
    /**
     * Adds a value to property Generator as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGenerator( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENERATOR, value);
	}
    /**
     * Adds a value to property Generator from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGenerator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GENERATOR, value);
	}
	
    /**
     * Adds a value to property Generator from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGenerator(java.lang.String value) {
		Base.add(this.model, this.getResource(), GENERATOR, value);
	}
  

    /**
     * Sets a value of property Generator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGenerator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENERATOR, value);
	}
	
    /**
     * Sets a value of property Generator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGenerator( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENERATOR, value);
	}
    /**
     * Sets a value of property Generator from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGenerator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GENERATOR, value);
	}
	
    /**
     * Sets a value of property Generator from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGenerator(java.lang.String value) {
		Base.set(this.model, this.getResource(), GENERATOR, value);
	}
  


    /**
     * Removes a value of property Generator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGenerator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENERATOR, value);
	}
	
    /**
     * Removes a value of property Generator as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGenerator( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENERATOR, value);
	}
    /**
     * Removes a value of property Generator given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGenerator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GENERATOR, value);
	}
	
    /**
     * Removes a value of property Generator given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGenerator(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GENERATOR, value);
	}
  
    /**
     * Removes all values of property Generator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGenerator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENERATOR);
	}
	
    /**
     * Removes all values of property Generator	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGenerator() {
		Base.removeAll(this.model, this.getResource(), GENERATOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3080037d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGeneratorOption(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENERATOROPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3080037d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGeneratorOption() {
		return Base.has(this.model, this.getResource(), GENERATOROPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3080037d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGeneratorOption(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENERATOROPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3080037d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGeneratorOption( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENERATOROPTION);
	}

     /**
     * Get all values of property GeneratorOption as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeneratorOption_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENERATOROPTION);
	}
	
    /**
     * Get all values of property GeneratorOption as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeneratorOption_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERATOROPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GeneratorOption as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeneratorOption_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENERATOROPTION);
	}

    /**
     * Get all values of property GeneratorOption as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeneratorOption_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENERATOROPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GeneratorOption     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllGeneratorOption(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENERATOROPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property GeneratorOption as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllGeneratorOption_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENERATOROPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property GeneratorOption     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllGeneratorOption() {
		return Base.getAll(this.model, this.getResource(), GENERATOROPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property GeneratorOption as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllGeneratorOption_as() {
		return Base.getAll_as(this.model, this.getResource(), GENERATOROPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property GeneratorOption as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGeneratorOption(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENERATOROPTION, value);
	}
	
    /**
     * Adds a value to property GeneratorOption as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGeneratorOption( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENERATOROPTION, value);
	}
    /**
     * Adds a value to property GeneratorOption from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGeneratorOption(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, GENERATOROPTION, value);
	}
	
    /**
     * Adds a value to property GeneratorOption from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGeneratorOption(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), GENERATOROPTION, value);
	}
  

    /**
     * Sets a value of property GeneratorOption from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGeneratorOption( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENERATOROPTION, value);
	}
	
    /**
     * Sets a value of property GeneratorOption from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGeneratorOption( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENERATOROPTION, value);
	}
    /**
     * Sets a value of property GeneratorOption from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGeneratorOption(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, GENERATOROPTION, value);
	}
	
    /**
     * Sets a value of property GeneratorOption from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGeneratorOption(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), GENERATOROPTION, value);
	}
  


    /**
     * Removes a value of property GeneratorOption as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGeneratorOption( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENERATOROPTION, value);
	}
	
    /**
     * Removes a value of property GeneratorOption as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGeneratorOption( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENERATOROPTION, value);
	}
    /**
     * Removes a value of property GeneratorOption given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGeneratorOption(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, GENERATOROPTION, value);
	}
	
    /**
     * Removes a value of property GeneratorOption given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGeneratorOption(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), GENERATOROPTION, value);
	}
  
    /**
     * Removes all values of property GeneratorOption     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGeneratorOption( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENERATOROPTION);
	}
	
    /**
     * Removes all values of property GeneratorOption	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGeneratorOption() {
		Base.removeAll(this.model, this.getResource(), GENERATOROPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@446e6938 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHtmlContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HTMLCONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@446e6938 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHtmlContent() {
		return Base.has(this.model, this.getResource(), HTMLCONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@446e6938 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHtmlContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HTMLCONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@446e6938 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHtmlContent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HTMLCONTENT);
	}

    /**
     * Get single value of property HtmlContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getHtmlContent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, HTMLCONTENT);
	}
	
    /**
     * Get single value of property HtmlContent as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getHtmlContent_asNode() {
		return Base.get_asNode(this.model, this.getResource(), HTMLCONTENT);
	}
     /**
     * Get single value of property HtmlContent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getHtmlContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, HTMLCONTENT, java.lang.String.class);
	}
	
    /**
     * Get single value of property HtmlContent  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getHtmlContent() {
		return (java.lang.String) Base.get(this.model, this.getResource(), HTMLCONTENT, java.lang.String.class);
	}
  
    /**
     * Adds a value to property HtmlContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addHtmlContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, HTMLCONTENT, value, 1);
	}
	
    /**
     * Adds a value to property HtmlContent as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addHtmlContent( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), HTMLCONTENT, value, 1);
	}
    /**
     * Adds a value to property HtmlContent from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addHtmlContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, HTMLCONTENT, value, 1);
	}
	
    /**
     * Adds a value to property HtmlContent from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addHtmlContent(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), HTMLCONTENT, value, 1);
	}
 
 

    /**
     * Sets a value of property HtmlContent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHtmlContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HTMLCONTENT, value);
	}
	
    /**
     * Sets a value of property HtmlContent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHtmlContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HTMLCONTENT, value);
	}
    /**
     * Sets a value of property HtmlContent from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHtmlContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, HTMLCONTENT, value);
	}
	
    /**
     * Sets a value of property HtmlContent from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHtmlContent(java.lang.String value) {
		Base.set(this.model, this.getResource(), HTMLCONTENT, value);
	}
  


    /**
     * Removes a value of property HtmlContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHtmlContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HTMLCONTENT, value);
	}
	
    /**
     * Removes a value of property HtmlContent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHtmlContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HTMLCONTENT, value);
	}
    /**
     * Removes a value of property HtmlContent given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHtmlContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, HTMLCONTENT, value);
	}
	
    /**
     * Removes a value of property HtmlContent given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHtmlContent(java.lang.String value) {
		Base.remove(this.model, this.getResource(), HTMLCONTENT, value);
	}
  
    /**
     * Removes all values of property HtmlContent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHtmlContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HTMLCONTENT);
	}
	
    /**
     * Removes all values of property HtmlContent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHtmlContent() {
		Base.removeAll(this.model, this.getResource(), HTMLCONTENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1990dc15 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInformationElementDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INFORMATIONELEMENTDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1990dc15 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInformationElementDate() {
		return Base.has(this.model, this.getResource(), INFORMATIONELEMENTDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1990dc15 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInformationElementDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INFORMATIONELEMENTDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1990dc15 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInformationElementDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INFORMATIONELEMENTDATE);
	}

     /**
     * Get all values of property InformationElementDate as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInformationElementDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INFORMATIONELEMENTDATE);
	}
	
    /**
     * Get all values of property InformationElementDate as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInformationElementDate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INFORMATIONELEMENTDATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InformationElementDate as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInformationElementDate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INFORMATIONELEMENTDATE);
	}

    /**
     * Get all values of property InformationElementDate as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInformationElementDate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INFORMATIONELEMENTDATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InformationElementDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllInformationElementDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INFORMATIONELEMENTDATE, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property InformationElementDate as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllInformationElementDate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INFORMATIONELEMENTDATE, java.util.Calendar.class);
	}

    /**
     * Get all values of property InformationElementDate     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllInformationElementDate() {
		return Base.getAll(this.model, this.getResource(), INFORMATIONELEMENTDATE, java.util.Calendar.class);
	}

    /**
     * Get all values of property InformationElementDate as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllInformationElementDate_as() {
		return Base.getAll_as(this.model, this.getResource(), INFORMATIONELEMENTDATE, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property InformationElementDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInformationElementDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INFORMATIONELEMENTDATE, value);
	}
	
    /**
     * Adds a value to property InformationElementDate as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInformationElementDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INFORMATIONELEMENTDATE, value);
	}
    /**
     * Adds a value to property InformationElementDate from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInformationElementDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, INFORMATIONELEMENTDATE, value);
	}
	
    /**
     * Adds a value to property InformationElementDate from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInformationElementDate(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), INFORMATIONELEMENTDATE, value);
	}
  

    /**
     * Sets a value of property InformationElementDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInformationElementDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INFORMATIONELEMENTDATE, value);
	}
	
    /**
     * Sets a value of property InformationElementDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInformationElementDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INFORMATIONELEMENTDATE, value);
	}
    /**
     * Sets a value of property InformationElementDate from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInformationElementDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, INFORMATIONELEMENTDATE, value);
	}
	
    /**
     * Sets a value of property InformationElementDate from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInformationElementDate(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), INFORMATIONELEMENTDATE, value);
	}
  


    /**
     * Removes a value of property InformationElementDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInformationElementDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INFORMATIONELEMENTDATE, value);
	}
	
    /**
     * Removes a value of property InformationElementDate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInformationElementDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INFORMATIONELEMENTDATE, value);
	}
    /**
     * Removes a value of property InformationElementDate given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInformationElementDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, INFORMATIONELEMENTDATE, value);
	}
	
    /**
     * Removes a value of property InformationElementDate given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInformationElementDate(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), INFORMATIONELEMENTDATE, value);
	}
  
    /**
     * Removes all values of property InformationElementDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInformationElementDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INFORMATIONELEMENTDATE);
	}
	
    /**
     * Removes all values of property InformationElementDate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInformationElementDate() {
		Base.removeAll(this.model, this.getResource(), INFORMATIONELEMENTDATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e17f166 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIsLogicalPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISLOGICALPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e17f166 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIsLogicalPartOf() {
		return Base.has(this.model, this.getResource(), ISLOGICALPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e17f166 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIsLogicalPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISLOGICALPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e17f166 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIsLogicalPartOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISLOGICALPARTOF);
	}

     /**
     * Get all values of property IsLogicalPartOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsLogicalPartOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISLOGICALPARTOF);
	}
	
    /**
     * Get all values of property IsLogicalPartOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsLogicalPartOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISLOGICALPARTOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IsLogicalPartOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsLogicalPartOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISLOGICALPARTOF);
	}

    /**
     * Get all values of property IsLogicalPartOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsLogicalPartOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISLOGICALPARTOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IsLogicalPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nie.InformationElement> getAllIsLogicalPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISLOGICALPARTOF, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}
	
    /**
     * Get all values of property IsLogicalPartOf as a ReactorResult of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nie.InformationElement> getAllIsLogicalPartOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISLOGICALPARTOF, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}

    /**
     * Get all values of property IsLogicalPartOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nie.InformationElement> getAllIsLogicalPartOf() {
		return Base.getAll(this.model, this.getResource(), ISLOGICALPARTOF, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}

    /**
     * Get all values of property IsLogicalPartOf as a ReactorResult of InformationElement 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nie.InformationElement> getAllIsLogicalPartOf_as() {
		return Base.getAll_as(this.model, this.getResource(), ISLOGICALPARTOF, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}
 
    /**
     * Adds a value to property IsLogicalPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIsLogicalPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISLOGICALPARTOF, value);
	}
	
    /**
     * Adds a value to property IsLogicalPartOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIsLogicalPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISLOGICALPARTOF, value);
	}
    /**
     * Adds a value to property IsLogicalPartOf from an instance of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIsLogicalPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.add(model, instanceResource, ISLOGICALPARTOF, value);
	}
	
    /**
     * Adds a value to property IsLogicalPartOf from an instance of InformationElement 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIsLogicalPartOf(eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.add(this.model, this.getResource(), ISLOGICALPARTOF, value);
	}
  

    /**
     * Sets a value of property IsLogicalPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIsLogicalPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISLOGICALPARTOF, value);
	}
	
    /**
     * Sets a value of property IsLogicalPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIsLogicalPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISLOGICALPARTOF, value);
	}
    /**
     * Sets a value of property IsLogicalPartOf from an instance of InformationElement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIsLogicalPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.set(model, instanceResource, ISLOGICALPARTOF, value);
	}
	
    /**
     * Sets a value of property IsLogicalPartOf from an instance of InformationElement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIsLogicalPartOf(eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.set(this.model, this.getResource(), ISLOGICALPARTOF, value);
	}
  


    /**
     * Removes a value of property IsLogicalPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIsLogicalPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISLOGICALPARTOF, value);
	}
	
    /**
     * Removes a value of property IsLogicalPartOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIsLogicalPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISLOGICALPARTOF, value);
	}
    /**
     * Removes a value of property IsLogicalPartOf given as an instance of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIsLogicalPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.remove(model, instanceResource, ISLOGICALPARTOF, value);
	}
	
    /**
     * Removes a value of property IsLogicalPartOf given as an instance of InformationElement 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIsLogicalPartOf(eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.remove(this.model, this.getResource(), ISLOGICALPARTOF, value);
	}
  
    /**
     * Removes all values of property IsLogicalPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIsLogicalPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISLOGICALPARTOF);
	}
	
    /**
     * Removes all values of property IsLogicalPartOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIsLogicalPartOf() {
		Base.removeAll(this.model, this.getResource(), ISLOGICALPARTOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@219589e4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIsStoredAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISSTOREDAS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@219589e4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIsStoredAs() {
		return Base.has(this.model, this.getResource(), ISSTOREDAS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@219589e4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIsStoredAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISSTOREDAS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@219589e4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIsStoredAs( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISSTOREDAS);
	}

     /**
     * Get all values of property IsStoredAs as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsStoredAs_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISSTOREDAS);
	}
	
    /**
     * Get all values of property IsStoredAs as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsStoredAs_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISSTOREDAS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IsStoredAs as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsStoredAs_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISSTOREDAS);
	}

    /**
     * Get all values of property IsStoredAs as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsStoredAs_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISSTOREDAS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IsStoredAs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllIsStoredAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISSTOREDAS, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
	
    /**
     * Get all values of property IsStoredAs as a ReactorResult of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllIsStoredAs_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISSTOREDAS, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property IsStoredAs     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllIsStoredAs() {
		return Base.getAll(this.model, this.getResource(), ISSTOREDAS, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property IsStoredAs as a ReactorResult of DataObject 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllIsStoredAs_as() {
		return Base.getAll_as(this.model, this.getResource(), ISSTOREDAS, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
 
    /**
     * Adds a value to property IsStoredAs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIsStoredAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISSTOREDAS, value);
	}
	
    /**
     * Adds a value to property IsStoredAs as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIsStoredAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISSTOREDAS, value);
	}
    /**
     * Adds a value to property IsStoredAs from an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIsStoredAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(model, instanceResource, ISSTOREDAS, value);
	}
	
    /**
     * Adds a value to property IsStoredAs from an instance of DataObject 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIsStoredAs(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(this.model, this.getResource(), ISSTOREDAS, value);
	}
  

    /**
     * Sets a value of property IsStoredAs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIsStoredAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISSTOREDAS, value);
	}
	
    /**
     * Sets a value of property IsStoredAs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIsStoredAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISSTOREDAS, value);
	}
    /**
     * Sets a value of property IsStoredAs from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIsStoredAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(model, instanceResource, ISSTOREDAS, value);
	}
	
    /**
     * Sets a value of property IsStoredAs from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIsStoredAs(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(this.model, this.getResource(), ISSTOREDAS, value);
	}
  


    /**
     * Removes a value of property IsStoredAs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIsStoredAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISSTOREDAS, value);
	}
	
    /**
     * Removes a value of property IsStoredAs as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIsStoredAs( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISSTOREDAS, value);
	}
    /**
     * Removes a value of property IsStoredAs given as an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIsStoredAs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(model, instanceResource, ISSTOREDAS, value);
	}
	
    /**
     * Removes a value of property IsStoredAs given as an instance of DataObject 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIsStoredAs(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(this.model, this.getResource(), ISSTOREDAS, value);
	}
  
    /**
     * Removes all values of property IsStoredAs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIsStoredAs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISSTOREDAS);
	}
	
    /**
     * Removes all values of property IsStoredAs	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIsStoredAs() {
		Base.removeAll(this.model, this.getResource(), ISSTOREDAS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2894a3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasKeyword(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, KEYWORD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2894a3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasKeyword() {
		return Base.has(this.model, this.getResource(), KEYWORD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2894a3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasKeyword(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, KEYWORD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2894a3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasKeyword( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), KEYWORD);
	}

     /**
     * Get all values of property Keyword as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllKeyword_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, KEYWORD);
	}
	
    /**
     * Get all values of property Keyword as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllKeyword_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, KEYWORD, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Keyword as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllKeyword_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), KEYWORD);
	}

    /**
     * Get all values of property Keyword as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllKeyword_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), KEYWORD, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Keyword     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllKeyword(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, KEYWORD, java.lang.String.class);
	}
	
    /**
     * Get all values of property Keyword as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllKeyword_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, KEYWORD, java.lang.String.class);
	}

    /**
     * Get all values of property Keyword     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllKeyword() {
		return Base.getAll(this.model, this.getResource(), KEYWORD, java.lang.String.class);
	}

    /**
     * Get all values of property Keyword as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllKeyword_as() {
		return Base.getAll_as(this.model, this.getResource(), KEYWORD, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Keyword as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addKeyword(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, KEYWORD, value);
	}
	
    /**
     * Adds a value to property Keyword as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addKeyword( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), KEYWORD, value);
	}
    /**
     * Adds a value to property Keyword from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addKeyword(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, KEYWORD, value);
	}
	
    /**
     * Adds a value to property Keyword from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addKeyword(java.lang.String value) {
		Base.add(this.model, this.getResource(), KEYWORD, value);
	}
  

    /**
     * Sets a value of property Keyword from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setKeyword( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, KEYWORD, value);
	}
	
    /**
     * Sets a value of property Keyword from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setKeyword( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), KEYWORD, value);
	}
    /**
     * Sets a value of property Keyword from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setKeyword(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, KEYWORD, value);
	}
	
    /**
     * Sets a value of property Keyword from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setKeyword(java.lang.String value) {
		Base.set(this.model, this.getResource(), KEYWORD, value);
	}
  


    /**
     * Removes a value of property Keyword as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeKeyword( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, KEYWORD, value);
	}
	
    /**
     * Removes a value of property Keyword as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeKeyword( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), KEYWORD, value);
	}
    /**
     * Removes a value of property Keyword given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeKeyword(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, KEYWORD, value);
	}
	
    /**
     * Removes a value of property Keyword given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeKeyword(java.lang.String value) {
		Base.remove(this.model, this.getResource(), KEYWORD, value);
	}
  
    /**
     * Removes all values of property Keyword     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllKeyword( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, KEYWORD);
	}
	
    /**
     * Removes all values of property Keyword	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllKeyword() {
		Base.removeAll(this.model, this.getResource(), KEYWORD);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4324a50d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLegal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LEGAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4324a50d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLegal() {
		return Base.has(this.model, this.getResource(), LEGAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4324a50d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLegal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LEGAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4324a50d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLegal( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LEGAL);
	}

     /**
     * Get all values of property Legal as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLegal_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LEGAL);
	}
	
    /**
     * Get all values of property Legal as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLegal_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LEGAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Legal as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLegal_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LEGAL);
	}

    /**
     * Get all values of property Legal as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLegal_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LEGAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Legal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllLegal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LEGAL, java.lang.String.class);
	}
	
    /**
     * Get all values of property Legal as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllLegal_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LEGAL, java.lang.String.class);
	}

    /**
     * Get all values of property Legal     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllLegal() {
		return Base.getAll(this.model, this.getResource(), LEGAL, java.lang.String.class);
	}

    /**
     * Get all values of property Legal as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllLegal_as() {
		return Base.getAll_as(this.model, this.getResource(), LEGAL, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Legal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLegal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LEGAL, value);
	}
	
    /**
     * Adds a value to property Legal as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLegal( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LEGAL, value);
	}
    /**
     * Adds a value to property Legal from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLegal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LEGAL, value);
	}
	
    /**
     * Adds a value to property Legal from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLegal(java.lang.String value) {
		Base.add(this.model, this.getResource(), LEGAL, value);
	}
  

    /**
     * Sets a value of property Legal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLegal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LEGAL, value);
	}
	
    /**
     * Sets a value of property Legal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLegal( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LEGAL, value);
	}
    /**
     * Sets a value of property Legal from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLegal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LEGAL, value);
	}
	
    /**
     * Sets a value of property Legal from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLegal(java.lang.String value) {
		Base.set(this.model, this.getResource(), LEGAL, value);
	}
  


    /**
     * Removes a value of property Legal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLegal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LEGAL, value);
	}
	
    /**
     * Removes a value of property Legal as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLegal( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LEGAL, value);
	}
    /**
     * Removes a value of property Legal given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLegal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LEGAL, value);
	}
	
    /**
     * Removes a value of property Legal given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLegal(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LEGAL, value);
	}
  
    /**
     * Removes all values of property Legal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLegal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LEGAL);
	}
	
    /**
     * Removes all values of property Legal	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLegal() {
		Base.removeAll(this.model, this.getResource(), LEGAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b203d37 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLinks(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LINKS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b203d37 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLinks() {
		return Base.has(this.model, this.getResource(), LINKS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b203d37 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLinks(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LINKS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b203d37 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLinks( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LINKS);
	}

     /**
     * Get all values of property Links as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLinks_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LINKS);
	}
	
    /**
     * Get all values of property Links as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLinks_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LINKS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Links as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLinks_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LINKS);
	}

    /**
     * Get all values of property Links as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLinks_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LINKS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Links     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllLinks(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LINKS, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
	
    /**
     * Get all values of property Links as a ReactorResult of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllLinks_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LINKS, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property Links     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllLinks() {
		return Base.getAll(this.model, this.getResource(), LINKS, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property Links as a ReactorResult of DataObject 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllLinks_as() {
		return Base.getAll_as(this.model, this.getResource(), LINKS, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
 
    /**
     * Adds a value to property Links as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLinks(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LINKS, value);
	}
	
    /**
     * Adds a value to property Links as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLinks( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LINKS, value);
	}
    /**
     * Adds a value to property Links from an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLinks(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(model, instanceResource, LINKS, value);
	}
	
    /**
     * Adds a value to property Links from an instance of DataObject 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLinks(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(this.model, this.getResource(), LINKS, value);
	}
  

    /**
     * Sets a value of property Links from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLinks( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LINKS, value);
	}
	
    /**
     * Sets a value of property Links from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLinks( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LINKS, value);
	}
    /**
     * Sets a value of property Links from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLinks(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(model, instanceResource, LINKS, value);
	}
	
    /**
     * Sets a value of property Links from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLinks(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(this.model, this.getResource(), LINKS, value);
	}
  


    /**
     * Removes a value of property Links as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLinks( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LINKS, value);
	}
	
    /**
     * Removes a value of property Links as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLinks( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LINKS, value);
	}
    /**
     * Removes a value of property Links given as an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLinks(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(model, instanceResource, LINKS, value);
	}
	
    /**
     * Removes a value of property Links given as an instance of DataObject 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLinks(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(this.model, this.getResource(), LINKS, value);
	}
  
    /**
     * Removes all values of property Links     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLinks( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LINKS);
	}
	
    /**
     * Removes all values of property Links	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLinks() {
		Base.removeAll(this.model, this.getResource(), LINKS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70ee70aa has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLogicalPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LOGICALPART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70ee70aa has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLogicalPart() {
		return Base.has(this.model, this.getResource(), LOGICALPART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70ee70aa has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLogicalPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LOGICALPART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70ee70aa has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLogicalPart( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LOGICALPART);
	}

     /**
     * Get all values of property LogicalPart as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLogicalPart_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LOGICALPART);
	}
	
    /**
     * Get all values of property LogicalPart as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLogicalPart_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOGICALPART, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property LogicalPart as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLogicalPart_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LOGICALPART);
	}

    /**
     * Get all values of property LogicalPart as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLogicalPart_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LOGICALPART, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property LogicalPart     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nie.InformationElement> getAllLogicalPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LOGICALPART, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}
	
    /**
     * Get all values of property LogicalPart as a ReactorResult of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nie.InformationElement> getAllLogicalPart_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOGICALPART, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}

    /**
     * Get all values of property LogicalPart     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nie.InformationElement> getAllLogicalPart() {
		return Base.getAll(this.model, this.getResource(), LOGICALPART, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}

    /**
     * Get all values of property LogicalPart as a ReactorResult of InformationElement 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nie.InformationElement> getAllLogicalPart_as() {
		return Base.getAll_as(this.model, this.getResource(), LOGICALPART, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}
 
    /**
     * Adds a value to property LogicalPart as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLogicalPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LOGICALPART, value);
	}
	
    /**
     * Adds a value to property LogicalPart as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLogicalPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LOGICALPART, value);
	}
    /**
     * Adds a value to property LogicalPart from an instance of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLogicalPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.add(model, instanceResource, LOGICALPART, value);
	}
	
    /**
     * Adds a value to property LogicalPart from an instance of InformationElement 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLogicalPart(eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.add(this.model, this.getResource(), LOGICALPART, value);
	}
  

    /**
     * Sets a value of property LogicalPart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLogicalPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LOGICALPART, value);
	}
	
    /**
     * Sets a value of property LogicalPart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLogicalPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LOGICALPART, value);
	}
    /**
     * Sets a value of property LogicalPart from an instance of InformationElement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLogicalPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.set(model, instanceResource, LOGICALPART, value);
	}
	
    /**
     * Sets a value of property LogicalPart from an instance of InformationElement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLogicalPart(eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.set(this.model, this.getResource(), LOGICALPART, value);
	}
  


    /**
     * Removes a value of property LogicalPart as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLogicalPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LOGICALPART, value);
	}
	
    /**
     * Removes a value of property LogicalPart as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLogicalPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LOGICALPART, value);
	}
    /**
     * Removes a value of property LogicalPart given as an instance of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLogicalPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.remove(model, instanceResource, LOGICALPART, value);
	}
	
    /**
     * Removes a value of property LogicalPart given as an instance of InformationElement 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLogicalPart(eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.remove(this.model, this.getResource(), LOGICALPART, value);
	}
  
    /**
     * Removes all values of property LogicalPart     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLogicalPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LOGICALPART);
	}
	
    /**
     * Removes all values of property LogicalPart	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLogicalPart() {
		Base.removeAll(this.model, this.getResource(), LOGICALPART);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ec51d92 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMimeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MIMETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ec51d92 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMimeType() {
		return Base.has(this.model, this.getResource(), MIMETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ec51d92 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMimeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MIMETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ec51d92 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMimeType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MIMETYPE);
	}

    /**
     * Get single value of property MimeType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getMimeType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, MIMETYPE);
	}
	
    /**
     * Get single value of property MimeType as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getMimeType_asNode() {
		return Base.get_asNode(this.model, this.getResource(), MIMETYPE);
	}
     /**
     * Get single value of property MimeType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getMimeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, MIMETYPE, java.lang.String.class);
	}
	
    /**
     * Get single value of property MimeType  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getMimeType() {
		return (java.lang.String) Base.get(this.model, this.getResource(), MIMETYPE, java.lang.String.class);
	}
  
    /**
     * Adds a value to property MimeType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addMimeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, MIMETYPE, value, 1);
	}
	
    /**
     * Adds a value to property MimeType as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addMimeType( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MIMETYPE, value, 1);
	}
    /**
     * Adds a value to property MimeType from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addMimeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, MIMETYPE, value, 1);
	}
	
    /**
     * Adds a value to property MimeType from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addMimeType(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MIMETYPE, value, 1);
	}
 
 

    /**
     * Sets a value of property MimeType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMimeType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MIMETYPE, value);
	}
	
    /**
     * Sets a value of property MimeType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMimeType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MIMETYPE, value);
	}
    /**
     * Sets a value of property MimeType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMimeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, MIMETYPE, value);
	}
	
    /**
     * Sets a value of property MimeType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMimeType(java.lang.String value) {
		Base.set(this.model, this.getResource(), MIMETYPE, value);
	}
  


    /**
     * Removes a value of property MimeType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMimeType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MIMETYPE, value);
	}
	
    /**
     * Removes a value of property MimeType as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMimeType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MIMETYPE, value);
	}
    /**
     * Removes a value of property MimeType given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMimeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, MIMETYPE, value);
	}
	
    /**
     * Removes a value of property MimeType given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMimeType(java.lang.String value) {
		Base.remove(this.model, this.getResource(), MIMETYPE, value);
	}
  
    /**
     * Removes all values of property MimeType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMimeType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MIMETYPE);
	}
	
    /**
     * Removes all values of property MimeType	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMimeType() {
		Base.removeAll(this.model, this.getResource(), MIMETYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c5d03e6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNcoContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NCOCONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c5d03e6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNcoContributor() {
		return Base.has(this.model, this.getResource(), NCOCONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c5d03e6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNcoContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NCOCONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c5d03e6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNcoContributor( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NCOCONTRIBUTOR);
	}

     /**
     * Get all values of property NcoContributor as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNcoContributor_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NCOCONTRIBUTOR);
	}
	
    /**
     * Get all values of property NcoContributor as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNcoContributor_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NCOCONTRIBUTOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NcoContributor as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNcoContributor_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NCOCONTRIBUTOR);
	}

    /**
     * Get all values of property NcoContributor as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNcoContributor_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NCOCONTRIBUTOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NcoContributor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllNcoContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NCOCONTRIBUTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property NcoContributor as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllNcoContributor_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NCOCONTRIBUTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property NcoContributor     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllNcoContributor() {
		return Base.getAll(this.model, this.getResource(), NCOCONTRIBUTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property NcoContributor as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllNcoContributor_as() {
		return Base.getAll_as(this.model, this.getResource(), NCOCONTRIBUTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property NcoContributor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNcoContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NCOCONTRIBUTOR, value);
	}
	
    /**
     * Adds a value to property NcoContributor as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNcoContributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NCOCONTRIBUTOR, value);
	}
    /**
     * Adds a value to property NcoContributor from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNcoContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, NCOCONTRIBUTOR, value);
	}
	
    /**
     * Adds a value to property NcoContributor from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNcoContributor(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), NCOCONTRIBUTOR, value);
	}
  

    /**
     * Sets a value of property NcoContributor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNcoContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NCOCONTRIBUTOR, value);
	}
	
    /**
     * Sets a value of property NcoContributor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNcoContributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NCOCONTRIBUTOR, value);
	}
    /**
     * Sets a value of property NcoContributor from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNcoContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, NCOCONTRIBUTOR, value);
	}
	
    /**
     * Sets a value of property NcoContributor from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNcoContributor(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), NCOCONTRIBUTOR, value);
	}
  


    /**
     * Removes a value of property NcoContributor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNcoContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NCOCONTRIBUTOR, value);
	}
	
    /**
     * Removes a value of property NcoContributor as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNcoContributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NCOCONTRIBUTOR, value);
	}
    /**
     * Removes a value of property NcoContributor given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNcoContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, NCOCONTRIBUTOR, value);
	}
	
    /**
     * Removes a value of property NcoContributor given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNcoContributor(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), NCOCONTRIBUTOR, value);
	}
  
    /**
     * Removes all values of property NcoContributor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNcoContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NCOCONTRIBUTOR);
	}
	
    /**
     * Removes all values of property NcoContributor	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNcoContributor() {
		Base.removeAll(this.model, this.getResource(), NCOCONTRIBUTOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@772698a9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNcoCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NCOCREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@772698a9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNcoCreator() {
		return Base.has(this.model, this.getResource(), NCOCREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@772698a9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNcoCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NCOCREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@772698a9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNcoCreator( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NCOCREATOR);
	}

     /**
     * Get all values of property NcoCreator as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNcoCreator_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NCOCREATOR);
	}
	
    /**
     * Get all values of property NcoCreator as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNcoCreator_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NCOCREATOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NcoCreator as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNcoCreator_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NCOCREATOR);
	}

    /**
     * Get all values of property NcoCreator as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNcoCreator_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NCOCREATOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NcoCreator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllNcoCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NCOCREATOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property NcoCreator as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllNcoCreator_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NCOCREATOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property NcoCreator     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllNcoCreator() {
		return Base.getAll(this.model, this.getResource(), NCOCREATOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property NcoCreator as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllNcoCreator_as() {
		return Base.getAll_as(this.model, this.getResource(), NCOCREATOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property NcoCreator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNcoCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NCOCREATOR, value);
	}
	
    /**
     * Adds a value to property NcoCreator as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNcoCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NCOCREATOR, value);
	}
    /**
     * Adds a value to property NcoCreator from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNcoCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, NCOCREATOR, value);
	}
	
    /**
     * Adds a value to property NcoCreator from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNcoCreator(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), NCOCREATOR, value);
	}
  

    /**
     * Sets a value of property NcoCreator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNcoCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NCOCREATOR, value);
	}
	
    /**
     * Sets a value of property NcoCreator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNcoCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NCOCREATOR, value);
	}
    /**
     * Sets a value of property NcoCreator from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNcoCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, NCOCREATOR, value);
	}
	
    /**
     * Sets a value of property NcoCreator from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNcoCreator(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), NCOCREATOR, value);
	}
  


    /**
     * Removes a value of property NcoCreator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNcoCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NCOCREATOR, value);
	}
	
    /**
     * Removes a value of property NcoCreator as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNcoCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NCOCREATOR, value);
	}
    /**
     * Removes a value of property NcoCreator given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNcoCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, NCOCREATOR, value);
	}
	
    /**
     * Removes a value of property NcoCreator given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNcoCreator(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), NCOCREATOR, value);
	}
  
    /**
     * Removes all values of property NcoCreator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNcoCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NCOCREATOR);
	}
	
    /**
     * Removes all values of property NcoCreator	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNcoCreator() {
		Base.removeAll(this.model, this.getResource(), NCOCREATOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45fb3b72 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNieDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NIEDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45fb3b72 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNieDescription() {
		return Base.has(this.model, this.getResource(), NIEDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45fb3b72 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNieDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NIEDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45fb3b72 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNieDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NIEDESCRIPTION);
	}

     /**
     * Get all values of property NieDescription as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNieDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NIEDESCRIPTION);
	}
	
    /**
     * Get all values of property NieDescription as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNieDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NIEDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NieDescription as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNieDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NIEDESCRIPTION);
	}

    /**
     * Get all values of property NieDescription as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNieDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NIEDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NieDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllNieDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NIEDESCRIPTION, java.lang.String.class);
	}
	
    /**
     * Get all values of property NieDescription as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllNieDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NIEDESCRIPTION, java.lang.String.class);
	}

    /**
     * Get all values of property NieDescription     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllNieDescription() {
		return Base.getAll(this.model, this.getResource(), NIEDESCRIPTION, java.lang.String.class);
	}

    /**
     * Get all values of property NieDescription as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllNieDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), NIEDESCRIPTION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property NieDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNieDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NIEDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property NieDescription as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNieDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NIEDESCRIPTION, value);
	}
    /**
     * Adds a value to property NieDescription from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNieDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NIEDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property NieDescription from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNieDescription(java.lang.String value) {
		Base.add(this.model, this.getResource(), NIEDESCRIPTION, value);
	}
  

    /**
     * Sets a value of property NieDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNieDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NIEDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property NieDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNieDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NIEDESCRIPTION, value);
	}
    /**
     * Sets a value of property NieDescription from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNieDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NIEDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property NieDescription from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNieDescription(java.lang.String value) {
		Base.set(this.model, this.getResource(), NIEDESCRIPTION, value);
	}
  


    /**
     * Removes a value of property NieDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNieDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NIEDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property NieDescription as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNieDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NIEDESCRIPTION, value);
	}
    /**
     * Removes a value of property NieDescription given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNieDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NIEDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property NieDescription given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNieDescription(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NIEDESCRIPTION, value);
	}
  
    /**
     * Removes all values of property NieDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNieDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NIEDESCRIPTION);
	}
	
    /**
     * Removes all values of property NieDescription	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNieDescription() {
		Base.removeAll(this.model, this.getResource(), NIEDESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b64130f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNieIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NIEIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b64130f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNieIdentifier() {
		return Base.has(this.model, this.getResource(), NIEIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b64130f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNieIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NIEIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b64130f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNieIdentifier( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NIEIDENTIFIER);
	}

     /**
     * Get all values of property NieIdentifier as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNieIdentifier_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NIEIDENTIFIER);
	}
	
    /**
     * Get all values of property NieIdentifier as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNieIdentifier_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NIEIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NieIdentifier as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNieIdentifier_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NIEIDENTIFIER);
	}

    /**
     * Get all values of property NieIdentifier as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNieIdentifier_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NIEIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NieIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllNieIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NIEIDENTIFIER, java.lang.String.class);
	}
	
    /**
     * Get all values of property NieIdentifier as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllNieIdentifier_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NIEIDENTIFIER, java.lang.String.class);
	}

    /**
     * Get all values of property NieIdentifier     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllNieIdentifier() {
		return Base.getAll(this.model, this.getResource(), NIEIDENTIFIER, java.lang.String.class);
	}

    /**
     * Get all values of property NieIdentifier as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllNieIdentifier_as() {
		return Base.getAll_as(this.model, this.getResource(), NIEIDENTIFIER, java.lang.String.class);
	}
 
    /**
     * Adds a value to property NieIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNieIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NIEIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property NieIdentifier as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNieIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NIEIDENTIFIER, value);
	}
    /**
     * Adds a value to property NieIdentifier from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNieIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NIEIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property NieIdentifier from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNieIdentifier(java.lang.String value) {
		Base.add(this.model, this.getResource(), NIEIDENTIFIER, value);
	}
  

    /**
     * Sets a value of property NieIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNieIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NIEIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property NieIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNieIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NIEIDENTIFIER, value);
	}
    /**
     * Sets a value of property NieIdentifier from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNieIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NIEIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property NieIdentifier from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNieIdentifier(java.lang.String value) {
		Base.set(this.model, this.getResource(), NIEIDENTIFIER, value);
	}
  


    /**
     * Removes a value of property NieIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNieIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NIEIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property NieIdentifier as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNieIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NIEIDENTIFIER, value);
	}
    /**
     * Removes a value of property NieIdentifier given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNieIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NIEIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property NieIdentifier given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNieIdentifier(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NIEIDENTIFIER, value);
	}
  
    /**
     * Removes all values of property NieIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNieIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NIEIDENTIFIER);
	}
	
    /**
     * Removes all values of property NieIdentifier	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNieIdentifier() {
		Base.removeAll(this.model, this.getResource(), NIEIDENTIFIER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c42130 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNieLanguage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NIELANGUAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c42130 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNieLanguage() {
		return Base.has(this.model, this.getResource(), NIELANGUAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c42130 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNieLanguage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NIELANGUAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c42130 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNieLanguage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NIELANGUAGE);
	}

    /**
     * Get single value of property NieLanguage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getNieLanguage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, NIELANGUAGE);
	}
	
    /**
     * Get single value of property NieLanguage as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getNieLanguage_asNode() {
		return Base.get_asNode(this.model, this.getResource(), NIELANGUAGE);
	}
     /**
     * Get single value of property NieLanguage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getNieLanguage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, NIELANGUAGE, java.lang.String.class);
	}
	
    /**
     * Get single value of property NieLanguage  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getNieLanguage() {
		return (java.lang.String) Base.get(this.model, this.getResource(), NIELANGUAGE, java.lang.String.class);
	}
  
    /**
     * Adds a value to property NieLanguage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addNieLanguage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, NIELANGUAGE, value, 1);
	}
	
    /**
     * Adds a value to property NieLanguage as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addNieLanguage( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), NIELANGUAGE, value, 1);
	}
    /**
     * Adds a value to property NieLanguage from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addNieLanguage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, NIELANGUAGE, value, 1);
	}
	
    /**
     * Adds a value to property NieLanguage from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addNieLanguage(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), NIELANGUAGE, value, 1);
	}
 
 

    /**
     * Sets a value of property NieLanguage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNieLanguage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NIELANGUAGE, value);
	}
	
    /**
     * Sets a value of property NieLanguage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNieLanguage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NIELANGUAGE, value);
	}
    /**
     * Sets a value of property NieLanguage from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNieLanguage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NIELANGUAGE, value);
	}
	
    /**
     * Sets a value of property NieLanguage from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNieLanguage(java.lang.String value) {
		Base.set(this.model, this.getResource(), NIELANGUAGE, value);
	}
  


    /**
     * Removes a value of property NieLanguage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNieLanguage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NIELANGUAGE, value);
	}
	
    /**
     * Removes a value of property NieLanguage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNieLanguage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NIELANGUAGE, value);
	}
    /**
     * Removes a value of property NieLanguage given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNieLanguage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NIELANGUAGE, value);
	}
	
    /**
     * Removes a value of property NieLanguage given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNieLanguage(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NIELANGUAGE, value);
	}
  
    /**
     * Removes all values of property NieLanguage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNieLanguage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NIELANGUAGE);
	}
	
    /**
     * Removes all values of property NieLanguage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNieLanguage() {
		Base.removeAll(this.model, this.getResource(), NIELANGUAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2845a27c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNieTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NIETITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2845a27c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNieTitle() {
		return Base.has(this.model, this.getResource(), NIETITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2845a27c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNieTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NIETITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2845a27c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNieTitle( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NIETITLE);
	}

    /**
     * Get single value of property NieTitle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getNieTitle_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, NIETITLE);
	}
	
    /**
     * Get single value of property NieTitle as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getNieTitle_asNode() {
		return Base.get_asNode(this.model, this.getResource(), NIETITLE);
	}
     /**
     * Get single value of property NieTitle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getNieTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, NIETITLE, java.lang.String.class);
	}
	
    /**
     * Get single value of property NieTitle  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getNieTitle() {
		return (java.lang.String) Base.get(this.model, this.getResource(), NIETITLE, java.lang.String.class);
	}
  
    /**
     * Adds a value to property NieTitle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addNieTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, NIETITLE, value, 1);
	}
	
    /**
     * Adds a value to property NieTitle as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addNieTitle( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), NIETITLE, value, 1);
	}
    /**
     * Adds a value to property NieTitle from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addNieTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, NIETITLE, value, 1);
	}
	
    /**
     * Adds a value to property NieTitle from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addNieTitle(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), NIETITLE, value, 1);
	}
 
 

    /**
     * Sets a value of property NieTitle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNieTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NIETITLE, value);
	}
	
    /**
     * Sets a value of property NieTitle from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNieTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NIETITLE, value);
	}
    /**
     * Sets a value of property NieTitle from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNieTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NIETITLE, value);
	}
	
    /**
     * Sets a value of property NieTitle from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNieTitle(java.lang.String value) {
		Base.set(this.model, this.getResource(), NIETITLE, value);
	}
  


    /**
     * Removes a value of property NieTitle as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNieTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NIETITLE, value);
	}
	
    /**
     * Removes a value of property NieTitle as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNieTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NIETITLE, value);
	}
    /**
     * Removes a value of property NieTitle given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNieTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NIETITLE, value);
	}
	
    /**
     * Removes a value of property NieTitle given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNieTitle(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NIETITLE, value);
	}
  
    /**
     * Removes all values of property NieTitle     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNieTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NIETITLE);
	}
	
    /**
     * Removes all values of property NieTitle	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNieTitle() {
		Base.removeAll(this.model, this.getResource(), NIETITLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a3d6b33 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNieVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NIEVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a3d6b33 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNieVersion() {
		return Base.has(this.model, this.getResource(), NIEVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a3d6b33 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNieVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NIEVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a3d6b33 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNieVersion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NIEVERSION);
	}

     /**
     * Get all values of property NieVersion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNieVersion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NIEVERSION);
	}
	
    /**
     * Get all values of property NieVersion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNieVersion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NIEVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NieVersion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNieVersion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NIEVERSION);
	}

    /**
     * Get all values of property NieVersion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNieVersion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NIEVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NieVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllNieVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NIEVERSION, java.lang.String.class);
	}
	
    /**
     * Get all values of property NieVersion as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllNieVersion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NIEVERSION, java.lang.String.class);
	}

    /**
     * Get all values of property NieVersion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllNieVersion() {
		return Base.getAll(this.model, this.getResource(), NIEVERSION, java.lang.String.class);
	}

    /**
     * Get all values of property NieVersion as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllNieVersion_as() {
		return Base.getAll_as(this.model, this.getResource(), NIEVERSION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property NieVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNieVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NIEVERSION, value);
	}
	
    /**
     * Adds a value to property NieVersion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNieVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NIEVERSION, value);
	}
    /**
     * Adds a value to property NieVersion from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNieVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NIEVERSION, value);
	}
	
    /**
     * Adds a value to property NieVersion from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNieVersion(java.lang.String value) {
		Base.add(this.model, this.getResource(), NIEVERSION, value);
	}
  

    /**
     * Sets a value of property NieVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNieVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NIEVERSION, value);
	}
	
    /**
     * Sets a value of property NieVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNieVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NIEVERSION, value);
	}
    /**
     * Sets a value of property NieVersion from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNieVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NIEVERSION, value);
	}
	
    /**
     * Sets a value of property NieVersion from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNieVersion(java.lang.String value) {
		Base.set(this.model, this.getResource(), NIEVERSION, value);
	}
  


    /**
     * Removes a value of property NieVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNieVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NIEVERSION, value);
	}
	
    /**
     * Removes a value of property NieVersion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNieVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NIEVERSION, value);
	}
    /**
     * Removes a value of property NieVersion given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNieVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NIEVERSION, value);
	}
	
    /**
     * Removes a value of property NieVersion given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNieVersion(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NIEVERSION, value);
	}
  
    /**
     * Removes all values of property NieVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNieVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NIEVERSION);
	}
	
    /**
     * Removes all values of property NieVersion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNieVersion() {
		Base.removeAll(this.model, this.getResource(), NIEVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62d0aa87 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62d0aa87 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPart() {
		return Base.has(this.model, this.getResource(), PART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62d0aa87 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62d0aa87 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPart( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PART);
	}

     /**
     * Get all values of property Part as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PART);
	}
	
    /**
     * Get all values of property Part as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PART, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Part as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PART);
	}

    /**
     * Get all values of property Part as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PART, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Part     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PART, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
	
    /**
     * Get all values of property Part as a ReactorResult of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllPart_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PART, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property Part     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllPart() {
		return Base.getAll(this.model, this.getResource(), PART, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property Part as a ReactorResult of DataObject 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllPart_as() {
		return Base.getAll_as(this.model, this.getResource(), PART, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
 
    /**
     * Adds a value to property Part as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PART, value);
	}
	
    /**
     * Adds a value to property Part as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PART, value);
	}
    /**
     * Adds a value to property Part from an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(model, instanceResource, PART, value);
	}
	
    /**
     * Adds a value to property Part from an instance of DataObject 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPart(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(this.model, this.getResource(), PART, value);
	}
  

    /**
     * Sets a value of property Part from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PART, value);
	}
	
    /**
     * Sets a value of property Part from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PART, value);
	}
    /**
     * Sets a value of property Part from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(model, instanceResource, PART, value);
	}
	
    /**
     * Sets a value of property Part from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPart(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(this.model, this.getResource(), PART, value);
	}
  


    /**
     * Removes a value of property Part as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PART, value);
	}
	
    /**
     * Removes a value of property Part as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePart( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PART, value);
	}
    /**
     * Removes a value of property Part given as an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(model, instanceResource, PART, value);
	}
	
    /**
     * Removes a value of property Part given as an instance of DataObject 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePart(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(this.model, this.getResource(), PART, value);
	}
  
    /**
     * Removes all values of property Part     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PART);
	}
	
    /**
     * Removes all values of property Part	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPart() {
		Base.removeAll(this.model, this.getResource(), PART);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@738650 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPlainTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PLAINTEXTCONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@738650 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPlainTextContent() {
		return Base.has(this.model, this.getResource(), PLAINTEXTCONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@738650 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPlainTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PLAINTEXTCONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@738650 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPlainTextContent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PLAINTEXTCONTENT);
	}

    /**
     * Get single value of property PlainTextContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getPlainTextContent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, PLAINTEXTCONTENT);
	}
	
    /**
     * Get single value of property PlainTextContent as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getPlainTextContent_asNode() {
		return Base.get_asNode(this.model, this.getResource(), PLAINTEXTCONTENT);
	}
     /**
     * Get single value of property PlainTextContent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getPlainTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, PLAINTEXTCONTENT, java.lang.String.class);
	}
	
    /**
     * Get single value of property PlainTextContent  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getPlainTextContent() {
		return (java.lang.String) Base.get(this.model, this.getResource(), PLAINTEXTCONTENT, java.lang.String.class);
	}
  
    /**
     * Adds a value to property PlainTextContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addPlainTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, PLAINTEXTCONTENT, value, 1);
	}
	
    /**
     * Adds a value to property PlainTextContent as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addPlainTextContent( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PLAINTEXTCONTENT, value, 1);
	}
    /**
     * Adds a value to property PlainTextContent from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addPlainTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, PLAINTEXTCONTENT, value, 1);
	}
	
    /**
     * Adds a value to property PlainTextContent from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addPlainTextContent(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PLAINTEXTCONTENT, value, 1);
	}
 
 

    /**
     * Sets a value of property PlainTextContent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPlainTextContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PLAINTEXTCONTENT, value);
	}
	
    /**
     * Sets a value of property PlainTextContent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPlainTextContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PLAINTEXTCONTENT, value);
	}
    /**
     * Sets a value of property PlainTextContent from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPlainTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PLAINTEXTCONTENT, value);
	}
	
    /**
     * Sets a value of property PlainTextContent from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPlainTextContent(java.lang.String value) {
		Base.set(this.model, this.getResource(), PLAINTEXTCONTENT, value);
	}
  


    /**
     * Removes a value of property PlainTextContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePlainTextContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PLAINTEXTCONTENT, value);
	}
	
    /**
     * Removes a value of property PlainTextContent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePlainTextContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PLAINTEXTCONTENT, value);
	}
    /**
     * Removes a value of property PlainTextContent given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePlainTextContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PLAINTEXTCONTENT, value);
	}
	
    /**
     * Removes a value of property PlainTextContent given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePlainTextContent(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PLAINTEXTCONTENT, value);
	}
  
    /**
     * Removes all values of property PlainTextContent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPlainTextContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PLAINTEXTCONTENT);
	}
	
    /**
     * Removes all values of property PlainTextContent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPlainTextContent() {
		Base.removeAll(this.model, this.getResource(), PLAINTEXTCONTENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b9151 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PUBLISHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b9151 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPublisher() {
		return Base.has(this.model, this.getResource(), PUBLISHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b9151 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PUBLISHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b9151 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPublisher( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PUBLISHER);
	}

     /**
     * Get all values of property Publisher as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPublisher_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PUBLISHER);
	}
	
    /**
     * Get all values of property Publisher as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPublisher_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PUBLISHER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Publisher as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPublisher_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PUBLISHER);
	}

    /**
     * Get all values of property Publisher as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPublisher_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PUBLISHER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Publisher     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PUBLISHER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Publisher as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllPublisher_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PUBLISHER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Publisher     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllPublisher() {
		return Base.getAll(this.model, this.getResource(), PUBLISHER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Publisher as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllPublisher_as() {
		return Base.getAll_as(this.model, this.getResource(), PUBLISHER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Publisher as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Adds a value to property Publisher as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPublisher( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PUBLISHER, value);
	}
    /**
     * Adds a value to property Publisher from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Adds a value to property Publisher from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPublisher(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), PUBLISHER, value);
	}
  

    /**
     * Sets a value of property Publisher from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPublisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Sets a value of property Publisher from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPublisher( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PUBLISHER, value);
	}
    /**
     * Sets a value of property Publisher from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Sets a value of property Publisher from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPublisher(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), PUBLISHER, value);
	}
  


    /**
     * Removes a value of property Publisher as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePublisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Removes a value of property Publisher as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePublisher( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PUBLISHER, value);
	}
    /**
     * Removes a value of property Publisher given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePublisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, PUBLISHER, value);
	}
	
    /**
     * Removes a value of property Publisher given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePublisher(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), PUBLISHER, value);
	}
  
    /**
     * Removes all values of property Publisher     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPublisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PUBLISHER);
	}
	
    /**
     * Removes all values of property Publisher	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPublisher() {
		Base.removeAll(this.model, this.getResource(), PUBLISHER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29d3a145 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRelatedTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELATEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29d3a145 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRelatedTo() {
		return Base.has(this.model, this.getResource(), RELATEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29d3a145 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRelatedTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELATEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29d3a145 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRelatedTo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATEDTO);
	}

     /**
     * Get all values of property RelatedTo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedTo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATEDTO);
	}
	
    /**
     * Get all values of property RelatedTo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedTo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDTO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RelatedTo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedTo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATEDTO);
	}

    /**
     * Get all values of property RelatedTo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedTo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDTO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RelatedTo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllRelatedTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATEDTO, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
	
    /**
     * Get all values of property RelatedTo as a ReactorResult of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllRelatedTo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDTO, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property RelatedTo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllRelatedTo() {
		return Base.getAll(this.model, this.getResource(), RELATEDTO, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property RelatedTo as a ReactorResult of DataObject 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllRelatedTo_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDTO, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
 
    /**
     * Adds a value to property RelatedTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRelatedTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RELATEDTO, value);
	}
	
    /**
     * Adds a value to property RelatedTo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRelatedTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RELATEDTO, value);
	}
    /**
     * Adds a value to property RelatedTo from an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRelatedTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(model, instanceResource, RELATEDTO, value);
	}
	
    /**
     * Adds a value to property RelatedTo from an instance of DataObject 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRelatedTo(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(this.model, this.getResource(), RELATEDTO, value);
	}
  

    /**
     * Sets a value of property RelatedTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRelatedTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELATEDTO, value);
	}
	
    /**
     * Sets a value of property RelatedTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRelatedTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELATEDTO, value);
	}
    /**
     * Sets a value of property RelatedTo from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRelatedTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(model, instanceResource, RELATEDTO, value);
	}
	
    /**
     * Sets a value of property RelatedTo from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRelatedTo(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(this.model, this.getResource(), RELATEDTO, value);
	}
  


    /**
     * Removes a value of property RelatedTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRelatedTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELATEDTO, value);
	}
	
    /**
     * Removes a value of property RelatedTo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRelatedTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELATEDTO, value);
	}
    /**
     * Removes a value of property RelatedTo given as an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRelatedTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(model, instanceResource, RELATEDTO, value);
	}
	
    /**
     * Removes a value of property RelatedTo given as an instance of DataObject 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRelatedTo(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(this.model, this.getResource(), RELATEDTO, value);
	}
  
    /**
     * Removes all values of property RelatedTo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRelatedTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATEDTO);
	}
	
    /**
     * Removes all values of property RelatedTo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRelatedTo() {
		Base.removeAll(this.model, this.getResource(), RELATEDTO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76e9c901 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRootElementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ROOTELEMENTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76e9c901 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRootElementOf() {
		return Base.has(this.model, this.getResource(), ROOTELEMENTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76e9c901 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRootElementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ROOTELEMENTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76e9c901 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRootElementOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ROOTELEMENTOF);
	}

     /**
     * Get all values of property RootElementOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRootElementOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ROOTELEMENTOF);
	}
	
    /**
     * Get all values of property RootElementOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRootElementOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ROOTELEMENTOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RootElementOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRootElementOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ROOTELEMENTOF);
	}

    /**
     * Get all values of property RootElementOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRootElementOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ROOTELEMENTOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RootElementOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nie.DataSource> getAllRootElementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ROOTELEMENTOF, eu.dime.ps.semantic.model.nie.DataSource.class);
	}
	
    /**
     * Get all values of property RootElementOf as a ReactorResult of DataSource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nie.DataSource> getAllRootElementOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ROOTELEMENTOF, eu.dime.ps.semantic.model.nie.DataSource.class);
	}

    /**
     * Get all values of property RootElementOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nie.DataSource> getAllRootElementOf() {
		return Base.getAll(this.model, this.getResource(), ROOTELEMENTOF, eu.dime.ps.semantic.model.nie.DataSource.class);
	}

    /**
     * Get all values of property RootElementOf as a ReactorResult of DataSource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nie.DataSource> getAllRootElementOf_as() {
		return Base.getAll_as(this.model, this.getResource(), ROOTELEMENTOF, eu.dime.ps.semantic.model.nie.DataSource.class);
	}
 
    /**
     * Adds a value to property RootElementOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRootElementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ROOTELEMENTOF, value);
	}
	
    /**
     * Adds a value to property RootElementOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRootElementOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ROOTELEMENTOF, value);
	}
    /**
     * Adds a value to property RootElementOf from an instance of DataSource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRootElementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataSource value) {
		Base.add(model, instanceResource, ROOTELEMENTOF, value);
	}
	
    /**
     * Adds a value to property RootElementOf from an instance of DataSource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRootElementOf(eu.dime.ps.semantic.model.nie.DataSource value) {
		Base.add(this.model, this.getResource(), ROOTELEMENTOF, value);
	}
  

    /**
     * Sets a value of property RootElementOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRootElementOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ROOTELEMENTOF, value);
	}
	
    /**
     * Sets a value of property RootElementOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRootElementOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ROOTELEMENTOF, value);
	}
    /**
     * Sets a value of property RootElementOf from an instance of DataSource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRootElementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataSource value) {
		Base.set(model, instanceResource, ROOTELEMENTOF, value);
	}
	
    /**
     * Sets a value of property RootElementOf from an instance of DataSource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRootElementOf(eu.dime.ps.semantic.model.nie.DataSource value) {
		Base.set(this.model, this.getResource(), ROOTELEMENTOF, value);
	}
  


    /**
     * Removes a value of property RootElementOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRootElementOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ROOTELEMENTOF, value);
	}
	
    /**
     * Removes a value of property RootElementOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRootElementOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ROOTELEMENTOF, value);
	}
    /**
     * Removes a value of property RootElementOf given as an instance of DataSource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRootElementOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataSource value) {
		Base.remove(model, instanceResource, ROOTELEMENTOF, value);
	}
	
    /**
     * Removes a value of property RootElementOf given as an instance of DataSource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRootElementOf(eu.dime.ps.semantic.model.nie.DataSource value) {
		Base.remove(this.model, this.getResource(), ROOTELEMENTOF, value);
	}
  
    /**
     * Removes all values of property RootElementOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRootElementOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ROOTELEMENTOF);
	}
	
    /**
     * Removes all values of property RootElementOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRootElementOf() {
		Base.removeAll(this.model, this.getResource(), ROOTELEMENTOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77dd988b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77dd988b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubject() {
		return Base.has(this.model, this.getResource(), SUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77dd988b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77dd988b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubject( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBJECT);
	}

     /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubject_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBJECT);
	}
	
    /**
     * Get all values of property Subject as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubject_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubject_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBJECT);
	}

    /**
     * Get all values of property Subject as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubject_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Subject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBJECT, java.lang.String.class);
	}
	
    /**
     * Get all values of property Subject as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSubject_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECT, java.lang.String.class);
	}

    /**
     * Get all values of property Subject     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSubject() {
		return Base.getAll(this.model, this.getResource(), SUBJECT, java.lang.String.class);
	}

    /**
     * Get all values of property Subject as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSubject_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Subject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Adds a value to property Subject as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBJECT, value);
	}
    /**
     * Adds a value to property Subject from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Adds a value to property Subject from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubject(java.lang.String value) {
		Base.add(this.model, this.getResource(), SUBJECT, value);
	}
  

    /**
     * Sets a value of property Subject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Sets a value of property Subject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBJECT, value);
	}
    /**
     * Sets a value of property Subject from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Sets a value of property Subject from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubject(java.lang.String value) {
		Base.set(this.model, this.getResource(), SUBJECT, value);
	}
  


    /**
     * Removes a value of property Subject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Removes a value of property Subject as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBJECT, value);
	}
    /**
     * Removes a value of property Subject given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Removes a value of property Subject given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubject(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SUBJECT, value);
	}
  
    /**
     * Removes all values of property Subject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBJECT);
	}
	
    /**
     * Removes all values of property Subject	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubject() {
		Base.removeAll(this.model, this.getResource(), SUBJECT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7bd111 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWriteable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WRITEABLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7bd111 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWriteable() {
		return Base.has(this.model, this.getResource(), WRITEABLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7bd111 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWriteable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WRITEABLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7bd111 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWriteable( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WRITEABLE);
	}

     /**
     * Get all values of property Writeable as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWriteable_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WRITEABLE);
	}
	
    /**
     * Get all values of property Writeable as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWriteable_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WRITEABLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Writeable as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWriteable_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WRITEABLE);
	}

    /**
     * Get all values of property Writeable as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWriteable_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WRITEABLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Writeable     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Boolean> getAllWriteable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WRITEABLE, java.lang.Boolean.class);
	}
	
    /**
     * Get all values of property Writeable as a ReactorResult of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Boolean> getAllWriteable_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WRITEABLE, java.lang.Boolean.class);
	}

    /**
     * Get all values of property Writeable     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Boolean> getAllWriteable() {
		return Base.getAll(this.model, this.getResource(), WRITEABLE, java.lang.Boolean.class);
	}

    /**
     * Get all values of property Writeable as a ReactorResult of java.lang.Boolean 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Boolean> getAllWriteable_as() {
		return Base.getAll_as(this.model, this.getResource(), WRITEABLE, java.lang.Boolean.class);
	}
 
    /**
     * Adds a value to property Writeable as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWriteable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WRITEABLE, value);
	}
	
    /**
     * Adds a value to property Writeable as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWriteable( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WRITEABLE, value);
	}
    /**
     * Adds a value to property Writeable from an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWriteable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.add(model, instanceResource, WRITEABLE, value);
	}
	
    /**
     * Adds a value to property Writeable from an instance of java.lang.Boolean 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWriteable(java.lang.Boolean value) {
		Base.add(this.model, this.getResource(), WRITEABLE, value);
	}
  

    /**
     * Sets a value of property Writeable from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWriteable( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WRITEABLE, value);
	}
	
    /**
     * Sets a value of property Writeable from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWriteable( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WRITEABLE, value);
	}
    /**
     * Sets a value of property Writeable from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWriteable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.set(model, instanceResource, WRITEABLE, value);
	}
	
    /**
     * Sets a value of property Writeable from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWriteable(java.lang.Boolean value) {
		Base.set(this.model, this.getResource(), WRITEABLE, value);
	}
  


    /**
     * Removes a value of property Writeable as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWriteable( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WRITEABLE, value);
	}
	
    /**
     * Removes a value of property Writeable as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWriteable( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WRITEABLE, value);
	}
    /**
     * Removes a value of property Writeable given as an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWriteable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.remove(model, instanceResource, WRITEABLE, value);
	}
	
    /**
     * Removes a value of property Writeable given as an instance of java.lang.Boolean 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWriteable(java.lang.Boolean value) {
		Base.remove(this.model, this.getResource(), WRITEABLE, value);
	}
  
    /**
     * Removes all values of property Writeable     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWriteable( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WRITEABLE);
	}
	
    /**
     * Removes all values of property Writeable	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWriteable() {
		Base.removeAll(this.model, this.getResource(), WRITEABLE);
	}
 }