package eu.dime.ps.semantic.model.dcon;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> ContextAttribute </li>
 *   <li> IsExcluder </li>
 *   <li> IsRequired </li>
 *   <li> RecordedAt </li>
 *   <li> RecordedBy </li>
 *   <li> Validity </li>
 *   <li> Weight </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Element extends eu.dime.ps.semantic.model.RDFReactorThing {

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#Element */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#Element", false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasContextAttribute */
    @SuppressWarnings("hiding")
	public static final URI CONTEXTATTRIBUTE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasContextAttribute",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#isExcluder */
    @SuppressWarnings("hiding")
	public static final URI ISEXCLUDER = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#isExcluder",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#isRequired */
    @SuppressWarnings("hiding")
	public static final URI ISREQUIRED = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#isRequired",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#recordedAt */
    @SuppressWarnings("hiding")
	public static final URI RECORDEDAT = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#recordedAt",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#recordedBy */
    @SuppressWarnings("hiding")
	public static final URI RECORDEDBY = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#recordedBy",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#validity */
    @SuppressWarnings("hiding")
	public static final URI VALIDITY = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#validity",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#weight */
    @SuppressWarnings("hiding")
	public static final URI WEIGHT = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#weight",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasContextAttribute",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#isExcluder",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#isRequired",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#recordedAt",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#recordedBy",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#validity",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#weight",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Element (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Element (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Element (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Element (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Element (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Element  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Element  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Element.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#Element).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Element> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Element.class );
	}

    /**
	 * Remove rdf:type Element from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ContextElement' to this Element instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContextElement_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.dcon.Aspect.CONTEXTELEMENT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ContextElement' to this Element instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContextElement_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.dcon.Aspect.CONTEXTELEMENT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ContextElement' to this Element instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllContextElement_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.dcon.Aspect.CONTEXTELEMENT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19fe9620 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContextAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTEXTATTRIBUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19fe9620 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContextAttribute() {
		return Base.has(this.model, this.getResource(), CONTEXTATTRIBUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19fe9620 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContextAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTEXTATTRIBUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19fe9620 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContextAttribute( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTEXTATTRIBUTE);
	}

     /**
     * Get all values of property ContextAttribute as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContextAttribute_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTEXTATTRIBUTE);
	}
	
    /**
     * Get all values of property ContextAttribute as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContextAttribute_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTEXTATTRIBUTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ContextAttribute as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContextAttribute_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTEXTATTRIBUTE);
	}

    /**
     * Get all values of property ContextAttribute as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContextAttribute_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTEXTATTRIBUTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ContextAttribute     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllContextAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTEXTATTRIBUTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ContextAttribute as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllContextAttribute_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTEXTATTRIBUTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ContextAttribute     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllContextAttribute() {
		return Base.getAll(this.model, this.getResource(), CONTEXTATTRIBUTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ContextAttribute as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllContextAttribute_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTEXTATTRIBUTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ContextAttribute as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addContextAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTEXTATTRIBUTE, value);
	}
	
    /**
     * Adds a value to property ContextAttribute as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addContextAttribute( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTEXTATTRIBUTE, value);
	}
    /**
     * Adds a value to property ContextAttribute from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addContextAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, CONTEXTATTRIBUTE, value);
	}
	
    /**
     * Adds a value to property ContextAttribute from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addContextAttribute(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), CONTEXTATTRIBUTE, value);
	}
  

    /**
     * Sets a value of property ContextAttribute from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContextAttribute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTEXTATTRIBUTE, value);
	}
	
    /**
     * Sets a value of property ContextAttribute from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContextAttribute( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTEXTATTRIBUTE, value);
	}
    /**
     * Sets a value of property ContextAttribute from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContextAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, CONTEXTATTRIBUTE, value);
	}
	
    /**
     * Sets a value of property ContextAttribute from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContextAttribute(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), CONTEXTATTRIBUTE, value);
	}
  


    /**
     * Removes a value of property ContextAttribute as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContextAttribute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTEXTATTRIBUTE, value);
	}
	
    /**
     * Removes a value of property ContextAttribute as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContextAttribute( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTEXTATTRIBUTE, value);
	}
    /**
     * Removes a value of property ContextAttribute given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContextAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, CONTEXTATTRIBUTE, value);
	}
	
    /**
     * Removes a value of property ContextAttribute given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContextAttribute(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), CONTEXTATTRIBUTE, value);
	}
  
    /**
     * Removes all values of property ContextAttribute     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContextAttribute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTEXTATTRIBUTE);
	}
	
    /**
     * Removes all values of property ContextAttribute	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContextAttribute() {
		Base.removeAll(this.model, this.getResource(), CONTEXTATTRIBUTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fb26910 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIsExcluder(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISEXCLUDER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fb26910 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIsExcluder() {
		return Base.has(this.model, this.getResource(), ISEXCLUDER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fb26910 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIsExcluder(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISEXCLUDER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fb26910 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIsExcluder( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISEXCLUDER);
	}

     /**
     * Get all values of property IsExcluder as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsExcluder_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISEXCLUDER);
	}
	
    /**
     * Get all values of property IsExcluder as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsExcluder_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISEXCLUDER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IsExcluder as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsExcluder_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISEXCLUDER);
	}

    /**
     * Get all values of property IsExcluder as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsExcluder_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISEXCLUDER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IsExcluder     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Boolean> getAllIsExcluder(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISEXCLUDER, java.lang.Boolean.class);
	}
	
    /**
     * Get all values of property IsExcluder as a ReactorResult of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Boolean> getAllIsExcluder_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISEXCLUDER, java.lang.Boolean.class);
	}

    /**
     * Get all values of property IsExcluder     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Boolean> getAllIsExcluder() {
		return Base.getAll(this.model, this.getResource(), ISEXCLUDER, java.lang.Boolean.class);
	}

    /**
     * Get all values of property IsExcluder as a ReactorResult of java.lang.Boolean 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Boolean> getAllIsExcluder_as() {
		return Base.getAll_as(this.model, this.getResource(), ISEXCLUDER, java.lang.Boolean.class);
	}
 
    /**
     * Adds a value to property IsExcluder as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIsExcluder(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISEXCLUDER, value);
	}
	
    /**
     * Adds a value to property IsExcluder as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIsExcluder( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISEXCLUDER, value);
	}
    /**
     * Adds a value to property IsExcluder from an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIsExcluder(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.add(model, instanceResource, ISEXCLUDER, value);
	}
	
    /**
     * Adds a value to property IsExcluder from an instance of java.lang.Boolean 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIsExcluder(java.lang.Boolean value) {
		Base.add(this.model, this.getResource(), ISEXCLUDER, value);
	}
  

    /**
     * Sets a value of property IsExcluder from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIsExcluder( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISEXCLUDER, value);
	}
	
    /**
     * Sets a value of property IsExcluder from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIsExcluder( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISEXCLUDER, value);
	}
    /**
     * Sets a value of property IsExcluder from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIsExcluder(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.set(model, instanceResource, ISEXCLUDER, value);
	}
	
    /**
     * Sets a value of property IsExcluder from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIsExcluder(java.lang.Boolean value) {
		Base.set(this.model, this.getResource(), ISEXCLUDER, value);
	}
  


    /**
     * Removes a value of property IsExcluder as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIsExcluder( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISEXCLUDER, value);
	}
	
    /**
     * Removes a value of property IsExcluder as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIsExcluder( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISEXCLUDER, value);
	}
    /**
     * Removes a value of property IsExcluder given as an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIsExcluder(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.remove(model, instanceResource, ISEXCLUDER, value);
	}
	
    /**
     * Removes a value of property IsExcluder given as an instance of java.lang.Boolean 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIsExcluder(java.lang.Boolean value) {
		Base.remove(this.model, this.getResource(), ISEXCLUDER, value);
	}
  
    /**
     * Removes all values of property IsExcluder     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIsExcluder( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISEXCLUDER);
	}
	
    /**
     * Removes all values of property IsExcluder	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIsExcluder() {
		Base.removeAll(this.model, this.getResource(), ISEXCLUDER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@50bf08ae has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIsRequired(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISREQUIRED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@50bf08ae has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIsRequired() {
		return Base.has(this.model, this.getResource(), ISREQUIRED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@50bf08ae has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIsRequired(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISREQUIRED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@50bf08ae has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIsRequired( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISREQUIRED);
	}

     /**
     * Get all values of property IsRequired as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsRequired_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISREQUIRED);
	}
	
    /**
     * Get all values of property IsRequired as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsRequired_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISREQUIRED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IsRequired as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsRequired_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISREQUIRED);
	}

    /**
     * Get all values of property IsRequired as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsRequired_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISREQUIRED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IsRequired     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Boolean> getAllIsRequired(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISREQUIRED, java.lang.Boolean.class);
	}
	
    /**
     * Get all values of property IsRequired as a ReactorResult of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Boolean> getAllIsRequired_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISREQUIRED, java.lang.Boolean.class);
	}

    /**
     * Get all values of property IsRequired     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Boolean> getAllIsRequired() {
		return Base.getAll(this.model, this.getResource(), ISREQUIRED, java.lang.Boolean.class);
	}

    /**
     * Get all values of property IsRequired as a ReactorResult of java.lang.Boolean 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Boolean> getAllIsRequired_as() {
		return Base.getAll_as(this.model, this.getResource(), ISREQUIRED, java.lang.Boolean.class);
	}
 
    /**
     * Adds a value to property IsRequired as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIsRequired(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISREQUIRED, value);
	}
	
    /**
     * Adds a value to property IsRequired as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIsRequired( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISREQUIRED, value);
	}
    /**
     * Adds a value to property IsRequired from an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIsRequired(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.add(model, instanceResource, ISREQUIRED, value);
	}
	
    /**
     * Adds a value to property IsRequired from an instance of java.lang.Boolean 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIsRequired(java.lang.Boolean value) {
		Base.add(this.model, this.getResource(), ISREQUIRED, value);
	}
  

    /**
     * Sets a value of property IsRequired from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIsRequired( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISREQUIRED, value);
	}
	
    /**
     * Sets a value of property IsRequired from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIsRequired( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISREQUIRED, value);
	}
    /**
     * Sets a value of property IsRequired from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIsRequired(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.set(model, instanceResource, ISREQUIRED, value);
	}
	
    /**
     * Sets a value of property IsRequired from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIsRequired(java.lang.Boolean value) {
		Base.set(this.model, this.getResource(), ISREQUIRED, value);
	}
  


    /**
     * Removes a value of property IsRequired as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIsRequired( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISREQUIRED, value);
	}
	
    /**
     * Removes a value of property IsRequired as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIsRequired( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISREQUIRED, value);
	}
    /**
     * Removes a value of property IsRequired given as an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIsRequired(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.remove(model, instanceResource, ISREQUIRED, value);
	}
	
    /**
     * Removes a value of property IsRequired given as an instance of java.lang.Boolean 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIsRequired(java.lang.Boolean value) {
		Base.remove(this.model, this.getResource(), ISREQUIRED, value);
	}
  
    /**
     * Removes all values of property IsRequired     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIsRequired( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISREQUIRED);
	}
	
    /**
     * Removes all values of property IsRequired	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIsRequired() {
		Base.removeAll(this.model, this.getResource(), ISREQUIRED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b91db8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRecordedAt(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RECORDEDAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b91db8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRecordedAt() {
		return Base.has(this.model, this.getResource(), RECORDEDAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b91db8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRecordedAt(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RECORDEDAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b91db8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRecordedAt( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RECORDEDAT);
	}

     /**
     * Get all values of property RecordedAt as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRecordedAt_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RECORDEDAT);
	}
	
    /**
     * Get all values of property RecordedAt as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRecordedAt_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RECORDEDAT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RecordedAt as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRecordedAt_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RECORDEDAT);
	}

    /**
     * Get all values of property RecordedAt as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRecordedAt_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RECORDEDAT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RecordedAt     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllRecordedAt(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RECORDEDAT, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property RecordedAt as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllRecordedAt_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RECORDEDAT, java.util.Calendar.class);
	}

    /**
     * Get all values of property RecordedAt     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllRecordedAt() {
		return Base.getAll(this.model, this.getResource(), RECORDEDAT, java.util.Calendar.class);
	}

    /**
     * Get all values of property RecordedAt as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllRecordedAt_as() {
		return Base.getAll_as(this.model, this.getResource(), RECORDEDAT, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property RecordedAt as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRecordedAt(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RECORDEDAT, value);
	}
	
    /**
     * Adds a value to property RecordedAt as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRecordedAt( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RECORDEDAT, value);
	}
    /**
     * Adds a value to property RecordedAt from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRecordedAt(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, RECORDEDAT, value);
	}
	
    /**
     * Adds a value to property RecordedAt from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRecordedAt(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), RECORDEDAT, value);
	}
  

    /**
     * Sets a value of property RecordedAt from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRecordedAt( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RECORDEDAT, value);
	}
	
    /**
     * Sets a value of property RecordedAt from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRecordedAt( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RECORDEDAT, value);
	}
    /**
     * Sets a value of property RecordedAt from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRecordedAt(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, RECORDEDAT, value);
	}
	
    /**
     * Sets a value of property RecordedAt from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRecordedAt(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), RECORDEDAT, value);
	}
  


    /**
     * Removes a value of property RecordedAt as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRecordedAt( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RECORDEDAT, value);
	}
	
    /**
     * Removes a value of property RecordedAt as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRecordedAt( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RECORDEDAT, value);
	}
    /**
     * Removes a value of property RecordedAt given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRecordedAt(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, RECORDEDAT, value);
	}
	
    /**
     * Removes a value of property RecordedAt given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRecordedAt(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), RECORDEDAT, value);
	}
  
    /**
     * Removes all values of property RecordedAt     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRecordedAt( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RECORDEDAT);
	}
	
    /**
     * Removes all values of property RecordedAt	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRecordedAt() {
		Base.removeAll(this.model, this.getResource(), RECORDEDAT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b3fe7d6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRecordedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RECORDEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b3fe7d6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRecordedBy() {
		return Base.has(this.model, this.getResource(), RECORDEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b3fe7d6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRecordedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RECORDEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b3fe7d6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRecordedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RECORDEDBY);
	}

     /**
     * Get all values of property RecordedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRecordedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RECORDEDBY);
	}
	
    /**
     * Get all values of property RecordedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRecordedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RECORDEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RecordedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRecordedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RECORDEDBY);
	}

    /**
     * Get all values of property RecordedBy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRecordedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RECORDEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RecordedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.ddo.Device> getAllRecordedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RECORDEDBY, eu.dime.ps.semantic.model.ddo.Device.class);
	}
	
    /**
     * Get all values of property RecordedBy as a ReactorResult of Device 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.ddo.Device> getAllRecordedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RECORDEDBY, eu.dime.ps.semantic.model.ddo.Device.class);
	}

    /**
     * Get all values of property RecordedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.ddo.Device> getAllRecordedBy() {
		return Base.getAll(this.model, this.getResource(), RECORDEDBY, eu.dime.ps.semantic.model.ddo.Device.class);
	}

    /**
     * Get all values of property RecordedBy as a ReactorResult of Device 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.ddo.Device> getAllRecordedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), RECORDEDBY, eu.dime.ps.semantic.model.ddo.Device.class);
	}
 
    /**
     * Adds a value to property RecordedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRecordedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RECORDEDBY, value);
	}
	
    /**
     * Adds a value to property RecordedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRecordedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RECORDEDBY, value);
	}
    /**
     * Adds a value to property RecordedBy from an instance of Device 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRecordedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ddo.Device value) {
		Base.add(model, instanceResource, RECORDEDBY, value);
	}
	
    /**
     * Adds a value to property RecordedBy from an instance of Device 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRecordedBy(eu.dime.ps.semantic.model.ddo.Device value) {
		Base.add(this.model, this.getResource(), RECORDEDBY, value);
	}
  

    /**
     * Sets a value of property RecordedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRecordedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RECORDEDBY, value);
	}
	
    /**
     * Sets a value of property RecordedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRecordedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RECORDEDBY, value);
	}
    /**
     * Sets a value of property RecordedBy from an instance of Device 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRecordedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ddo.Device value) {
		Base.set(model, instanceResource, RECORDEDBY, value);
	}
	
    /**
     * Sets a value of property RecordedBy from an instance of Device 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRecordedBy(eu.dime.ps.semantic.model.ddo.Device value) {
		Base.set(this.model, this.getResource(), RECORDEDBY, value);
	}
  


    /**
     * Removes a value of property RecordedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRecordedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RECORDEDBY, value);
	}
	
    /**
     * Removes a value of property RecordedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRecordedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RECORDEDBY, value);
	}
    /**
     * Removes a value of property RecordedBy given as an instance of Device 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRecordedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ddo.Device value) {
		Base.remove(model, instanceResource, RECORDEDBY, value);
	}
	
    /**
     * Removes a value of property RecordedBy given as an instance of Device 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRecordedBy(eu.dime.ps.semantic.model.ddo.Device value) {
		Base.remove(this.model, this.getResource(), RECORDEDBY, value);
	}
  
    /**
     * Removes all values of property RecordedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRecordedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RECORDEDBY);
	}
	
    /**
     * Removes all values of property RecordedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRecordedBy() {
		Base.removeAll(this.model, this.getResource(), RECORDEDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40372869 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasValidity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, VALIDITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40372869 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasValidity() {
		return Base.has(this.model, this.getResource(), VALIDITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40372869 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasValidity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, VALIDITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40372869 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasValidity( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), VALIDITY);
	}

     /**
     * Get all values of property Validity as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllValidity_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, VALIDITY);
	}
	
    /**
     * Get all values of property Validity as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllValidity_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VALIDITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Validity as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllValidity_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), VALIDITY);
	}

    /**
     * Get all values of property Validity as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllValidity_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), VALIDITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Validity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllValidity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, VALIDITY, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property Validity as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllValidity_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VALIDITY, java.util.Calendar.class);
	}

    /**
     * Get all values of property Validity     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllValidity() {
		return Base.getAll(this.model, this.getResource(), VALIDITY, java.util.Calendar.class);
	}

    /**
     * Get all values of property Validity as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllValidity_as() {
		return Base.getAll_as(this.model, this.getResource(), VALIDITY, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property Validity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addValidity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, VALIDITY, value);
	}
	
    /**
     * Adds a value to property Validity as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addValidity( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), VALIDITY, value);
	}
    /**
     * Adds a value to property Validity from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addValidity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, VALIDITY, value);
	}
	
    /**
     * Adds a value to property Validity from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addValidity(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), VALIDITY, value);
	}
  

    /**
     * Sets a value of property Validity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setValidity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, VALIDITY, value);
	}
	
    /**
     * Sets a value of property Validity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setValidity( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), VALIDITY, value);
	}
    /**
     * Sets a value of property Validity from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setValidity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, VALIDITY, value);
	}
	
    /**
     * Sets a value of property Validity from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setValidity(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), VALIDITY, value);
	}
  


    /**
     * Removes a value of property Validity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeValidity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, VALIDITY, value);
	}
	
    /**
     * Removes a value of property Validity as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeValidity( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), VALIDITY, value);
	}
    /**
     * Removes a value of property Validity given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeValidity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, VALIDITY, value);
	}
	
    /**
     * Removes a value of property Validity given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeValidity(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), VALIDITY, value);
	}
  
    /**
     * Removes all values of property Validity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllValidity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, VALIDITY);
	}
	
    /**
     * Removes all values of property Validity	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllValidity() {
		Base.removeAll(this.model, this.getResource(), VALIDITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e893e53 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WEIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e893e53 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWeight() {
		return Base.has(this.model, this.getResource(), WEIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e893e53 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WEIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e893e53 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWeight( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WEIGHT);
	}

     /**
     * Get all values of property Weight as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWeight_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WEIGHT);
	}
	
    /**
     * Get all values of property Weight as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWeight_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WEIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Weight as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWeight_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WEIGHT);
	}

    /**
     * Get all values of property Weight as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWeight_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WEIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Weight     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllWeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WEIGHT, java.lang.Float.class);
	}
	
    /**
     * Get all values of property Weight as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllWeight_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WEIGHT, java.lang.Float.class);
	}

    /**
     * Get all values of property Weight     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllWeight() {
		return Base.getAll(this.model, this.getResource(), WEIGHT, java.lang.Float.class);
	}

    /**
     * Get all values of property Weight as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllWeight_as() {
		return Base.getAll_as(this.model, this.getResource(), WEIGHT, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property Weight as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WEIGHT, value);
	}
	
    /**
     * Adds a value to property Weight as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWeight( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WEIGHT, value);
	}
    /**
     * Adds a value to property Weight from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, WEIGHT, value);
	}
	
    /**
     * Adds a value to property Weight from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWeight(java.lang.Float value) {
		Base.add(this.model, this.getResource(), WEIGHT, value);
	}
  

    /**
     * Sets a value of property Weight from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WEIGHT, value);
	}
	
    /**
     * Sets a value of property Weight from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWeight( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WEIGHT, value);
	}
    /**
     * Sets a value of property Weight from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, WEIGHT, value);
	}
	
    /**
     * Sets a value of property Weight from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWeight(java.lang.Float value) {
		Base.set(this.model, this.getResource(), WEIGHT, value);
	}
  


    /**
     * Removes a value of property Weight as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WEIGHT, value);
	}
	
    /**
     * Removes a value of property Weight as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWeight( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WEIGHT, value);
	}
    /**
     * Removes a value of property Weight given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, WEIGHT, value);
	}
	
    /**
     * Removes a value of property Weight given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWeight(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), WEIGHT, value);
	}
  
    /**
     * Removes all values of property Weight     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WEIGHT);
	}
	
    /**
     * Removes all values of property Weight	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWeight() {
		Base.removeAll(this.model, this.getResource(), WEIGHT);
	}
 }