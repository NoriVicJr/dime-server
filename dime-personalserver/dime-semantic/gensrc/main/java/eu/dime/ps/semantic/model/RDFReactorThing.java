/*
* Copyright 2013 by the digital.me project (http:\\www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> AccessRights </li>
 *   <li> ActualTime </li>
 *   <li> Alt </li>
 *   <li> AltSymbol </li>
 *   <li> Annotation </li>
 *   <li> Attention </li>
 *   <li> Cardinality </li>
 *   <li> ClassRole </li>
 *   <li> Connectivity </li>
 *   <li> ContextTask </li>
 *   <li> Contributor </li>
 *   <li> Created </li>
 *   <li> Creator </li>
 *   <li> DependencyType </li>
 *   <li> Depends </li>
 *   <li> Deprecated </li>
 *   <li> Description </li>
 *   <li> Disclaimer </li>
 *   <li> Elements1_1Contributor </li>
 *   <li> Elements1_1Creator </li>
 *   <li> Elements1_1Date </li>
 *   <li> Elements1_1Description </li>
 *   <li> Elements1_1Identifier </li>
 *   <li> Elements1_1Language </li>
 *   <li> Elements1_1Modified </li>
 *   <li> Elements1_1Publisher </li>
 *   <li> Elements1_1Source </li>
 *   <li> Elements1_1Subject </li>
 *   <li> Elements1_1Title </li>
 *   <li> EndTime </li>
 *   <li> EndorsedBy </li>
 *   <li> Environment </li>
 *   <li> EventCount </li>
 *   <li> ExifApertureValue </li>
 *   <li> ExifArtist </li>
 *   <li> ExifBitsPerSample </li>
 *   <li> ExifBrightnessValue </li>
 *   <li> ExifCfaPattern </li>
 *   <li> ExifColorSpace </li>
 *   <li> ExifComponentsConfiguration </li>
 *   <li> ExifCompressedBitsPerPixel </li>
 *   <li> ExifCompression </li>
 *   <li> ExifContrast </li>
 *   <li> ExifCopyright </li>
 *   <li> ExifCustomRendered </li>
 *   <li> ExifDatatype </li>
 *   <li> ExifDate </li>
 *   <li> ExifDateAndOrTime </li>
 *   <li> ExifDateTime </li>
 *   <li> ExifDateTimeDigitized </li>
 *   <li> ExifDateTimeOriginal </li>
 *   <li> ExifDeviceSettingDescription </li>
 *   <li> ExifDigitalZoomRatio </li>
 *   <li> ExifExifAttribute </li>
 *   <li> ExifExifIFDPointer </li>
 *   <li> ExifExifVersion </li>
 *   <li> ExifExifdata </li>
 *   <li> ExifExposureBiasValue </li>
 *   <li> ExifExposureIndex </li>
 *   <li> ExifExposureMode </li>
 *   <li> ExifExposureProgram </li>
 *   <li> ExifExposureTime </li>
 *   <li> ExifFNumber </li>
 *   <li> ExifFileSource </li>
 *   <li> ExifFlash </li>
 *   <li> ExifFlashEnergy </li>
 *   <li> ExifFlashpixVersion </li>
 *   <li> ExifFocalLength </li>
 *   <li> ExifFocalLengthIn35mmFilm </li>
 *   <li> ExifFocalPlaneResolutionUnit </li>
 *   <li> ExifFocalPlaneXResolution </li>
 *   <li> ExifFocalPlaneYResolution </li>
 *   <li> ExifGainControl </li>
 *   <li> ExifGeo </li>
 *   <li> ExifGpsAltitudeRef </li>
 *   <li> ExifGpsAreaInformation </li>
 *   <li> ExifGpsDOP </li>
 *   <li> ExifGpsDateStamp </li>
 *   <li> ExifGpsDestBearing </li>
 *   <li> ExifGpsDestBearingRef </li>
 *   <li> ExifGpsDestDistance </li>
 *   <li> ExifGpsDestDistanceRef </li>
 *   <li> ExifGpsDestLatitudeRef </li>
 *   <li> ExifGpsDestLongitudeRef </li>
 *   <li> ExifGpsDifferential </li>
 *   <li> ExifGpsImgDirection </li>
 *   <li> ExifGpsImgDirectionRef </li>
 *   <li> ExifGpsInfo </li>
 *   <li> ExifGpsInfoIFDPointer </li>
 *   <li> ExifGpsLatitudeRef </li>
 *   <li> ExifGpsLongitudeRef </li>
 *   <li> ExifGpsMapDatum </li>
 *   <li> ExifGpsMeasureMode </li>
 *   <li> ExifGpsProcessingMethod </li>
 *   <li> ExifGpsSatellites </li>
 *   <li> ExifGpsSpeed </li>
 *   <li> ExifGpsSpeedRef </li>
 *   <li> ExifGpsStatus </li>
 *   <li> ExifGpsTimeStamp </li>
 *   <li> ExifGpsTrack </li>
 *   <li> ExifGpsTrackRef </li>
 *   <li> ExifGpsVersionID </li>
 *   <li> ExifHeight </li>
 *   <li> ExifIfdPointer </li>
 *   <li> ExifImageConfig </li>
 *   <li> ExifImageDataCharacter </li>
 *   <li> ExifImageDataStruct </li>
 *   <li> ExifImageDescription </li>
 *   <li> ExifImageLength </li>
 *   <li> ExifImageUniqueID </li>
 *   <li> ExifImageWidth </li>
 *   <li> ExifInteropInfo </li>
 *   <li> ExifInteroperabilityIFDPointer </li>
 *   <li> ExifInteroperabilityIndex </li>
 *   <li> ExifInteroperabilityVersion </li>
 *   <li> ExifIsoSpeedRatings </li>
 *   <li> ExifJpegInterchangeFormat </li>
 *   <li> ExifJpegInterchangeFormatLength </li>
 *   <li> ExifLength </li>
 *   <li> ExifLightSource </li>
 *   <li> ExifMake </li>
 *   <li> ExifMakerNote </li>
 *   <li> ExifMaxApertureValue </li>
 *   <li> ExifMeter </li>
 *   <li> ExifMeteringMode </li>
 *   <li> ExifMm </li>
 *   <li> ExifModel </li>
 *   <li> ExifOecf </li>
 *   <li> ExifOrientation </li>
 *   <li> ExifPhotometricInterpretation </li>
 *   <li> ExifPictTaking </li>
 *   <li> ExifPimBrightness </li>
 *   <li> ExifPimColorBalance </li>
 *   <li> ExifPimContrast </li>
 *   <li> ExifPimInfo </li>
 *   <li> ExifPimSaturation </li>
 *   <li> ExifPimSharpness </li>
 *   <li> ExifPixelXDimension </li>
 *   <li> ExifPixelYDimension </li>
 *   <li> ExifPlanarConfiguration </li>
 *   <li> ExifPrimaryChromaticities </li>
 *   <li> ExifPrintImageMatchingIFDPointer </li>
 *   <li> ExifRecOffset </li>
 *   <li> ExifReferenceBlackWhite </li>
 *   <li> ExifRelatedFile </li>
 *   <li> ExifRelatedImageFileFormat </li>
 *   <li> ExifRelatedImageLength </li>
 *   <li> ExifRelatedImageWidth </li>
 *   <li> ExifRelatedSoundFile </li>
 *   <li> ExifResolution </li>
 *   <li> ExifResolutionUnit </li>
 *   <li> ExifRowsPerStrip </li>
 *   <li> ExifSamplesPerPixel </li>
 *   <li> ExifSaturation </li>
 *   <li> ExifSceneCaptureType </li>
 *   <li> ExifSceneType </li>
 *   <li> ExifSeconds </li>
 *   <li> ExifSensingMethod </li>
 *   <li> ExifSharpness </li>
 *   <li> ExifShutterSpeedValue </li>
 *   <li> ExifSoftware </li>
 *   <li> ExifSpatialFrequencyResponse </li>
 *   <li> ExifSpectralSensitivity </li>
 *   <li> ExifStripByteCounts </li>
 *   <li> ExifStripOffsets </li>
 *   <li> ExifSubSecTime </li>
 *   <li> ExifSubSecTimeDigitized </li>
 *   <li> ExifSubSecTimeOriginal </li>
 *   <li> ExifSubjectArea </li>
 *   <li> ExifSubjectDistance </li>
 *   <li> ExifSubjectDistanceRange </li>
 *   <li> ExifSubjectLocation </li>
 *   <li> ExifSubseconds </li>
 *   <li> ExifTagid </li>
 *   <li> ExifTransferFunction </li>
 *   <li> ExifUnknown </li>
 *   <li> ExifUserComment </li>
 *   <li> ExifUserInfo </li>
 *   <li> ExifVersionInfo </li>
 *   <li> ExifWhiteBalance </li>
 *   <li> ExifWhitePoint </li>
 *   <li> ExifWidth </li>
 *   <li> ExifXResolution </li>
 *   <li> ExifYCbCrCoefficients </li>
 *   <li> ExifYCbCrPositioning </li>
 *   <li> ExifYCbCrSubSampling </li>
 *   <li> ExifYResolution </li>
 *   <li> ExternalIdentifier </li>
 *   <li> FavouritedBy </li>
 *   <li> FirstEvent </li>
 *   <li> FirstModification </li>
 *   <li> FirstUsage </li>
 *   <li> FoafMember </li>
 *   <li> FoafName </li>
 *   <li> FrontChannels </li>
 *   <li> GpsDest </li>
 *   <li> GroundingForDeletedThing </li>
 *   <li> Homepage </li>
 *   <li> Identifier </li>
 *   <li> InverseProperty </li>
 *   <li> IsRelated </li>
 *   <li> IsTopicOf </li>
 *   <li> IsWriteable </li>
 *   <li> LastEvent </li>
 *   <li> LastModification </li>
 *   <li> LastModified </li>
 *   <li> LastUsage </li>
 *   <li> Lat </li>
 *   <li> LfeChannels </li>
 *   <li> License </li>
 *   <li> LicenseType </li>
 *   <li> Long </li>
 *   <li> MaintainedBy </li>
 *   <li> MaxCardinality </li>
 *   <li> MinCardinality </li>
 *   <li> ModificationCount </li>
 *   <li> Modified </li>
 *   <li> NaoUpdatable </li>
 *   <li> NieCopyright </li>
 *   <li> NrlMaxCardinality </li>
 *   <li> NsReply </li>
 *   <li> NumericRating </li>
 *   <li> Ontologies20070510nid3FileOwner </li>
 *   <li> OtherConceptualization </li>
 *   <li> OtherSlot </li>
 *   <li> Page </li>
 *   <li> Peers </li>
 *   <li> PersonalIdentifier </li>
 *   <li> PluralPrefLabel </li>
 *   <li> PrefSymbol </li>
 *   <li> PreferredNamespacePrefix </li>
 *   <li> PreferredNamespaceUri </li>
 *   <li> PrivacyLevel </li>
 *   <li> Progress </li>
 *   <li> Rating </li>
 *   <li> RearChannels </li>
 *   <li> Relation </li>
 *   <li> Replyof </li>
 *   <li> Rights </li>
 *   <li> Schedule </li>
 *   <li> Score </li>
 *   <li> ScoreParameter </li>
 *   <li> SharedBy </li>
 *   <li> SharedWith </li>
 *   <li> SharedWithContact </li>
 *   <li> SharedWithGroup </li>
 *   <li> SideChannels </li>
 *   <li> Source </li>
 *   <li> SpaTem </li>
 *   <li> StartTime </li>
 *   <li> State </li>
 *   <li> StateTypeRole </li>
 *   <li> SubResource </li>
 *   <li> Subsecond </li>
 *   <li> SuperResource </li>
 *   <li> Symbol </li>
 *   <li> SystemRole </li>
 *   <li> Tag </li>
 *   <li> Tagnumber </li>
 *   <li> TargetTime </li>
 *   <li> TermsCreated </li>
 *   <li> TermsIsPartOf </li>
 *   <li> TermsLicense </li>
 *   <li> TermsModified </li>
 *   <li> TermsPart </li>
 *   <li> TermsVersion </li>
 *   <li> Timemanagement </li>
 *   <li> TmoDateTime </li>
 *   <li> Topic </li>
 *   <li> TotalEventDuration </li>
 *   <li> TotalModificationDuration </li>
 *   <li> TotalUsageDuration </li>
 *   <li> Type </li>
 *   <li> UsageCount </li>
 *   <li> UserVisible </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class RDFReactorThing extends org.ontoware.rdfreactor.schema.rdfs.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://purl.org/dc/terms/accessRights */
    @SuppressWarnings("hiding")
	public static final URI ACCESSRIGHTS = new URIImpl("http://purl.org/dc/terms/accessRights",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#actualTime */
    @SuppressWarnings("hiding")
	public static final URI ACTUALTIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#actualTime",false);

    /** http://www.w3.org/2003/01/geo/wgs84_pos#alt */
    @SuppressWarnings("hiding")
	public static final URI ALT = new URIImpl("http://www.w3.org/2003/01/geo/wgs84_pos#alt",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#altSymbol */
    @SuppressWarnings("hiding")
	public static final URI ALTSYMBOL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#altSymbol",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#annotation */
    @SuppressWarnings("hiding")
	public static final URI ANNOTATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#annotation",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasAttention */
    @SuppressWarnings("hiding")
	public static final URI ATTENTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasAttention",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#cardinality */
    @SuppressWarnings("hiding")
	public static final URI CARDINALITY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#cardinality",false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#classRole */
    @SuppressWarnings("hiding")
	public static final URI CLASSROLE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#classRole",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasConnectivity */
    @SuppressWarnings("hiding")
	public static final URI CONNECTIVITY = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasConnectivity",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#contextTask */
    @SuppressWarnings("hiding")
	public static final URI CONTEXTTASK = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#contextTask",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#contributor */
    @SuppressWarnings("hiding")
	public static final URI CONTRIBUTOR = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#contributor",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#created */
    @SuppressWarnings("hiding")
	public static final URI CREATED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#created",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#creator */
    @SuppressWarnings("hiding")
	public static final URI CREATOR = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#creator",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#dependencyType */
    @SuppressWarnings("hiding")
	public static final URI DEPENDENCYTYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#dependencyType",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#depends */
    @SuppressWarnings("hiding")
	public static final URI DEPENDS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#depends",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#deprecated */
    @SuppressWarnings("hiding")
	public static final URI DEPRECATED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#deprecated",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#description */
    @SuppressWarnings("hiding")
	public static final URI DESCRIPTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#description",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#disclaimer */
    @SuppressWarnings("hiding")
	public static final URI DISCLAIMER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#disclaimer",false);

    /** http://purl.org/dc/elements/1.1/contributor */
    @SuppressWarnings("hiding")
	public static final URI ELEMENTS1_1CONTRIBUTOR = new URIImpl("http://purl.org/dc/elements/1.1/contributor",false);

    /** http://purl.org/dc/elements/1.1/creator */
    @SuppressWarnings("hiding")
	public static final URI ELEMENTS1_1CREATOR = new URIImpl("http://purl.org/dc/elements/1.1/creator",false);

    /** http://purl.org/dc/elements/1.1/date */
    @SuppressWarnings("hiding")
	public static final URI ELEMENTS1_1DATE = new URIImpl("http://purl.org/dc/elements/1.1/date",false);

    /** http://purl.org/dc/elements/1.1/description */
    @SuppressWarnings("hiding")
	public static final URI ELEMENTS1_1DESCRIPTION = new URIImpl("http://purl.org/dc/elements/1.1/description",false);

    /** http://purl.org/dc/elements/1.1/identifier */
    @SuppressWarnings("hiding")
	public static final URI ELEMENTS1_1IDENTIFIER = new URIImpl("http://purl.org/dc/elements/1.1/identifier",false);

    /** http://purl.org/dc/elements/1.1/language */
    @SuppressWarnings("hiding")
	public static final URI ELEMENTS1_1LANGUAGE = new URIImpl("http://purl.org/dc/elements/1.1/language",false);

    /** http://purl.org/dc/elements/1.1/modified */
    @SuppressWarnings("hiding")
	public static final URI ELEMENTS1_1MODIFIED = new URIImpl("http://purl.org/dc/elements/1.1/modified",false);

    /** http://purl.org/dc/elements/1.1/publisher */
    @SuppressWarnings("hiding")
	public static final URI ELEMENTS1_1PUBLISHER = new URIImpl("http://purl.org/dc/elements/1.1/publisher",false);

    /** http://purl.org/dc/elements/1.1/source */
    @SuppressWarnings("hiding")
	public static final URI ELEMENTS1_1SOURCE = new URIImpl("http://purl.org/dc/elements/1.1/source",false);

    /** http://purl.org/dc/elements/1.1/subject */
    @SuppressWarnings("hiding")
	public static final URI ELEMENTS1_1SUBJECT = new URIImpl("http://purl.org/dc/elements/1.1/subject",false);

    /** http://purl.org/dc/elements/1.1/title */
    @SuppressWarnings("hiding")
	public static final URI ELEMENTS1_1TITLE = new URIImpl("http://purl.org/dc/elements/1.1/title",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#endTime */
    @SuppressWarnings("hiding")
	public static final URI ENDTIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#endTime",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#endorsedBy */
    @SuppressWarnings("hiding")
	public static final URI ENDORSEDBY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#endorsedBy",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasEnvironment */
    @SuppressWarnings("hiding")
	public static final URI ENVIRONMENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasEnvironment",false);

    /** http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#eventCount */
    @SuppressWarnings("hiding")
	public static final URI EVENTCOUNT = new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#eventCount",false);

    /** http://www.kanzaki.com/ns/exif#apertureValue */
    @SuppressWarnings("hiding")
	public static final URI EXIFAPERTUREVALUE = new URIImpl("http://www.kanzaki.com/ns/exif#apertureValue",false);

    /** http://www.kanzaki.com/ns/exif#artist */
    @SuppressWarnings("hiding")
	public static final URI EXIFARTIST = new URIImpl("http://www.kanzaki.com/ns/exif#artist",false);

    /** http://www.kanzaki.com/ns/exif#bitsPerSample */
    @SuppressWarnings("hiding")
	public static final URI EXIFBITSPERSAMPLE = new URIImpl("http://www.kanzaki.com/ns/exif#bitsPerSample",false);

    /** http://www.kanzaki.com/ns/exif#brightnessValue */
    @SuppressWarnings("hiding")
	public static final URI EXIFBRIGHTNESSVALUE = new URIImpl("http://www.kanzaki.com/ns/exif#brightnessValue",false);

    /** http://www.kanzaki.com/ns/exif#cfaPattern */
    @SuppressWarnings("hiding")
	public static final URI EXIFCFAPATTERN = new URIImpl("http://www.kanzaki.com/ns/exif#cfaPattern",false);

    /** http://www.kanzaki.com/ns/exif#colorSpace */
    @SuppressWarnings("hiding")
	public static final URI EXIFCOLORSPACE = new URIImpl("http://www.kanzaki.com/ns/exif#colorSpace",false);

    /** http://www.kanzaki.com/ns/exif#componentsConfiguration */
    @SuppressWarnings("hiding")
	public static final URI EXIFCOMPONENTSCONFIGURATION = new URIImpl("http://www.kanzaki.com/ns/exif#componentsConfiguration",false);

    /** http://www.kanzaki.com/ns/exif#compressedBitsPerPixel */
    @SuppressWarnings("hiding")
	public static final URI EXIFCOMPRESSEDBITSPERPIXEL = new URIImpl("http://www.kanzaki.com/ns/exif#compressedBitsPerPixel",false);

    /** http://www.kanzaki.com/ns/exif#compression */
    @SuppressWarnings("hiding")
	public static final URI EXIFCOMPRESSION = new URIImpl("http://www.kanzaki.com/ns/exif#compression",false);

    /** http://www.kanzaki.com/ns/exif#contrast */
    @SuppressWarnings("hiding")
	public static final URI EXIFCONTRAST = new URIImpl("http://www.kanzaki.com/ns/exif#contrast",false);

    /** http://www.kanzaki.com/ns/exif#copyright */
    @SuppressWarnings("hiding")
	public static final URI EXIFCOPYRIGHT = new URIImpl("http://www.kanzaki.com/ns/exif#copyright",false);

    /** http://www.kanzaki.com/ns/exif#customRendered */
    @SuppressWarnings("hiding")
	public static final URI EXIFCUSTOMRENDERED = new URIImpl("http://www.kanzaki.com/ns/exif#customRendered",false);

    /** http://www.kanzaki.com/ns/exif#datatype */
    @SuppressWarnings("hiding")
	public static final URI EXIFDATATYPE = new URIImpl("http://www.kanzaki.com/ns/exif#datatype",false);

    /** http://www.kanzaki.com/ns/exif#date */
    @SuppressWarnings("hiding")
	public static final URI EXIFDATE = new URIImpl("http://www.kanzaki.com/ns/exif#date",false);

    /** http://www.kanzaki.com/ns/exif#dateAndOrTime */
    @SuppressWarnings("hiding")
	public static final URI EXIFDATEANDORTIME = new URIImpl("http://www.kanzaki.com/ns/exif#dateAndOrTime",false);

    /** http://www.kanzaki.com/ns/exif#dateTime */
    @SuppressWarnings("hiding")
	public static final URI EXIFDATETIME = new URIImpl("http://www.kanzaki.com/ns/exif#dateTime",false);

    /** http://www.kanzaki.com/ns/exif#dateTimeDigitized */
    @SuppressWarnings("hiding")
	public static final URI EXIFDATETIMEDIGITIZED = new URIImpl("http://www.kanzaki.com/ns/exif#dateTimeDigitized",false);

    /** http://www.kanzaki.com/ns/exif#dateTimeOriginal */
    @SuppressWarnings("hiding")
	public static final URI EXIFDATETIMEORIGINAL = new URIImpl("http://www.kanzaki.com/ns/exif#dateTimeOriginal",false);

    /** http://www.kanzaki.com/ns/exif#deviceSettingDescription */
    @SuppressWarnings("hiding")
	public static final URI EXIFDEVICESETTINGDESCRIPTION = new URIImpl("http://www.kanzaki.com/ns/exif#deviceSettingDescription",false);

    /** http://www.kanzaki.com/ns/exif#digitalZoomRatio */
    @SuppressWarnings("hiding")
	public static final URI EXIFDIGITALZOOMRATIO = new URIImpl("http://www.kanzaki.com/ns/exif#digitalZoomRatio",false);

    /** http://www.kanzaki.com/ns/exif#exifAttribute */
    @SuppressWarnings("hiding")
	public static final URI EXIFEXIFATTRIBUTE = new URIImpl("http://www.kanzaki.com/ns/exif#exifAttribute",false);

    /** http://www.kanzaki.com/ns/exif#exif_IFD_Pointer */
    @SuppressWarnings("hiding")
	public static final URI EXIFEXIFIFDPOINTER = new URIImpl("http://www.kanzaki.com/ns/exif#exif_IFD_Pointer",false);

    /** http://www.kanzaki.com/ns/exif#exifVersion */
    @SuppressWarnings("hiding")
	public static final URI EXIFEXIFVERSION = new URIImpl("http://www.kanzaki.com/ns/exif#exifVersion",false);

    /** http://www.kanzaki.com/ns/exif#exifdata */
    @SuppressWarnings("hiding")
	public static final URI EXIFEXIFDATA = new URIImpl("http://www.kanzaki.com/ns/exif#exifdata",false);

    /** http://www.kanzaki.com/ns/exif#exposureBiasValue */
    @SuppressWarnings("hiding")
	public static final URI EXIFEXPOSUREBIASVALUE = new URIImpl("http://www.kanzaki.com/ns/exif#exposureBiasValue",false);

    /** http://www.kanzaki.com/ns/exif#exposureIndex */
    @SuppressWarnings("hiding")
	public static final URI EXIFEXPOSUREINDEX = new URIImpl("http://www.kanzaki.com/ns/exif#exposureIndex",false);

    /** http://www.kanzaki.com/ns/exif#exposureMode */
    @SuppressWarnings("hiding")
	public static final URI EXIFEXPOSUREMODE = new URIImpl("http://www.kanzaki.com/ns/exif#exposureMode",false);

    /** http://www.kanzaki.com/ns/exif#exposureProgram */
    @SuppressWarnings("hiding")
	public static final URI EXIFEXPOSUREPROGRAM = new URIImpl("http://www.kanzaki.com/ns/exif#exposureProgram",false);

    /** http://www.kanzaki.com/ns/exif#exposureTime */
    @SuppressWarnings("hiding")
	public static final URI EXIFEXPOSURETIME = new URIImpl("http://www.kanzaki.com/ns/exif#exposureTime",false);

    /** http://www.kanzaki.com/ns/exif#fNumber */
    @SuppressWarnings("hiding")
	public static final URI EXIFFNUMBER = new URIImpl("http://www.kanzaki.com/ns/exif#fNumber",false);

    /** http://www.kanzaki.com/ns/exif#fileSource */
    @SuppressWarnings("hiding")
	public static final URI EXIFFILESOURCE = new URIImpl("http://www.kanzaki.com/ns/exif#fileSource",false);

    /** http://www.kanzaki.com/ns/exif#flash */
    @SuppressWarnings("hiding")
	public static final URI EXIFFLASH = new URIImpl("http://www.kanzaki.com/ns/exif#flash",false);

    /** http://www.kanzaki.com/ns/exif#flashEnergy */
    @SuppressWarnings("hiding")
	public static final URI EXIFFLASHENERGY = new URIImpl("http://www.kanzaki.com/ns/exif#flashEnergy",false);

    /** http://www.kanzaki.com/ns/exif#flashpixVersion */
    @SuppressWarnings("hiding")
	public static final URI EXIFFLASHPIXVERSION = new URIImpl("http://www.kanzaki.com/ns/exif#flashpixVersion",false);

    /** http://www.kanzaki.com/ns/exif#focalLength */
    @SuppressWarnings("hiding")
	public static final URI EXIFFOCALLENGTH = new URIImpl("http://www.kanzaki.com/ns/exif#focalLength",false);

    /** http://www.kanzaki.com/ns/exif#focalLengthIn35mmFilm */
    @SuppressWarnings("hiding")
	public static final URI EXIFFOCALLENGTHIN35MMFILM = new URIImpl("http://www.kanzaki.com/ns/exif#focalLengthIn35mmFilm",false);

    /** http://www.kanzaki.com/ns/exif#focalPlaneResolutionUnit */
    @SuppressWarnings("hiding")
	public static final URI EXIFFOCALPLANERESOLUTIONUNIT = new URIImpl("http://www.kanzaki.com/ns/exif#focalPlaneResolutionUnit",false);

    /** http://www.kanzaki.com/ns/exif#focalPlaneXResolution */
    @SuppressWarnings("hiding")
	public static final URI EXIFFOCALPLANEXRESOLUTION = new URIImpl("http://www.kanzaki.com/ns/exif#focalPlaneXResolution",false);

    /** http://www.kanzaki.com/ns/exif#focalPlaneYResolution */
    @SuppressWarnings("hiding")
	public static final URI EXIFFOCALPLANEYRESOLUTION = new URIImpl("http://www.kanzaki.com/ns/exif#focalPlaneYResolution",false);

    /** http://www.kanzaki.com/ns/exif#gainControl */
    @SuppressWarnings("hiding")
	public static final URI EXIFGAINCONTROL = new URIImpl("http://www.kanzaki.com/ns/exif#gainControl",false);

    /** http://www.kanzaki.com/ns/exif#geo */
    @SuppressWarnings("hiding")
	public static final URI EXIFGEO = new URIImpl("http://www.kanzaki.com/ns/exif#geo",false);

    /** http://www.kanzaki.com/ns/exif#gpsAltitudeRef */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSALTITUDEREF = new URIImpl("http://www.kanzaki.com/ns/exif#gpsAltitudeRef",false);

    /** http://www.kanzaki.com/ns/exif#gpsAreaInformation */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSAREAINFORMATION = new URIImpl("http://www.kanzaki.com/ns/exif#gpsAreaInformation",false);

    /** http://www.kanzaki.com/ns/exif#gpsDOP */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSDOP = new URIImpl("http://www.kanzaki.com/ns/exif#gpsDOP",false);

    /** http://www.kanzaki.com/ns/exif#gpsDateStamp */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSDATESTAMP = new URIImpl("http://www.kanzaki.com/ns/exif#gpsDateStamp",false);

    /** http://www.kanzaki.com/ns/exif#gpsDestBearing */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSDESTBEARING = new URIImpl("http://www.kanzaki.com/ns/exif#gpsDestBearing",false);

    /** http://www.kanzaki.com/ns/exif#gpsDestBearingRef */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSDESTBEARINGREF = new URIImpl("http://www.kanzaki.com/ns/exif#gpsDestBearingRef",false);

    /** http://www.kanzaki.com/ns/exif#gpsDestDistance */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSDESTDISTANCE = new URIImpl("http://www.kanzaki.com/ns/exif#gpsDestDistance",false);

    /** http://www.kanzaki.com/ns/exif#gpsDestDistanceRef */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSDESTDISTANCEREF = new URIImpl("http://www.kanzaki.com/ns/exif#gpsDestDistanceRef",false);

    /** http://www.kanzaki.com/ns/exif#gpsDestLatitudeRef */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSDESTLATITUDEREF = new URIImpl("http://www.kanzaki.com/ns/exif#gpsDestLatitudeRef",false);

    /** http://www.kanzaki.com/ns/exif#gpsDestLongitudeRef */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSDESTLONGITUDEREF = new URIImpl("http://www.kanzaki.com/ns/exif#gpsDestLongitudeRef",false);

    /** http://www.kanzaki.com/ns/exif#gpsDifferential */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSDIFFERENTIAL = new URIImpl("http://www.kanzaki.com/ns/exif#gpsDifferential",false);

    /** http://www.kanzaki.com/ns/exif#gpsImgDirection */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSIMGDIRECTION = new URIImpl("http://www.kanzaki.com/ns/exif#gpsImgDirection",false);

    /** http://www.kanzaki.com/ns/exif#gpsImgDirectionRef */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSIMGDIRECTIONREF = new URIImpl("http://www.kanzaki.com/ns/exif#gpsImgDirectionRef",false);

    /** http://www.kanzaki.com/ns/exif#gpsInfo */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSINFO = new URIImpl("http://www.kanzaki.com/ns/exif#gpsInfo",false);

    /** http://www.kanzaki.com/ns/exif#gpsInfo_IFD_Pointer */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSINFOIFDPOINTER = new URIImpl("http://www.kanzaki.com/ns/exif#gpsInfo_IFD_Pointer",false);

    /** http://www.kanzaki.com/ns/exif#gpsLatitudeRef */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSLATITUDEREF = new URIImpl("http://www.kanzaki.com/ns/exif#gpsLatitudeRef",false);

    /** http://www.kanzaki.com/ns/exif#gpsLongitudeRef */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSLONGITUDEREF = new URIImpl("http://www.kanzaki.com/ns/exif#gpsLongitudeRef",false);

    /** http://www.kanzaki.com/ns/exif#gpsMapDatum */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSMAPDATUM = new URIImpl("http://www.kanzaki.com/ns/exif#gpsMapDatum",false);

    /** http://www.kanzaki.com/ns/exif#gpsMeasureMode */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSMEASUREMODE = new URIImpl("http://www.kanzaki.com/ns/exif#gpsMeasureMode",false);

    /** http://www.kanzaki.com/ns/exif#gpsProcessingMethod */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSPROCESSINGMETHOD = new URIImpl("http://www.kanzaki.com/ns/exif#gpsProcessingMethod",false);

    /** http://www.kanzaki.com/ns/exif#gpsSatellites */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSSATELLITES = new URIImpl("http://www.kanzaki.com/ns/exif#gpsSatellites",false);

    /** http://www.kanzaki.com/ns/exif#gpsSpeed */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSSPEED = new URIImpl("http://www.kanzaki.com/ns/exif#gpsSpeed",false);

    /** http://www.kanzaki.com/ns/exif#gpsSpeedRef */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSSPEEDREF = new URIImpl("http://www.kanzaki.com/ns/exif#gpsSpeedRef",false);

    /** http://www.kanzaki.com/ns/exif#gpsStatus */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSSTATUS = new URIImpl("http://www.kanzaki.com/ns/exif#gpsStatus",false);

    /** http://www.kanzaki.com/ns/exif#gpsTimeStamp */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSTIMESTAMP = new URIImpl("http://www.kanzaki.com/ns/exif#gpsTimeStamp",false);

    /** http://www.kanzaki.com/ns/exif#gpsTrack */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSTRACK = new URIImpl("http://www.kanzaki.com/ns/exif#gpsTrack",false);

    /** http://www.kanzaki.com/ns/exif#gpsTrackRef */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSTRACKREF = new URIImpl("http://www.kanzaki.com/ns/exif#gpsTrackRef",false);

    /** http://www.kanzaki.com/ns/exif#gpsVersionID */
    @SuppressWarnings("hiding")
	public static final URI EXIFGPSVERSIONID = new URIImpl("http://www.kanzaki.com/ns/exif#gpsVersionID",false);

    /** http://www.kanzaki.com/ns/exif#height */
    @SuppressWarnings("hiding")
	public static final URI EXIFHEIGHT = new URIImpl("http://www.kanzaki.com/ns/exif#height",false);

    /** http://www.kanzaki.com/ns/exif#ifdPointer */
    @SuppressWarnings("hiding")
	public static final URI EXIFIFDPOINTER = new URIImpl("http://www.kanzaki.com/ns/exif#ifdPointer",false);

    /** http://www.kanzaki.com/ns/exif#imageConfig */
    @SuppressWarnings("hiding")
	public static final URI EXIFIMAGECONFIG = new URIImpl("http://www.kanzaki.com/ns/exif#imageConfig",false);

    /** http://www.kanzaki.com/ns/exif#imageDataCharacter */
    @SuppressWarnings("hiding")
	public static final URI EXIFIMAGEDATACHARACTER = new URIImpl("http://www.kanzaki.com/ns/exif#imageDataCharacter",false);

    /** http://www.kanzaki.com/ns/exif#imageDataStruct */
    @SuppressWarnings("hiding")
	public static final URI EXIFIMAGEDATASTRUCT = new URIImpl("http://www.kanzaki.com/ns/exif#imageDataStruct",false);

    /** http://www.kanzaki.com/ns/exif#imageDescription */
    @SuppressWarnings("hiding")
	public static final URI EXIFIMAGEDESCRIPTION = new URIImpl("http://www.kanzaki.com/ns/exif#imageDescription",false);

    /** http://www.kanzaki.com/ns/exif#imageLength */
    @SuppressWarnings("hiding")
	public static final URI EXIFIMAGELENGTH = new URIImpl("http://www.kanzaki.com/ns/exif#imageLength",false);

    /** http://www.kanzaki.com/ns/exif#imageUniqueID */
    @SuppressWarnings("hiding")
	public static final URI EXIFIMAGEUNIQUEID = new URIImpl("http://www.kanzaki.com/ns/exif#imageUniqueID",false);

    /** http://www.kanzaki.com/ns/exif#imageWidth */
    @SuppressWarnings("hiding")
	public static final URI EXIFIMAGEWIDTH = new URIImpl("http://www.kanzaki.com/ns/exif#imageWidth",false);

    /** http://www.kanzaki.com/ns/exif#interopInfo */
    @SuppressWarnings("hiding")
	public static final URI EXIFINTEROPINFO = new URIImpl("http://www.kanzaki.com/ns/exif#interopInfo",false);

    /** http://www.kanzaki.com/ns/exif#interoperability_IFD_Pointer */
    @SuppressWarnings("hiding")
	public static final URI EXIFINTEROPERABILITYIFDPOINTER = new URIImpl("http://www.kanzaki.com/ns/exif#interoperability_IFD_Pointer",false);

    /** http://www.kanzaki.com/ns/exif#interoperabilityIndex */
    @SuppressWarnings("hiding")
	public static final URI EXIFINTEROPERABILITYINDEX = new URIImpl("http://www.kanzaki.com/ns/exif#interoperabilityIndex",false);

    /** http://www.kanzaki.com/ns/exif#interoperabilityVersion */
    @SuppressWarnings("hiding")
	public static final URI EXIFINTEROPERABILITYVERSION = new URIImpl("http://www.kanzaki.com/ns/exif#interoperabilityVersion",false);

    /** http://www.kanzaki.com/ns/exif#isoSpeedRatings */
    @SuppressWarnings("hiding")
	public static final URI EXIFISOSPEEDRATINGS = new URIImpl("http://www.kanzaki.com/ns/exif#isoSpeedRatings",false);

    /** http://www.kanzaki.com/ns/exif#jpegInterchangeFormat */
    @SuppressWarnings("hiding")
	public static final URI EXIFJPEGINTERCHANGEFORMAT = new URIImpl("http://www.kanzaki.com/ns/exif#jpegInterchangeFormat",false);

    /** http://www.kanzaki.com/ns/exif#jpegInterchangeFormatLength */
    @SuppressWarnings("hiding")
	public static final URI EXIFJPEGINTERCHANGEFORMATLENGTH = new URIImpl("http://www.kanzaki.com/ns/exif#jpegInterchangeFormatLength",false);

    /** http://www.kanzaki.com/ns/exif#length */
    @SuppressWarnings("hiding")
	public static final URI EXIFLENGTH = new URIImpl("http://www.kanzaki.com/ns/exif#length",false);

    /** http://www.kanzaki.com/ns/exif#lightSource */
    @SuppressWarnings("hiding")
	public static final URI EXIFLIGHTSOURCE = new URIImpl("http://www.kanzaki.com/ns/exif#lightSource",false);

    /** http://www.kanzaki.com/ns/exif#make */
    @SuppressWarnings("hiding")
	public static final URI EXIFMAKE = new URIImpl("http://www.kanzaki.com/ns/exif#make",false);

    /** http://www.kanzaki.com/ns/exif#makerNote */
    @SuppressWarnings("hiding")
	public static final URI EXIFMAKERNOTE = new URIImpl("http://www.kanzaki.com/ns/exif#makerNote",false);

    /** http://www.kanzaki.com/ns/exif#maxApertureValue */
    @SuppressWarnings("hiding")
	public static final URI EXIFMAXAPERTUREVALUE = new URIImpl("http://www.kanzaki.com/ns/exif#maxApertureValue",false);

    /** http://www.kanzaki.com/ns/exif#meter */
    @SuppressWarnings("hiding")
	public static final URI EXIFMETER = new URIImpl("http://www.kanzaki.com/ns/exif#meter",false);

    /** http://www.kanzaki.com/ns/exif#meteringMode */
    @SuppressWarnings("hiding")
	public static final URI EXIFMETERINGMODE = new URIImpl("http://www.kanzaki.com/ns/exif#meteringMode",false);

    /** http://www.kanzaki.com/ns/exif#mm */
    @SuppressWarnings("hiding")
	public static final URI EXIFMM = new URIImpl("http://www.kanzaki.com/ns/exif#mm",false);

    /** http://www.kanzaki.com/ns/exif#model */
    @SuppressWarnings("hiding")
	public static final URI EXIFMODEL = new URIImpl("http://www.kanzaki.com/ns/exif#model",false);

    /** http://www.kanzaki.com/ns/exif#oecf */
    @SuppressWarnings("hiding")
	public static final URI EXIFOECF = new URIImpl("http://www.kanzaki.com/ns/exif#oecf",false);

    /** http://www.kanzaki.com/ns/exif#orientation */
    @SuppressWarnings("hiding")
	public static final URI EXIFORIENTATION = new URIImpl("http://www.kanzaki.com/ns/exif#orientation",false);

    /** http://www.kanzaki.com/ns/exif#photometricInterpretation */
    @SuppressWarnings("hiding")
	public static final URI EXIFPHOTOMETRICINTERPRETATION = new URIImpl("http://www.kanzaki.com/ns/exif#photometricInterpretation",false);

    /** http://www.kanzaki.com/ns/exif#pictTaking */
    @SuppressWarnings("hiding")
	public static final URI EXIFPICTTAKING = new URIImpl("http://www.kanzaki.com/ns/exif#pictTaking",false);

    /** http://www.kanzaki.com/ns/exif#pimBrightness */
    @SuppressWarnings("hiding")
	public static final URI EXIFPIMBRIGHTNESS = new URIImpl("http://www.kanzaki.com/ns/exif#pimBrightness",false);

    /** http://www.kanzaki.com/ns/exif#pimColorBalance */
    @SuppressWarnings("hiding")
	public static final URI EXIFPIMCOLORBALANCE = new URIImpl("http://www.kanzaki.com/ns/exif#pimColorBalance",false);

    /** http://www.kanzaki.com/ns/exif#pimContrast */
    @SuppressWarnings("hiding")
	public static final URI EXIFPIMCONTRAST = new URIImpl("http://www.kanzaki.com/ns/exif#pimContrast",false);

    /** http://www.kanzaki.com/ns/exif#pimInfo */
    @SuppressWarnings("hiding")
	public static final URI EXIFPIMINFO = new URIImpl("http://www.kanzaki.com/ns/exif#pimInfo",false);

    /** http://www.kanzaki.com/ns/exif#pimSaturation */
    @SuppressWarnings("hiding")
	public static final URI EXIFPIMSATURATION = new URIImpl("http://www.kanzaki.com/ns/exif#pimSaturation",false);

    /** http://www.kanzaki.com/ns/exif#pimSharpness */
    @SuppressWarnings("hiding")
	public static final URI EXIFPIMSHARPNESS = new URIImpl("http://www.kanzaki.com/ns/exif#pimSharpness",false);

    /** http://www.kanzaki.com/ns/exif#pixelXDimension */
    @SuppressWarnings("hiding")
	public static final URI EXIFPIXELXDIMENSION = new URIImpl("http://www.kanzaki.com/ns/exif#pixelXDimension",false);

    /** http://www.kanzaki.com/ns/exif#pixelYDimension */
    @SuppressWarnings("hiding")
	public static final URI EXIFPIXELYDIMENSION = new URIImpl("http://www.kanzaki.com/ns/exif#pixelYDimension",false);

    /** http://www.kanzaki.com/ns/exif#planarConfiguration */
    @SuppressWarnings("hiding")
	public static final URI EXIFPLANARCONFIGURATION = new URIImpl("http://www.kanzaki.com/ns/exif#planarConfiguration",false);

    /** http://www.kanzaki.com/ns/exif#primaryChromaticities */
    @SuppressWarnings("hiding")
	public static final URI EXIFPRIMARYCHROMATICITIES = new URIImpl("http://www.kanzaki.com/ns/exif#primaryChromaticities",false);

    /** http://www.kanzaki.com/ns/exif#printImageMatching_IFD_Pointer */
    @SuppressWarnings("hiding")
	public static final URI EXIFPRINTIMAGEMATCHINGIFDPOINTER = new URIImpl("http://www.kanzaki.com/ns/exif#printImageMatching_IFD_Pointer",false);

    /** http://www.kanzaki.com/ns/exif#recOffset */
    @SuppressWarnings("hiding")
	public static final URI EXIFRECOFFSET = new URIImpl("http://www.kanzaki.com/ns/exif#recOffset",false);

    /** http://www.kanzaki.com/ns/exif#referenceBlackWhite */
    @SuppressWarnings("hiding")
	public static final URI EXIFREFERENCEBLACKWHITE = new URIImpl("http://www.kanzaki.com/ns/exif#referenceBlackWhite",false);

    /** http://www.kanzaki.com/ns/exif#relatedFile */
    @SuppressWarnings("hiding")
	public static final URI EXIFRELATEDFILE = new URIImpl("http://www.kanzaki.com/ns/exif#relatedFile",false);

    /** http://www.kanzaki.com/ns/exif#relatedImageFileFormat */
    @SuppressWarnings("hiding")
	public static final URI EXIFRELATEDIMAGEFILEFORMAT = new URIImpl("http://www.kanzaki.com/ns/exif#relatedImageFileFormat",false);

    /** http://www.kanzaki.com/ns/exif#relatedImageLength */
    @SuppressWarnings("hiding")
	public static final URI EXIFRELATEDIMAGELENGTH = new URIImpl("http://www.kanzaki.com/ns/exif#relatedImageLength",false);

    /** http://www.kanzaki.com/ns/exif#relatedImageWidth */
    @SuppressWarnings("hiding")
	public static final URI EXIFRELATEDIMAGEWIDTH = new URIImpl("http://www.kanzaki.com/ns/exif#relatedImageWidth",false);

    /** http://www.kanzaki.com/ns/exif#relatedSoundFile */
    @SuppressWarnings("hiding")
	public static final URI EXIFRELATEDSOUNDFILE = new URIImpl("http://www.kanzaki.com/ns/exif#relatedSoundFile",false);

    /** http://www.kanzaki.com/ns/exif#resolution */
    @SuppressWarnings("hiding")
	public static final URI EXIFRESOLUTION = new URIImpl("http://www.kanzaki.com/ns/exif#resolution",false);

    /** http://www.kanzaki.com/ns/exif#resolutionUnit */
    @SuppressWarnings("hiding")
	public static final URI EXIFRESOLUTIONUNIT = new URIImpl("http://www.kanzaki.com/ns/exif#resolutionUnit",false);

    /** http://www.kanzaki.com/ns/exif#rowsPerStrip */
    @SuppressWarnings("hiding")
	public static final URI EXIFROWSPERSTRIP = new URIImpl("http://www.kanzaki.com/ns/exif#rowsPerStrip",false);

    /** http://www.kanzaki.com/ns/exif#samplesPerPixel */
    @SuppressWarnings("hiding")
	public static final URI EXIFSAMPLESPERPIXEL = new URIImpl("http://www.kanzaki.com/ns/exif#samplesPerPixel",false);

    /** http://www.kanzaki.com/ns/exif#saturation */
    @SuppressWarnings("hiding")
	public static final URI EXIFSATURATION = new URIImpl("http://www.kanzaki.com/ns/exif#saturation",false);

    /** http://www.kanzaki.com/ns/exif#sceneCaptureType */
    @SuppressWarnings("hiding")
	public static final URI EXIFSCENECAPTURETYPE = new URIImpl("http://www.kanzaki.com/ns/exif#sceneCaptureType",false);

    /** http://www.kanzaki.com/ns/exif#sceneType */
    @SuppressWarnings("hiding")
	public static final URI EXIFSCENETYPE = new URIImpl("http://www.kanzaki.com/ns/exif#sceneType",false);

    /** http://www.kanzaki.com/ns/exif#seconds */
    @SuppressWarnings("hiding")
	public static final URI EXIFSECONDS = new URIImpl("http://www.kanzaki.com/ns/exif#seconds",false);

    /** http://www.kanzaki.com/ns/exif#sensingMethod */
    @SuppressWarnings("hiding")
	public static final URI EXIFSENSINGMETHOD = new URIImpl("http://www.kanzaki.com/ns/exif#sensingMethod",false);

    /** http://www.kanzaki.com/ns/exif#sharpness */
    @SuppressWarnings("hiding")
	public static final URI EXIFSHARPNESS = new URIImpl("http://www.kanzaki.com/ns/exif#sharpness",false);

    /** http://www.kanzaki.com/ns/exif#shutterSpeedValue */
    @SuppressWarnings("hiding")
	public static final URI EXIFSHUTTERSPEEDVALUE = new URIImpl("http://www.kanzaki.com/ns/exif#shutterSpeedValue",false);

    /** http://www.kanzaki.com/ns/exif#software */
    @SuppressWarnings("hiding")
	public static final URI EXIFSOFTWARE = new URIImpl("http://www.kanzaki.com/ns/exif#software",false);

    /** http://www.kanzaki.com/ns/exif#spatialFrequencyResponse */
    @SuppressWarnings("hiding")
	public static final URI EXIFSPATIALFREQUENCYRESPONSE = new URIImpl("http://www.kanzaki.com/ns/exif#spatialFrequencyResponse",false);

    /** http://www.kanzaki.com/ns/exif#spectralSensitivity */
    @SuppressWarnings("hiding")
	public static final URI EXIFSPECTRALSENSITIVITY = new URIImpl("http://www.kanzaki.com/ns/exif#spectralSensitivity",false);

    /** http://www.kanzaki.com/ns/exif#stripByteCounts */
    @SuppressWarnings("hiding")
	public static final URI EXIFSTRIPBYTECOUNTS = new URIImpl("http://www.kanzaki.com/ns/exif#stripByteCounts",false);

    /** http://www.kanzaki.com/ns/exif#stripOffsets */
    @SuppressWarnings("hiding")
	public static final URI EXIFSTRIPOFFSETS = new URIImpl("http://www.kanzaki.com/ns/exif#stripOffsets",false);

    /** http://www.kanzaki.com/ns/exif#subSecTime */
    @SuppressWarnings("hiding")
	public static final URI EXIFSUBSECTIME = new URIImpl("http://www.kanzaki.com/ns/exif#subSecTime",false);

    /** http://www.kanzaki.com/ns/exif#subSecTimeDigitized */
    @SuppressWarnings("hiding")
	public static final URI EXIFSUBSECTIMEDIGITIZED = new URIImpl("http://www.kanzaki.com/ns/exif#subSecTimeDigitized",false);

    /** http://www.kanzaki.com/ns/exif#subSecTimeOriginal */
    @SuppressWarnings("hiding")
	public static final URI EXIFSUBSECTIMEORIGINAL = new URIImpl("http://www.kanzaki.com/ns/exif#subSecTimeOriginal",false);

    /** http://www.kanzaki.com/ns/exif#subjectArea */
    @SuppressWarnings("hiding")
	public static final URI EXIFSUBJECTAREA = new URIImpl("http://www.kanzaki.com/ns/exif#subjectArea",false);

    /** http://www.kanzaki.com/ns/exif#subjectDistance */
    @SuppressWarnings("hiding")
	public static final URI EXIFSUBJECTDISTANCE = new URIImpl("http://www.kanzaki.com/ns/exif#subjectDistance",false);

    /** http://www.kanzaki.com/ns/exif#subjectDistanceRange */
    @SuppressWarnings("hiding")
	public static final URI EXIFSUBJECTDISTANCERANGE = new URIImpl("http://www.kanzaki.com/ns/exif#subjectDistanceRange",false);

    /** http://www.kanzaki.com/ns/exif#subjectLocation */
    @SuppressWarnings("hiding")
	public static final URI EXIFSUBJECTLOCATION = new URIImpl("http://www.kanzaki.com/ns/exif#subjectLocation",false);

    /** http://www.kanzaki.com/ns/exif#subseconds */
    @SuppressWarnings("hiding")
	public static final URI EXIFSUBSECONDS = new URIImpl("http://www.kanzaki.com/ns/exif#subseconds",false);

    /** http://www.kanzaki.com/ns/exif#tagid */
    @SuppressWarnings("hiding")
	public static final URI EXIFTAGID = new URIImpl("http://www.kanzaki.com/ns/exif#tagid",false);

    /** http://www.kanzaki.com/ns/exif#transferFunction */
    @SuppressWarnings("hiding")
	public static final URI EXIFTRANSFERFUNCTION = new URIImpl("http://www.kanzaki.com/ns/exif#transferFunction",false);

    /** http://www.kanzaki.com/ns/exif#_unknown */
    @SuppressWarnings("hiding")
	public static final URI EXIFUNKNOWN = new URIImpl("http://www.kanzaki.com/ns/exif#_unknown",false);

    /** http://www.kanzaki.com/ns/exif#userComment */
    @SuppressWarnings("hiding")
	public static final URI EXIFUSERCOMMENT = new URIImpl("http://www.kanzaki.com/ns/exif#userComment",false);

    /** http://www.kanzaki.com/ns/exif#userInfo */
    @SuppressWarnings("hiding")
	public static final URI EXIFUSERINFO = new URIImpl("http://www.kanzaki.com/ns/exif#userInfo",false);

    /** http://www.kanzaki.com/ns/exif#versionInfo */
    @SuppressWarnings("hiding")
	public static final URI EXIFVERSIONINFO = new URIImpl("http://www.kanzaki.com/ns/exif#versionInfo",false);

    /** http://www.kanzaki.com/ns/exif#whiteBalance */
    @SuppressWarnings("hiding")
	public static final URI EXIFWHITEBALANCE = new URIImpl("http://www.kanzaki.com/ns/exif#whiteBalance",false);

    /** http://www.kanzaki.com/ns/exif#whitePoint */
    @SuppressWarnings("hiding")
	public static final URI EXIFWHITEPOINT = new URIImpl("http://www.kanzaki.com/ns/exif#whitePoint",false);

    /** http://www.kanzaki.com/ns/exif#width */
    @SuppressWarnings("hiding")
	public static final URI EXIFWIDTH = new URIImpl("http://www.kanzaki.com/ns/exif#width",false);

    /** http://www.kanzaki.com/ns/exif#xResolution */
    @SuppressWarnings("hiding")
	public static final URI EXIFXRESOLUTION = new URIImpl("http://www.kanzaki.com/ns/exif#xResolution",false);

    /** http://www.kanzaki.com/ns/exif#yCbCrCoefficients */
    @SuppressWarnings("hiding")
	public static final URI EXIFYCBCRCOEFFICIENTS = new URIImpl("http://www.kanzaki.com/ns/exif#yCbCrCoefficients",false);

    /** http://www.kanzaki.com/ns/exif#yCbCrPositioning */
    @SuppressWarnings("hiding")
	public static final URI EXIFYCBCRPOSITIONING = new URIImpl("http://www.kanzaki.com/ns/exif#yCbCrPositioning",false);

    /** http://www.kanzaki.com/ns/exif#yCbCrSubSampling */
    @SuppressWarnings("hiding")
	public static final URI EXIFYCBCRSUBSAMPLING = new URIImpl("http://www.kanzaki.com/ns/exif#yCbCrSubSampling",false);

    /** http://www.kanzaki.com/ns/exif#yResolution */
    @SuppressWarnings("hiding")
	public static final URI EXIFYRESOLUTION = new URIImpl("http://www.kanzaki.com/ns/exif#yResolution",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#externalIdentifier */
    @SuppressWarnings("hiding")
	public static final URI EXTERNALIDENTIFIER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#externalIdentifier",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#favouritedBy */
    @SuppressWarnings("hiding")
	public static final URI FAVOURITEDBY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#favouritedBy",false);

    /** http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#firstEvent */
    @SuppressWarnings("hiding")
	public static final URI FIRSTEVENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#firstEvent",false);

    /** http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#firstModification */
    @SuppressWarnings("hiding")
	public static final URI FIRSTMODIFICATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#firstModification",false);

    /** http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#firstUsage */
    @SuppressWarnings("hiding")
	public static final URI FIRSTUSAGE = new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#firstUsage",false);

    /** http://xmlns.com/foaf/0.1/member */
    @SuppressWarnings("hiding")
	public static final URI FOAFMEMBER = new URIImpl("http://xmlns.com/foaf/0.1/member",false);

    /** http://xmlns.com/foaf/0.1/name */
    @SuppressWarnings("hiding")
	public static final URI FOAFNAME = new URIImpl("http://xmlns.com/foaf/0.1/name",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frontChannels */
    @SuppressWarnings("hiding")
	public static final URI FRONTCHANNELS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frontChannels",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDest */
    @SuppressWarnings("hiding")
	public static final URI GPSDEST = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDest",false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#groundingForDeletedThing */
    @SuppressWarnings("hiding")
	public static final URI GROUNDINGFORDELETEDTHING = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#groundingForDeletedThing",false);

    /** http://xmlns.com/foaf/0.1/homepage */
    @SuppressWarnings("hiding")
	public static final URI HOMEPAGE = new URIImpl("http://xmlns.com/foaf/0.1/homepage",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#identifier */
    @SuppressWarnings("hiding")
	public static final URI IDENTIFIER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#identifier",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#inverseProperty */
    @SuppressWarnings("hiding")
	public static final URI INVERSEPROPERTY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#inverseProperty",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#isRelated */
    @SuppressWarnings("hiding")
	public static final URI ISRELATED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#isRelated",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#isTopicOf */
    @SuppressWarnings("hiding")
	public static final URI ISTOPICOF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#isTopicOf",false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#isWriteable */
    @SuppressWarnings("hiding")
	public static final URI ISWRITEABLE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#isWriteable",false);

    /** http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#lastEvent */
    @SuppressWarnings("hiding")
	public static final URI LASTEVENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#lastEvent",false);

    /** http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#lastModification */
    @SuppressWarnings("hiding")
	public static final URI LASTMODIFICATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#lastModification",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#lastModified */
    @SuppressWarnings("hiding")
	public static final URI LASTMODIFIED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#lastModified",false);

    /** http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#lastUsage */
    @SuppressWarnings("hiding")
	public static final URI LASTUSAGE = new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#lastUsage",false);

    /** http://www.w3.org/2003/01/geo/wgs84_pos#lat */
    @SuppressWarnings("hiding")
	public static final URI LAT = new URIImpl("http://www.w3.org/2003/01/geo/wgs84_pos#lat",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#lfeChannels */
    @SuppressWarnings("hiding")
	public static final URI LFECHANNELS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#lfeChannels",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#license */
    @SuppressWarnings("hiding")
	public static final URI LICENSE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#license",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#licenseType */
    @SuppressWarnings("hiding")
	public static final URI LICENSETYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#licenseType",false);

    /** http://www.w3.org/2003/01/geo/wgs84_pos#long */
    @SuppressWarnings("hiding")
	public static final URI LONG = new URIImpl("http://www.w3.org/2003/01/geo/wgs84_pos#long",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#maintainedBy */
    @SuppressWarnings("hiding")
	public static final URI MAINTAINEDBY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#maintainedBy",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#maxCardinality */
    @SuppressWarnings("hiding")
	public static final URI MAXCARDINALITY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#maxCardinality",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#minCardinality */
    @SuppressWarnings("hiding")
	public static final URI MINCARDINALITY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#minCardinality",false);

    /** http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#modificationCount */
    @SuppressWarnings("hiding")
	public static final URI MODIFICATIONCOUNT = new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#modificationCount",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#modified */
    @SuppressWarnings("hiding")
	public static final URI MODIFIED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#modified",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#updatable */
    @SuppressWarnings("hiding")
	public static final URI NAOUPDATABLE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#updatable",false);

    /** http://www.semanticdesktop.org/ontologies/2007/01/19/nie#copyright */
    @SuppressWarnings("hiding")
	public static final URI NIECOPYRIGHT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#copyright",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#MaxCardinality */
    @SuppressWarnings("hiding")
	public static final URI NRLMAXCARDINALITY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#MaxCardinality",false);

    /** http://rdfs.org/sioc/ns#has_reply */
    @SuppressWarnings("hiding")
	public static final URI NSREPLY = new URIImpl("http://rdfs.org/sioc/ns#has_reply",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#numericRating */
    @SuppressWarnings("hiding")
	public static final URI NUMERICRATING = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#numericRating",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#fileOwner */
    @SuppressWarnings("hiding")
	public static final URI ONTOLOGIES20070510NID3FILEOWNER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#fileOwner",false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasOtherConceptualization */
    @SuppressWarnings("hiding")
	public static final URI OTHERCONCEPTUALIZATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasOtherConceptualization",false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasOtherSlot */
    @SuppressWarnings("hiding")
	public static final URI OTHERSLOT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasOtherSlot",false);

    /** http://xmlns.com/foaf/0.1/page */
    @SuppressWarnings("hiding")
	public static final URI PAGE = new URIImpl("http://xmlns.com/foaf/0.1/page",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasPeers */
    @SuppressWarnings("hiding")
	public static final URI PEERS = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasPeers",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#personalIdentifier */
    @SuppressWarnings("hiding")
	public static final URI PERSONALIDENTIFIER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#personalIdentifier",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#pluralPrefLabel */
    @SuppressWarnings("hiding")
	public static final URI PLURALPREFLABEL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#pluralPrefLabel",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#prefSymbol */
    @SuppressWarnings("hiding")
	public static final URI PREFSYMBOL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#prefSymbol",false);

    /** http://purl.org/vocab/vann/preferredNamespacePrefix */
    @SuppressWarnings("hiding")
	public static final URI PREFERREDNAMESPACEPREFIX = new URIImpl("http://purl.org/vocab/vann/preferredNamespacePrefix",false);

    /** http://purl.org/vocab/vann/preferredNamespaceUri */
    @SuppressWarnings("hiding")
	public static final URI PREFERREDNAMESPACEURI = new URIImpl("http://purl.org/vocab/vann/preferredNamespaceUri",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#privacyLevel */
    @SuppressWarnings("hiding")
	public static final URI PRIVACYLEVEL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#privacyLevel",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#progress */
    @SuppressWarnings("hiding")
	public static final URI PROGRESS = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#progress",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#rating */
    @SuppressWarnings("hiding")
	public static final URI RATING = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#rating",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#rearChannels */
    @SuppressWarnings("hiding")
	public static final URI REARCHANNELS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#rearChannels",false);

    /** http://purl.org/dc/elements/1.1/relation */
    @SuppressWarnings("hiding")
	public static final URI RELATION = new URIImpl("http://purl.org/dc/elements/1.1/relation",false);

    /** http://rdfs.org/sioc/ns#reply_of */
    @SuppressWarnings("hiding")
	public static final URI REPLYOF = new URIImpl("http://rdfs.org/sioc/ns#reply_of",false);

    /** http://purl.org/dc/elements/1.1/rights */
    @SuppressWarnings("hiding")
	public static final URI RIGHTS = new URIImpl("http://purl.org/dc/elements/1.1/rights",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasSchedule */
    @SuppressWarnings("hiding")
	public static final URI SCHEDULE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasSchedule",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#score */
    @SuppressWarnings("hiding")
	public static final URI SCORE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#score",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#scoreParameter */
    @SuppressWarnings("hiding")
	public static final URI SCOREPARAMETER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#scoreParameter",false);

    /** http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedBy */
    @SuppressWarnings("hiding")
	public static final URI SHAREDBY = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedBy",false);

    /** http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedWith */
    @SuppressWarnings("hiding")
	public static final URI SHAREDWITH = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedWith",false);

    /** http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedBy */
    @SuppressWarnings("hiding")
	public static final URI SHAREDTHROUGH = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedThrough",false);

    /** http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedWithContact */
    @SuppressWarnings("hiding")
	public static final URI SHAREDWITHCONTACT = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedWithContact",false);

    /** http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedWithGroup */
    @SuppressWarnings("hiding")
	public static final URI SHAREDWITHGROUP = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedWithGroup",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sideChannels */
    @SuppressWarnings("hiding")
	public static final URI SIDECHANNELS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sideChannels",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dao#source */
    @SuppressWarnings("hiding")
	public static final URI SOURCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dao#source",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasSpaTem */
    @SuppressWarnings("hiding")
	public static final URI SPATEM = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasSpaTem",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#startTime */
    @SuppressWarnings("hiding")
	public static final URI STARTTIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#startTime",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasState */
    @SuppressWarnings("hiding")
	public static final URI STATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasState",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#stateTypeRole */
    @SuppressWarnings("hiding")
	public static final URI STATETYPEROLE = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#stateTypeRole",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasSubResource */
    @SuppressWarnings("hiding")
	public static final URI SUBRESOURCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasSubResource",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subsecond */
    @SuppressWarnings("hiding")
	public static final URI SUBSECOND = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subsecond",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasSuperResource */
    @SuppressWarnings("hiding")
	public static final URI SUPERRESOURCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasSuperResource",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasSymbol */
    @SuppressWarnings("hiding")
	public static final URI SYMBOL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasSymbol",false);

    /** http://protege.stanford.edu/system#role */
    @SuppressWarnings("hiding")
	public static final URI SYSTEMROLE = new URIImpl("http://protege.stanford.edu/system#role",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasTag */
    @SuppressWarnings("hiding")
	public static final URI TAG = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasTag",false);

    /** http://www.kanzaki.com/ns/exif#tag_number */
    @SuppressWarnings("hiding")
	public static final URI TAGNUMBER = new URIImpl("http://www.kanzaki.com/ns/exif#tag_number",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#targetTime */
    @SuppressWarnings("hiding")
	public static final URI TARGETTIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#targetTime",false);

    /** http://purl.org/dc/terms/created */
    @SuppressWarnings("hiding")
	public static final URI TERMSCREATED = new URIImpl("http://purl.org/dc/terms/created",false);

    /** http://purl.org/dc/terms/isPartOf */
    @SuppressWarnings("hiding")
	public static final URI TERMSISPARTOF = new URIImpl("http://purl.org/dc/terms/isPartOf",false);

    /** http://purl.org/dc/terms/license */
    @SuppressWarnings("hiding")
	public static final URI TERMSLICENSE = new URIImpl("http://purl.org/dc/terms/license",false);

    /** http://purl.org/dc/terms/modified */
    @SuppressWarnings("hiding")
	public static final URI TERMSMODIFIED = new URIImpl("http://purl.org/dc/terms/modified",false);

    /** http://purl.org/dc/terms/hasPart */
    @SuppressWarnings("hiding")
	public static final URI TERMSPART = new URIImpl("http://purl.org/dc/terms/hasPart",false);

    /** http://purl.org/dc/terms/hasVersion */
    @SuppressWarnings("hiding")
	public static final URI TERMSVERSION = new URIImpl("http://purl.org/dc/terms/hasVersion",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#timemanagement */
    @SuppressWarnings("hiding")
	public static final URI TIMEMANAGEMENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#timemanagement",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#dateTime */
    @SuppressWarnings("hiding")
	public static final URI TMODATETIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#dateTime",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasTopic */
    @SuppressWarnings("hiding")
	public static final URI TOPIC = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasTopic",false);

    /** http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#totalEventDuration */
    @SuppressWarnings("hiding")
	public static final URI TOTALEVENTDURATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#totalEventDuration",false);

    /** http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#totalModificationDuration */
    @SuppressWarnings("hiding")
	public static final URI TOTALMODIFICATIONDURATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#totalModificationDuration",false);

    /** http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#totalUsageDuration */
    @SuppressWarnings("hiding")
	public static final URI TOTALUSAGEDURATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#totalUsageDuration",false);

    /** http://purl.org/dc/elements/1.1/type */
    @SuppressWarnings("hiding")
	public static final URI TYPE = new URIImpl("http://purl.org/dc/elements/1.1/type",false);

    /** http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#usageCount */
    @SuppressWarnings("hiding")
	public static final URI USAGECOUNT = new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#usageCount",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#userVisible */
    @SuppressWarnings("hiding")
	public static final URI USERVISIBLE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#userVisible",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://purl.org/dc/terms/accessRights",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#actualTime",false),
      new URIImpl("http://www.w3.org/2003/01/geo/wgs84_pos#alt",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#altSymbol",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#annotation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasAttention",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#cardinality",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#classRole",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasConnectivity",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#contextTask",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#contributor",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#created",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#creator",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#dependencyType",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#depends",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#deprecated",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#description",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#disclaimer",false),
      new URIImpl("http://purl.org/dc/elements/1.1/contributor",false),
      new URIImpl("http://purl.org/dc/elements/1.1/creator",false),
      new URIImpl("http://purl.org/dc/elements/1.1/date",false),
      new URIImpl("http://purl.org/dc/elements/1.1/description",false),
      new URIImpl("http://purl.org/dc/elements/1.1/identifier",false),
      new URIImpl("http://purl.org/dc/elements/1.1/language",false),
      new URIImpl("http://purl.org/dc/elements/1.1/modified",false),
      new URIImpl("http://purl.org/dc/elements/1.1/publisher",false),
      new URIImpl("http://purl.org/dc/elements/1.1/source",false),
      new URIImpl("http://purl.org/dc/elements/1.1/subject",false),
      new URIImpl("http://purl.org/dc/elements/1.1/title",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#endTime",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#endorsedBy",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasEnvironment",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#eventCount",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#apertureValue",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#artist",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#bitsPerSample",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#brightnessValue",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#cfaPattern",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#colorSpace",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#componentsConfiguration",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#compressedBitsPerPixel",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#compression",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#contrast",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#copyright",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#customRendered",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#datatype",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#date",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#dateAndOrTime",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#dateTime",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#dateTimeDigitized",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#dateTimeOriginal",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#deviceSettingDescription",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#digitalZoomRatio",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#exifAttribute",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#exif_IFD_Pointer",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#exifVersion",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#exifdata",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#exposureBiasValue",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#exposureIndex",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#exposureMode",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#exposureProgram",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#exposureTime",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#fNumber",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#fileSource",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#flash",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#flashEnergy",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#flashpixVersion",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#focalLength",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#focalLengthIn35mmFilm",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#focalPlaneResolutionUnit",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#focalPlaneXResolution",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#focalPlaneYResolution",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gainControl",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#geo",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsAltitudeRef",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsAreaInformation",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsDOP",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsDateStamp",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsDestBearing",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsDestBearingRef",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsDestDistance",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsDestDistanceRef",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsDestLatitudeRef",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsDestLongitudeRef",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsDifferential",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsImgDirection",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsImgDirectionRef",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsInfo",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsInfo_IFD_Pointer",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsLatitudeRef",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsLongitudeRef",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsMapDatum",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsMeasureMode",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsProcessingMethod",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsSatellites",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsSpeed",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsSpeedRef",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsStatus",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsTimeStamp",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsTrack",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsTrackRef",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#gpsVersionID",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#height",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#ifdPointer",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#imageConfig",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#imageDataCharacter",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#imageDataStruct",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#imageDescription",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#imageLength",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#imageUniqueID",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#imageWidth",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#interopInfo",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#interoperability_IFD_Pointer",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#interoperabilityIndex",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#interoperabilityVersion",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#isoSpeedRatings",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#jpegInterchangeFormat",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#jpegInterchangeFormatLength",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#length",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#lightSource",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#make",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#makerNote",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#maxApertureValue",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#meter",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#meteringMode",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#mm",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#model",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#oecf",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#orientation",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#photometricInterpretation",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#pictTaking",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#pimBrightness",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#pimColorBalance",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#pimContrast",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#pimInfo",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#pimSaturation",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#pimSharpness",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#pixelXDimension",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#pixelYDimension",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#planarConfiguration",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#primaryChromaticities",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#printImageMatching_IFD_Pointer",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#recOffset",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#referenceBlackWhite",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#relatedFile",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#relatedImageFileFormat",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#relatedImageLength",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#relatedImageWidth",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#relatedSoundFile",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#resolution",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#resolutionUnit",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#rowsPerStrip",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#samplesPerPixel",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#saturation",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#sceneCaptureType",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#sceneType",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#seconds",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#sensingMethod",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#sharpness",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#shutterSpeedValue",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#software",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#spatialFrequencyResponse",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#spectralSensitivity",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#stripByteCounts",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#stripOffsets",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#subSecTime",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#subSecTimeDigitized",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#subSecTimeOriginal",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#subjectArea",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#subjectDistance",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#subjectDistanceRange",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#subjectLocation",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#subseconds",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#tagid",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#transferFunction",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#_unknown",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#userComment",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#userInfo",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#versionInfo",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#whiteBalance",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#whitePoint",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#width",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#xResolution",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#yCbCrCoefficients",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#yCbCrPositioning",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#yCbCrSubSampling",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#yResolution",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#externalIdentifier",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#favouritedBy",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#firstEvent",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#firstModification",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#firstUsage",false),
      new URIImpl("http://xmlns.com/foaf/0.1/member",false),
      new URIImpl("http://xmlns.com/foaf/0.1/name",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frontChannels",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDest",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#groundingForDeletedThing",false),
      new URIImpl("http://xmlns.com/foaf/0.1/homepage",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#identifier",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#inverseProperty",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#isRelated",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#isTopicOf",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#isWriteable",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#lastEvent",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#lastModification",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#lastModified",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#lastUsage",false),
      new URIImpl("http://www.w3.org/2003/01/geo/wgs84_pos#lat",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#lfeChannels",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#license",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#licenseType",false),
      new URIImpl("http://www.w3.org/2003/01/geo/wgs84_pos#long",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#maintainedBy",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#maxCardinality",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#minCardinality",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#modificationCount",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#modified",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#updatable",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/01/19/nie#copyright",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#MaxCardinality",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_reply",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#numericRating",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nid3#fileOwner",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasOtherConceptualization",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasOtherSlot",false),
      new URIImpl("http://xmlns.com/foaf/0.1/page",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasPeers",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#personalIdentifier",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#pluralPrefLabel",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#prefSymbol",false),
      new URIImpl("http://purl.org/vocab/vann/preferredNamespacePrefix",false),
      new URIImpl("http://purl.org/vocab/vann/preferredNamespaceUri",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#privacyLevel",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#progress",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#rating",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#rearChannels",false),
      new URIImpl("http://purl.org/dc/elements/1.1/relation",false),
      new URIImpl("http://rdfs.org/sioc/ns#reply_of",false),
      new URIImpl("http://purl.org/dc/elements/1.1/rights",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasSchedule",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#score",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#scoreParameter",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedBy",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedWith",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedThrough",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedWithContact",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedWithGroup",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#sideChannels",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dao#source",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasSpaTem",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#startTime",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasState",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#stateTypeRole",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasSubResource",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subsecond",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasSuperResource",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasSymbol",false),
      new URIImpl("http://protege.stanford.edu/system#role",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasTag",false),
      new URIImpl("http://www.kanzaki.com/ns/exif#tag_number",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#targetTime",false),
      new URIImpl("http://purl.org/dc/terms/created",false),
      new URIImpl("http://purl.org/dc/terms/isPartOf",false),
      new URIImpl("http://purl.org/dc/terms/license",false),
      new URIImpl("http://purl.org/dc/terms/modified",false),
      new URIImpl("http://purl.org/dc/terms/hasPart",false),
      new URIImpl("http://purl.org/dc/terms/hasVersion",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#timemanagement",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#dateTime",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasTopic",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#totalEventDuration",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#totalModificationDuration",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#totalUsageDuration",false),
      new URIImpl("http://purl.org/dc/elements/1.1/type",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2010/01/25/nuao#usageCount",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#userVisible",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected RDFReactorThing (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public RDFReactorThing (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public RDFReactorThing (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public RDFReactorThing (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public RDFReactorThing (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of RDFReactorThing  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static RDFReactorThing  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, RDFReactorThing.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends RDFReactorThing> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, RDFReactorThing.class );
	}

    /**
	 * Remove rdf:type RDFReactorThing from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AccessRights' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAccessRights_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.ACCESSRIGHTS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AccessRights' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAccessRights_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.ACCESSRIGHTS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AccessRights' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAccessRights_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.ACCESSRIGHTS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Annotation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAnnotation_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.ANNOTATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Annotation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAnnotation_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.ANNOTATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Annotation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAnnotation_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.ANNOTATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Contributor' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Contributor_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1CONTRIBUTOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Contributor' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Contributor_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1CONTRIBUTOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Contributor' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Contributor_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1CONTRIBUTOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Creator' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Creator_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1CREATOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Creator' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Creator_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1CREATOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Creator' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Creator_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1CREATOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Date' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Date_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1DATE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Date' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Date_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1DATE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Date' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Date_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1DATE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Description' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Description_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1DESCRIPTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Description' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Description_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1DESCRIPTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Description' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Description_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1DESCRIPTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Identifier' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Identifier_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1IDENTIFIER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Identifier' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Identifier_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1IDENTIFIER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Identifier' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Identifier_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1IDENTIFIER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Language' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Language_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1LANGUAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Language' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Language_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1LANGUAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Language' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Language_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1LANGUAGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Modified' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Modified_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1MODIFIED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Modified' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Modified_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1MODIFIED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Modified' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Modified_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1MODIFIED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Publisher' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Publisher_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1PUBLISHER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Publisher' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Publisher_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1PUBLISHER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Publisher' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Publisher_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1PUBLISHER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Source' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Source_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1SOURCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Source' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Source_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1SOURCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Source' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Source_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1SOURCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Subject' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Subject_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1SUBJECT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Subject' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Subject_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1SUBJECT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Subject' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Subject_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1SUBJECT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Title' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Title_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1TITLE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Title' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Title_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1TITLE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Title' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllElements1_1Title_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.ELEMENTS1_1TITLE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifApertureValue' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifApertureValue_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFAPERTUREVALUE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifApertureValue' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifApertureValue_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFAPERTUREVALUE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifApertureValue' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifApertureValue_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFAPERTUREVALUE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifArtist' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifArtist_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFARTIST, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifArtist' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifArtist_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFARTIST, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifArtist' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifArtist_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFARTIST, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifBitsPerSample' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifBitsPerSample_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFBITSPERSAMPLE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifBitsPerSample' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifBitsPerSample_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFBITSPERSAMPLE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifBitsPerSample' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifBitsPerSample_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFBITSPERSAMPLE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifBrightnessValue' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifBrightnessValue_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFBRIGHTNESSVALUE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifBrightnessValue' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifBrightnessValue_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFBRIGHTNESSVALUE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifBrightnessValue' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifBrightnessValue_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFBRIGHTNESSVALUE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifCfaPattern' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifCfaPattern_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCFAPATTERN, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifCfaPattern' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifCfaPattern_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCFAPATTERN, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifCfaPattern' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifCfaPattern_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCFAPATTERN, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifColorSpace' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifColorSpace_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCOLORSPACE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifColorSpace' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifColorSpace_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCOLORSPACE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifColorSpace' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifColorSpace_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCOLORSPACE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifComponentsConfiguration' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifComponentsConfiguration_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCOMPONENTSCONFIGURATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifComponentsConfiguration' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifComponentsConfiguration_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCOMPONENTSCONFIGURATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifComponentsConfiguration' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifComponentsConfiguration_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCOMPONENTSCONFIGURATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifCompressedBitsPerPixel' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifCompressedBitsPerPixel_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCOMPRESSEDBITSPERPIXEL, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifCompressedBitsPerPixel' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifCompressedBitsPerPixel_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCOMPRESSEDBITSPERPIXEL, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifCompressedBitsPerPixel' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifCompressedBitsPerPixel_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCOMPRESSEDBITSPERPIXEL, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifCompression' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifCompression_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCOMPRESSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifCompression' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifCompression_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCOMPRESSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifCompression' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifCompression_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCOMPRESSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifContrast' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifContrast_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCONTRAST, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifContrast' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifContrast_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCONTRAST, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifContrast' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifContrast_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCONTRAST, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifCopyright' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifCopyright_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCOPYRIGHT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifCopyright' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifCopyright_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCOPYRIGHT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifCopyright' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifCopyright_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCOPYRIGHT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifCustomRendered' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifCustomRendered_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCUSTOMRENDERED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifCustomRendered' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifCustomRendered_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCUSTOMRENDERED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifCustomRendered' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifCustomRendered_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFCUSTOMRENDERED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifDatatype' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDatatype_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATATYPE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifDatatype' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDatatype_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATATYPE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifDatatype' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifDatatype_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATATYPE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifDate' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDate_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifDate' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDate_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifDate' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifDate_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifDateAndOrTime' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDateAndOrTime_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATEANDORTIME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifDateAndOrTime' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDateAndOrTime_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATEANDORTIME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifDateAndOrTime' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifDateAndOrTime_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATEANDORTIME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifDateTime' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDateTime_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATETIME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifDateTime' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDateTime_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATETIME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifDateTime' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifDateTime_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATETIME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifDateTimeDigitized' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDateTimeDigitized_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATETIMEDIGITIZED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifDateTimeDigitized' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDateTimeDigitized_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATETIMEDIGITIZED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifDateTimeDigitized' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifDateTimeDigitized_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATETIMEDIGITIZED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifDateTimeOriginal' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDateTimeOriginal_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATETIMEORIGINAL, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifDateTimeOriginal' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDateTimeOriginal_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATETIMEORIGINAL, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifDateTimeOriginal' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifDateTimeOriginal_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDATETIMEORIGINAL, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifDeviceSettingDescription' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDeviceSettingDescription_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDEVICESETTINGDESCRIPTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifDeviceSettingDescription' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDeviceSettingDescription_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDEVICESETTINGDESCRIPTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifDeviceSettingDescription' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifDeviceSettingDescription_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDEVICESETTINGDESCRIPTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifDigitalZoomRatio' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDigitalZoomRatio_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDIGITALZOOMRATIO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifDigitalZoomRatio' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifDigitalZoomRatio_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDIGITALZOOMRATIO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifDigitalZoomRatio' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifDigitalZoomRatio_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFDIGITALZOOMRATIO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifExifAttribute' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExifAttribute_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXIFATTRIBUTE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifExifAttribute' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExifAttribute_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXIFATTRIBUTE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifExifAttribute' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifExifAttribute_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXIFATTRIBUTE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifExifIFDPointer' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExifIFDPointer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXIFIFDPOINTER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifExifIFDPointer' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExifIFDPointer_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXIFIFDPOINTER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifExifIFDPointer' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifExifIFDPointer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXIFIFDPOINTER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifExifVersion' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExifVersion_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXIFVERSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifExifVersion' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExifVersion_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXIFVERSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifExifVersion' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifExifVersion_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXIFVERSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifExifdata' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExifdata_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXIFDATA, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifExifdata' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExifdata_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXIFDATA, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifExifdata' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifExifdata_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXIFDATA, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifExposureBiasValue' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExposureBiasValue_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXPOSUREBIASVALUE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifExposureBiasValue' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExposureBiasValue_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXPOSUREBIASVALUE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifExposureBiasValue' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifExposureBiasValue_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXPOSUREBIASVALUE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifExposureIndex' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExposureIndex_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXPOSUREINDEX, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifExposureIndex' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExposureIndex_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXPOSUREINDEX, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifExposureIndex' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifExposureIndex_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXPOSUREINDEX, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifExposureMode' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExposureMode_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXPOSUREMODE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifExposureMode' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExposureMode_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXPOSUREMODE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifExposureMode' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifExposureMode_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXPOSUREMODE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifExposureProgram' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExposureProgram_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXPOSUREPROGRAM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifExposureProgram' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExposureProgram_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXPOSUREPROGRAM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifExposureProgram' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifExposureProgram_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXPOSUREPROGRAM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifExposureTime' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExposureTime_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXPOSURETIME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifExposureTime' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifExposureTime_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXPOSURETIME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifExposureTime' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifExposureTime_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFEXPOSURETIME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifFNumber' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFNumber_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFNUMBER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifFNumber' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFNumber_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFNUMBER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifFNumber' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifFNumber_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFNUMBER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifFileSource' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFileSource_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFILESOURCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifFileSource' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFileSource_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFILESOURCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifFileSource' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifFileSource_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFILESOURCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifFlash' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFlash_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFLASH, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifFlash' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFlash_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFLASH, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifFlash' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifFlash_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFLASH, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifFlashEnergy' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFlashEnergy_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFLASHENERGY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifFlashEnergy' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFlashEnergy_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFLASHENERGY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifFlashEnergy' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifFlashEnergy_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFLASHENERGY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifFlashpixVersion' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFlashpixVersion_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFLASHPIXVERSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifFlashpixVersion' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFlashpixVersion_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFLASHPIXVERSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifFlashpixVersion' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifFlashpixVersion_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFLASHPIXVERSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifFocalLength' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFocalLength_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFOCALLENGTH, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifFocalLength' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFocalLength_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFOCALLENGTH, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifFocalLength' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifFocalLength_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFOCALLENGTH, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifFocalLengthIn35mmFilm' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFocalLengthIn35mmFilm_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFOCALLENGTHIN35MMFILM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifFocalLengthIn35mmFilm' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFocalLengthIn35mmFilm_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFOCALLENGTHIN35MMFILM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifFocalLengthIn35mmFilm' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifFocalLengthIn35mmFilm_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFOCALLENGTHIN35MMFILM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifFocalPlaneResolutionUnit' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFocalPlaneResolutionUnit_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFOCALPLANERESOLUTIONUNIT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifFocalPlaneResolutionUnit' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFocalPlaneResolutionUnit_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFOCALPLANERESOLUTIONUNIT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifFocalPlaneResolutionUnit' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifFocalPlaneResolutionUnit_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFOCALPLANERESOLUTIONUNIT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifFocalPlaneXResolution' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFocalPlaneXResolution_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFOCALPLANEXRESOLUTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifFocalPlaneXResolution' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFocalPlaneXResolution_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFOCALPLANEXRESOLUTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifFocalPlaneXResolution' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifFocalPlaneXResolution_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFOCALPLANEXRESOLUTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifFocalPlaneYResolution' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFocalPlaneYResolution_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFOCALPLANEYRESOLUTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifFocalPlaneYResolution' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifFocalPlaneYResolution_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFOCALPLANEYRESOLUTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifFocalPlaneYResolution' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifFocalPlaneYResolution_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFFOCALPLANEYRESOLUTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGainControl' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGainControl_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGAINCONTROL, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGainControl' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGainControl_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGAINCONTROL, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGainControl' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGainControl_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGAINCONTROL, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGeo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGeo_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGEO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGeo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGeo_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGEO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGeo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGeo_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGEO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsAltitudeRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsAltitudeRef_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSALTITUDEREF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsAltitudeRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsAltitudeRef_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSALTITUDEREF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsAltitudeRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsAltitudeRef_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSALTITUDEREF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsAreaInformation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsAreaInformation_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSAREAINFORMATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsAreaInformation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsAreaInformation_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSAREAINFORMATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsAreaInformation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsAreaInformation_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSAREAINFORMATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDOP' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDOP_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDOP, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDOP' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDOP_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDOP, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsDOP' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDOP_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDOP, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDateStamp' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDateStamp_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDATESTAMP, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDateStamp' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDateStamp_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDATESTAMP, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsDateStamp' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDateStamp_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDATESTAMP, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDestBearing' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestBearing_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTBEARING, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDestBearing' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestBearing_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTBEARING, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsDestBearing' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestBearing_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTBEARING, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDestBearingRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestBearingRef_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTBEARINGREF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDestBearingRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestBearingRef_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTBEARINGREF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsDestBearingRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestBearingRef_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTBEARINGREF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDestDistance' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestDistance_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTDISTANCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDestDistance' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestDistance_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTDISTANCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsDestDistance' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestDistance_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTDISTANCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDestDistanceRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestDistanceRef_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTDISTANCEREF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDestDistanceRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestDistanceRef_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTDISTANCEREF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsDestDistanceRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestDistanceRef_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTDISTANCEREF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDestLatitudeRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestLatitudeRef_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTLATITUDEREF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDestLatitudeRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestLatitudeRef_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTLATITUDEREF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsDestLatitudeRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestLatitudeRef_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTLATITUDEREF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDestLongitudeRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestLongitudeRef_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTLONGITUDEREF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDestLongitudeRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestLongitudeRef_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTLONGITUDEREF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsDestLongitudeRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDestLongitudeRef_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDESTLONGITUDEREF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDifferential' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDifferential_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDIFFERENTIAL, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsDifferential' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDifferential_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDIFFERENTIAL, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsDifferential' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsDifferential_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSDIFFERENTIAL, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsImgDirection' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsImgDirection_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSIMGDIRECTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsImgDirection' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsImgDirection_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSIMGDIRECTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsImgDirection' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsImgDirection_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSIMGDIRECTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsImgDirectionRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsImgDirectionRef_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSIMGDIRECTIONREF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsImgDirectionRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsImgDirectionRef_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSIMGDIRECTIONREF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsImgDirectionRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsImgDirectionRef_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSIMGDIRECTIONREF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsInfo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsInfo_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSINFO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsInfo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsInfo_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSINFO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsInfo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsInfo_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSINFO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsInfoIFDPointer' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsInfoIFDPointer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSINFOIFDPOINTER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsInfoIFDPointer' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsInfoIFDPointer_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSINFOIFDPOINTER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsInfoIFDPointer' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsInfoIFDPointer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSINFOIFDPOINTER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsLatitudeRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsLatitudeRef_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSLATITUDEREF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsLatitudeRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsLatitudeRef_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSLATITUDEREF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsLatitudeRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsLatitudeRef_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSLATITUDEREF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsLongitudeRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsLongitudeRef_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSLONGITUDEREF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsLongitudeRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsLongitudeRef_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSLONGITUDEREF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsLongitudeRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsLongitudeRef_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSLONGITUDEREF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsMapDatum' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsMapDatum_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSMAPDATUM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsMapDatum' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsMapDatum_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSMAPDATUM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsMapDatum' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsMapDatum_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSMAPDATUM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsMeasureMode' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsMeasureMode_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSMEASUREMODE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsMeasureMode' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsMeasureMode_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSMEASUREMODE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsMeasureMode' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsMeasureMode_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSMEASUREMODE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsProcessingMethod' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsProcessingMethod_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSPROCESSINGMETHOD, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsProcessingMethod' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsProcessingMethod_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSPROCESSINGMETHOD, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsProcessingMethod' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsProcessingMethod_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSPROCESSINGMETHOD, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsSatellites' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsSatellites_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSSATELLITES, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsSatellites' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsSatellites_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSSATELLITES, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsSatellites' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsSatellites_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSSATELLITES, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsSpeed' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsSpeed_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSSPEED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsSpeed' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsSpeed_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSSPEED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsSpeed' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsSpeed_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSSPEED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsSpeedRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsSpeedRef_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSSPEEDREF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsSpeedRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsSpeedRef_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSSPEEDREF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsSpeedRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsSpeedRef_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSSPEEDREF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsStatus' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsStatus_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSSTATUS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsStatus' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsStatus_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSSTATUS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsStatus' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsStatus_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSSTATUS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsTimeStamp' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsTimeStamp_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSTIMESTAMP, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsTimeStamp' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsTimeStamp_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSTIMESTAMP, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsTimeStamp' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsTimeStamp_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSTIMESTAMP, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsTrack' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsTrack_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSTRACK, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsTrack' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsTrack_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSTRACK, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsTrack' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsTrack_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSTRACK, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsTrackRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsTrackRef_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSTRACKREF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsTrackRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsTrackRef_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSTRACKREF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsTrackRef' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsTrackRef_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSTRACKREF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifGpsVersionID' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsVersionID_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSVERSIONID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifGpsVersionID' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsVersionID_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSVERSIONID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifGpsVersionID' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifGpsVersionID_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFGPSVERSIONID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifHeight' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifHeight_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFHEIGHT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifHeight' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifHeight_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFHEIGHT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifHeight' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifHeight_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFHEIGHT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifIfdPointer' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifIfdPointer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIFDPOINTER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifIfdPointer' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifIfdPointer_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIFDPOINTER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifIfdPointer' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifIfdPointer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIFDPOINTER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifImageConfig' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifImageConfig_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGECONFIG, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifImageConfig' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifImageConfig_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGECONFIG, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifImageConfig' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifImageConfig_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGECONFIG, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifImageDataCharacter' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifImageDataCharacter_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGEDATACHARACTER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifImageDataCharacter' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifImageDataCharacter_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGEDATACHARACTER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifImageDataCharacter' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifImageDataCharacter_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGEDATACHARACTER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifImageDataStruct' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifImageDataStruct_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGEDATASTRUCT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifImageDataStruct' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifImageDataStruct_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGEDATASTRUCT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifImageDataStruct' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifImageDataStruct_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGEDATASTRUCT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifImageDescription' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifImageDescription_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGEDESCRIPTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifImageDescription' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifImageDescription_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGEDESCRIPTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifImageDescription' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifImageDescription_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGEDESCRIPTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifImageLength' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifImageLength_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGELENGTH, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifImageLength' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifImageLength_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGELENGTH, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifImageLength' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifImageLength_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGELENGTH, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifImageUniqueID' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifImageUniqueID_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGEUNIQUEID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifImageUniqueID' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifImageUniqueID_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGEUNIQUEID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifImageUniqueID' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifImageUniqueID_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGEUNIQUEID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifImageWidth' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifImageWidth_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGEWIDTH, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifImageWidth' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifImageWidth_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGEWIDTH, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifImageWidth' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifImageWidth_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFIMAGEWIDTH, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifInteropInfo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifInteropInfo_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFINTEROPINFO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifInteropInfo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifInteropInfo_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFINTEROPINFO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifInteropInfo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifInteropInfo_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFINTEROPINFO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifInteroperabilityIFDPointer' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifInteroperabilityIFDPointer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFINTEROPERABILITYIFDPOINTER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifInteroperabilityIFDPointer' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifInteroperabilityIFDPointer_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFINTEROPERABILITYIFDPOINTER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifInteroperabilityIFDPointer' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifInteroperabilityIFDPointer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFINTEROPERABILITYIFDPOINTER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifInteroperabilityIndex' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifInteroperabilityIndex_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFINTEROPERABILITYINDEX, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifInteroperabilityIndex' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifInteroperabilityIndex_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFINTEROPERABILITYINDEX, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifInteroperabilityIndex' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifInteroperabilityIndex_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFINTEROPERABILITYINDEX, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifInteroperabilityVersion' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifInteroperabilityVersion_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFINTEROPERABILITYVERSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifInteroperabilityVersion' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifInteroperabilityVersion_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFINTEROPERABILITYVERSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifInteroperabilityVersion' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifInteroperabilityVersion_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFINTEROPERABILITYVERSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifIsoSpeedRatings' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifIsoSpeedRatings_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFISOSPEEDRATINGS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifIsoSpeedRatings' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifIsoSpeedRatings_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFISOSPEEDRATINGS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifIsoSpeedRatings' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifIsoSpeedRatings_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFISOSPEEDRATINGS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifJpegInterchangeFormat' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifJpegInterchangeFormat_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFJPEGINTERCHANGEFORMAT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifJpegInterchangeFormat' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifJpegInterchangeFormat_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFJPEGINTERCHANGEFORMAT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifJpegInterchangeFormat' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifJpegInterchangeFormat_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFJPEGINTERCHANGEFORMAT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifJpegInterchangeFormatLength' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifJpegInterchangeFormatLength_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFJPEGINTERCHANGEFORMATLENGTH, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifJpegInterchangeFormatLength' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifJpegInterchangeFormatLength_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFJPEGINTERCHANGEFORMATLENGTH, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifJpegInterchangeFormatLength' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifJpegInterchangeFormatLength_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFJPEGINTERCHANGEFORMATLENGTH, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifLength' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifLength_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFLENGTH, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifLength' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifLength_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFLENGTH, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifLength' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifLength_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFLENGTH, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifLightSource' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifLightSource_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFLIGHTSOURCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifLightSource' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifLightSource_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFLIGHTSOURCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifLightSource' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifLightSource_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFLIGHTSOURCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifMake' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifMake_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMAKE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifMake' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifMake_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMAKE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifMake' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifMake_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMAKE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifMakerNote' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifMakerNote_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMAKERNOTE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifMakerNote' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifMakerNote_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMAKERNOTE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifMakerNote' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifMakerNote_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMAKERNOTE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifMaxApertureValue' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifMaxApertureValue_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMAXAPERTUREVALUE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifMaxApertureValue' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifMaxApertureValue_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMAXAPERTUREVALUE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifMaxApertureValue' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifMaxApertureValue_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMAXAPERTUREVALUE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifMeter' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifMeter_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMETER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifMeter' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifMeter_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMETER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifMeter' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifMeter_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMETER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifMeteringMode' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifMeteringMode_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMETERINGMODE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifMeteringMode' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifMeteringMode_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMETERINGMODE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifMeteringMode' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifMeteringMode_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMETERINGMODE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifMm' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifMm_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifMm' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifMm_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifMm' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifMm_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifModel' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifModel_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMODEL, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifModel' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifModel_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMODEL, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifModel' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifModel_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFMODEL, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifOecf' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifOecf_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFOECF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifOecf' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifOecf_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFOECF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifOecf' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifOecf_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFOECF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifOrientation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifOrientation_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFORIENTATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifOrientation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifOrientation_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFORIENTATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifOrientation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifOrientation_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFORIENTATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifPhotometricInterpretation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPhotometricInterpretation_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPHOTOMETRICINTERPRETATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifPhotometricInterpretation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPhotometricInterpretation_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPHOTOMETRICINTERPRETATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifPhotometricInterpretation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifPhotometricInterpretation_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPHOTOMETRICINTERPRETATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifPictTaking' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPictTaking_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPICTTAKING, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifPictTaking' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPictTaking_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPICTTAKING, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifPictTaking' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifPictTaking_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPICTTAKING, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifPimBrightness' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPimBrightness_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMBRIGHTNESS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifPimBrightness' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPimBrightness_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMBRIGHTNESS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifPimBrightness' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifPimBrightness_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMBRIGHTNESS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifPimColorBalance' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPimColorBalance_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMCOLORBALANCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifPimColorBalance' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPimColorBalance_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMCOLORBALANCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifPimColorBalance' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifPimColorBalance_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMCOLORBALANCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifPimContrast' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPimContrast_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMCONTRAST, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifPimContrast' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPimContrast_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMCONTRAST, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifPimContrast' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifPimContrast_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMCONTRAST, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifPimInfo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPimInfo_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMINFO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifPimInfo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPimInfo_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMINFO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifPimInfo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifPimInfo_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMINFO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifPimSaturation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPimSaturation_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMSATURATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifPimSaturation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPimSaturation_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMSATURATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifPimSaturation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifPimSaturation_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMSATURATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifPimSharpness' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPimSharpness_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMSHARPNESS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifPimSharpness' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPimSharpness_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMSHARPNESS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifPimSharpness' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifPimSharpness_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIMSHARPNESS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifPixelXDimension' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPixelXDimension_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIXELXDIMENSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifPixelXDimension' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPixelXDimension_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIXELXDIMENSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifPixelXDimension' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifPixelXDimension_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIXELXDIMENSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifPixelYDimension' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPixelYDimension_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIXELYDIMENSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifPixelYDimension' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPixelYDimension_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIXELYDIMENSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifPixelYDimension' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifPixelYDimension_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPIXELYDIMENSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifPlanarConfiguration' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPlanarConfiguration_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPLANARCONFIGURATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifPlanarConfiguration' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPlanarConfiguration_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPLANARCONFIGURATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifPlanarConfiguration' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifPlanarConfiguration_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPLANARCONFIGURATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifPrimaryChromaticities' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPrimaryChromaticities_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPRIMARYCHROMATICITIES, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifPrimaryChromaticities' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPrimaryChromaticities_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPRIMARYCHROMATICITIES, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifPrimaryChromaticities' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifPrimaryChromaticities_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPRIMARYCHROMATICITIES, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifPrintImageMatchingIFDPointer' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPrintImageMatchingIFDPointer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPRINTIMAGEMATCHINGIFDPOINTER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifPrintImageMatchingIFDPointer' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifPrintImageMatchingIFDPointer_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPRINTIMAGEMATCHINGIFDPOINTER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifPrintImageMatchingIFDPointer' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifPrintImageMatchingIFDPointer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFPRINTIMAGEMATCHINGIFDPOINTER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifRecOffset' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifRecOffset_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRECOFFSET, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifRecOffset' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifRecOffset_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRECOFFSET, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifRecOffset' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifRecOffset_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRECOFFSET, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifReferenceBlackWhite' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifReferenceBlackWhite_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFREFERENCEBLACKWHITE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifReferenceBlackWhite' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifReferenceBlackWhite_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFREFERENCEBLACKWHITE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifReferenceBlackWhite' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifReferenceBlackWhite_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFREFERENCEBLACKWHITE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifRelatedFile' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifRelatedFile_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRELATEDFILE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifRelatedFile' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifRelatedFile_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRELATEDFILE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifRelatedFile' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifRelatedFile_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRELATEDFILE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifRelatedImageFileFormat' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifRelatedImageFileFormat_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRELATEDIMAGEFILEFORMAT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifRelatedImageFileFormat' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifRelatedImageFileFormat_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRELATEDIMAGEFILEFORMAT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifRelatedImageFileFormat' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifRelatedImageFileFormat_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRELATEDIMAGEFILEFORMAT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifRelatedImageLength' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifRelatedImageLength_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRELATEDIMAGELENGTH, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifRelatedImageLength' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifRelatedImageLength_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRELATEDIMAGELENGTH, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifRelatedImageLength' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifRelatedImageLength_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRELATEDIMAGELENGTH, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifRelatedImageWidth' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifRelatedImageWidth_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRELATEDIMAGEWIDTH, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifRelatedImageWidth' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifRelatedImageWidth_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRELATEDIMAGEWIDTH, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifRelatedImageWidth' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifRelatedImageWidth_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRELATEDIMAGEWIDTH, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifRelatedSoundFile' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifRelatedSoundFile_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRELATEDSOUNDFILE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifRelatedSoundFile' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifRelatedSoundFile_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRELATEDSOUNDFILE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifRelatedSoundFile' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifRelatedSoundFile_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRELATEDSOUNDFILE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifResolution' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifResolution_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRESOLUTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifResolution' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifResolution_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRESOLUTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifResolution' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifResolution_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRESOLUTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifResolutionUnit' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifResolutionUnit_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRESOLUTIONUNIT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifResolutionUnit' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifResolutionUnit_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRESOLUTIONUNIT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifResolutionUnit' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifResolutionUnit_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFRESOLUTIONUNIT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifRowsPerStrip' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifRowsPerStrip_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFROWSPERSTRIP, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifRowsPerStrip' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifRowsPerStrip_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFROWSPERSTRIP, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifRowsPerStrip' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifRowsPerStrip_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFROWSPERSTRIP, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSamplesPerPixel' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSamplesPerPixel_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSAMPLESPERPIXEL, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSamplesPerPixel' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSamplesPerPixel_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSAMPLESPERPIXEL, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSamplesPerPixel' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSamplesPerPixel_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSAMPLESPERPIXEL, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSaturation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSaturation_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSATURATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSaturation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSaturation_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSATURATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSaturation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSaturation_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSATURATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSceneCaptureType' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSceneCaptureType_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSCENECAPTURETYPE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSceneCaptureType' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSceneCaptureType_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSCENECAPTURETYPE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSceneCaptureType' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSceneCaptureType_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSCENECAPTURETYPE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSceneType' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSceneType_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSCENETYPE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSceneType' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSceneType_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSCENETYPE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSceneType' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSceneType_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSCENETYPE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSeconds' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSeconds_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSECONDS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSeconds' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSeconds_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSECONDS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSeconds' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSeconds_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSECONDS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSensingMethod' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSensingMethod_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSENSINGMETHOD, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSensingMethod' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSensingMethod_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSENSINGMETHOD, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSensingMethod' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSensingMethod_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSENSINGMETHOD, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSharpness' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSharpness_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSHARPNESS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSharpness' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSharpness_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSHARPNESS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSharpness' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSharpness_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSHARPNESS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifShutterSpeedValue' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifShutterSpeedValue_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSHUTTERSPEEDVALUE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifShutterSpeedValue' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifShutterSpeedValue_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSHUTTERSPEEDVALUE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifShutterSpeedValue' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifShutterSpeedValue_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSHUTTERSPEEDVALUE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSoftware' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSoftware_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSOFTWARE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSoftware' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSoftware_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSOFTWARE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSoftware' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSoftware_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSOFTWARE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSpatialFrequencyResponse' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSpatialFrequencyResponse_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSPATIALFREQUENCYRESPONSE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSpatialFrequencyResponse' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSpatialFrequencyResponse_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSPATIALFREQUENCYRESPONSE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSpatialFrequencyResponse' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSpatialFrequencyResponse_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSPATIALFREQUENCYRESPONSE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSpectralSensitivity' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSpectralSensitivity_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSPECTRALSENSITIVITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSpectralSensitivity' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSpectralSensitivity_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSPECTRALSENSITIVITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSpectralSensitivity' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSpectralSensitivity_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSPECTRALSENSITIVITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifStripByteCounts' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifStripByteCounts_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSTRIPBYTECOUNTS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifStripByteCounts' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifStripByteCounts_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSTRIPBYTECOUNTS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifStripByteCounts' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifStripByteCounts_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSTRIPBYTECOUNTS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifStripOffsets' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifStripOffsets_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSTRIPOFFSETS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifStripOffsets' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifStripOffsets_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSTRIPOFFSETS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifStripOffsets' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifStripOffsets_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSTRIPOFFSETS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSubSecTime' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubSecTime_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBSECTIME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSubSecTime' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubSecTime_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBSECTIME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSubSecTime' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSubSecTime_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBSECTIME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSubSecTimeDigitized' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubSecTimeDigitized_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBSECTIMEDIGITIZED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSubSecTimeDigitized' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubSecTimeDigitized_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBSECTIMEDIGITIZED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSubSecTimeDigitized' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSubSecTimeDigitized_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBSECTIMEDIGITIZED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSubSecTimeOriginal' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubSecTimeOriginal_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBSECTIMEORIGINAL, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSubSecTimeOriginal' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubSecTimeOriginal_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBSECTIMEORIGINAL, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSubSecTimeOriginal' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSubSecTimeOriginal_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBSECTIMEORIGINAL, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSubjectArea' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubjectArea_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBJECTAREA, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSubjectArea' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubjectArea_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBJECTAREA, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSubjectArea' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSubjectArea_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBJECTAREA, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSubjectDistance' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubjectDistance_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBJECTDISTANCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSubjectDistance' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubjectDistance_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBJECTDISTANCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSubjectDistance' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSubjectDistance_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBJECTDISTANCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSubjectDistanceRange' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubjectDistanceRange_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBJECTDISTANCERANGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSubjectDistanceRange' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubjectDistanceRange_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBJECTDISTANCERANGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSubjectDistanceRange' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSubjectDistanceRange_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBJECTDISTANCERANGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSubjectLocation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubjectLocation_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBJECTLOCATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSubjectLocation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubjectLocation_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBJECTLOCATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSubjectLocation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSubjectLocation_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBJECTLOCATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifSubseconds' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubseconds_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBSECONDS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifSubseconds' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifSubseconds_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBSECONDS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifSubseconds' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifSubseconds_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFSUBSECONDS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifTagid' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifTagid_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFTAGID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifTagid' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifTagid_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFTAGID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifTagid' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifTagid_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFTAGID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifTransferFunction' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifTransferFunction_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFTRANSFERFUNCTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifTransferFunction' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifTransferFunction_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFTRANSFERFUNCTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifTransferFunction' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifTransferFunction_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFTRANSFERFUNCTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifUnknown' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifUnknown_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFUNKNOWN, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifUnknown' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifUnknown_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFUNKNOWN, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifUnknown' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifUnknown_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFUNKNOWN, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifUserComment' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifUserComment_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFUSERCOMMENT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifUserComment' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifUserComment_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFUSERCOMMENT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifUserComment' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifUserComment_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFUSERCOMMENT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifUserInfo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifUserInfo_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFUSERINFO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifUserInfo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifUserInfo_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFUSERINFO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifUserInfo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifUserInfo_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFUSERINFO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifVersionInfo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifVersionInfo_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFVERSIONINFO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifVersionInfo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifVersionInfo_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFVERSIONINFO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifVersionInfo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifVersionInfo_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFVERSIONINFO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifWhiteBalance' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifWhiteBalance_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFWHITEBALANCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifWhiteBalance' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifWhiteBalance_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFWHITEBALANCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifWhiteBalance' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifWhiteBalance_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFWHITEBALANCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifWhitePoint' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifWhitePoint_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFWHITEPOINT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifWhitePoint' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifWhitePoint_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFWHITEPOINT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifWhitePoint' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifWhitePoint_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFWHITEPOINT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifWidth' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifWidth_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFWIDTH, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifWidth' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifWidth_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFWIDTH, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifWidth' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifWidth_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFWIDTH, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifXResolution' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifXResolution_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFXRESOLUTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifXResolution' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifXResolution_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFXRESOLUTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifXResolution' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifXResolution_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFXRESOLUTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifYCbCrCoefficients' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifYCbCrCoefficients_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFYCBCRCOEFFICIENTS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifYCbCrCoefficients' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifYCbCrCoefficients_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFYCBCRCOEFFICIENTS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifYCbCrCoefficients' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifYCbCrCoefficients_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFYCBCRCOEFFICIENTS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifYCbCrPositioning' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifYCbCrPositioning_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFYCBCRPOSITIONING, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifYCbCrPositioning' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifYCbCrPositioning_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFYCBCRPOSITIONING, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifYCbCrPositioning' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifYCbCrPositioning_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFYCBCRPOSITIONING, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifYCbCrSubSampling' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifYCbCrSubSampling_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFYCBCRSUBSAMPLING, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifYCbCrSubSampling' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifYCbCrSubSampling_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFYCBCRSUBSAMPLING, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifYCbCrSubSampling' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifYCbCrSubSampling_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFYCBCRSUBSAMPLING, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifYResolution' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifYResolution_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFYRESOLUTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifYResolution' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifYResolution_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFYRESOLUTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifYResolution' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifYResolution_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.EXIFYRESOLUTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'FoafMember' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFoafMember_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.FOAFMEMBER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'FoafMember' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFoafMember_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.FOAFMEMBER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'FoafMember' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFoafMember_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.FOAFMEMBER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'FoafName' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFoafName_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.FOAFNAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'FoafName' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFoafName_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.FOAFNAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'FoafName' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFoafName_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.FOAFNAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Homepage' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHomepage_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.HOMEPAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Homepage' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHomepage_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.HOMEPAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Homepage' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllHomepage_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.HOMEPAGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Identifier' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIdentifier_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.IDENTIFIER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Identifier' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIdentifier_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.IDENTIFIER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Identifier' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllIdentifier_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.IDENTIFIER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'NaoUpdatable' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNaoUpdatable_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.NAOUPDATABLE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'NaoUpdatable' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNaoUpdatable_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.NAOUPDATABLE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'NaoUpdatable' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNaoUpdatable_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.NAOUPDATABLE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'NrlMaxCardinality' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNrlMaxCardinality_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.NRLMAXCARDINALITY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'NrlMaxCardinality' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNrlMaxCardinality_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.NRLMAXCARDINALITY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'NrlMaxCardinality' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNrlMaxCardinality_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.NRLMAXCARDINALITY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'NsReply' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNsReply_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.NSREPLY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'NsReply' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNsReply_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.NSREPLY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'NsReply' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNsReply_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.NSREPLY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Page' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPage_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.PAGE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Page' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPage_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.PAGE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Page' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPage_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.PAGE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PreferredNamespacePrefix' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPreferredNamespacePrefix_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.PREFERREDNAMESPACEPREFIX, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PreferredNamespacePrefix' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPreferredNamespacePrefix_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.PREFERREDNAMESPACEPREFIX, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PreferredNamespacePrefix' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPreferredNamespacePrefix_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.PREFERREDNAMESPACEPREFIX, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PreferredNamespaceUri' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPreferredNamespaceUri_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.PREFERREDNAMESPACEURI, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PreferredNamespaceUri' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPreferredNamespaceUri_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.PREFERREDNAMESPACEURI, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PreferredNamespaceUri' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPreferredNamespaceUri_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.PREFERREDNAMESPACEURI, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Rating' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRating_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.RATING, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Rating' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRating_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.RATING, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Rating' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRating_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.RATING, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Relation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRelation_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.RELATION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Relation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRelation_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.RELATION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Relation' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRelation_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.RELATION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Replyof' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReplyof_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.REPLYOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Replyof' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReplyof_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.REPLYOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Replyof' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllReplyof_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.REPLYOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Rights' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRights_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.RIGHTS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Rights' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRights_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.RIGHTS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Rights' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRights_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.RIGHTS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Subsecond' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubsecond_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.SUBSECOND, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Subsecond' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubsecond_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.SUBSECOND, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Subsecond' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSubsecond_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.SUBSECOND, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SystemRole' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSystemRole_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.SYSTEMROLE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SystemRole' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSystemRole_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.SYSTEMROLE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SystemRole' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSystemRole_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.SYSTEMROLE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Tagnumber' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTagnumber_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.TAGNUMBER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Tagnumber' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTagnumber_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.TAGNUMBER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Tagnumber' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTagnumber_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.TAGNUMBER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TermsCreated' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsCreated_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSCREATED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TermsCreated' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsCreated_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSCREATED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TermsCreated' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTermsCreated_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSCREATED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TermsIsPartOf' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsIsPartOf_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSISPARTOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TermsIsPartOf' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsIsPartOf_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSISPARTOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TermsIsPartOf' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTermsIsPartOf_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSISPARTOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TermsLicense' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsLicense_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSLICENSE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TermsLicense' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsLicense_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSLICENSE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TermsLicense' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTermsLicense_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSLICENSE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TermsModified' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsModified_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSMODIFIED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TermsModified' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsModified_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSMODIFIED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TermsModified' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTermsModified_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSMODIFIED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TermsPart' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsPart_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSPART, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TermsPart' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsPart_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSPART, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TermsPart' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTermsPart_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSPART, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TermsVersion' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsVersion_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSVERSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TermsVersion' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTermsVersion_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSVERSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TermsVersion' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTermsVersion_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.TERMSVERSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Type' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllType_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.TYPE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Type' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllType_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.TYPE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Type' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllType_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.TYPE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ContextAttribute' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContextAttribute_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.dcon.Element.CONTEXTATTRIBUTE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ContextAttribute' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContextAttribute_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.dcon.Element.CONTEXTATTRIBUTE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ContextAttribute' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllContextAttribute_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.dcon.Element.CONTEXTATTRIBUTE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AccessPointID' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAccessPointID_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.ddo.ComputerNetwork.ACCESSPOINTID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AccessPointID' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAccessPointID_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.ddo.ComputerNetwork.ACCESSPOINTID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AccessPointID' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAccessPointID_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.ddo.ComputerNetwork.ACCESSPOINTID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'CellID' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCellID_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.ddo.CellularNetwork.CELLID, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'CellID' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCellID_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.ddo.CellularNetwork.CELLID, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'CellID' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCellID_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.ddo.CellularNetwork.CELLID, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'CustomAttribute' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCustomAttribute_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nco.Contact.CUSTOMATTRIBUTE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'CustomAttribute' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCustomAttribute_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nco.Contact.CUSTOMATTRIBUTE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'CustomAttribute' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCustomAttribute_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nco.Contact.CUSTOMATTRIBUTE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Geo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGeo_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nexif.Photo.GEO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Geo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGeo_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nexif.Photo.GEO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Geo' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGeo_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nexif.Photo.GEO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GeneratorOption' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGeneratorOption_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nie.InformationElement.GENERATOROPTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GeneratorOption' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGeneratorOption_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nie.InformationElement.GENERATOROPTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GeneratorOption' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGeneratorOption_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nie.InformationElement.GENERATOROPTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DatatypeProperty' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDatatypeProperty_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.pimo.Thing.DATATYPEPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DatatypeProperty' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDatatypeProperty_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.pimo.Thing.DATATYPEPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DatatypeProperty' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDatatypeProperty_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.pimo.Thing.DATATYPEPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DependencyDescription' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDependencyDescription_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.tmo.TaskDependency.DEPENDENCYDESCRIPTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DependencyDescription' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDependencyDescription_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.tmo.TaskDependency.DEPENDENCYDESCRIPTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DependencyDescription' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDependencyDescription_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.tmo.TaskDependency.DEPENDENCYDESCRIPTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TaskDescription' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTaskDescription_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.tmo.Task.TASKDESCRIPTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TaskDescription' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTaskDescription_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.tmo.Task.TASKDESCRIPTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TaskDescription' to this RDFReactorThing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTaskDescription_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.tmo.Task.TASKDESCRIPTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@788a1836 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAccessRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ACCESSRIGHTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@788a1836 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAccessRights() {
		return Base.has(this.model, this.getResource(), ACCESSRIGHTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@788a1836 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAccessRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACCESSRIGHTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@788a1836 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAccessRights( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACCESSRIGHTS);
	}

     /**
     * Get all values of property AccessRights as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccessRights_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ACCESSRIGHTS);
	}
	
    /**
     * Get all values of property AccessRights as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAccessRights_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCESSRIGHTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AccessRights as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccessRights_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ACCESSRIGHTS);
	}

    /**
     * Get all values of property AccessRights as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAccessRights_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ACCESSRIGHTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AccessRights     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllAccessRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ACCESSRIGHTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property AccessRights as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllAccessRights_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCESSRIGHTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property AccessRights     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllAccessRights() {
		return Base.getAll(this.model, this.getResource(), ACCESSRIGHTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property AccessRights as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllAccessRights_as() {
		return Base.getAll_as(this.model, this.getResource(), ACCESSRIGHTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property AccessRights as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAccessRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ACCESSRIGHTS, value);
	}
	
    /**
     * Adds a value to property AccessRights as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAccessRights( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ACCESSRIGHTS, value);
	}
    /**
     * Adds a value to property AccessRights from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAccessRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, ACCESSRIGHTS, value);
	}
	
    /**
     * Adds a value to property AccessRights from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAccessRights(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), ACCESSRIGHTS, value);
	}
  

    /**
     * Sets a value of property AccessRights from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAccessRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ACCESSRIGHTS, value);
	}
	
    /**
     * Sets a value of property AccessRights from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAccessRights( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ACCESSRIGHTS, value);
	}
    /**
     * Sets a value of property AccessRights from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAccessRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, ACCESSRIGHTS, value);
	}
	
    /**
     * Sets a value of property AccessRights from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAccessRights(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), ACCESSRIGHTS, value);
	}
  


    /**
     * Removes a value of property AccessRights as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAccessRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ACCESSRIGHTS, value);
	}
	
    /**
     * Removes a value of property AccessRights as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAccessRights( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ACCESSRIGHTS, value);
	}
    /**
     * Removes a value of property AccessRights given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAccessRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, ACCESSRIGHTS, value);
	}
	
    /**
     * Removes a value of property AccessRights given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAccessRights(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), ACCESSRIGHTS, value);
	}
  
    /**
     * Removes all values of property AccessRights     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAccessRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ACCESSRIGHTS);
	}
	
    /**
     * Removes all values of property AccessRights	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAccessRights() {
		Base.removeAll(this.model, this.getResource(), ACCESSRIGHTS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7bf79b9a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasActualTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ACTUALTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7bf79b9a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasActualTime() {
		return Base.has(this.model, this.getResource(), ACTUALTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7bf79b9a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasActualTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACTUALTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7bf79b9a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasActualTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACTUALTIME);
	}

    /**
     * Get single value of property ActualTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getActualTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, ACTUALTIME);
	}
	
    /**
     * Get single value of property ActualTime as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getActualTime_asNode() {
		return Base.get_asNode(this.model, this.getResource(), ACTUALTIME);
	}
     /**
     * Get single value of property ActualTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getActualTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, ACTUALTIME, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property ActualTime  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getActualTime() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), ACTUALTIME, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property ActualTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addActualTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, ACTUALTIME, value, 1);
	}
	
    /**
     * Adds a value to property ActualTime as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addActualTime( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ACTUALTIME, value, 1);
	}
    /**
     * Adds a value to property ActualTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addActualTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, ACTUALTIME, value, 1);
	}
	
    /**
     * Adds a value to property ActualTime from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addActualTime(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ACTUALTIME, value, 1);
	}
 
 

    /**
     * Sets a value of property ActualTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setActualTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ACTUALTIME, value);
	}
	
    /**
     * Sets a value of property ActualTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setActualTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ACTUALTIME, value);
	}
    /**
     * Sets a value of property ActualTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setActualTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, ACTUALTIME, value);
	}
	
    /**
     * Sets a value of property ActualTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setActualTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), ACTUALTIME, value);
	}
  


    /**
     * Removes a value of property ActualTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeActualTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ACTUALTIME, value);
	}
	
    /**
     * Removes a value of property ActualTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeActualTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ACTUALTIME, value);
	}
    /**
     * Removes a value of property ActualTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeActualTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, ACTUALTIME, value);
	}
	
    /**
     * Removes a value of property ActualTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeActualTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), ACTUALTIME, value);
	}
  
    /**
     * Removes all values of property ActualTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllActualTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ACTUALTIME);
	}
	
    /**
     * Removes all values of property ActualTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllActualTime() {
		Base.removeAll(this.model, this.getResource(), ACTUALTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75dd05d6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAlt(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ALT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75dd05d6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAlt() {
		return Base.has(this.model, this.getResource(), ALT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75dd05d6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAlt(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ALT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75dd05d6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAlt( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ALT);
	}

    /**
     * Get single value of property Alt as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getAlt_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, ALT);
	}
	
    /**
     * Get single value of property Alt as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getAlt_asNode() {
		return Base.get_asNode(this.model, this.getResource(), ALT);
	}
     /**
     * Get single value of property Alt     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Float getAlt(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Float) Base.get(model, instanceResource, ALT, java.lang.Float.class);
	}
	
    /**
     * Get single value of property Alt  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Float getAlt() {
		return (java.lang.Float) Base.get(this.model, this.getResource(), ALT, java.lang.Float.class);
	}
  
    /**
     * Adds a value to property Alt as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addAlt(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, ALT, value, 1);
	}
	
    /**
     * Adds a value to property Alt as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addAlt( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ALT, value, 1);
	}
    /**
     * Adds a value to property Alt from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addAlt(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value)
    throws CardinalityException {
		Base.add(model, instanceResource, ALT, value, 1);
	}
	
    /**
     * Adds a value to property Alt from an instance of java.lang.Float 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addAlt(java.lang.Float value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ALT, value, 1);
	}
 
 

    /**
     * Sets a value of property Alt from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAlt( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ALT, value);
	}
	
    /**
     * Sets a value of property Alt from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAlt( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ALT, value);
	}
    /**
     * Sets a value of property Alt from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAlt(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, ALT, value);
	}
	
    /**
     * Sets a value of property Alt from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAlt(java.lang.Float value) {
		Base.set(this.model, this.getResource(), ALT, value);
	}
  


    /**
     * Removes a value of property Alt as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAlt( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ALT, value);
	}
	
    /**
     * Removes a value of property Alt as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAlt( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ALT, value);
	}
    /**
     * Removes a value of property Alt given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAlt(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, ALT, value);
	}
	
    /**
     * Removes a value of property Alt given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAlt(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), ALT, value);
	}
  
    /**
     * Removes all values of property Alt     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAlt( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ALT);
	}
	
    /**
     * Removes all values of property Alt	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAlt() {
		Base.removeAll(this.model, this.getResource(), ALT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@84bbf80 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAltSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ALTSYMBOL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@84bbf80 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAltSymbol() {
		return Base.has(this.model, this.getResource(), ALTSYMBOL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@84bbf80 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAltSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ALTSYMBOL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@84bbf80 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAltSymbol( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ALTSYMBOL);
	}

     /**
     * Get all values of property AltSymbol as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAltSymbol_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ALTSYMBOL);
	}
	
    /**
     * Get all values of property AltSymbol as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAltSymbol_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALTSYMBOL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AltSymbol as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAltSymbol_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ALTSYMBOL);
	}

    /**
     * Get all values of property AltSymbol as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAltSymbol_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ALTSYMBOL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AltSymbol     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nao.Symbol> getAllAltSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ALTSYMBOL, eu.dime.ps.semantic.model.nao.Symbol.class);
	}
	
    /**
     * Get all values of property AltSymbol as a ReactorResult of Symbol 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nao.Symbol> getAllAltSymbol_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALTSYMBOL, eu.dime.ps.semantic.model.nao.Symbol.class);
	}

    /**
     * Get all values of property AltSymbol     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nao.Symbol> getAllAltSymbol() {
		return Base.getAll(this.model, this.getResource(), ALTSYMBOL, eu.dime.ps.semantic.model.nao.Symbol.class);
	}

    /**
     * Get all values of property AltSymbol as a ReactorResult of Symbol 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nao.Symbol> getAllAltSymbol_as() {
		return Base.getAll_as(this.model, this.getResource(), ALTSYMBOL, eu.dime.ps.semantic.model.nao.Symbol.class);
	}
 
    /**
     * Adds a value to property AltSymbol as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAltSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ALTSYMBOL, value);
	}
	
    /**
     * Adds a value to property AltSymbol as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAltSymbol( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ALTSYMBOL, value);
	}
    /**
     * Adds a value to property AltSymbol from an instance of Symbol 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAltSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.add(model, instanceResource, ALTSYMBOL, value);
	}
	
    /**
     * Adds a value to property AltSymbol from an instance of Symbol 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAltSymbol(eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.add(this.model, this.getResource(), ALTSYMBOL, value);
	}
  

    /**
     * Sets a value of property AltSymbol from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAltSymbol( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ALTSYMBOL, value);
	}
	
    /**
     * Sets a value of property AltSymbol from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAltSymbol( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ALTSYMBOL, value);
	}
    /**
     * Sets a value of property AltSymbol from an instance of Symbol 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAltSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.set(model, instanceResource, ALTSYMBOL, value);
	}
	
    /**
     * Sets a value of property AltSymbol from an instance of Symbol 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAltSymbol(eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.set(this.model, this.getResource(), ALTSYMBOL, value);
	}
  


    /**
     * Removes a value of property AltSymbol as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAltSymbol( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ALTSYMBOL, value);
	}
	
    /**
     * Removes a value of property AltSymbol as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAltSymbol( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ALTSYMBOL, value);
	}
    /**
     * Removes a value of property AltSymbol given as an instance of Symbol 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAltSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.remove(model, instanceResource, ALTSYMBOL, value);
	}
	
    /**
     * Removes a value of property AltSymbol given as an instance of Symbol 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAltSymbol(eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.remove(this.model, this.getResource(), ALTSYMBOL, value);
	}
  
    /**
     * Removes all values of property AltSymbol     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAltSymbol( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ALTSYMBOL);
	}
	
    /**
     * Removes all values of property AltSymbol	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAltSymbol() {
		Base.removeAll(this.model, this.getResource(), ALTSYMBOL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5adfb9cd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAnnotation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ANNOTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5adfb9cd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAnnotation() {
		return Base.has(this.model, this.getResource(), ANNOTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5adfb9cd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAnnotation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ANNOTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5adfb9cd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAnnotation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ANNOTATION);
	}

     /**
     * Get all values of property Annotation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAnnotation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ANNOTATION);
	}
	
    /**
     * Get all values of property Annotation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAnnotation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ANNOTATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Annotation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAnnotation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ANNOTATION);
	}

    /**
     * Get all values of property Annotation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAnnotation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ANNOTATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Annotation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllAnnotation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ANNOTATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Annotation as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllAnnotation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ANNOTATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Annotation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllAnnotation() {
		return Base.getAll(this.model, this.getResource(), ANNOTATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Annotation as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllAnnotation_as() {
		return Base.getAll_as(this.model, this.getResource(), ANNOTATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Annotation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAnnotation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ANNOTATION, value);
	}
	
    /**
     * Adds a value to property Annotation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAnnotation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ANNOTATION, value);
	}
    /**
     * Adds a value to property Annotation from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAnnotation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, ANNOTATION, value);
	}
	
    /**
     * Adds a value to property Annotation from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAnnotation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), ANNOTATION, value);
	}
  

    /**
     * Sets a value of property Annotation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAnnotation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ANNOTATION, value);
	}
	
    /**
     * Sets a value of property Annotation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAnnotation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ANNOTATION, value);
	}
    /**
     * Sets a value of property Annotation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAnnotation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, ANNOTATION, value);
	}
	
    /**
     * Sets a value of property Annotation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAnnotation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), ANNOTATION, value);
	}
  


    /**
     * Removes a value of property Annotation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAnnotation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ANNOTATION, value);
	}
	
    /**
     * Removes a value of property Annotation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAnnotation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ANNOTATION, value);
	}
    /**
     * Removes a value of property Annotation given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAnnotation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, ANNOTATION, value);
	}
	
    /**
     * Removes a value of property Annotation given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAnnotation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), ANNOTATION, value);
	}
  
    /**
     * Removes all values of property Annotation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAnnotation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ANNOTATION);
	}
	
    /**
     * Removes all values of property Annotation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAnnotation() {
		Base.removeAll(this.model, this.getResource(), ANNOTATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@346d61cf has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAttention(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ATTENTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@346d61cf has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAttention() {
		return Base.has(this.model, this.getResource(), ATTENTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@346d61cf has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAttention(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ATTENTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@346d61cf has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAttention( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ATTENTION);
	}

     /**
     * Get all values of property Attention as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAttention_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ATTENTION);
	}
	
    /**
     * Get all values of property Attention as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAttention_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATTENTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Attention as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAttention_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ATTENTION);
	}

    /**
     * Get all values of property Attention as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAttention_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ATTENTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Attention     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dcon.Attention> getAllAttention(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ATTENTION, eu.dime.ps.semantic.model.dcon.Attention.class);
	}
	
    /**
     * Get all values of property Attention as a ReactorResult of Attention 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dcon.Attention> getAllAttention_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATTENTION, eu.dime.ps.semantic.model.dcon.Attention.class);
	}

    /**
     * Get all values of property Attention     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dcon.Attention> getAllAttention() {
		return Base.getAll(this.model, this.getResource(), ATTENTION, eu.dime.ps.semantic.model.dcon.Attention.class);
	}

    /**
     * Get all values of property Attention as a ReactorResult of Attention 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dcon.Attention> getAllAttention_as() {
		return Base.getAll_as(this.model, this.getResource(), ATTENTION, eu.dime.ps.semantic.model.dcon.Attention.class);
	}
 
    /**
     * Adds a value to property Attention as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAttention(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ATTENTION, value);
	}
	
    /**
     * Adds a value to property Attention as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAttention( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ATTENTION, value);
	}
    /**
     * Adds a value to property Attention from an instance of Attention 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAttention(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Attention value) {
		Base.add(model, instanceResource, ATTENTION, value);
	}
	
    /**
     * Adds a value to property Attention from an instance of Attention 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAttention(eu.dime.ps.semantic.model.dcon.Attention value) {
		Base.add(this.model, this.getResource(), ATTENTION, value);
	}
  

    /**
     * Sets a value of property Attention from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAttention( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ATTENTION, value);
	}
	
    /**
     * Sets a value of property Attention from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAttention( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ATTENTION, value);
	}
    /**
     * Sets a value of property Attention from an instance of Attention 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAttention(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Attention value) {
		Base.set(model, instanceResource, ATTENTION, value);
	}
	
    /**
     * Sets a value of property Attention from an instance of Attention 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAttention(eu.dime.ps.semantic.model.dcon.Attention value) {
		Base.set(this.model, this.getResource(), ATTENTION, value);
	}
  


    /**
     * Removes a value of property Attention as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAttention( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ATTENTION, value);
	}
	
    /**
     * Removes a value of property Attention as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAttention( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ATTENTION, value);
	}
    /**
     * Removes a value of property Attention given as an instance of Attention 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAttention(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Attention value) {
		Base.remove(model, instanceResource, ATTENTION, value);
	}
	
    /**
     * Removes a value of property Attention given as an instance of Attention 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAttention(eu.dime.ps.semantic.model.dcon.Attention value) {
		Base.remove(this.model, this.getResource(), ATTENTION, value);
	}
  
    /**
     * Removes all values of property Attention     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAttention( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ATTENTION);
	}
	
    /**
     * Removes all values of property Attention	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAttention() {
		Base.removeAll(this.model, this.getResource(), ATTENTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21871d9b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21871d9b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCardinality() {
		return Base.has(this.model, this.getResource(), CARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21871d9b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21871d9b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCardinality( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CARDINALITY);
	}

     /**
     * Get all values of property Cardinality as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCardinality_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CARDINALITY);
	}
	
    /**
     * Get all values of property Cardinality as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCardinality_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Cardinality as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCardinality_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CARDINALITY);
	}

    /**
     * Get all values of property Cardinality as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCardinality_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Cardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CARDINALITY, java.lang.String.class);
	}
	
    /**
     * Get all values of property Cardinality as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllCardinality_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CARDINALITY, java.lang.String.class);
	}

    /**
     * Get all values of property Cardinality     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllCardinality() {
		return Base.getAll(this.model, this.getResource(), CARDINALITY, java.lang.String.class);
	}

    /**
     * Get all values of property Cardinality as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllCardinality_as() {
		return Base.getAll_as(this.model, this.getResource(), CARDINALITY, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Cardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CARDINALITY, value);
	}
	
    /**
     * Adds a value to property Cardinality as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CARDINALITY, value);
	}
    /**
     * Adds a value to property Cardinality from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, CARDINALITY, value);
	}
	
    /**
     * Adds a value to property Cardinality from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCardinality(java.lang.String value) {
		Base.add(this.model, this.getResource(), CARDINALITY, value);
	}
  

    /**
     * Sets a value of property Cardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CARDINALITY, value);
	}
	
    /**
     * Sets a value of property Cardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CARDINALITY, value);
	}
    /**
     * Sets a value of property Cardinality from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, CARDINALITY, value);
	}
	
    /**
     * Sets a value of property Cardinality from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCardinality(java.lang.String value) {
		Base.set(this.model, this.getResource(), CARDINALITY, value);
	}
  


    /**
     * Removes a value of property Cardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CARDINALITY, value);
	}
	
    /**
     * Removes a value of property Cardinality as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CARDINALITY, value);
	}
    /**
     * Removes a value of property Cardinality given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, CARDINALITY, value);
	}
	
    /**
     * Removes a value of property Cardinality given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCardinality(java.lang.String value) {
		Base.remove(this.model, this.getResource(), CARDINALITY, value);
	}
  
    /**
     * Removes all values of property Cardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CARDINALITY);
	}
	
    /**
     * Removes all values of property Cardinality	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCardinality() {
		Base.removeAll(this.model, this.getResource(), CARDINALITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6d0ff6e0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasClassRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CLASSROLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6d0ff6e0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasClassRole() {
		return Base.has(this.model, this.getResource(), CLASSROLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6d0ff6e0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasClassRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CLASSROLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6d0ff6e0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasClassRole( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CLASSROLE);
	}

    /**
     * Get single value of property ClassRole as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getClassRole_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, CLASSROLE);
	}
	
    /**
     * Get single value of property ClassRole as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getClassRole_asNode() {
		return Base.get_asNode(this.model, this.getResource(), CLASSROLE);
	}
     /**
     * Get single value of property ClassRole     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.pimo.ClassRole getClassRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.pimo.ClassRole) Base.get(model, instanceResource, CLASSROLE, eu.dime.ps.semantic.model.pimo.ClassRole.class);
	}
	
    /**
     * Get single value of property ClassRole  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.pimo.ClassRole getClassRole() {
		return (eu.dime.ps.semantic.model.pimo.ClassRole) Base.get(this.model, this.getResource(), CLASSROLE, eu.dime.ps.semantic.model.pimo.ClassRole.class);
	}
  
    /**
     * Adds a value to property ClassRole as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addClassRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CLASSROLE, value, 1);
	}
	
    /**
     * Adds a value to property ClassRole as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addClassRole( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CLASSROLE, value, 1);
	}
    /**
     * Adds a value to property ClassRole from an instance of ClassRole 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addClassRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.ClassRole value)
    throws CardinalityException {
		Base.add(model, instanceResource, CLASSROLE, value, 1);
	}
	
    /**
     * Adds a value to property ClassRole from an instance of ClassRole 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addClassRole(eu.dime.ps.semantic.model.pimo.ClassRole value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CLASSROLE, value, 1);
	}
 
 

    /**
     * Sets a value of property ClassRole from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setClassRole( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CLASSROLE, value);
	}
	
    /**
     * Sets a value of property ClassRole from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setClassRole( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CLASSROLE, value);
	}
    /**
     * Sets a value of property ClassRole from an instance of ClassRole 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setClassRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.ClassRole value) {
		Base.set(model, instanceResource, CLASSROLE, value);
	}
	
    /**
     * Sets a value of property ClassRole from an instance of ClassRole 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setClassRole(eu.dime.ps.semantic.model.pimo.ClassRole value) {
		Base.set(this.model, this.getResource(), CLASSROLE, value);
	}
  


    /**
     * Removes a value of property ClassRole as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeClassRole( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CLASSROLE, value);
	}
	
    /**
     * Removes a value of property ClassRole as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeClassRole( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CLASSROLE, value);
	}
    /**
     * Removes a value of property ClassRole given as an instance of ClassRole 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeClassRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.ClassRole value) {
		Base.remove(model, instanceResource, CLASSROLE, value);
	}
	
    /**
     * Removes a value of property ClassRole given as an instance of ClassRole 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeClassRole(eu.dime.ps.semantic.model.pimo.ClassRole value) {
		Base.remove(this.model, this.getResource(), CLASSROLE, value);
	}
  
    /**
     * Removes all values of property ClassRole     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllClassRole( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CLASSROLE);
	}
	
    /**
     * Removes all values of property ClassRole	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllClassRole() {
		Base.removeAll(this.model, this.getResource(), CLASSROLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@46154850 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasConnectivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONNECTIVITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@46154850 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasConnectivity() {
		return Base.has(this.model, this.getResource(), CONNECTIVITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@46154850 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasConnectivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONNECTIVITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@46154850 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasConnectivity( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONNECTIVITY);
	}

     /**
     * Get all values of property Connectivity as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllConnectivity_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONNECTIVITY);
	}
	
    /**
     * Get all values of property Connectivity as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllConnectivity_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONNECTIVITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Connectivity as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllConnectivity_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONNECTIVITY);
	}

    /**
     * Get all values of property Connectivity as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllConnectivity_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONNECTIVITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Connectivity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dcon.Connectivity> getAllConnectivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONNECTIVITY, eu.dime.ps.semantic.model.dcon.Connectivity.class);
	}
	
    /**
     * Get all values of property Connectivity as a ReactorResult of Connectivity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dcon.Connectivity> getAllConnectivity_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONNECTIVITY, eu.dime.ps.semantic.model.dcon.Connectivity.class);
	}

    /**
     * Get all values of property Connectivity     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dcon.Connectivity> getAllConnectivity() {
		return Base.getAll(this.model, this.getResource(), CONNECTIVITY, eu.dime.ps.semantic.model.dcon.Connectivity.class);
	}

    /**
     * Get all values of property Connectivity as a ReactorResult of Connectivity 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dcon.Connectivity> getAllConnectivity_as() {
		return Base.getAll_as(this.model, this.getResource(), CONNECTIVITY, eu.dime.ps.semantic.model.dcon.Connectivity.class);
	}
 
    /**
     * Adds a value to property Connectivity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addConnectivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONNECTIVITY, value);
	}
	
    /**
     * Adds a value to property Connectivity as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addConnectivity( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONNECTIVITY, value);
	}
    /**
     * Adds a value to property Connectivity from an instance of Connectivity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addConnectivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Connectivity value) {
		Base.add(model, instanceResource, CONNECTIVITY, value);
	}
	
    /**
     * Adds a value to property Connectivity from an instance of Connectivity 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addConnectivity(eu.dime.ps.semantic.model.dcon.Connectivity value) {
		Base.add(this.model, this.getResource(), CONNECTIVITY, value);
	}
  

    /**
     * Sets a value of property Connectivity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setConnectivity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONNECTIVITY, value);
	}
	
    /**
     * Sets a value of property Connectivity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setConnectivity( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONNECTIVITY, value);
	}
    /**
     * Sets a value of property Connectivity from an instance of Connectivity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setConnectivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Connectivity value) {
		Base.set(model, instanceResource, CONNECTIVITY, value);
	}
	
    /**
     * Sets a value of property Connectivity from an instance of Connectivity 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setConnectivity(eu.dime.ps.semantic.model.dcon.Connectivity value) {
		Base.set(this.model, this.getResource(), CONNECTIVITY, value);
	}
  


    /**
     * Removes a value of property Connectivity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeConnectivity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONNECTIVITY, value);
	}
	
    /**
     * Removes a value of property Connectivity as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeConnectivity( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONNECTIVITY, value);
	}
    /**
     * Removes a value of property Connectivity given as an instance of Connectivity 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeConnectivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Connectivity value) {
		Base.remove(model, instanceResource, CONNECTIVITY, value);
	}
	
    /**
     * Removes a value of property Connectivity given as an instance of Connectivity 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeConnectivity(eu.dime.ps.semantic.model.dcon.Connectivity value) {
		Base.remove(this.model, this.getResource(), CONNECTIVITY, value);
	}
  
    /**
     * Removes all values of property Connectivity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllConnectivity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONNECTIVITY);
	}
	
    /**
     * Removes all values of property Connectivity	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllConnectivity() {
		Base.removeAll(this.model, this.getResource(), CONNECTIVITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e0baf4c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContextTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTEXTTASK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e0baf4c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContextTask() {
		return Base.has(this.model, this.getResource(), CONTEXTTASK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e0baf4c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContextTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTEXTTASK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e0baf4c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContextTask( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTEXTTASK);
	}

    /**
     * Get single value of property ContextTask as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getContextTask_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, CONTEXTTASK);
	}
	
    /**
     * Get single value of property ContextTask as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getContextTask_asNode() {
		return Base.get_asNode(this.model, this.getResource(), CONTEXTTASK);
	}
     /**
     * Get single value of property ContextTask     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.tmo.Task getContextTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.tmo.Task) Base.get(model, instanceResource, CONTEXTTASK, eu.dime.ps.semantic.model.tmo.Task.class);
	}
	
    /**
     * Get single value of property ContextTask  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.tmo.Task getContextTask() {
		return (eu.dime.ps.semantic.model.tmo.Task) Base.get(this.model, this.getResource(), CONTEXTTASK, eu.dime.ps.semantic.model.tmo.Task.class);
	}
  
    /**
     * Adds a value to property ContextTask as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addContextTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CONTEXTTASK, value, 1);
	}
	
    /**
     * Adds a value to property ContextTask as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addContextTask( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTEXTTASK, value, 1);
	}
    /**
     * Adds a value to property ContextTask from an instance of Task 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addContextTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Task value)
    throws CardinalityException {
		Base.add(model, instanceResource, CONTEXTTASK, value, 1);
	}
	
    /**
     * Adds a value to property ContextTask from an instance of Task 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addContextTask(eu.dime.ps.semantic.model.tmo.Task value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTEXTTASK, value, 1);
	}
 
 

    /**
     * Sets a value of property ContextTask from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContextTask( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTEXTTASK, value);
	}
	
    /**
     * Sets a value of property ContextTask from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContextTask( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTEXTTASK, value);
	}
    /**
     * Sets a value of property ContextTask from an instance of Task 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContextTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Task value) {
		Base.set(model, instanceResource, CONTEXTTASK, value);
	}
	
    /**
     * Sets a value of property ContextTask from an instance of Task 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContextTask(eu.dime.ps.semantic.model.tmo.Task value) {
		Base.set(this.model, this.getResource(), CONTEXTTASK, value);
	}
  


    /**
     * Removes a value of property ContextTask as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContextTask( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTEXTTASK, value);
	}
	
    /**
     * Removes a value of property ContextTask as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContextTask( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTEXTTASK, value);
	}
    /**
     * Removes a value of property ContextTask given as an instance of Task 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContextTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Task value) {
		Base.remove(model, instanceResource, CONTEXTTASK, value);
	}
	
    /**
     * Removes a value of property ContextTask given as an instance of Task 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContextTask(eu.dime.ps.semantic.model.tmo.Task value) {
		Base.remove(this.model, this.getResource(), CONTEXTTASK, value);
	}
  
    /**
     * Removes all values of property ContextTask     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContextTask( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTEXTTASK);
	}
	
    /**
     * Removes all values of property ContextTask	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContextTask() {
		Base.removeAll(this.model, this.getResource(), CONTEXTTASK);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53753747 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53753747 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContributor() {
		return Base.has(this.model, this.getResource(), CONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53753747 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53753747 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContributor( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTRIBUTOR);
	}

     /**
     * Get all values of property Contributor as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContributor_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTRIBUTOR);
	}
	
    /**
     * Get all values of property Contributor as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContributor_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTRIBUTOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Contributor as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContributor_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTRIBUTOR);
	}

    /**
     * Get all values of property Contributor as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContributor_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTRIBUTOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Contributor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nao.Party> getAllContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTRIBUTOR, eu.dime.ps.semantic.model.nao.Party.class);
	}
	
    /**
     * Get all values of property Contributor as a ReactorResult of Party 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nao.Party> getAllContributor_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTRIBUTOR, eu.dime.ps.semantic.model.nao.Party.class);
	}

    /**
     * Get all values of property Contributor     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nao.Party> getAllContributor() {
		return Base.getAll(this.model, this.getResource(), CONTRIBUTOR, eu.dime.ps.semantic.model.nao.Party.class);
	}

    /**
     * Get all values of property Contributor as a ReactorResult of Party 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nao.Party> getAllContributor_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTRIBUTOR, eu.dime.ps.semantic.model.nao.Party.class);
	}
 
    /**
     * Adds a value to property Contributor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Adds a value to property Contributor as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addContributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTRIBUTOR, value);
	}
    /**
     * Adds a value to property Contributor from an instance of Party 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Party value) {
		Base.add(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Adds a value to property Contributor from an instance of Party 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addContributor(eu.dime.ps.semantic.model.nao.Party value) {
		Base.add(this.model, this.getResource(), CONTRIBUTOR, value);
	}
  

    /**
     * Sets a value of property Contributor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Sets a value of property Contributor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTRIBUTOR, value);
	}
    /**
     * Sets a value of property Contributor from an instance of Party 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Party value) {
		Base.set(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Sets a value of property Contributor from an instance of Party 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContributor(eu.dime.ps.semantic.model.nao.Party value) {
		Base.set(this.model, this.getResource(), CONTRIBUTOR, value);
	}
  


    /**
     * Removes a value of property Contributor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Removes a value of property Contributor as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTRIBUTOR, value);
	}
    /**
     * Removes a value of property Contributor given as an instance of Party 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Party value) {
		Base.remove(model, instanceResource, CONTRIBUTOR, value);
	}
	
    /**
     * Removes a value of property Contributor given as an instance of Party 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContributor(eu.dime.ps.semantic.model.nao.Party value) {
		Base.remove(this.model, this.getResource(), CONTRIBUTOR, value);
	}
  
    /**
     * Removes all values of property Contributor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTRIBUTOR);
	}
	
    /**
     * Removes all values of property Contributor	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContributor() {
		Base.removeAll(this.model, this.getResource(), CONTRIBUTOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ada5bd7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ada5bd7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCreated() {
		return Base.has(this.model, this.getResource(), CREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ada5bd7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ada5bd7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCreated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CREATED);
	}

    /**
     * Get single value of property Created as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getCreated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, CREATED);
	}
	
    /**
     * Get single value of property Created as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getCreated_asNode() {
		return Base.get_asNode(this.model, this.getResource(), CREATED);
	}
     /**
     * Get single value of property Created     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, CREATED, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property Created  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getCreated() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), CREATED, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property Created as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CREATED, value, 1);
	}
	
    /**
     * Adds a value to property Created as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addCreated( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CREATED, value, 1);
	}
    /**
     * Adds a value to property Created from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, CREATED, value, 1);
	}
	
    /**
     * Adds a value to property Created from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addCreated(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CREATED, value, 1);
	}
 
 

    /**
     * Sets a value of property Created from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CREATED, value);
	}
	
    /**
     * Sets a value of property Created from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CREATED, value);
	}
    /**
     * Sets a value of property Created from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, CREATED, value);
	}
	
    /**
     * Sets a value of property Created from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCreated(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), CREATED, value);
	}
  


    /**
     * Removes a value of property Created as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CREATED, value);
	}
	
    /**
     * Removes a value of property Created as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CREATED, value);
	}
    /**
     * Removes a value of property Created given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, CREATED, value);
	}
	
    /**
     * Removes a value of property Created given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCreated(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), CREATED, value);
	}
  
    /**
     * Removes all values of property Created     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CREATED);
	}
	
    /**
     * Removes all values of property Created	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCreated() {
		Base.removeAll(this.model, this.getResource(), CREATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@333bf7d0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@333bf7d0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCreator() {
		return Base.has(this.model, this.getResource(), CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@333bf7d0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@333bf7d0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCreator( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CREATOR);
	}

    /**
     * Get single value of property Creator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getCreator_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, CREATOR);
	}
	
    /**
     * Get single value of property Creator as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getCreator_asNode() {
		return Base.get_asNode(this.model, this.getResource(), CREATOR);
	}
     /**
     * Get single value of property Creator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.nao.Party getCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.nao.Party) Base.get(model, instanceResource, CREATOR, eu.dime.ps.semantic.model.nao.Party.class);
	}
	
    /**
     * Get single value of property Creator  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.nao.Party getCreator() {
		return (eu.dime.ps.semantic.model.nao.Party) Base.get(this.model, this.getResource(), CREATOR, eu.dime.ps.semantic.model.nao.Party.class);
	}
  
    /**
     * Adds a value to property Creator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CREATOR, value, 1);
	}
	
    /**
     * Adds a value to property Creator as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addCreator( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CREATOR, value, 1);
	}
    /**
     * Adds a value to property Creator from an instance of Party 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Party value)
    throws CardinalityException {
		Base.add(model, instanceResource, CREATOR, value, 1);
	}
	
    /**
     * Adds a value to property Creator from an instance of Party 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addCreator(eu.dime.ps.semantic.model.nao.Party value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CREATOR, value, 1);
	}
 
 

    /**
     * Sets a value of property Creator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Sets a value of property Creator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CREATOR, value);
	}
    /**
     * Sets a value of property Creator from an instance of Party 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Party value) {
		Base.set(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Sets a value of property Creator from an instance of Party 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCreator(eu.dime.ps.semantic.model.nao.Party value) {
		Base.set(this.model, this.getResource(), CREATOR, value);
	}
  


    /**
     * Removes a value of property Creator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Removes a value of property Creator as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CREATOR, value);
	}
    /**
     * Removes a value of property Creator given as an instance of Party 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Party value) {
		Base.remove(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Removes a value of property Creator given as an instance of Party 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCreator(eu.dime.ps.semantic.model.nao.Party value) {
		Base.remove(this.model, this.getResource(), CREATOR, value);
	}
  
    /**
     * Removes all values of property Creator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CREATOR);
	}
	
    /**
     * Removes all values of property Creator	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCreator() {
		Base.removeAll(this.model, this.getResource(), CREATOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1068452 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDependencyType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEPENDENCYTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1068452 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDependencyType() {
		return Base.has(this.model, this.getResource(), DEPENDENCYTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1068452 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDependencyType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEPENDENCYTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1068452 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDependencyType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEPENDENCYTYPE);
	}

    /**
     * Get single value of property DependencyType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getDependencyType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, DEPENDENCYTYPE);
	}
	
    /**
     * Get single value of property DependencyType as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getDependencyType_asNode() {
		return Base.get_asNode(this.model, this.getResource(), DEPENDENCYTYPE);
	}
     /**
     * Get single value of property DependencyType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static org.ontoware.rdfreactor.schema.rdfs.Resource getDependencyType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdfreactor.schema.rdfs.Resource) Base.get(model, instanceResource, DEPENDENCYTYPE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get single value of property DependencyType  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public org.ontoware.rdfreactor.schema.rdfs.Resource getDependencyType() {
		return (org.ontoware.rdfreactor.schema.rdfs.Resource) Base.get(this.model, this.getResource(), DEPENDENCYTYPE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
  
    /**
     * Adds a value to property DependencyType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addDependencyType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, DEPENDENCYTYPE, value, 1);
	}
	
    /**
     * Adds a value to property DependencyType as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addDependencyType( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DEPENDENCYTYPE, value, 1);
	}
    /**
     * Adds a value to property DependencyType from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addDependencyType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value)
    throws CardinalityException {
		Base.add(model, instanceResource, DEPENDENCYTYPE, value, 1);
	}
	
    /**
     * Adds a value to property DependencyType from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addDependencyType(org.ontoware.rdfreactor.schema.rdfs.Resource value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DEPENDENCYTYPE, value, 1);
	}
 
 

    /**
     * Sets a value of property DependencyType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDependencyType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEPENDENCYTYPE, value);
	}
	
    /**
     * Sets a value of property DependencyType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDependencyType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEPENDENCYTYPE, value);
	}
    /**
     * Sets a value of property DependencyType from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDependencyType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, DEPENDENCYTYPE, value);
	}
	
    /**
     * Sets a value of property DependencyType from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDependencyType(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), DEPENDENCYTYPE, value);
	}
  


    /**
     * Removes a value of property DependencyType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove5static] 
     */
	public static void removeDependencyType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(model, instanceResource, DEPENDENCYTYPE, value, 1);
	}
	
    /**
     * Removes a value of property DependencyType as an RDF2Go node 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove6dynamic] 
     */
	public void removeDependencyType( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), DEPENDENCYTYPE, value, 1);
	}
    /**
     * Removes a value of property DependencyType from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove7static] 
     */
	public static void removeDependencyType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value)
    throws CardinalityException {
		Base.remove(model, instanceResource, DEPENDENCYTYPE, value, 1);
	}
	
    /**
     * Removes a value of property DependencyType from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove8dynamic] 
     */
	public void removeDependencyType(org.ontoware.rdfreactor.schema.rdfs.Resource value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), DEPENDENCYTYPE, value, 1);
	}
 
      /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34c1a108 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDepends(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEPENDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34c1a108 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDepends() {
		return Base.has(this.model, this.getResource(), DEPENDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34c1a108 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDepends(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEPENDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34c1a108 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDepends( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEPENDS);
	}

     /**
     * Get all values of property Depends as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDepends_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DEPENDS);
	}
	
    /**
     * Get all values of property Depends as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDepends_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEPENDS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Depends as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDepends_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DEPENDS);
	}

    /**
     * Get all values of property Depends as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDepends_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DEPENDS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Depends     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllDepends(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DEPENDS, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
	
    /**
     * Get all values of property Depends as a ReactorResult of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllDepends_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEPENDS, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property Depends     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllDepends() {
		return Base.getAll(this.model, this.getResource(), DEPENDS, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property Depends as a ReactorResult of DataObject 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllDepends_as() {
		return Base.getAll_as(this.model, this.getResource(), DEPENDS, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
 
    /**
     * Adds a value to property Depends as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDepends(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DEPENDS, value);
	}
	
    /**
     * Adds a value to property Depends as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDepends( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DEPENDS, value);
	}
    /**
     * Adds a value to property Depends from an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDepends(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(model, instanceResource, DEPENDS, value);
	}
	
    /**
     * Adds a value to property Depends from an instance of DataObject 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDepends(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(this.model, this.getResource(), DEPENDS, value);
	}
  

    /**
     * Sets a value of property Depends from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDepends( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEPENDS, value);
	}
	
    /**
     * Sets a value of property Depends from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDepends( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEPENDS, value);
	}
    /**
     * Sets a value of property Depends from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDepends(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(model, instanceResource, DEPENDS, value);
	}
	
    /**
     * Sets a value of property Depends from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDepends(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(this.model, this.getResource(), DEPENDS, value);
	}
  


    /**
     * Removes a value of property Depends as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDepends( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEPENDS, value);
	}
	
    /**
     * Removes a value of property Depends as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDepends( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEPENDS, value);
	}
    /**
     * Removes a value of property Depends given as an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDepends(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(model, instanceResource, DEPENDS, value);
	}
	
    /**
     * Removes a value of property Depends given as an instance of DataObject 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDepends(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(this.model, this.getResource(), DEPENDS, value);
	}
  
    /**
     * Removes all values of property Depends     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDepends( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEPENDS);
	}
	
    /**
     * Removes all values of property Depends	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDepends() {
		Base.removeAll(this.model, this.getResource(), DEPENDS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b862bdb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDeprecated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEPRECATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b862bdb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDeprecated() {
		return Base.has(this.model, this.getResource(), DEPRECATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b862bdb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDeprecated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEPRECATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b862bdb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDeprecated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEPRECATED);
	}

    /**
     * Get single value of property Deprecated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getDeprecated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, DEPRECATED);
	}
	
    /**
     * Get single value of property Deprecated as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getDeprecated_asNode() {
		return Base.get_asNode(this.model, this.getResource(), DEPRECATED);
	}
     /**
     * Get single value of property Deprecated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static org.ontoware.rdfreactor.schema.rdfs.Resource getDeprecated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdfreactor.schema.rdfs.Resource) Base.get(model, instanceResource, DEPRECATED, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get single value of property Deprecated  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public org.ontoware.rdfreactor.schema.rdfs.Resource getDeprecated() {
		return (org.ontoware.rdfreactor.schema.rdfs.Resource) Base.get(this.model, this.getResource(), DEPRECATED, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
  
    /**
     * Adds a value to property Deprecated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addDeprecated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, DEPRECATED, value, 1);
	}
	
    /**
     * Adds a value to property Deprecated as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addDeprecated( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DEPRECATED, value, 1);
	}
    /**
     * Adds a value to property Deprecated from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addDeprecated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value)
    throws CardinalityException {
		Base.add(model, instanceResource, DEPRECATED, value, 1);
	}
	
    /**
     * Adds a value to property Deprecated from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addDeprecated(org.ontoware.rdfreactor.schema.rdfs.Resource value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DEPRECATED, value, 1);
	}
 
 

    /**
     * Sets a value of property Deprecated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDeprecated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEPRECATED, value);
	}
	
    /**
     * Sets a value of property Deprecated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDeprecated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEPRECATED, value);
	}
    /**
     * Sets a value of property Deprecated from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDeprecated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, DEPRECATED, value);
	}
	
    /**
     * Sets a value of property Deprecated from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDeprecated(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), DEPRECATED, value);
	}
  


    /**
     * Removes a value of property Deprecated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDeprecated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEPRECATED, value);
	}
	
    /**
     * Removes a value of property Deprecated as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDeprecated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEPRECATED, value);
	}
    /**
     * Removes a value of property Deprecated given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDeprecated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, DEPRECATED, value);
	}
	
    /**
     * Removes a value of property Deprecated given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDeprecated(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), DEPRECATED, value);
	}
  
    /**
     * Removes all values of property Deprecated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDeprecated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEPRECATED);
	}
	
    /**
     * Removes all values of property Deprecated	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDeprecated() {
		Base.removeAll(this.model, this.getResource(), DEPRECATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3107e198 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3107e198 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDescription() {
		return Base.has(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3107e198 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3107e198 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DESCRIPTION);
	}

     /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DESCRIPTION, java.lang.String.class);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, java.lang.String.class);
	}

    /**
     * Get all values of property Description     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllDescription() {
		return Base.getAll(this.model, this.getResource(), DESCRIPTION, java.lang.String.class);
	}

    /**
     * Get all values of property Description as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Adds a value to property Description from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDescription(java.lang.String value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
  

    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Sets a value of property Description from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDescription(java.lang.String value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
  


    /**
     * Removes a value of property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Removes a value of property Description given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDescription(java.lang.String value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
  
    /**
     * Removes all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Removes all values of property Description	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDescription() {
		Base.removeAll(this.model, this.getResource(), DESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@715dcdeb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDisclaimer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DISCLAIMER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@715dcdeb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDisclaimer() {
		return Base.has(this.model, this.getResource(), DISCLAIMER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@715dcdeb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDisclaimer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DISCLAIMER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@715dcdeb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDisclaimer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DISCLAIMER);
	}

     /**
     * Get all values of property Disclaimer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDisclaimer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DISCLAIMER);
	}
	
    /**
     * Get all values of property Disclaimer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDisclaimer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCLAIMER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Disclaimer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDisclaimer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DISCLAIMER);
	}

    /**
     * Get all values of property Disclaimer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDisclaimer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DISCLAIMER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Disclaimer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllDisclaimer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DISCLAIMER, java.lang.String.class);
	}
	
    /**
     * Get all values of property Disclaimer as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllDisclaimer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCLAIMER, java.lang.String.class);
	}

    /**
     * Get all values of property Disclaimer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllDisclaimer() {
		return Base.getAll(this.model, this.getResource(), DISCLAIMER, java.lang.String.class);
	}

    /**
     * Get all values of property Disclaimer as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllDisclaimer_as() {
		return Base.getAll_as(this.model, this.getResource(), DISCLAIMER, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Disclaimer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDisclaimer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DISCLAIMER, value);
	}
	
    /**
     * Adds a value to property Disclaimer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDisclaimer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DISCLAIMER, value);
	}
    /**
     * Adds a value to property Disclaimer from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDisclaimer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, DISCLAIMER, value);
	}
	
    /**
     * Adds a value to property Disclaimer from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDisclaimer(java.lang.String value) {
		Base.add(this.model, this.getResource(), DISCLAIMER, value);
	}
  

    /**
     * Sets a value of property Disclaimer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDisclaimer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DISCLAIMER, value);
	}
	
    /**
     * Sets a value of property Disclaimer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDisclaimer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DISCLAIMER, value);
	}
    /**
     * Sets a value of property Disclaimer from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDisclaimer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, DISCLAIMER, value);
	}
	
    /**
     * Sets a value of property Disclaimer from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDisclaimer(java.lang.String value) {
		Base.set(this.model, this.getResource(), DISCLAIMER, value);
	}
  


    /**
     * Removes a value of property Disclaimer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDisclaimer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DISCLAIMER, value);
	}
	
    /**
     * Removes a value of property Disclaimer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDisclaimer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DISCLAIMER, value);
	}
    /**
     * Removes a value of property Disclaimer given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDisclaimer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, DISCLAIMER, value);
	}
	
    /**
     * Removes a value of property Disclaimer given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDisclaimer(java.lang.String value) {
		Base.remove(this.model, this.getResource(), DISCLAIMER, value);
	}
  
    /**
     * Removes all values of property Disclaimer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDisclaimer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DISCLAIMER);
	}
	
    /**
     * Removes all values of property Disclaimer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDisclaimer() {
		Base.removeAll(this.model, this.getResource(), DISCLAIMER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14bc1199 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Contributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1CONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14bc1199 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Contributor() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1CONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14bc1199 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Contributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1CONTRIBUTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14bc1199 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Contributor( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1CONTRIBUTOR);
	}

     /**
     * Get all values of property Elements1_1Contributor as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Contributor_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1CONTRIBUTOR);
	}
	
    /**
     * Get all values of property Elements1_1Contributor as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Contributor_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1CONTRIBUTOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Contributor as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Contributor_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1CONTRIBUTOR);
	}

    /**
     * Get all values of property Elements1_1Contributor as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Contributor_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1CONTRIBUTOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Contributor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Contributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1CONTRIBUTOR, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Elements1_1Contributor as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Contributor_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1CONTRIBUTOR, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Contributor     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Contributor() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1CONTRIBUTOR, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Contributor as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Contributor_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1CONTRIBUTOR, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Contributor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Contributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1CONTRIBUTOR, value);
	}
	
    /**
     * Adds a value to property Elements1_1Contributor as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Contributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1CONTRIBUTOR, value);
	}
    /**
     * Adds a value to property Elements1_1Contributor from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Contributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, ELEMENTS1_1CONTRIBUTOR, value);
	}
	
    /**
     * Adds a value to property Elements1_1Contributor from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Contributor(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1CONTRIBUTOR, value);
	}
  

    /**
     * Sets a value of property Elements1_1Contributor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Contributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1CONTRIBUTOR, value);
	}
	
    /**
     * Sets a value of property Elements1_1Contributor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Contributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1CONTRIBUTOR, value);
	}
    /**
     * Sets a value of property Elements1_1Contributor from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Contributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, ELEMENTS1_1CONTRIBUTOR, value);
	}
	
    /**
     * Sets a value of property Elements1_1Contributor from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Contributor(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1CONTRIBUTOR, value);
	}
  


    /**
     * Removes a value of property Elements1_1Contributor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Contributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1CONTRIBUTOR, value);
	}
	
    /**
     * Removes a value of property Elements1_1Contributor as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Contributor( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1CONTRIBUTOR, value);
	}
    /**
     * Removes a value of property Elements1_1Contributor given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Contributor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1CONTRIBUTOR, value);
	}
	
    /**
     * Removes a value of property Elements1_1Contributor given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Contributor(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1CONTRIBUTOR, value);
	}
  
    /**
     * Removes all values of property Elements1_1Contributor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Contributor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1CONTRIBUTOR);
	}
	
    /**
     * Removes all values of property Elements1_1Contributor	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Contributor() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1CONTRIBUTOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5712998a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Creator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5712998a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Creator() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5712998a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Creator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5712998a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Creator( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1CREATOR);
	}

     /**
     * Get all values of property Elements1_1Creator as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Creator_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1CREATOR);
	}
	
    /**
     * Get all values of property Elements1_1Creator as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Creator_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1CREATOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Creator as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Creator_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1CREATOR);
	}

    /**
     * Get all values of property Elements1_1Creator as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Creator_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1CREATOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Creator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Creator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1CREATOR, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Elements1_1Creator as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Creator_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1CREATOR, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Creator     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Creator() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1CREATOR, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Creator as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Creator_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1CREATOR, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Creator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Creator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1CREATOR, value);
	}
	
    /**
     * Adds a value to property Elements1_1Creator as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Creator( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1CREATOR, value);
	}
    /**
     * Adds a value to property Elements1_1Creator from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Creator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, ELEMENTS1_1CREATOR, value);
	}
	
    /**
     * Adds a value to property Elements1_1Creator from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Creator(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1CREATOR, value);
	}
  

    /**
     * Sets a value of property Elements1_1Creator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Creator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1CREATOR, value);
	}
	
    /**
     * Sets a value of property Elements1_1Creator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Creator( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1CREATOR, value);
	}
    /**
     * Sets a value of property Elements1_1Creator from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Creator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, ELEMENTS1_1CREATOR, value);
	}
	
    /**
     * Sets a value of property Elements1_1Creator from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Creator(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1CREATOR, value);
	}
  


    /**
     * Removes a value of property Elements1_1Creator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Creator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1CREATOR, value);
	}
	
    /**
     * Removes a value of property Elements1_1Creator as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Creator( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1CREATOR, value);
	}
    /**
     * Removes a value of property Elements1_1Creator given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Creator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1CREATOR, value);
	}
	
    /**
     * Removes a value of property Elements1_1Creator given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Creator(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1CREATOR, value);
	}
  
    /**
     * Removes all values of property Elements1_1Creator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Creator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1CREATOR);
	}
	
    /**
     * Removes all values of property Elements1_1Creator	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Creator() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1CREATOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d8a1017 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Date(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d8a1017 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Date() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d8a1017 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Date(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d8a1017 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Date( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1DATE);
	}

     /**
     * Get all values of property Elements1_1Date as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Date_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1DATE);
	}
	
    /**
     * Get all values of property Elements1_1Date as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Date_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1DATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Date as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Date_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1DATE);
	}

    /**
     * Get all values of property Elements1_1Date as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Date_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1DATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Date     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Date(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1DATE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Elements1_1Date as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Date_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1DATE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Date     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Date() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1DATE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Date as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Date_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1DATE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Date as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Date(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1DATE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Date as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Date( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1DATE, value);
	}
    /**
     * Adds a value to property Elements1_1Date from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Date(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, ELEMENTS1_1DATE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Date from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Date(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1DATE, value);
	}
  

    /**
     * Sets a value of property Elements1_1Date from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Date( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1DATE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Date from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Date( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1DATE, value);
	}
    /**
     * Sets a value of property Elements1_1Date from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Date(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, ELEMENTS1_1DATE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Date from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Date(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1DATE, value);
	}
  


    /**
     * Removes a value of property Elements1_1Date as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Date( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1DATE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Date as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Date( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1DATE, value);
	}
    /**
     * Removes a value of property Elements1_1Date given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Date(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1DATE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Date given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Date(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1DATE, value);
	}
  
    /**
     * Removes all values of property Elements1_1Date     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Date( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1DATE);
	}
	
    /**
     * Removes all values of property Elements1_1Date	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Date() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1DATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a2a865a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Description(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a2a865a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Description() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a2a865a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Description(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a2a865a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Description( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION);
	}

     /**
     * Get all values of property Elements1_1Description as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Description_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1DESCRIPTION);
	}
	
    /**
     * Get all values of property Elements1_1Description as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Description_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Description as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Description_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION);
	}

    /**
     * Get all values of property Elements1_1Description as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Description_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Description(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1DESCRIPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Elements1_1Description as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Description_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1DESCRIPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Description     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Description() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Description as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Description_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Description(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Elements1_1Description as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Description( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION, value);
	}
    /**
     * Adds a value to property Elements1_1Description from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Description(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, ELEMENTS1_1DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Elements1_1Description from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Description(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION, value);
	}
  

    /**
     * Sets a value of property Elements1_1Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Description( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Elements1_1Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Description( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION, value);
	}
    /**
     * Sets a value of property Elements1_1Description from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Description(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, ELEMENTS1_1DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Elements1_1Description from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Description(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION, value);
	}
  


    /**
     * Removes a value of property Elements1_1Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Description( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Elements1_1Description as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Description( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION, value);
	}
    /**
     * Removes a value of property Elements1_1Description given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Description(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Elements1_1Description given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Description(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION, value);
	}
  
    /**
     * Removes all values of property Elements1_1Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Description( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1DESCRIPTION);
	}
	
    /**
     * Removes all values of property Elements1_1Description	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Description() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1DESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36edbe9f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Identifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1IDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36edbe9f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Identifier() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1IDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36edbe9f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Identifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1IDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36edbe9f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Identifier( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1IDENTIFIER);
	}

     /**
     * Get all values of property Elements1_1Identifier as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Identifier_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1IDENTIFIER);
	}
	
    /**
     * Get all values of property Elements1_1Identifier as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Identifier_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1IDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Identifier as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Identifier_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1IDENTIFIER);
	}

    /**
     * Get all values of property Elements1_1Identifier as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Identifier_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1IDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Identifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Identifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1IDENTIFIER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Elements1_1Identifier as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Identifier_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1IDENTIFIER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Identifier     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Identifier() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1IDENTIFIER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Identifier as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Identifier_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1IDENTIFIER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Identifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Identifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1IDENTIFIER, value);
	}
	
    /**
     * Adds a value to property Elements1_1Identifier as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Identifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1IDENTIFIER, value);
	}
    /**
     * Adds a value to property Elements1_1Identifier from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Identifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, ELEMENTS1_1IDENTIFIER, value);
	}
	
    /**
     * Adds a value to property Elements1_1Identifier from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Identifier(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1IDENTIFIER, value);
	}
  

    /**
     * Sets a value of property Elements1_1Identifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Identifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1IDENTIFIER, value);
	}
	
    /**
     * Sets a value of property Elements1_1Identifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Identifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1IDENTIFIER, value);
	}
    /**
     * Sets a value of property Elements1_1Identifier from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Identifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, ELEMENTS1_1IDENTIFIER, value);
	}
	
    /**
     * Sets a value of property Elements1_1Identifier from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Identifier(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1IDENTIFIER, value);
	}
  


    /**
     * Removes a value of property Elements1_1Identifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Identifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1IDENTIFIER, value);
	}
	
    /**
     * Removes a value of property Elements1_1Identifier as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Identifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1IDENTIFIER, value);
	}
    /**
     * Removes a value of property Elements1_1Identifier given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Identifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1IDENTIFIER, value);
	}
	
    /**
     * Removes a value of property Elements1_1Identifier given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Identifier(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1IDENTIFIER, value);
	}
  
    /**
     * Removes all values of property Elements1_1Identifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Identifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1IDENTIFIER);
	}
	
    /**
     * Removes all values of property Elements1_1Identifier	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Identifier() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1IDENTIFIER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5394164c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1LANGUAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5394164c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Language() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1LANGUAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5394164c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1LANGUAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5394164c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Language( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1LANGUAGE);
	}

     /**
     * Get all values of property Elements1_1Language as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Language_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1LANGUAGE);
	}
	
    /**
     * Get all values of property Elements1_1Language as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Language_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1LANGUAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Language as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Language_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1LANGUAGE);
	}

    /**
     * Get all values of property Elements1_1Language as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Language_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Language     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1LANGUAGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Elements1_1Language as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Language_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1LANGUAGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Language     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Language() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Language as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Language_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Language as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1LANGUAGE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Language as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Language( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, value);
	}
    /**
     * Adds a value to property Elements1_1Language from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, ELEMENTS1_1LANGUAGE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Language from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Language(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, value);
	}
  

    /**
     * Sets a value of property Elements1_1Language from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Language( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1LANGUAGE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Language from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Language( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, value);
	}
    /**
     * Sets a value of property Elements1_1Language from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, ELEMENTS1_1LANGUAGE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Language from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Language(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, value);
	}
  


    /**
     * Removes a value of property Elements1_1Language as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Language( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1LANGUAGE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Language as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Language( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, value);
	}
    /**
     * Removes a value of property Elements1_1Language given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Language(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1LANGUAGE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Language given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Language(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1LANGUAGE, value);
	}
  
    /**
     * Removes all values of property Elements1_1Language     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Language( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1LANGUAGE);
	}
	
    /**
     * Removes all values of property Elements1_1Language	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Language() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1LANGUAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3744bd3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Modified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1MODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3744bd3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Modified() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1MODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3744bd3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Modified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1MODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3744bd3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Modified( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1MODIFIED);
	}

     /**
     * Get all values of property Elements1_1Modified as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Modified_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1MODIFIED);
	}
	
    /**
     * Get all values of property Elements1_1Modified as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Modified_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1MODIFIED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Modified as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Modified_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1MODIFIED);
	}

    /**
     * Get all values of property Elements1_1Modified as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Modified_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1MODIFIED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Modified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Modified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1MODIFIED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Elements1_1Modified as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Modified_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1MODIFIED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Modified     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Modified() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1MODIFIED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Modified as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Modified_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1MODIFIED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Modified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Modified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1MODIFIED, value);
	}
	
    /**
     * Adds a value to property Elements1_1Modified as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Modified( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1MODIFIED, value);
	}
    /**
     * Adds a value to property Elements1_1Modified from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Modified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, ELEMENTS1_1MODIFIED, value);
	}
	
    /**
     * Adds a value to property Elements1_1Modified from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Modified(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1MODIFIED, value);
	}
  

    /**
     * Sets a value of property Elements1_1Modified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Modified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1MODIFIED, value);
	}
	
    /**
     * Sets a value of property Elements1_1Modified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Modified( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1MODIFIED, value);
	}
    /**
     * Sets a value of property Elements1_1Modified from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Modified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, ELEMENTS1_1MODIFIED, value);
	}
	
    /**
     * Sets a value of property Elements1_1Modified from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Modified(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1MODIFIED, value);
	}
  


    /**
     * Removes a value of property Elements1_1Modified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Modified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1MODIFIED, value);
	}
	
    /**
     * Removes a value of property Elements1_1Modified as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Modified( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1MODIFIED, value);
	}
    /**
     * Removes a value of property Elements1_1Modified given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Modified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1MODIFIED, value);
	}
	
    /**
     * Removes a value of property Elements1_1Modified given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Modified(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1MODIFIED, value);
	}
  
    /**
     * Removes all values of property Elements1_1Modified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Modified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1MODIFIED);
	}
	
    /**
     * Removes all values of property Elements1_1Modified	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Modified() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1MODIFIED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2320ec02 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Publisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1PUBLISHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2320ec02 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Publisher() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1PUBLISHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2320ec02 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Publisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1PUBLISHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2320ec02 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Publisher( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1PUBLISHER);
	}

     /**
     * Get all values of property Elements1_1Publisher as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Publisher_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1PUBLISHER);
	}
	
    /**
     * Get all values of property Elements1_1Publisher as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Publisher_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1PUBLISHER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Publisher as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Publisher_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1PUBLISHER);
	}

    /**
     * Get all values of property Elements1_1Publisher as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Publisher_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1PUBLISHER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Publisher     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Publisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1PUBLISHER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Elements1_1Publisher as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Publisher_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1PUBLISHER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Publisher     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Publisher() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1PUBLISHER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Publisher as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Publisher_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1PUBLISHER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Publisher as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Publisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1PUBLISHER, value);
	}
	
    /**
     * Adds a value to property Elements1_1Publisher as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Publisher( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1PUBLISHER, value);
	}
    /**
     * Adds a value to property Elements1_1Publisher from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Publisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, ELEMENTS1_1PUBLISHER, value);
	}
	
    /**
     * Adds a value to property Elements1_1Publisher from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Publisher(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1PUBLISHER, value);
	}
  

    /**
     * Sets a value of property Elements1_1Publisher from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Publisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1PUBLISHER, value);
	}
	
    /**
     * Sets a value of property Elements1_1Publisher from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Publisher( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1PUBLISHER, value);
	}
    /**
     * Sets a value of property Elements1_1Publisher from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Publisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, ELEMENTS1_1PUBLISHER, value);
	}
	
    /**
     * Sets a value of property Elements1_1Publisher from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Publisher(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1PUBLISHER, value);
	}
  


    /**
     * Removes a value of property Elements1_1Publisher as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Publisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1PUBLISHER, value);
	}
	
    /**
     * Removes a value of property Elements1_1Publisher as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Publisher( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1PUBLISHER, value);
	}
    /**
     * Removes a value of property Elements1_1Publisher given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Publisher(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1PUBLISHER, value);
	}
	
    /**
     * Removes a value of property Elements1_1Publisher given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Publisher(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1PUBLISHER, value);
	}
  
    /**
     * Removes all values of property Elements1_1Publisher     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Publisher( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1PUBLISHER);
	}
	
    /**
     * Removes all values of property Elements1_1Publisher	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Publisher() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1PUBLISHER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c8be3b3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Source(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1SOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c8be3b3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Source() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1SOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c8be3b3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Source(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1SOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c8be3b3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Source( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1SOURCE);
	}

     /**
     * Get all values of property Elements1_1Source as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Source_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1SOURCE);
	}
	
    /**
     * Get all values of property Elements1_1Source as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Source_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1SOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Source as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Source_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1SOURCE);
	}

    /**
     * Get all values of property Elements1_1Source as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Source_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1SOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Source     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Source(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1SOURCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Elements1_1Source as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Source_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1SOURCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Source     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Source() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1SOURCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Source as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Source_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1SOURCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Source as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Source(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1SOURCE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Source as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Source( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1SOURCE, value);
	}
    /**
     * Adds a value to property Elements1_1Source from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Source(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, ELEMENTS1_1SOURCE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Source from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Source(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1SOURCE, value);
	}
  

    /**
     * Sets a value of property Elements1_1Source from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Source( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1SOURCE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Source from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Source( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1SOURCE, value);
	}
    /**
     * Sets a value of property Elements1_1Source from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Source(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, ELEMENTS1_1SOURCE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Source from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Source(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1SOURCE, value);
	}
  


    /**
     * Removes a value of property Elements1_1Source as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Source( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1SOURCE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Source as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Source( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1SOURCE, value);
	}
    /**
     * Removes a value of property Elements1_1Source given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Source(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1SOURCE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Source given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Source(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1SOURCE, value);
	}
  
    /**
     * Removes all values of property Elements1_1Source     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Source( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1SOURCE);
	}
	
    /**
     * Removes all values of property Elements1_1Source	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Source() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1SOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@174709c6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Subject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1SUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@174709c6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Subject() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1SUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@174709c6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Subject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1SUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@174709c6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Subject( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1SUBJECT);
	}

     /**
     * Get all values of property Elements1_1Subject as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Subject_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1SUBJECT);
	}
	
    /**
     * Get all values of property Elements1_1Subject as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Subject_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1SUBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Subject as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Subject_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1SUBJECT);
	}

    /**
     * Get all values of property Elements1_1Subject as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Subject_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1SUBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Subject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Subject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1SUBJECT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Elements1_1Subject as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Subject_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1SUBJECT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Subject     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Subject() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1SUBJECT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Subject as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Subject_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1SUBJECT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Subject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Subject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1SUBJECT, value);
	}
	
    /**
     * Adds a value to property Elements1_1Subject as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Subject( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
	}
    /**
     * Adds a value to property Elements1_1Subject from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Subject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, ELEMENTS1_1SUBJECT, value);
	}
	
    /**
     * Adds a value to property Elements1_1Subject from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Subject(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
	}
  

    /**
     * Sets a value of property Elements1_1Subject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Subject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1SUBJECT, value);
	}
	
    /**
     * Sets a value of property Elements1_1Subject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Subject( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
	}
    /**
     * Sets a value of property Elements1_1Subject from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Subject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, ELEMENTS1_1SUBJECT, value);
	}
	
    /**
     * Sets a value of property Elements1_1Subject from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Subject(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
	}
  


    /**
     * Removes a value of property Elements1_1Subject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Subject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1SUBJECT, value);
	}
	
    /**
     * Removes a value of property Elements1_1Subject as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Subject( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
	}
    /**
     * Removes a value of property Elements1_1Subject given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Subject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1SUBJECT, value);
	}
	
    /**
     * Removes a value of property Elements1_1Subject given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Subject(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1SUBJECT, value);
	}
  
    /**
     * Removes all values of property Elements1_1Subject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Subject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1SUBJECT);
	}
	
    /**
     * Removes all values of property Elements1_1Subject	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Subject() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1SUBJECT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32c0bea2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32c0bea2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasElements1_1Title() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32c0bea2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32c0bea2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasElements1_1Title( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1TITLE);
	}

     /**
     * Get all values of property Elements1_1Title as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Title_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1TITLE);
	}
	
    /**
     * Get all values of property Elements1_1Title as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Title_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Title as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Title_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1TITLE);
	}

    /**
     * Get all values of property Elements1_1Title as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllElements1_1Title_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1TITLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Elements1_1Title as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Title_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1TITLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Title     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Title() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1TITLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Elements1_1Title as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllElements1_1Title_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1TITLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Title as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addElements1_1Title( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
    /**
     * Adds a value to property Elements1_1Title from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Title from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addElements1_1Title(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
  

    /**
     * Sets a value of property Elements1_1Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setElements1_1Title( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setElements1_1Title( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
    /**
     * Sets a value of property Elements1_1Title from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Title from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setElements1_1Title(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
  


    /**
     * Removes a value of property Elements1_1Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeElements1_1Title( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Title as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeElements1_1Title( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
    /**
     * Removes a value of property Elements1_1Title given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Title given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeElements1_1Title(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
  
    /**
     * Removes all values of property Elements1_1Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllElements1_1Title( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1TITLE);
	}
	
    /**
     * Removes all values of property Elements1_1Title	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllElements1_1Title() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1TITLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@416f8062 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ENDTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@416f8062 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEndTime() {
		return Base.has(this.model, this.getResource(), ENDTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@416f8062 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ENDTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@416f8062 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEndTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ENDTIME);
	}

    /**
     * Get single value of property EndTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getEndTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, ENDTIME);
	}
	
    /**
     * Get single value of property EndTime as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getEndTime_asNode() {
		return Base.get_asNode(this.model, this.getResource(), ENDTIME);
	}
     /**
     * Get single value of property EndTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, ENDTIME, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property EndTime  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getEndTime() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), ENDTIME, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property EndTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, ENDTIME, value, 1);
	}
	
    /**
     * Adds a value to property EndTime as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addEndTime( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ENDTIME, value, 1);
	}
    /**
     * Adds a value to property EndTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, ENDTIME, value, 1);
	}
	
    /**
     * Adds a value to property EndTime from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addEndTime(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ENDTIME, value, 1);
	}
 
 

    /**
     * Sets a value of property EndTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEndTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ENDTIME, value);
	}
	
    /**
     * Sets a value of property EndTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEndTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ENDTIME, value);
	}
    /**
     * Sets a value of property EndTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, ENDTIME, value);
	}
	
    /**
     * Sets a value of property EndTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEndTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), ENDTIME, value);
	}
  


    /**
     * Removes a value of property EndTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEndTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ENDTIME, value);
	}
	
    /**
     * Removes a value of property EndTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEndTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ENDTIME, value);
	}
    /**
     * Removes a value of property EndTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, ENDTIME, value);
	}
	
    /**
     * Removes a value of property EndTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEndTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), ENDTIME, value);
	}
  
    /**
     * Removes all values of property EndTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEndTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ENDTIME);
	}
	
    /**
     * Removes all values of property EndTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEndTime() {
		Base.removeAll(this.model, this.getResource(), ENDTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34267caa has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEndorsedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ENDORSEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34267caa has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEndorsedBy() {
		return Base.has(this.model, this.getResource(), ENDORSEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34267caa has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEndorsedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ENDORSEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34267caa has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEndorsedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ENDORSEDBY);
	}

     /**
     * Get all values of property EndorsedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEndorsedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ENDORSEDBY);
	}
	
    /**
     * Get all values of property EndorsedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEndorsedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ENDORSEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EndorsedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEndorsedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ENDORSEDBY);
	}

    /**
     * Get all values of property EndorsedBy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEndorsedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ENDORSEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EndorsedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nao.Party> getAllEndorsedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ENDORSEDBY, eu.dime.ps.semantic.model.nao.Party.class);
	}
	
    /**
     * Get all values of property EndorsedBy as a ReactorResult of Party 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nao.Party> getAllEndorsedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ENDORSEDBY, eu.dime.ps.semantic.model.nao.Party.class);
	}

    /**
     * Get all values of property EndorsedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nao.Party> getAllEndorsedBy() {
		return Base.getAll(this.model, this.getResource(), ENDORSEDBY, eu.dime.ps.semantic.model.nao.Party.class);
	}

    /**
     * Get all values of property EndorsedBy as a ReactorResult of Party 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nao.Party> getAllEndorsedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), ENDORSEDBY, eu.dime.ps.semantic.model.nao.Party.class);
	}
 
    /**
     * Adds a value to property EndorsedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEndorsedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ENDORSEDBY, value);
	}
	
    /**
     * Adds a value to property EndorsedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEndorsedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ENDORSEDBY, value);
	}
    /**
     * Adds a value to property EndorsedBy from an instance of Party 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEndorsedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Party value) {
		Base.add(model, instanceResource, ENDORSEDBY, value);
	}
	
    /**
     * Adds a value to property EndorsedBy from an instance of Party 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEndorsedBy(eu.dime.ps.semantic.model.nao.Party value) {
		Base.add(this.model, this.getResource(), ENDORSEDBY, value);
	}
  

    /**
     * Sets a value of property EndorsedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEndorsedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ENDORSEDBY, value);
	}
	
    /**
     * Sets a value of property EndorsedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEndorsedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ENDORSEDBY, value);
	}
    /**
     * Sets a value of property EndorsedBy from an instance of Party 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEndorsedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Party value) {
		Base.set(model, instanceResource, ENDORSEDBY, value);
	}
	
    /**
     * Sets a value of property EndorsedBy from an instance of Party 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEndorsedBy(eu.dime.ps.semantic.model.nao.Party value) {
		Base.set(this.model, this.getResource(), ENDORSEDBY, value);
	}
  


    /**
     * Removes a value of property EndorsedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEndorsedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ENDORSEDBY, value);
	}
	
    /**
     * Removes a value of property EndorsedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEndorsedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ENDORSEDBY, value);
	}
    /**
     * Removes a value of property EndorsedBy given as an instance of Party 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEndorsedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Party value) {
		Base.remove(model, instanceResource, ENDORSEDBY, value);
	}
	
    /**
     * Removes a value of property EndorsedBy given as an instance of Party 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEndorsedBy(eu.dime.ps.semantic.model.nao.Party value) {
		Base.remove(this.model, this.getResource(), ENDORSEDBY, value);
	}
  
    /**
     * Removes all values of property EndorsedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEndorsedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ENDORSEDBY);
	}
	
    /**
     * Removes all values of property EndorsedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEndorsedBy() {
		Base.removeAll(this.model, this.getResource(), ENDORSEDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d1650df has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEnvironment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ENVIRONMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d1650df has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEnvironment() {
		return Base.has(this.model, this.getResource(), ENVIRONMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d1650df has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEnvironment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ENVIRONMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d1650df has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEnvironment( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ENVIRONMENT);
	}

     /**
     * Get all values of property Environment as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEnvironment_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ENVIRONMENT);
	}
	
    /**
     * Get all values of property Environment as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEnvironment_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ENVIRONMENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Environment as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEnvironment_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ENVIRONMENT);
	}

    /**
     * Get all values of property Environment as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEnvironment_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ENVIRONMENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Environment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dcon.Environment> getAllEnvironment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ENVIRONMENT, eu.dime.ps.semantic.model.dcon.Environment.class);
	}
	
    /**
     * Get all values of property Environment as a ReactorResult of Environment 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dcon.Environment> getAllEnvironment_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ENVIRONMENT, eu.dime.ps.semantic.model.dcon.Environment.class);
	}

    /**
     * Get all values of property Environment     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dcon.Environment> getAllEnvironment() {
		return Base.getAll(this.model, this.getResource(), ENVIRONMENT, eu.dime.ps.semantic.model.dcon.Environment.class);
	}

    /**
     * Get all values of property Environment as a ReactorResult of Environment 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dcon.Environment> getAllEnvironment_as() {
		return Base.getAll_as(this.model, this.getResource(), ENVIRONMENT, eu.dime.ps.semantic.model.dcon.Environment.class);
	}
 
    /**
     * Adds a value to property Environment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEnvironment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ENVIRONMENT, value);
	}
	
    /**
     * Adds a value to property Environment as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEnvironment( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ENVIRONMENT, value);
	}
    /**
     * Adds a value to property Environment from an instance of Environment 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEnvironment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Environment value) {
		Base.add(model, instanceResource, ENVIRONMENT, value);
	}
	
    /**
     * Adds a value to property Environment from an instance of Environment 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEnvironment(eu.dime.ps.semantic.model.dcon.Environment value) {
		Base.add(this.model, this.getResource(), ENVIRONMENT, value);
	}
  

    /**
     * Sets a value of property Environment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEnvironment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ENVIRONMENT, value);
	}
	
    /**
     * Sets a value of property Environment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEnvironment( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ENVIRONMENT, value);
	}
    /**
     * Sets a value of property Environment from an instance of Environment 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEnvironment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Environment value) {
		Base.set(model, instanceResource, ENVIRONMENT, value);
	}
	
    /**
     * Sets a value of property Environment from an instance of Environment 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEnvironment(eu.dime.ps.semantic.model.dcon.Environment value) {
		Base.set(this.model, this.getResource(), ENVIRONMENT, value);
	}
  


    /**
     * Removes a value of property Environment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEnvironment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ENVIRONMENT, value);
	}
	
    /**
     * Removes a value of property Environment as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEnvironment( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ENVIRONMENT, value);
	}
    /**
     * Removes a value of property Environment given as an instance of Environment 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEnvironment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Environment value) {
		Base.remove(model, instanceResource, ENVIRONMENT, value);
	}
	
    /**
     * Removes a value of property Environment given as an instance of Environment 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEnvironment(eu.dime.ps.semantic.model.dcon.Environment value) {
		Base.remove(this.model, this.getResource(), ENVIRONMENT, value);
	}
  
    /**
     * Removes all values of property Environment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEnvironment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ENVIRONMENT);
	}
	
    /**
     * Removes all values of property Environment	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEnvironment() {
		Base.removeAll(this.model, this.getResource(), ENVIRONMENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3f9e244f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEventCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EVENTCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3f9e244f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEventCount() {
		return Base.has(this.model, this.getResource(), EVENTCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3f9e244f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEventCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EVENTCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3f9e244f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEventCount( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EVENTCOUNT);
	}

    /**
     * Get single value of property EventCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getEventCount_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, EVENTCOUNT);
	}
	
    /**
     * Get single value of property EventCount as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getEventCount_asNode() {
		return Base.get_asNode(this.model, this.getResource(), EVENTCOUNT);
	}
     /**
     * Get single value of property EventCount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getEventCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, EVENTCOUNT, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property EventCount  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getEventCount() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), EVENTCOUNT, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property EventCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addEventCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, EVENTCOUNT, value, 1);
	}
	
    /**
     * Adds a value to property EventCount as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addEventCount( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), EVENTCOUNT, value, 1);
	}
    /**
     * Adds a value to property EventCount from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addEventCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, EVENTCOUNT, value, 1);
	}
	
    /**
     * Adds a value to property EventCount from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addEventCount(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), EVENTCOUNT, value, 1);
	}
 
 

    /**
     * Sets a value of property EventCount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEventCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EVENTCOUNT, value);
	}
	
    /**
     * Sets a value of property EventCount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEventCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EVENTCOUNT, value);
	}
    /**
     * Sets a value of property EventCount from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEventCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, EVENTCOUNT, value);
	}
	
    /**
     * Sets a value of property EventCount from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEventCount(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), EVENTCOUNT, value);
	}
  


    /**
     * Removes a value of property EventCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEventCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EVENTCOUNT, value);
	}
	
    /**
     * Removes a value of property EventCount as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEventCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EVENTCOUNT, value);
	}
    /**
     * Removes a value of property EventCount given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEventCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, EVENTCOUNT, value);
	}
	
    /**
     * Removes a value of property EventCount given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEventCount(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), EVENTCOUNT, value);
	}
  
    /**
     * Removes all values of property EventCount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEventCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EVENTCOUNT);
	}
	
    /**
     * Removes all values of property EventCount	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEventCount() {
		Base.removeAll(this.model, this.getResource(), EVENTCOUNT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6eec957f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFAPERTUREVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6eec957f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifApertureValue() {
		return Base.has(this.model, this.getResource(), EXIFAPERTUREVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6eec957f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFAPERTUREVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6eec957f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifApertureValue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFAPERTUREVALUE);
	}

     /**
     * Get all values of property ExifApertureValue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifApertureValue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFAPERTUREVALUE);
	}
	
    /**
     * Get all values of property ExifApertureValue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifApertureValue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFAPERTUREVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifApertureValue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifApertureValue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFAPERTUREVALUE);
	}

    /**
     * Get all values of property ExifApertureValue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifApertureValue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFAPERTUREVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifApertureValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFAPERTUREVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifApertureValue as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifApertureValue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFAPERTUREVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifApertureValue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifApertureValue() {
		return Base.getAll(this.model, this.getResource(), EXIFAPERTUREVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifApertureValue as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifApertureValue_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFAPERTUREVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifApertureValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFAPERTUREVALUE, value);
	}
	
    /**
     * Adds a value to property ExifApertureValue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifApertureValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFAPERTUREVALUE, value);
	}
    /**
     * Adds a value to property ExifApertureValue from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFAPERTUREVALUE, value);
	}
	
    /**
     * Adds a value to property ExifApertureValue from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifApertureValue(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFAPERTUREVALUE, value);
	}
  

    /**
     * Sets a value of property ExifApertureValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifApertureValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFAPERTUREVALUE, value);
	}
	
    /**
     * Sets a value of property ExifApertureValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifApertureValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFAPERTUREVALUE, value);
	}
    /**
     * Sets a value of property ExifApertureValue from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFAPERTUREVALUE, value);
	}
	
    /**
     * Sets a value of property ExifApertureValue from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifApertureValue(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFAPERTUREVALUE, value);
	}
  


    /**
     * Removes a value of property ExifApertureValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifApertureValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFAPERTUREVALUE, value);
	}
	
    /**
     * Removes a value of property ExifApertureValue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifApertureValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFAPERTUREVALUE, value);
	}
    /**
     * Removes a value of property ExifApertureValue given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFAPERTUREVALUE, value);
	}
	
    /**
     * Removes a value of property ExifApertureValue given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifApertureValue(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFAPERTUREVALUE, value);
	}
  
    /**
     * Removes all values of property ExifApertureValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifApertureValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFAPERTUREVALUE);
	}
	
    /**
     * Removes all values of property ExifApertureValue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifApertureValue() {
		Base.removeAll(this.model, this.getResource(), EXIFAPERTUREVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2830e58e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFARTIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2830e58e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifArtist() {
		return Base.has(this.model, this.getResource(), EXIFARTIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2830e58e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFARTIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2830e58e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifArtist( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFARTIST);
	}

     /**
     * Get all values of property ExifArtist as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifArtist_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFARTIST);
	}
	
    /**
     * Get all values of property ExifArtist as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifArtist_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFARTIST, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifArtist as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifArtist_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFARTIST);
	}

    /**
     * Get all values of property ExifArtist as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifArtist_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFARTIST, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifArtist     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFARTIST, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifArtist as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifArtist_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFARTIST, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifArtist     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifArtist() {
		return Base.getAll(this.model, this.getResource(), EXIFARTIST, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifArtist as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifArtist_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFARTIST, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifArtist as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFARTIST, value);
	}
	
    /**
     * Adds a value to property ExifArtist as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifArtist( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFARTIST, value);
	}
    /**
     * Adds a value to property ExifArtist from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFARTIST, value);
	}
	
    /**
     * Adds a value to property ExifArtist from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifArtist(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFARTIST, value);
	}
  

    /**
     * Sets a value of property ExifArtist from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFARTIST, value);
	}
	
    /**
     * Sets a value of property ExifArtist from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifArtist( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFARTIST, value);
	}
    /**
     * Sets a value of property ExifArtist from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFARTIST, value);
	}
	
    /**
     * Sets a value of property ExifArtist from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifArtist(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFARTIST, value);
	}
  


    /**
     * Removes a value of property ExifArtist as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFARTIST, value);
	}
	
    /**
     * Removes a value of property ExifArtist as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifArtist( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFARTIST, value);
	}
    /**
     * Removes a value of property ExifArtist given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFARTIST, value);
	}
	
    /**
     * Removes a value of property ExifArtist given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifArtist(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFARTIST, value);
	}
  
    /**
     * Removes all values of property ExifArtist     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFARTIST);
	}
	
    /**
     * Removes all values of property ExifArtist	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifArtist() {
		Base.removeAll(this.model, this.getResource(), EXIFARTIST);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54f68112 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFBITSPERSAMPLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54f68112 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifBitsPerSample() {
		return Base.has(this.model, this.getResource(), EXIFBITSPERSAMPLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54f68112 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFBITSPERSAMPLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54f68112 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifBitsPerSample( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFBITSPERSAMPLE);
	}

     /**
     * Get all values of property ExifBitsPerSample as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifBitsPerSample_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFBITSPERSAMPLE);
	}
	
    /**
     * Get all values of property ExifBitsPerSample as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifBitsPerSample_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFBITSPERSAMPLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifBitsPerSample as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifBitsPerSample_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFBITSPERSAMPLE);
	}

    /**
     * Get all values of property ExifBitsPerSample as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifBitsPerSample_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFBITSPERSAMPLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifBitsPerSample     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFBITSPERSAMPLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifBitsPerSample as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifBitsPerSample_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFBITSPERSAMPLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifBitsPerSample     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifBitsPerSample() {
		return Base.getAll(this.model, this.getResource(), EXIFBITSPERSAMPLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifBitsPerSample as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifBitsPerSample_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFBITSPERSAMPLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifBitsPerSample as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFBITSPERSAMPLE, value);
	}
	
    /**
     * Adds a value to property ExifBitsPerSample as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifBitsPerSample( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFBITSPERSAMPLE, value);
	}
    /**
     * Adds a value to property ExifBitsPerSample from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFBITSPERSAMPLE, value);
	}
	
    /**
     * Adds a value to property ExifBitsPerSample from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifBitsPerSample(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFBITSPERSAMPLE, value);
	}
  

    /**
     * Sets a value of property ExifBitsPerSample from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifBitsPerSample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFBITSPERSAMPLE, value);
	}
	
    /**
     * Sets a value of property ExifBitsPerSample from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifBitsPerSample( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFBITSPERSAMPLE, value);
	}
    /**
     * Sets a value of property ExifBitsPerSample from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFBITSPERSAMPLE, value);
	}
	
    /**
     * Sets a value of property ExifBitsPerSample from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifBitsPerSample(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFBITSPERSAMPLE, value);
	}
  


    /**
     * Removes a value of property ExifBitsPerSample as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifBitsPerSample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFBITSPERSAMPLE, value);
	}
	
    /**
     * Removes a value of property ExifBitsPerSample as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifBitsPerSample( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFBITSPERSAMPLE, value);
	}
    /**
     * Removes a value of property ExifBitsPerSample given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFBITSPERSAMPLE, value);
	}
	
    /**
     * Removes a value of property ExifBitsPerSample given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifBitsPerSample(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFBITSPERSAMPLE, value);
	}
  
    /**
     * Removes all values of property ExifBitsPerSample     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifBitsPerSample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFBITSPERSAMPLE);
	}
	
    /**
     * Removes all values of property ExifBitsPerSample	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifBitsPerSample() {
		Base.removeAll(this.model, this.getResource(), EXIFBITSPERSAMPLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f871afc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifBrightnessValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFBRIGHTNESSVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f871afc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifBrightnessValue() {
		return Base.has(this.model, this.getResource(), EXIFBRIGHTNESSVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f871afc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifBrightnessValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFBRIGHTNESSVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f871afc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifBrightnessValue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFBRIGHTNESSVALUE);
	}

     /**
     * Get all values of property ExifBrightnessValue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifBrightnessValue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFBRIGHTNESSVALUE);
	}
	
    /**
     * Get all values of property ExifBrightnessValue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifBrightnessValue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFBRIGHTNESSVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifBrightnessValue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifBrightnessValue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFBRIGHTNESSVALUE);
	}

    /**
     * Get all values of property ExifBrightnessValue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifBrightnessValue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFBRIGHTNESSVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifBrightnessValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifBrightnessValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFBRIGHTNESSVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifBrightnessValue as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifBrightnessValue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFBRIGHTNESSVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifBrightnessValue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifBrightnessValue() {
		return Base.getAll(this.model, this.getResource(), EXIFBRIGHTNESSVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifBrightnessValue as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifBrightnessValue_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFBRIGHTNESSVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifBrightnessValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifBrightnessValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFBRIGHTNESSVALUE, value);
	}
	
    /**
     * Adds a value to property ExifBrightnessValue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifBrightnessValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFBRIGHTNESSVALUE, value);
	}
    /**
     * Adds a value to property ExifBrightnessValue from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifBrightnessValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFBRIGHTNESSVALUE, value);
	}
	
    /**
     * Adds a value to property ExifBrightnessValue from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifBrightnessValue(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFBRIGHTNESSVALUE, value);
	}
  

    /**
     * Sets a value of property ExifBrightnessValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifBrightnessValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFBRIGHTNESSVALUE, value);
	}
	
    /**
     * Sets a value of property ExifBrightnessValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifBrightnessValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFBRIGHTNESSVALUE, value);
	}
    /**
     * Sets a value of property ExifBrightnessValue from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifBrightnessValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFBRIGHTNESSVALUE, value);
	}
	
    /**
     * Sets a value of property ExifBrightnessValue from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifBrightnessValue(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFBRIGHTNESSVALUE, value);
	}
  


    /**
     * Removes a value of property ExifBrightnessValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifBrightnessValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFBRIGHTNESSVALUE, value);
	}
	
    /**
     * Removes a value of property ExifBrightnessValue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifBrightnessValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFBRIGHTNESSVALUE, value);
	}
    /**
     * Removes a value of property ExifBrightnessValue given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifBrightnessValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFBRIGHTNESSVALUE, value);
	}
	
    /**
     * Removes a value of property ExifBrightnessValue given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifBrightnessValue(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFBRIGHTNESSVALUE, value);
	}
  
    /**
     * Removes all values of property ExifBrightnessValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifBrightnessValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFBRIGHTNESSVALUE);
	}
	
    /**
     * Removes all values of property ExifBrightnessValue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifBrightnessValue() {
		Base.removeAll(this.model, this.getResource(), EXIFBRIGHTNESSVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b7aa8c8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifCfaPattern(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFCFAPATTERN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b7aa8c8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifCfaPattern() {
		return Base.has(this.model, this.getResource(), EXIFCFAPATTERN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b7aa8c8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifCfaPattern(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFCFAPATTERN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b7aa8c8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifCfaPattern( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFCFAPATTERN);
	}

     /**
     * Get all values of property ExifCfaPattern as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifCfaPattern_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFCFAPATTERN);
	}
	
    /**
     * Get all values of property ExifCfaPattern as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifCfaPattern_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCFAPATTERN, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifCfaPattern as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifCfaPattern_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFCFAPATTERN);
	}

    /**
     * Get all values of property ExifCfaPattern as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifCfaPattern_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCFAPATTERN, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifCfaPattern     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCfaPattern(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFCFAPATTERN, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifCfaPattern as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCfaPattern_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCFAPATTERN, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifCfaPattern     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCfaPattern() {
		return Base.getAll(this.model, this.getResource(), EXIFCFAPATTERN, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifCfaPattern as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCfaPattern_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCFAPATTERN, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifCfaPattern as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifCfaPattern(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFCFAPATTERN, value);
	}
	
    /**
     * Adds a value to property ExifCfaPattern as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifCfaPattern( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFCFAPATTERN, value);
	}
    /**
     * Adds a value to property ExifCfaPattern from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifCfaPattern(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFCFAPATTERN, value);
	}
	
    /**
     * Adds a value to property ExifCfaPattern from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifCfaPattern(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFCFAPATTERN, value);
	}
  

    /**
     * Sets a value of property ExifCfaPattern from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifCfaPattern( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFCFAPATTERN, value);
	}
	
    /**
     * Sets a value of property ExifCfaPattern from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifCfaPattern( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFCFAPATTERN, value);
	}
    /**
     * Sets a value of property ExifCfaPattern from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifCfaPattern(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFCFAPATTERN, value);
	}
	
    /**
     * Sets a value of property ExifCfaPattern from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifCfaPattern(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFCFAPATTERN, value);
	}
  


    /**
     * Removes a value of property ExifCfaPattern as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifCfaPattern( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFCFAPATTERN, value);
	}
	
    /**
     * Removes a value of property ExifCfaPattern as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifCfaPattern( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFCFAPATTERN, value);
	}
    /**
     * Removes a value of property ExifCfaPattern given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifCfaPattern(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFCFAPATTERN, value);
	}
	
    /**
     * Removes a value of property ExifCfaPattern given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifCfaPattern(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFCFAPATTERN, value);
	}
  
    /**
     * Removes all values of property ExifCfaPattern     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifCfaPattern( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFCFAPATTERN);
	}
	
    /**
     * Removes all values of property ExifCfaPattern	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifCfaPattern() {
		Base.removeAll(this.model, this.getResource(), EXIFCFAPATTERN);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@224b1370 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifColorSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFCOLORSPACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@224b1370 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifColorSpace() {
		return Base.has(this.model, this.getResource(), EXIFCOLORSPACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@224b1370 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifColorSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFCOLORSPACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@224b1370 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifColorSpace( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFCOLORSPACE);
	}

     /**
     * Get all values of property ExifColorSpace as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifColorSpace_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFCOLORSPACE);
	}
	
    /**
     * Get all values of property ExifColorSpace as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifColorSpace_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCOLORSPACE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifColorSpace as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifColorSpace_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFCOLORSPACE);
	}

    /**
     * Get all values of property ExifColorSpace as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifColorSpace_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCOLORSPACE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifColorSpace     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifColorSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFCOLORSPACE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifColorSpace as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifColorSpace_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCOLORSPACE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifColorSpace     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifColorSpace() {
		return Base.getAll(this.model, this.getResource(), EXIFCOLORSPACE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifColorSpace as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifColorSpace_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCOLORSPACE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifColorSpace as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifColorSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFCOLORSPACE, value);
	}
	
    /**
     * Adds a value to property ExifColorSpace as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifColorSpace( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFCOLORSPACE, value);
	}
    /**
     * Adds a value to property ExifColorSpace from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifColorSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFCOLORSPACE, value);
	}
	
    /**
     * Adds a value to property ExifColorSpace from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifColorSpace(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFCOLORSPACE, value);
	}
  

    /**
     * Sets a value of property ExifColorSpace from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifColorSpace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFCOLORSPACE, value);
	}
	
    /**
     * Sets a value of property ExifColorSpace from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifColorSpace( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFCOLORSPACE, value);
	}
    /**
     * Sets a value of property ExifColorSpace from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifColorSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFCOLORSPACE, value);
	}
	
    /**
     * Sets a value of property ExifColorSpace from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifColorSpace(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFCOLORSPACE, value);
	}
  


    /**
     * Removes a value of property ExifColorSpace as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifColorSpace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFCOLORSPACE, value);
	}
	
    /**
     * Removes a value of property ExifColorSpace as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifColorSpace( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFCOLORSPACE, value);
	}
    /**
     * Removes a value of property ExifColorSpace given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifColorSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFCOLORSPACE, value);
	}
	
    /**
     * Removes a value of property ExifColorSpace given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifColorSpace(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFCOLORSPACE, value);
	}
  
    /**
     * Removes all values of property ExifColorSpace     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifColorSpace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFCOLORSPACE);
	}
	
    /**
     * Removes all values of property ExifColorSpace	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifColorSpace() {
		Base.removeAll(this.model, this.getResource(), EXIFCOLORSPACE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@672f151d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifComponentsConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFCOMPONENTSCONFIGURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@672f151d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifComponentsConfiguration() {
		return Base.has(this.model, this.getResource(), EXIFCOMPONENTSCONFIGURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@672f151d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifComponentsConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFCOMPONENTSCONFIGURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@672f151d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifComponentsConfiguration( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFCOMPONENTSCONFIGURATION);
	}

     /**
     * Get all values of property ExifComponentsConfiguration as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifComponentsConfiguration_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFCOMPONENTSCONFIGURATION);
	}
	
    /**
     * Get all values of property ExifComponentsConfiguration as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifComponentsConfiguration_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCOMPONENTSCONFIGURATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifComponentsConfiguration as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifComponentsConfiguration_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFCOMPONENTSCONFIGURATION);
	}

    /**
     * Get all values of property ExifComponentsConfiguration as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifComponentsConfiguration_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCOMPONENTSCONFIGURATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifComponentsConfiguration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifComponentsConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFCOMPONENTSCONFIGURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifComponentsConfiguration as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifComponentsConfiguration_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCOMPONENTSCONFIGURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifComponentsConfiguration     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifComponentsConfiguration() {
		return Base.getAll(this.model, this.getResource(), EXIFCOMPONENTSCONFIGURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifComponentsConfiguration as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifComponentsConfiguration_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCOMPONENTSCONFIGURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifComponentsConfiguration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifComponentsConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFCOMPONENTSCONFIGURATION, value);
	}
	
    /**
     * Adds a value to property ExifComponentsConfiguration as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifComponentsConfiguration( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFCOMPONENTSCONFIGURATION, value);
	}
    /**
     * Adds a value to property ExifComponentsConfiguration from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifComponentsConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFCOMPONENTSCONFIGURATION, value);
	}
	
    /**
     * Adds a value to property ExifComponentsConfiguration from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifComponentsConfiguration(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFCOMPONENTSCONFIGURATION, value);
	}
  

    /**
     * Sets a value of property ExifComponentsConfiguration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifComponentsConfiguration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFCOMPONENTSCONFIGURATION, value);
	}
	
    /**
     * Sets a value of property ExifComponentsConfiguration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifComponentsConfiguration( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFCOMPONENTSCONFIGURATION, value);
	}
    /**
     * Sets a value of property ExifComponentsConfiguration from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifComponentsConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFCOMPONENTSCONFIGURATION, value);
	}
	
    /**
     * Sets a value of property ExifComponentsConfiguration from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifComponentsConfiguration(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFCOMPONENTSCONFIGURATION, value);
	}
  


    /**
     * Removes a value of property ExifComponentsConfiguration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifComponentsConfiguration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFCOMPONENTSCONFIGURATION, value);
	}
	
    /**
     * Removes a value of property ExifComponentsConfiguration as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifComponentsConfiguration( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFCOMPONENTSCONFIGURATION, value);
	}
    /**
     * Removes a value of property ExifComponentsConfiguration given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifComponentsConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFCOMPONENTSCONFIGURATION, value);
	}
	
    /**
     * Removes a value of property ExifComponentsConfiguration given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifComponentsConfiguration(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFCOMPONENTSCONFIGURATION, value);
	}
  
    /**
     * Removes all values of property ExifComponentsConfiguration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifComponentsConfiguration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFCOMPONENTSCONFIGURATION);
	}
	
    /**
     * Removes all values of property ExifComponentsConfiguration	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifComponentsConfiguration() {
		Base.removeAll(this.model, this.getResource(), EXIFCOMPONENTSCONFIGURATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66caa61e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifCompressedBitsPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFCOMPRESSEDBITSPERPIXEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66caa61e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifCompressedBitsPerPixel() {
		return Base.has(this.model, this.getResource(), EXIFCOMPRESSEDBITSPERPIXEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66caa61e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifCompressedBitsPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFCOMPRESSEDBITSPERPIXEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66caa61e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifCompressedBitsPerPixel( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFCOMPRESSEDBITSPERPIXEL);
	}

     /**
     * Get all values of property ExifCompressedBitsPerPixel as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifCompressedBitsPerPixel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFCOMPRESSEDBITSPERPIXEL);
	}
	
    /**
     * Get all values of property ExifCompressedBitsPerPixel as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifCompressedBitsPerPixel_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCOMPRESSEDBITSPERPIXEL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifCompressedBitsPerPixel as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifCompressedBitsPerPixel_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFCOMPRESSEDBITSPERPIXEL);
	}

    /**
     * Get all values of property ExifCompressedBitsPerPixel as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifCompressedBitsPerPixel_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCOMPRESSEDBITSPERPIXEL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifCompressedBitsPerPixel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCompressedBitsPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFCOMPRESSEDBITSPERPIXEL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifCompressedBitsPerPixel as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCompressedBitsPerPixel_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCOMPRESSEDBITSPERPIXEL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifCompressedBitsPerPixel     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCompressedBitsPerPixel() {
		return Base.getAll(this.model, this.getResource(), EXIFCOMPRESSEDBITSPERPIXEL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifCompressedBitsPerPixel as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCompressedBitsPerPixel_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCOMPRESSEDBITSPERPIXEL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifCompressedBitsPerPixel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifCompressedBitsPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFCOMPRESSEDBITSPERPIXEL, value);
	}
	
    /**
     * Adds a value to property ExifCompressedBitsPerPixel as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifCompressedBitsPerPixel( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFCOMPRESSEDBITSPERPIXEL, value);
	}
    /**
     * Adds a value to property ExifCompressedBitsPerPixel from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifCompressedBitsPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFCOMPRESSEDBITSPERPIXEL, value);
	}
	
    /**
     * Adds a value to property ExifCompressedBitsPerPixel from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifCompressedBitsPerPixel(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFCOMPRESSEDBITSPERPIXEL, value);
	}
  

    /**
     * Sets a value of property ExifCompressedBitsPerPixel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifCompressedBitsPerPixel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFCOMPRESSEDBITSPERPIXEL, value);
	}
	
    /**
     * Sets a value of property ExifCompressedBitsPerPixel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifCompressedBitsPerPixel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFCOMPRESSEDBITSPERPIXEL, value);
	}
    /**
     * Sets a value of property ExifCompressedBitsPerPixel from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifCompressedBitsPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFCOMPRESSEDBITSPERPIXEL, value);
	}
	
    /**
     * Sets a value of property ExifCompressedBitsPerPixel from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifCompressedBitsPerPixel(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFCOMPRESSEDBITSPERPIXEL, value);
	}
  


    /**
     * Removes a value of property ExifCompressedBitsPerPixel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifCompressedBitsPerPixel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFCOMPRESSEDBITSPERPIXEL, value);
	}
	
    /**
     * Removes a value of property ExifCompressedBitsPerPixel as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifCompressedBitsPerPixel( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFCOMPRESSEDBITSPERPIXEL, value);
	}
    /**
     * Removes a value of property ExifCompressedBitsPerPixel given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifCompressedBitsPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFCOMPRESSEDBITSPERPIXEL, value);
	}
	
    /**
     * Removes a value of property ExifCompressedBitsPerPixel given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifCompressedBitsPerPixel(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFCOMPRESSEDBITSPERPIXEL, value);
	}
  
    /**
     * Removes all values of property ExifCompressedBitsPerPixel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifCompressedBitsPerPixel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFCOMPRESSEDBITSPERPIXEL);
	}
	
    /**
     * Removes all values of property ExifCompressedBitsPerPixel	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifCompressedBitsPerPixel() {
		Base.removeAll(this.model, this.getResource(), EXIFCOMPRESSEDBITSPERPIXEL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5afa8450 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifCompression(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFCOMPRESSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5afa8450 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifCompression() {
		return Base.has(this.model, this.getResource(), EXIFCOMPRESSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5afa8450 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifCompression(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFCOMPRESSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5afa8450 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifCompression( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFCOMPRESSION);
	}

     /**
     * Get all values of property ExifCompression as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifCompression_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFCOMPRESSION);
	}
	
    /**
     * Get all values of property ExifCompression as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifCompression_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCOMPRESSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifCompression as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifCompression_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFCOMPRESSION);
	}

    /**
     * Get all values of property ExifCompression as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifCompression_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCOMPRESSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifCompression     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCompression(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFCOMPRESSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifCompression as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCompression_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCOMPRESSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifCompression     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCompression() {
		return Base.getAll(this.model, this.getResource(), EXIFCOMPRESSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifCompression as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCompression_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCOMPRESSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifCompression as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifCompression(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFCOMPRESSION, value);
	}
	
    /**
     * Adds a value to property ExifCompression as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifCompression( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFCOMPRESSION, value);
	}
    /**
     * Adds a value to property ExifCompression from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifCompression(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFCOMPRESSION, value);
	}
	
    /**
     * Adds a value to property ExifCompression from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifCompression(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFCOMPRESSION, value);
	}
  

    /**
     * Sets a value of property ExifCompression from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifCompression( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFCOMPRESSION, value);
	}
	
    /**
     * Sets a value of property ExifCompression from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifCompression( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFCOMPRESSION, value);
	}
    /**
     * Sets a value of property ExifCompression from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifCompression(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFCOMPRESSION, value);
	}
	
    /**
     * Sets a value of property ExifCompression from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifCompression(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFCOMPRESSION, value);
	}
  


    /**
     * Removes a value of property ExifCompression as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifCompression( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFCOMPRESSION, value);
	}
	
    /**
     * Removes a value of property ExifCompression as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifCompression( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFCOMPRESSION, value);
	}
    /**
     * Removes a value of property ExifCompression given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifCompression(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFCOMPRESSION, value);
	}
	
    /**
     * Removes a value of property ExifCompression given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifCompression(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFCOMPRESSION, value);
	}
  
    /**
     * Removes all values of property ExifCompression     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifCompression( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFCOMPRESSION);
	}
	
    /**
     * Removes all values of property ExifCompression	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifCompression() {
		Base.removeAll(this.model, this.getResource(), EXIFCOMPRESSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ad4cd45 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFCONTRAST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ad4cd45 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifContrast() {
		return Base.has(this.model, this.getResource(), EXIFCONTRAST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ad4cd45 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFCONTRAST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ad4cd45 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifContrast( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFCONTRAST);
	}

     /**
     * Get all values of property ExifContrast as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifContrast_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFCONTRAST);
	}
	
    /**
     * Get all values of property ExifContrast as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifContrast_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCONTRAST, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifContrast as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifContrast_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFCONTRAST);
	}

    /**
     * Get all values of property ExifContrast as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifContrast_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCONTRAST, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifContrast     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFCONTRAST, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifContrast as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifContrast_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCONTRAST, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifContrast     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifContrast() {
		return Base.getAll(this.model, this.getResource(), EXIFCONTRAST, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifContrast as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifContrast_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCONTRAST, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifContrast as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFCONTRAST, value);
	}
	
    /**
     * Adds a value to property ExifContrast as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifContrast( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFCONTRAST, value);
	}
    /**
     * Adds a value to property ExifContrast from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFCONTRAST, value);
	}
	
    /**
     * Adds a value to property ExifContrast from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifContrast(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFCONTRAST, value);
	}
  

    /**
     * Sets a value of property ExifContrast from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifContrast( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFCONTRAST, value);
	}
	
    /**
     * Sets a value of property ExifContrast from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifContrast( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFCONTRAST, value);
	}
    /**
     * Sets a value of property ExifContrast from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFCONTRAST, value);
	}
	
    /**
     * Sets a value of property ExifContrast from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifContrast(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFCONTRAST, value);
	}
  


    /**
     * Removes a value of property ExifContrast as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifContrast( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFCONTRAST, value);
	}
	
    /**
     * Removes a value of property ExifContrast as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifContrast( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFCONTRAST, value);
	}
    /**
     * Removes a value of property ExifContrast given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFCONTRAST, value);
	}
	
    /**
     * Removes a value of property ExifContrast given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifContrast(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFCONTRAST, value);
	}
  
    /**
     * Removes all values of property ExifContrast     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifContrast( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFCONTRAST);
	}
	
    /**
     * Removes all values of property ExifContrast	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifContrast() {
		Base.removeAll(this.model, this.getResource(), EXIFCONTRAST);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67cbabb9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFCOPYRIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67cbabb9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifCopyright() {
		return Base.has(this.model, this.getResource(), EXIFCOPYRIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67cbabb9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFCOPYRIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67cbabb9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifCopyright( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFCOPYRIGHT);
	}

     /**
     * Get all values of property ExifCopyright as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifCopyright_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFCOPYRIGHT);
	}
	
    /**
     * Get all values of property ExifCopyright as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifCopyright_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCOPYRIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifCopyright as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifCopyright_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFCOPYRIGHT);
	}

    /**
     * Get all values of property ExifCopyright as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifCopyright_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCOPYRIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifCopyright     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFCOPYRIGHT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifCopyright as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCopyright_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCOPYRIGHT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifCopyright     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCopyright() {
		return Base.getAll(this.model, this.getResource(), EXIFCOPYRIGHT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifCopyright as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCopyright_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCOPYRIGHT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifCopyright as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFCOPYRIGHT, value);
	}
	
    /**
     * Adds a value to property ExifCopyright as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifCopyright( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFCOPYRIGHT, value);
	}
    /**
     * Adds a value to property ExifCopyright from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFCOPYRIGHT, value);
	}
	
    /**
     * Adds a value to property ExifCopyright from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifCopyright(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFCOPYRIGHT, value);
	}
  

    /**
     * Sets a value of property ExifCopyright from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifCopyright( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFCOPYRIGHT, value);
	}
	
    /**
     * Sets a value of property ExifCopyright from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifCopyright( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFCOPYRIGHT, value);
	}
    /**
     * Sets a value of property ExifCopyright from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFCOPYRIGHT, value);
	}
	
    /**
     * Sets a value of property ExifCopyright from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifCopyright(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFCOPYRIGHT, value);
	}
  


    /**
     * Removes a value of property ExifCopyright as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifCopyright( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFCOPYRIGHT, value);
	}
	
    /**
     * Removes a value of property ExifCopyright as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifCopyright( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFCOPYRIGHT, value);
	}
    /**
     * Removes a value of property ExifCopyright given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFCOPYRIGHT, value);
	}
	
    /**
     * Removes a value of property ExifCopyright given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifCopyright(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFCOPYRIGHT, value);
	}
  
    /**
     * Removes all values of property ExifCopyright     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifCopyright( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFCOPYRIGHT);
	}
	
    /**
     * Removes all values of property ExifCopyright	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifCopyright() {
		Base.removeAll(this.model, this.getResource(), EXIFCOPYRIGHT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42e4fc96 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifCustomRendered(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFCUSTOMRENDERED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42e4fc96 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifCustomRendered() {
		return Base.has(this.model, this.getResource(), EXIFCUSTOMRENDERED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42e4fc96 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifCustomRendered(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFCUSTOMRENDERED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42e4fc96 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifCustomRendered( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFCUSTOMRENDERED);
	}

     /**
     * Get all values of property ExifCustomRendered as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifCustomRendered_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFCUSTOMRENDERED);
	}
	
    /**
     * Get all values of property ExifCustomRendered as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifCustomRendered_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCUSTOMRENDERED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifCustomRendered as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifCustomRendered_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFCUSTOMRENDERED);
	}

    /**
     * Get all values of property ExifCustomRendered as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifCustomRendered_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCUSTOMRENDERED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifCustomRendered     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCustomRendered(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFCUSTOMRENDERED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifCustomRendered as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCustomRendered_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFCUSTOMRENDERED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifCustomRendered     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCustomRendered() {
		return Base.getAll(this.model, this.getResource(), EXIFCUSTOMRENDERED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifCustomRendered as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifCustomRendered_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFCUSTOMRENDERED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifCustomRendered as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifCustomRendered(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFCUSTOMRENDERED, value);
	}
	
    /**
     * Adds a value to property ExifCustomRendered as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifCustomRendered( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFCUSTOMRENDERED, value);
	}
    /**
     * Adds a value to property ExifCustomRendered from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifCustomRendered(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFCUSTOMRENDERED, value);
	}
	
    /**
     * Adds a value to property ExifCustomRendered from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifCustomRendered(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFCUSTOMRENDERED, value);
	}
  

    /**
     * Sets a value of property ExifCustomRendered from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifCustomRendered( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFCUSTOMRENDERED, value);
	}
	
    /**
     * Sets a value of property ExifCustomRendered from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifCustomRendered( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFCUSTOMRENDERED, value);
	}
    /**
     * Sets a value of property ExifCustomRendered from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifCustomRendered(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFCUSTOMRENDERED, value);
	}
	
    /**
     * Sets a value of property ExifCustomRendered from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifCustomRendered(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFCUSTOMRENDERED, value);
	}
  


    /**
     * Removes a value of property ExifCustomRendered as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifCustomRendered( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFCUSTOMRENDERED, value);
	}
	
    /**
     * Removes a value of property ExifCustomRendered as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifCustomRendered( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFCUSTOMRENDERED, value);
	}
    /**
     * Removes a value of property ExifCustomRendered given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifCustomRendered(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFCUSTOMRENDERED, value);
	}
	
    /**
     * Removes a value of property ExifCustomRendered given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifCustomRendered(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFCUSTOMRENDERED, value);
	}
  
    /**
     * Removes all values of property ExifCustomRendered     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifCustomRendered( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFCUSTOMRENDERED);
	}
	
    /**
     * Removes all values of property ExifCustomRendered	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifCustomRendered() {
		Base.removeAll(this.model, this.getResource(), EXIFCUSTOMRENDERED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33d8341c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifDatatype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFDATATYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33d8341c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifDatatype() {
		return Base.has(this.model, this.getResource(), EXIFDATATYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33d8341c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifDatatype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFDATATYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33d8341c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifDatatype( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFDATATYPE);
	}

     /**
     * Get all values of property ExifDatatype as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDatatype_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFDATATYPE);
	}
	
    /**
     * Get all values of property ExifDatatype as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDatatype_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDATATYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifDatatype as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDatatype_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFDATATYPE);
	}

    /**
     * Get all values of property ExifDatatype as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDatatype_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDATATYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifDatatype     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDatatype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFDATATYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifDatatype as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDatatype_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDATATYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDatatype     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDatatype() {
		return Base.getAll(this.model, this.getResource(), EXIFDATATYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDatatype as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDatatype_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDATATYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifDatatype as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifDatatype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFDATATYPE, value);
	}
	
    /**
     * Adds a value to property ExifDatatype as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifDatatype( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFDATATYPE, value);
	}
    /**
     * Adds a value to property ExifDatatype from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifDatatype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFDATATYPE, value);
	}
	
    /**
     * Adds a value to property ExifDatatype from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifDatatype(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFDATATYPE, value);
	}
  

    /**
     * Sets a value of property ExifDatatype from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifDatatype( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFDATATYPE, value);
	}
	
    /**
     * Sets a value of property ExifDatatype from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifDatatype( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFDATATYPE, value);
	}
    /**
     * Sets a value of property ExifDatatype from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifDatatype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFDATATYPE, value);
	}
	
    /**
     * Sets a value of property ExifDatatype from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifDatatype(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFDATATYPE, value);
	}
  


    /**
     * Removes a value of property ExifDatatype as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifDatatype( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFDATATYPE, value);
	}
	
    /**
     * Removes a value of property ExifDatatype as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifDatatype( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFDATATYPE, value);
	}
    /**
     * Removes a value of property ExifDatatype given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifDatatype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFDATATYPE, value);
	}
	
    /**
     * Removes a value of property ExifDatatype given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifDatatype(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFDATATYPE, value);
	}
  
    /**
     * Removes all values of property ExifDatatype     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifDatatype( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFDATATYPE);
	}
	
    /**
     * Removes all values of property ExifDatatype	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifDatatype() {
		Base.removeAll(this.model, this.getResource(), EXIFDATATYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cee0b66 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cee0b66 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifDate() {
		return Base.has(this.model, this.getResource(), EXIFDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cee0b66 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cee0b66 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFDATE);
	}

     /**
     * Get all values of property ExifDate as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFDATE);
	}
	
    /**
     * Get all values of property ExifDate as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifDate as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFDATE);
	}

    /**
     * Get all values of property ExifDate as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFDATE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifDate as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDATE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDate     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDate() {
		return Base.getAll(this.model, this.getResource(), EXIFDATE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDate as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDate_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDATE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFDATE, value);
	}
	
    /**
     * Adds a value to property ExifDate as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFDATE, value);
	}
    /**
     * Adds a value to property ExifDate from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFDATE, value);
	}
	
    /**
     * Adds a value to property ExifDate from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifDate(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFDATE, value);
	}
  

    /**
     * Sets a value of property ExifDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFDATE, value);
	}
	
    /**
     * Sets a value of property ExifDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFDATE, value);
	}
    /**
     * Sets a value of property ExifDate from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFDATE, value);
	}
	
    /**
     * Sets a value of property ExifDate from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifDate(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFDATE, value);
	}
  


    /**
     * Removes a value of property ExifDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFDATE, value);
	}
	
    /**
     * Removes a value of property ExifDate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFDATE, value);
	}
    /**
     * Removes a value of property ExifDate given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFDATE, value);
	}
	
    /**
     * Removes a value of property ExifDate given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifDate(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFDATE, value);
	}
  
    /**
     * Removes all values of property ExifDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFDATE);
	}
	
    /**
     * Removes all values of property ExifDate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifDate() {
		Base.removeAll(this.model, this.getResource(), EXIFDATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7521491b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifDateAndOrTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFDATEANDORTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7521491b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifDateAndOrTime() {
		return Base.has(this.model, this.getResource(), EXIFDATEANDORTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7521491b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifDateAndOrTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFDATEANDORTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7521491b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifDateAndOrTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFDATEANDORTIME);
	}

     /**
     * Get all values of property ExifDateAndOrTime as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDateAndOrTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFDATEANDORTIME);
	}
	
    /**
     * Get all values of property ExifDateAndOrTime as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDateAndOrTime_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDATEANDORTIME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifDateAndOrTime as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDateAndOrTime_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFDATEANDORTIME);
	}

    /**
     * Get all values of property ExifDateAndOrTime as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDateAndOrTime_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDATEANDORTIME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifDateAndOrTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateAndOrTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFDATEANDORTIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifDateAndOrTime as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateAndOrTime_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDATEANDORTIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDateAndOrTime     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateAndOrTime() {
		return Base.getAll(this.model, this.getResource(), EXIFDATEANDORTIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDateAndOrTime as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateAndOrTime_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDATEANDORTIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifDateAndOrTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifDateAndOrTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFDATEANDORTIME, value);
	}
	
    /**
     * Adds a value to property ExifDateAndOrTime as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifDateAndOrTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFDATEANDORTIME, value);
	}
    /**
     * Adds a value to property ExifDateAndOrTime from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifDateAndOrTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFDATEANDORTIME, value);
	}
	
    /**
     * Adds a value to property ExifDateAndOrTime from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifDateAndOrTime(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFDATEANDORTIME, value);
	}
  

    /**
     * Sets a value of property ExifDateAndOrTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifDateAndOrTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFDATEANDORTIME, value);
	}
	
    /**
     * Sets a value of property ExifDateAndOrTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifDateAndOrTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFDATEANDORTIME, value);
	}
    /**
     * Sets a value of property ExifDateAndOrTime from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifDateAndOrTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFDATEANDORTIME, value);
	}
	
    /**
     * Sets a value of property ExifDateAndOrTime from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifDateAndOrTime(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFDATEANDORTIME, value);
	}
  


    /**
     * Removes a value of property ExifDateAndOrTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifDateAndOrTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFDATEANDORTIME, value);
	}
	
    /**
     * Removes a value of property ExifDateAndOrTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifDateAndOrTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFDATEANDORTIME, value);
	}
    /**
     * Removes a value of property ExifDateAndOrTime given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifDateAndOrTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFDATEANDORTIME, value);
	}
	
    /**
     * Removes a value of property ExifDateAndOrTime given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifDateAndOrTime(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFDATEANDORTIME, value);
	}
  
    /**
     * Removes all values of property ExifDateAndOrTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifDateAndOrTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFDATEANDORTIME);
	}
	
    /**
     * Removes all values of property ExifDateAndOrTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifDateAndOrTime() {
		Base.removeAll(this.model, this.getResource(), EXIFDATEANDORTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f67df09 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFDATETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f67df09 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifDateTime() {
		return Base.has(this.model, this.getResource(), EXIFDATETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f67df09 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFDATETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f67df09 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifDateTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFDATETIME);
	}

     /**
     * Get all values of property ExifDateTime as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDateTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFDATETIME);
	}
	
    /**
     * Get all values of property ExifDateTime as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDateTime_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDATETIME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifDateTime as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDateTime_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFDATETIME);
	}

    /**
     * Get all values of property ExifDateTime as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDateTime_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDATETIME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifDateTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFDATETIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifDateTime as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateTime_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDATETIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDateTime     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateTime() {
		return Base.getAll(this.model, this.getResource(), EXIFDATETIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDateTime as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateTime_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDATETIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifDateTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFDATETIME, value);
	}
	
    /**
     * Adds a value to property ExifDateTime as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifDateTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFDATETIME, value);
	}
    /**
     * Adds a value to property ExifDateTime from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFDATETIME, value);
	}
	
    /**
     * Adds a value to property ExifDateTime from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifDateTime(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFDATETIME, value);
	}
  

    /**
     * Sets a value of property ExifDateTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifDateTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFDATETIME, value);
	}
	
    /**
     * Sets a value of property ExifDateTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifDateTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFDATETIME, value);
	}
    /**
     * Sets a value of property ExifDateTime from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFDATETIME, value);
	}
	
    /**
     * Sets a value of property ExifDateTime from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifDateTime(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFDATETIME, value);
	}
  


    /**
     * Removes a value of property ExifDateTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifDateTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFDATETIME, value);
	}
	
    /**
     * Removes a value of property ExifDateTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifDateTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFDATETIME, value);
	}
    /**
     * Removes a value of property ExifDateTime given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFDATETIME, value);
	}
	
    /**
     * Removes a value of property ExifDateTime given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifDateTime(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFDATETIME, value);
	}
  
    /**
     * Removes all values of property ExifDateTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifDateTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFDATETIME);
	}
	
    /**
     * Removes all values of property ExifDateTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifDateTime() {
		Base.removeAll(this.model, this.getResource(), EXIFDATETIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2354e3d4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifDateTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFDATETIMEDIGITIZED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2354e3d4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifDateTimeDigitized() {
		return Base.has(this.model, this.getResource(), EXIFDATETIMEDIGITIZED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2354e3d4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifDateTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFDATETIMEDIGITIZED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2354e3d4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifDateTimeDigitized( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFDATETIMEDIGITIZED);
	}

     /**
     * Get all values of property ExifDateTimeDigitized as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDateTimeDigitized_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFDATETIMEDIGITIZED);
	}
	
    /**
     * Get all values of property ExifDateTimeDigitized as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDateTimeDigitized_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDATETIMEDIGITIZED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifDateTimeDigitized as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDateTimeDigitized_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFDATETIMEDIGITIZED);
	}

    /**
     * Get all values of property ExifDateTimeDigitized as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDateTimeDigitized_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDATETIMEDIGITIZED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifDateTimeDigitized     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFDATETIMEDIGITIZED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifDateTimeDigitized as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateTimeDigitized_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDATETIMEDIGITIZED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDateTimeDigitized     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateTimeDigitized() {
		return Base.getAll(this.model, this.getResource(), EXIFDATETIMEDIGITIZED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDateTimeDigitized as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateTimeDigitized_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDATETIMEDIGITIZED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifDateTimeDigitized as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifDateTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFDATETIMEDIGITIZED, value);
	}
	
    /**
     * Adds a value to property ExifDateTimeDigitized as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifDateTimeDigitized( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFDATETIMEDIGITIZED, value);
	}
    /**
     * Adds a value to property ExifDateTimeDigitized from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifDateTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFDATETIMEDIGITIZED, value);
	}
	
    /**
     * Adds a value to property ExifDateTimeDigitized from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifDateTimeDigitized(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFDATETIMEDIGITIZED, value);
	}
  

    /**
     * Sets a value of property ExifDateTimeDigitized from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifDateTimeDigitized( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFDATETIMEDIGITIZED, value);
	}
	
    /**
     * Sets a value of property ExifDateTimeDigitized from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifDateTimeDigitized( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFDATETIMEDIGITIZED, value);
	}
    /**
     * Sets a value of property ExifDateTimeDigitized from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifDateTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFDATETIMEDIGITIZED, value);
	}
	
    /**
     * Sets a value of property ExifDateTimeDigitized from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifDateTimeDigitized(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFDATETIMEDIGITIZED, value);
	}
  


    /**
     * Removes a value of property ExifDateTimeDigitized as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifDateTimeDigitized( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFDATETIMEDIGITIZED, value);
	}
	
    /**
     * Removes a value of property ExifDateTimeDigitized as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifDateTimeDigitized( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFDATETIMEDIGITIZED, value);
	}
    /**
     * Removes a value of property ExifDateTimeDigitized given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifDateTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFDATETIMEDIGITIZED, value);
	}
	
    /**
     * Removes a value of property ExifDateTimeDigitized given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifDateTimeDigitized(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFDATETIMEDIGITIZED, value);
	}
  
    /**
     * Removes all values of property ExifDateTimeDigitized     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifDateTimeDigitized( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFDATETIMEDIGITIZED);
	}
	
    /**
     * Removes all values of property ExifDateTimeDigitized	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifDateTimeDigitized() {
		Base.removeAll(this.model, this.getResource(), EXIFDATETIMEDIGITIZED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3146ad6f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifDateTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFDATETIMEORIGINAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3146ad6f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifDateTimeOriginal() {
		return Base.has(this.model, this.getResource(), EXIFDATETIMEORIGINAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3146ad6f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifDateTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFDATETIMEORIGINAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3146ad6f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifDateTimeOriginal( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFDATETIMEORIGINAL);
	}

     /**
     * Get all values of property ExifDateTimeOriginal as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDateTimeOriginal_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFDATETIMEORIGINAL);
	}
	
    /**
     * Get all values of property ExifDateTimeOriginal as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDateTimeOriginal_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDATETIMEORIGINAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifDateTimeOriginal as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDateTimeOriginal_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFDATETIMEORIGINAL);
	}

    /**
     * Get all values of property ExifDateTimeOriginal as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDateTimeOriginal_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDATETIMEORIGINAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifDateTimeOriginal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFDATETIMEORIGINAL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifDateTimeOriginal as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateTimeOriginal_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDATETIMEORIGINAL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDateTimeOriginal     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateTimeOriginal() {
		return Base.getAll(this.model, this.getResource(), EXIFDATETIMEORIGINAL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDateTimeOriginal as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDateTimeOriginal_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDATETIMEORIGINAL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifDateTimeOriginal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifDateTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFDATETIMEORIGINAL, value);
	}
	
    /**
     * Adds a value to property ExifDateTimeOriginal as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifDateTimeOriginal( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFDATETIMEORIGINAL, value);
	}
    /**
     * Adds a value to property ExifDateTimeOriginal from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifDateTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFDATETIMEORIGINAL, value);
	}
	
    /**
     * Adds a value to property ExifDateTimeOriginal from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifDateTimeOriginal(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFDATETIMEORIGINAL, value);
	}
  

    /**
     * Sets a value of property ExifDateTimeOriginal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifDateTimeOriginal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFDATETIMEORIGINAL, value);
	}
	
    /**
     * Sets a value of property ExifDateTimeOriginal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifDateTimeOriginal( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFDATETIMEORIGINAL, value);
	}
    /**
     * Sets a value of property ExifDateTimeOriginal from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifDateTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFDATETIMEORIGINAL, value);
	}
	
    /**
     * Sets a value of property ExifDateTimeOriginal from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifDateTimeOriginal(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFDATETIMEORIGINAL, value);
	}
  


    /**
     * Removes a value of property ExifDateTimeOriginal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifDateTimeOriginal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFDATETIMEORIGINAL, value);
	}
	
    /**
     * Removes a value of property ExifDateTimeOriginal as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifDateTimeOriginal( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFDATETIMEORIGINAL, value);
	}
    /**
     * Removes a value of property ExifDateTimeOriginal given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifDateTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFDATETIMEORIGINAL, value);
	}
	
    /**
     * Removes a value of property ExifDateTimeOriginal given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifDateTimeOriginal(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFDATETIMEORIGINAL, value);
	}
  
    /**
     * Removes all values of property ExifDateTimeOriginal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifDateTimeOriginal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFDATETIMEORIGINAL);
	}
	
    /**
     * Removes all values of property ExifDateTimeOriginal	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifDateTimeOriginal() {
		Base.removeAll(this.model, this.getResource(), EXIFDATETIMEORIGINAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7edab86b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifDeviceSettingDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFDEVICESETTINGDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7edab86b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifDeviceSettingDescription() {
		return Base.has(this.model, this.getResource(), EXIFDEVICESETTINGDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7edab86b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifDeviceSettingDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFDEVICESETTINGDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7edab86b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifDeviceSettingDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFDEVICESETTINGDESCRIPTION);
	}

     /**
     * Get all values of property ExifDeviceSettingDescription as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDeviceSettingDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFDEVICESETTINGDESCRIPTION);
	}
	
    /**
     * Get all values of property ExifDeviceSettingDescription as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDeviceSettingDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDEVICESETTINGDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifDeviceSettingDescription as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDeviceSettingDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFDEVICESETTINGDESCRIPTION);
	}

    /**
     * Get all values of property ExifDeviceSettingDescription as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDeviceSettingDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDEVICESETTINGDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifDeviceSettingDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDeviceSettingDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFDEVICESETTINGDESCRIPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifDeviceSettingDescription as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDeviceSettingDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDEVICESETTINGDESCRIPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDeviceSettingDescription     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDeviceSettingDescription() {
		return Base.getAll(this.model, this.getResource(), EXIFDEVICESETTINGDESCRIPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDeviceSettingDescription as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDeviceSettingDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDEVICESETTINGDESCRIPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifDeviceSettingDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifDeviceSettingDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFDEVICESETTINGDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property ExifDeviceSettingDescription as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifDeviceSettingDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFDEVICESETTINGDESCRIPTION, value);
	}
    /**
     * Adds a value to property ExifDeviceSettingDescription from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifDeviceSettingDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFDEVICESETTINGDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property ExifDeviceSettingDescription from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifDeviceSettingDescription(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFDEVICESETTINGDESCRIPTION, value);
	}
  

    /**
     * Sets a value of property ExifDeviceSettingDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifDeviceSettingDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFDEVICESETTINGDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property ExifDeviceSettingDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifDeviceSettingDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFDEVICESETTINGDESCRIPTION, value);
	}
    /**
     * Sets a value of property ExifDeviceSettingDescription from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifDeviceSettingDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFDEVICESETTINGDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property ExifDeviceSettingDescription from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifDeviceSettingDescription(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFDEVICESETTINGDESCRIPTION, value);
	}
  


    /**
     * Removes a value of property ExifDeviceSettingDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifDeviceSettingDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFDEVICESETTINGDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property ExifDeviceSettingDescription as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifDeviceSettingDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFDEVICESETTINGDESCRIPTION, value);
	}
    /**
     * Removes a value of property ExifDeviceSettingDescription given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifDeviceSettingDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFDEVICESETTINGDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property ExifDeviceSettingDescription given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifDeviceSettingDescription(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFDEVICESETTINGDESCRIPTION, value);
	}
  
    /**
     * Removes all values of property ExifDeviceSettingDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifDeviceSettingDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFDEVICESETTINGDESCRIPTION);
	}
	
    /**
     * Removes all values of property ExifDeviceSettingDescription	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifDeviceSettingDescription() {
		Base.removeAll(this.model, this.getResource(), EXIFDEVICESETTINGDESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@459af028 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifDigitalZoomRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFDIGITALZOOMRATIO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@459af028 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifDigitalZoomRatio() {
		return Base.has(this.model, this.getResource(), EXIFDIGITALZOOMRATIO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@459af028 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifDigitalZoomRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFDIGITALZOOMRATIO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@459af028 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifDigitalZoomRatio( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFDIGITALZOOMRATIO);
	}

     /**
     * Get all values of property ExifDigitalZoomRatio as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDigitalZoomRatio_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFDIGITALZOOMRATIO);
	}
	
    /**
     * Get all values of property ExifDigitalZoomRatio as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDigitalZoomRatio_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDIGITALZOOMRATIO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifDigitalZoomRatio as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifDigitalZoomRatio_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFDIGITALZOOMRATIO);
	}

    /**
     * Get all values of property ExifDigitalZoomRatio as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifDigitalZoomRatio_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDIGITALZOOMRATIO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifDigitalZoomRatio     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDigitalZoomRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFDIGITALZOOMRATIO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifDigitalZoomRatio as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDigitalZoomRatio_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDIGITALZOOMRATIO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDigitalZoomRatio     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDigitalZoomRatio() {
		return Base.getAll(this.model, this.getResource(), EXIFDIGITALZOOMRATIO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifDigitalZoomRatio as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifDigitalZoomRatio_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDIGITALZOOMRATIO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifDigitalZoomRatio as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifDigitalZoomRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFDIGITALZOOMRATIO, value);
	}
	
    /**
     * Adds a value to property ExifDigitalZoomRatio as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifDigitalZoomRatio( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFDIGITALZOOMRATIO, value);
	}
    /**
     * Adds a value to property ExifDigitalZoomRatio from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifDigitalZoomRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFDIGITALZOOMRATIO, value);
	}
	
    /**
     * Adds a value to property ExifDigitalZoomRatio from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifDigitalZoomRatio(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFDIGITALZOOMRATIO, value);
	}
  

    /**
     * Sets a value of property ExifDigitalZoomRatio from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifDigitalZoomRatio( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFDIGITALZOOMRATIO, value);
	}
	
    /**
     * Sets a value of property ExifDigitalZoomRatio from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifDigitalZoomRatio( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFDIGITALZOOMRATIO, value);
	}
    /**
     * Sets a value of property ExifDigitalZoomRatio from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifDigitalZoomRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFDIGITALZOOMRATIO, value);
	}
	
    /**
     * Sets a value of property ExifDigitalZoomRatio from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifDigitalZoomRatio(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFDIGITALZOOMRATIO, value);
	}
  


    /**
     * Removes a value of property ExifDigitalZoomRatio as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifDigitalZoomRatio( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFDIGITALZOOMRATIO, value);
	}
	
    /**
     * Removes a value of property ExifDigitalZoomRatio as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifDigitalZoomRatio( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFDIGITALZOOMRATIO, value);
	}
    /**
     * Removes a value of property ExifDigitalZoomRatio given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifDigitalZoomRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFDIGITALZOOMRATIO, value);
	}
	
    /**
     * Removes a value of property ExifDigitalZoomRatio given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifDigitalZoomRatio(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFDIGITALZOOMRATIO, value);
	}
  
    /**
     * Removes all values of property ExifDigitalZoomRatio     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifDigitalZoomRatio( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFDIGITALZOOMRATIO);
	}
	
    /**
     * Removes all values of property ExifDigitalZoomRatio	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifDigitalZoomRatio() {
		Base.removeAll(this.model, this.getResource(), EXIFDIGITALZOOMRATIO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74f62f97 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifExifAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFEXIFATTRIBUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74f62f97 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifExifAttribute() {
		return Base.has(this.model, this.getResource(), EXIFEXIFATTRIBUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74f62f97 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifExifAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFEXIFATTRIBUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74f62f97 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifExifAttribute( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFEXIFATTRIBUTE);
	}

     /**
     * Get all values of property ExifExifAttribute as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExifAttribute_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFEXIFATTRIBUTE);
	}
	
    /**
     * Get all values of property ExifExifAttribute as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExifAttribute_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXIFATTRIBUTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifExifAttribute as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExifAttribute_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFEXIFATTRIBUTE);
	}

    /**
     * Get all values of property ExifExifAttribute as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExifAttribute_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXIFATTRIBUTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifExifAttribute     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFEXIFATTRIBUTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifExifAttribute as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifAttribute_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXIFATTRIBUTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExifAttribute     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifAttribute() {
		return Base.getAll(this.model, this.getResource(), EXIFEXIFATTRIBUTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExifAttribute as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifAttribute_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXIFATTRIBUTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifExifAttribute as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifExifAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFEXIFATTRIBUTE, value);
	}
	
    /**
     * Adds a value to property ExifExifAttribute as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifExifAttribute( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFEXIFATTRIBUTE, value);
	}
    /**
     * Adds a value to property ExifExifAttribute from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifExifAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFEXIFATTRIBUTE, value);
	}
	
    /**
     * Adds a value to property ExifExifAttribute from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifExifAttribute(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFEXIFATTRIBUTE, value);
	}
  

    /**
     * Sets a value of property ExifExifAttribute from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifExifAttribute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFEXIFATTRIBUTE, value);
	}
	
    /**
     * Sets a value of property ExifExifAttribute from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifExifAttribute( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFEXIFATTRIBUTE, value);
	}
    /**
     * Sets a value of property ExifExifAttribute from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifExifAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFEXIFATTRIBUTE, value);
	}
	
    /**
     * Sets a value of property ExifExifAttribute from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifExifAttribute(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFEXIFATTRIBUTE, value);
	}
  


    /**
     * Removes a value of property ExifExifAttribute as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifExifAttribute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFEXIFATTRIBUTE, value);
	}
	
    /**
     * Removes a value of property ExifExifAttribute as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifExifAttribute( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFEXIFATTRIBUTE, value);
	}
    /**
     * Removes a value of property ExifExifAttribute given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifExifAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFEXIFATTRIBUTE, value);
	}
	
    /**
     * Removes a value of property ExifExifAttribute given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifExifAttribute(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFEXIFATTRIBUTE, value);
	}
  
    /**
     * Removes all values of property ExifExifAttribute     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifExifAttribute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFEXIFATTRIBUTE);
	}
	
    /**
     * Removes all values of property ExifExifAttribute	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifExifAttribute() {
		Base.removeAll(this.model, this.getResource(), EXIFEXIFATTRIBUTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1895d74a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifExifIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFEXIFIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1895d74a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifExifIFDPointer() {
		return Base.has(this.model, this.getResource(), EXIFEXIFIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1895d74a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifExifIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFEXIFIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1895d74a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifExifIFDPointer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFEXIFIFDPOINTER);
	}

     /**
     * Get all values of property ExifExifIFDPointer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExifIFDPointer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFEXIFIFDPOINTER);
	}
	
    /**
     * Get all values of property ExifExifIFDPointer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExifIFDPointer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXIFIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifExifIFDPointer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExifIFDPointer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFEXIFIFDPOINTER);
	}

    /**
     * Get all values of property ExifExifIFDPointer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExifIFDPointer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXIFIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifExifIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFEXIFIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifExifIFDPointer as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifIFDPointer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXIFIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExifIFDPointer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifIFDPointer() {
		return Base.getAll(this.model, this.getResource(), EXIFEXIFIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExifIFDPointer as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifIFDPointer_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXIFIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifExifIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifExifIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFEXIFIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property ExifExifIFDPointer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifExifIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFEXIFIFDPOINTER, value);
	}
    /**
     * Adds a value to property ExifExifIFDPointer from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifExifIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFEXIFIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property ExifExifIFDPointer from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifExifIFDPointer(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFEXIFIFDPOINTER, value);
	}
  

    /**
     * Sets a value of property ExifExifIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifExifIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFEXIFIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property ExifExifIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifExifIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFEXIFIFDPOINTER, value);
	}
    /**
     * Sets a value of property ExifExifIFDPointer from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifExifIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFEXIFIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property ExifExifIFDPointer from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifExifIFDPointer(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFEXIFIFDPOINTER, value);
	}
  


    /**
     * Removes a value of property ExifExifIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifExifIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFEXIFIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property ExifExifIFDPointer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifExifIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFEXIFIFDPOINTER, value);
	}
    /**
     * Removes a value of property ExifExifIFDPointer given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifExifIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFEXIFIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property ExifExifIFDPointer given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifExifIFDPointer(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFEXIFIFDPOINTER, value);
	}
  
    /**
     * Removes all values of property ExifExifIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifExifIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFEXIFIFDPOINTER);
	}
	
    /**
     * Removes all values of property ExifExifIFDPointer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifExifIFDPointer() {
		Base.removeAll(this.model, this.getResource(), EXIFEXIFIFDPOINTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1510bd0b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifExifVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFEXIFVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1510bd0b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifExifVersion() {
		return Base.has(this.model, this.getResource(), EXIFEXIFVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1510bd0b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifExifVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFEXIFVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1510bd0b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifExifVersion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFEXIFVERSION);
	}

     /**
     * Get all values of property ExifExifVersion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExifVersion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFEXIFVERSION);
	}
	
    /**
     * Get all values of property ExifExifVersion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExifVersion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXIFVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifExifVersion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExifVersion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFEXIFVERSION);
	}

    /**
     * Get all values of property ExifExifVersion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExifVersion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXIFVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifExifVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFEXIFVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifExifVersion as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifVersion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXIFVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExifVersion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifVersion() {
		return Base.getAll(this.model, this.getResource(), EXIFEXIFVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExifVersion as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifVersion_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXIFVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifExifVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifExifVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFEXIFVERSION, value);
	}
	
    /**
     * Adds a value to property ExifExifVersion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifExifVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFEXIFVERSION, value);
	}
    /**
     * Adds a value to property ExifExifVersion from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifExifVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFEXIFVERSION, value);
	}
	
    /**
     * Adds a value to property ExifExifVersion from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifExifVersion(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFEXIFVERSION, value);
	}
  

    /**
     * Sets a value of property ExifExifVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifExifVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFEXIFVERSION, value);
	}
	
    /**
     * Sets a value of property ExifExifVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifExifVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFEXIFVERSION, value);
	}
    /**
     * Sets a value of property ExifExifVersion from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifExifVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFEXIFVERSION, value);
	}
	
    /**
     * Sets a value of property ExifExifVersion from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifExifVersion(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFEXIFVERSION, value);
	}
  


    /**
     * Removes a value of property ExifExifVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifExifVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFEXIFVERSION, value);
	}
	
    /**
     * Removes a value of property ExifExifVersion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifExifVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFEXIFVERSION, value);
	}
    /**
     * Removes a value of property ExifExifVersion given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifExifVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFEXIFVERSION, value);
	}
	
    /**
     * Removes a value of property ExifExifVersion given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifExifVersion(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFEXIFVERSION, value);
	}
  
    /**
     * Removes all values of property ExifExifVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifExifVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFEXIFVERSION);
	}
	
    /**
     * Removes all values of property ExifExifVersion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifExifVersion() {
		Base.removeAll(this.model, this.getResource(), EXIFEXIFVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@442020ed has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifExifdata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFEXIFDATA);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@442020ed has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifExifdata() {
		return Base.has(this.model, this.getResource(), EXIFEXIFDATA);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@442020ed has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifExifdata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFEXIFDATA);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@442020ed has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifExifdata( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFEXIFDATA);
	}

     /**
     * Get all values of property ExifExifdata as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExifdata_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFEXIFDATA);
	}
	
    /**
     * Get all values of property ExifExifdata as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExifdata_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXIFDATA, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifExifdata as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExifdata_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFEXIFDATA);
	}

    /**
     * Get all values of property ExifExifdata as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExifdata_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXIFDATA, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifExifdata     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifdata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFEXIFDATA, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifExifdata as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifdata_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXIFDATA, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExifdata     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifdata() {
		return Base.getAll(this.model, this.getResource(), EXIFEXIFDATA, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExifdata as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExifdata_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXIFDATA, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifExifdata as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifExifdata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFEXIFDATA, value);
	}
	
    /**
     * Adds a value to property ExifExifdata as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifExifdata( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFEXIFDATA, value);
	}
    /**
     * Adds a value to property ExifExifdata from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifExifdata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFEXIFDATA, value);
	}
	
    /**
     * Adds a value to property ExifExifdata from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifExifdata(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFEXIFDATA, value);
	}
  

    /**
     * Sets a value of property ExifExifdata from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifExifdata( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFEXIFDATA, value);
	}
	
    /**
     * Sets a value of property ExifExifdata from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifExifdata( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFEXIFDATA, value);
	}
    /**
     * Sets a value of property ExifExifdata from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifExifdata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFEXIFDATA, value);
	}
	
    /**
     * Sets a value of property ExifExifdata from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifExifdata(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFEXIFDATA, value);
	}
  


    /**
     * Removes a value of property ExifExifdata as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifExifdata( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFEXIFDATA, value);
	}
	
    /**
     * Removes a value of property ExifExifdata as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifExifdata( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFEXIFDATA, value);
	}
    /**
     * Removes a value of property ExifExifdata given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifExifdata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFEXIFDATA, value);
	}
	
    /**
     * Removes a value of property ExifExifdata given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifExifdata(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFEXIFDATA, value);
	}
  
    /**
     * Removes all values of property ExifExifdata     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifExifdata( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFEXIFDATA);
	}
	
    /**
     * Removes all values of property ExifExifdata	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifExifdata() {
		Base.removeAll(this.model, this.getResource(), EXIFEXIFDATA);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68943402 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifExposureBiasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFEXPOSUREBIASVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68943402 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifExposureBiasValue() {
		return Base.has(this.model, this.getResource(), EXIFEXPOSUREBIASVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68943402 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifExposureBiasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFEXPOSUREBIASVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68943402 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifExposureBiasValue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFEXPOSUREBIASVALUE);
	}

     /**
     * Get all values of property ExifExposureBiasValue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExposureBiasValue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFEXPOSUREBIASVALUE);
	}
	
    /**
     * Get all values of property ExifExposureBiasValue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExposureBiasValue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXPOSUREBIASVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifExposureBiasValue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExposureBiasValue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFEXPOSUREBIASVALUE);
	}

    /**
     * Get all values of property ExifExposureBiasValue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExposureBiasValue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXPOSUREBIASVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifExposureBiasValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureBiasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFEXPOSUREBIASVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifExposureBiasValue as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureBiasValue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXPOSUREBIASVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExposureBiasValue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureBiasValue() {
		return Base.getAll(this.model, this.getResource(), EXIFEXPOSUREBIASVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExposureBiasValue as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureBiasValue_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXPOSUREBIASVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifExposureBiasValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifExposureBiasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFEXPOSUREBIASVALUE, value);
	}
	
    /**
     * Adds a value to property ExifExposureBiasValue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifExposureBiasValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFEXPOSUREBIASVALUE, value);
	}
    /**
     * Adds a value to property ExifExposureBiasValue from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifExposureBiasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFEXPOSUREBIASVALUE, value);
	}
	
    /**
     * Adds a value to property ExifExposureBiasValue from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifExposureBiasValue(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFEXPOSUREBIASVALUE, value);
	}
  

    /**
     * Sets a value of property ExifExposureBiasValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifExposureBiasValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFEXPOSUREBIASVALUE, value);
	}
	
    /**
     * Sets a value of property ExifExposureBiasValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifExposureBiasValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFEXPOSUREBIASVALUE, value);
	}
    /**
     * Sets a value of property ExifExposureBiasValue from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifExposureBiasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFEXPOSUREBIASVALUE, value);
	}
	
    /**
     * Sets a value of property ExifExposureBiasValue from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifExposureBiasValue(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFEXPOSUREBIASVALUE, value);
	}
  


    /**
     * Removes a value of property ExifExposureBiasValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifExposureBiasValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFEXPOSUREBIASVALUE, value);
	}
	
    /**
     * Removes a value of property ExifExposureBiasValue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifExposureBiasValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFEXPOSUREBIASVALUE, value);
	}
    /**
     * Removes a value of property ExifExposureBiasValue given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifExposureBiasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFEXPOSUREBIASVALUE, value);
	}
	
    /**
     * Removes a value of property ExifExposureBiasValue given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifExposureBiasValue(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFEXPOSUREBIASVALUE, value);
	}
  
    /**
     * Removes all values of property ExifExposureBiasValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifExposureBiasValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFEXPOSUREBIASVALUE);
	}
	
    /**
     * Removes all values of property ExifExposureBiasValue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifExposureBiasValue() {
		Base.removeAll(this.model, this.getResource(), EXIFEXPOSUREBIASVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c7b1ff8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifExposureIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFEXPOSUREINDEX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c7b1ff8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifExposureIndex() {
		return Base.has(this.model, this.getResource(), EXIFEXPOSUREINDEX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c7b1ff8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifExposureIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFEXPOSUREINDEX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c7b1ff8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifExposureIndex( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFEXPOSUREINDEX);
	}

     /**
     * Get all values of property ExifExposureIndex as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExposureIndex_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFEXPOSUREINDEX);
	}
	
    /**
     * Get all values of property ExifExposureIndex as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExposureIndex_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXPOSUREINDEX, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifExposureIndex as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExposureIndex_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFEXPOSUREINDEX);
	}

    /**
     * Get all values of property ExifExposureIndex as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExposureIndex_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXPOSUREINDEX, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifExposureIndex     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFEXPOSUREINDEX, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifExposureIndex as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureIndex_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXPOSUREINDEX, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExposureIndex     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureIndex() {
		return Base.getAll(this.model, this.getResource(), EXIFEXPOSUREINDEX, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExposureIndex as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureIndex_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXPOSUREINDEX, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifExposureIndex as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifExposureIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFEXPOSUREINDEX, value);
	}
	
    /**
     * Adds a value to property ExifExposureIndex as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifExposureIndex( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFEXPOSUREINDEX, value);
	}
    /**
     * Adds a value to property ExifExposureIndex from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifExposureIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFEXPOSUREINDEX, value);
	}
	
    /**
     * Adds a value to property ExifExposureIndex from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifExposureIndex(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFEXPOSUREINDEX, value);
	}
  

    /**
     * Sets a value of property ExifExposureIndex from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifExposureIndex( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFEXPOSUREINDEX, value);
	}
	
    /**
     * Sets a value of property ExifExposureIndex from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifExposureIndex( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFEXPOSUREINDEX, value);
	}
    /**
     * Sets a value of property ExifExposureIndex from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifExposureIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFEXPOSUREINDEX, value);
	}
	
    /**
     * Sets a value of property ExifExposureIndex from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifExposureIndex(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFEXPOSUREINDEX, value);
	}
  


    /**
     * Removes a value of property ExifExposureIndex as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifExposureIndex( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFEXPOSUREINDEX, value);
	}
	
    /**
     * Removes a value of property ExifExposureIndex as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifExposureIndex( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFEXPOSUREINDEX, value);
	}
    /**
     * Removes a value of property ExifExposureIndex given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifExposureIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFEXPOSUREINDEX, value);
	}
	
    /**
     * Removes a value of property ExifExposureIndex given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifExposureIndex(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFEXPOSUREINDEX, value);
	}
  
    /**
     * Removes all values of property ExifExposureIndex     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifExposureIndex( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFEXPOSUREINDEX);
	}
	
    /**
     * Removes all values of property ExifExposureIndex	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifExposureIndex() {
		Base.removeAll(this.model, this.getResource(), EXIFEXPOSUREINDEX);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@201a970 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifExposureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFEXPOSUREMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@201a970 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifExposureMode() {
		return Base.has(this.model, this.getResource(), EXIFEXPOSUREMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@201a970 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifExposureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFEXPOSUREMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@201a970 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifExposureMode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFEXPOSUREMODE);
	}

     /**
     * Get all values of property ExifExposureMode as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExposureMode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFEXPOSUREMODE);
	}
	
    /**
     * Get all values of property ExifExposureMode as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExposureMode_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXPOSUREMODE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifExposureMode as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExposureMode_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFEXPOSUREMODE);
	}

    /**
     * Get all values of property ExifExposureMode as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExposureMode_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXPOSUREMODE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifExposureMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFEXPOSUREMODE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifExposureMode as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureMode_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXPOSUREMODE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExposureMode     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureMode() {
		return Base.getAll(this.model, this.getResource(), EXIFEXPOSUREMODE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExposureMode as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureMode_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXPOSUREMODE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifExposureMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifExposureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFEXPOSUREMODE, value);
	}
	
    /**
     * Adds a value to property ExifExposureMode as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifExposureMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFEXPOSUREMODE, value);
	}
    /**
     * Adds a value to property ExifExposureMode from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifExposureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFEXPOSUREMODE, value);
	}
	
    /**
     * Adds a value to property ExifExposureMode from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifExposureMode(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFEXPOSUREMODE, value);
	}
  

    /**
     * Sets a value of property ExifExposureMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifExposureMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFEXPOSUREMODE, value);
	}
	
    /**
     * Sets a value of property ExifExposureMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifExposureMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFEXPOSUREMODE, value);
	}
    /**
     * Sets a value of property ExifExposureMode from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifExposureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFEXPOSUREMODE, value);
	}
	
    /**
     * Sets a value of property ExifExposureMode from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifExposureMode(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFEXPOSUREMODE, value);
	}
  


    /**
     * Removes a value of property ExifExposureMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifExposureMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFEXPOSUREMODE, value);
	}
	
    /**
     * Removes a value of property ExifExposureMode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifExposureMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFEXPOSUREMODE, value);
	}
    /**
     * Removes a value of property ExifExposureMode given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifExposureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFEXPOSUREMODE, value);
	}
	
    /**
     * Removes a value of property ExifExposureMode given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifExposureMode(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFEXPOSUREMODE, value);
	}
  
    /**
     * Removes all values of property ExifExposureMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifExposureMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFEXPOSUREMODE);
	}
	
    /**
     * Removes all values of property ExifExposureMode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifExposureMode() {
		Base.removeAll(this.model, this.getResource(), EXIFEXPOSUREMODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10b16391 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifExposureProgram(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFEXPOSUREPROGRAM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10b16391 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifExposureProgram() {
		return Base.has(this.model, this.getResource(), EXIFEXPOSUREPROGRAM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10b16391 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifExposureProgram(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFEXPOSUREPROGRAM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10b16391 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifExposureProgram( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFEXPOSUREPROGRAM);
	}

     /**
     * Get all values of property ExifExposureProgram as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExposureProgram_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFEXPOSUREPROGRAM);
	}
	
    /**
     * Get all values of property ExifExposureProgram as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExposureProgram_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXPOSUREPROGRAM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifExposureProgram as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExposureProgram_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFEXPOSUREPROGRAM);
	}

    /**
     * Get all values of property ExifExposureProgram as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExposureProgram_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXPOSUREPROGRAM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifExposureProgram     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureProgram(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFEXPOSUREPROGRAM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifExposureProgram as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureProgram_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXPOSUREPROGRAM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExposureProgram     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureProgram() {
		return Base.getAll(this.model, this.getResource(), EXIFEXPOSUREPROGRAM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExposureProgram as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureProgram_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXPOSUREPROGRAM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifExposureProgram as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifExposureProgram(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFEXPOSUREPROGRAM, value);
	}
	
    /**
     * Adds a value to property ExifExposureProgram as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifExposureProgram( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFEXPOSUREPROGRAM, value);
	}
    /**
     * Adds a value to property ExifExposureProgram from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifExposureProgram(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFEXPOSUREPROGRAM, value);
	}
	
    /**
     * Adds a value to property ExifExposureProgram from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifExposureProgram(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFEXPOSUREPROGRAM, value);
	}
  

    /**
     * Sets a value of property ExifExposureProgram from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifExposureProgram( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFEXPOSUREPROGRAM, value);
	}
	
    /**
     * Sets a value of property ExifExposureProgram from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifExposureProgram( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFEXPOSUREPROGRAM, value);
	}
    /**
     * Sets a value of property ExifExposureProgram from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifExposureProgram(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFEXPOSUREPROGRAM, value);
	}
	
    /**
     * Sets a value of property ExifExposureProgram from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifExposureProgram(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFEXPOSUREPROGRAM, value);
	}
  


    /**
     * Removes a value of property ExifExposureProgram as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifExposureProgram( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFEXPOSUREPROGRAM, value);
	}
	
    /**
     * Removes a value of property ExifExposureProgram as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifExposureProgram( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFEXPOSUREPROGRAM, value);
	}
    /**
     * Removes a value of property ExifExposureProgram given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifExposureProgram(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFEXPOSUREPROGRAM, value);
	}
	
    /**
     * Removes a value of property ExifExposureProgram given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifExposureProgram(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFEXPOSUREPROGRAM, value);
	}
  
    /**
     * Removes all values of property ExifExposureProgram     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifExposureProgram( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFEXPOSUREPROGRAM);
	}
	
    /**
     * Removes all values of property ExifExposureProgram	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifExposureProgram() {
		Base.removeAll(this.model, this.getResource(), EXIFEXPOSUREPROGRAM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7906aa39 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifExposureTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFEXPOSURETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7906aa39 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifExposureTime() {
		return Base.has(this.model, this.getResource(), EXIFEXPOSURETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7906aa39 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifExposureTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFEXPOSURETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7906aa39 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifExposureTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFEXPOSURETIME);
	}

     /**
     * Get all values of property ExifExposureTime as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExposureTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFEXPOSURETIME);
	}
	
    /**
     * Get all values of property ExifExposureTime as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExposureTime_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXPOSURETIME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifExposureTime as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifExposureTime_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFEXPOSURETIME);
	}

    /**
     * Get all values of property ExifExposureTime as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifExposureTime_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXPOSURETIME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifExposureTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFEXPOSURETIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifExposureTime as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureTime_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFEXPOSURETIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExposureTime     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureTime() {
		return Base.getAll(this.model, this.getResource(), EXIFEXPOSURETIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifExposureTime as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifExposureTime_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFEXPOSURETIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifExposureTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifExposureTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFEXPOSURETIME, value);
	}
	
    /**
     * Adds a value to property ExifExposureTime as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifExposureTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFEXPOSURETIME, value);
	}
    /**
     * Adds a value to property ExifExposureTime from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifExposureTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFEXPOSURETIME, value);
	}
	
    /**
     * Adds a value to property ExifExposureTime from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifExposureTime(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFEXPOSURETIME, value);
	}
  

    /**
     * Sets a value of property ExifExposureTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifExposureTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFEXPOSURETIME, value);
	}
	
    /**
     * Sets a value of property ExifExposureTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifExposureTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFEXPOSURETIME, value);
	}
    /**
     * Sets a value of property ExifExposureTime from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifExposureTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFEXPOSURETIME, value);
	}
	
    /**
     * Sets a value of property ExifExposureTime from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifExposureTime(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFEXPOSURETIME, value);
	}
  


    /**
     * Removes a value of property ExifExposureTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifExposureTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFEXPOSURETIME, value);
	}
	
    /**
     * Removes a value of property ExifExposureTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifExposureTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFEXPOSURETIME, value);
	}
    /**
     * Removes a value of property ExifExposureTime given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifExposureTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFEXPOSURETIME, value);
	}
	
    /**
     * Removes a value of property ExifExposureTime given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifExposureTime(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFEXPOSURETIME, value);
	}
  
    /**
     * Removes all values of property ExifExposureTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifExposureTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFEXPOSURETIME);
	}
	
    /**
     * Removes all values of property ExifExposureTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifExposureTime() {
		Base.removeAll(this.model, this.getResource(), EXIFEXPOSURETIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5481db1b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifFNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFFNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5481db1b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifFNumber() {
		return Base.has(this.model, this.getResource(), EXIFFNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5481db1b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifFNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFFNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5481db1b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifFNumber( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFFNUMBER);
	}

     /**
     * Get all values of property ExifFNumber as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFNumber_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFFNUMBER);
	}
	
    /**
     * Get all values of property ExifFNumber as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFNumber_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifFNumber as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFNumber_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFFNUMBER);
	}

    /**
     * Get all values of property ExifFNumber as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFNumber_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifFNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFFNUMBER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifFNumber as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFNumber_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFNUMBER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFNumber     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFNumber() {
		return Base.getAll(this.model, this.getResource(), EXIFFNUMBER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFNumber as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFNumber_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFNUMBER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifFNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifFNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFFNUMBER, value);
	}
	
    /**
     * Adds a value to property ExifFNumber as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifFNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFFNUMBER, value);
	}
    /**
     * Adds a value to property ExifFNumber from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifFNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFFNUMBER, value);
	}
	
    /**
     * Adds a value to property ExifFNumber from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifFNumber(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFFNUMBER, value);
	}
  

    /**
     * Sets a value of property ExifFNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifFNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFFNUMBER, value);
	}
	
    /**
     * Sets a value of property ExifFNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifFNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFFNUMBER, value);
	}
    /**
     * Sets a value of property ExifFNumber from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifFNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFFNUMBER, value);
	}
	
    /**
     * Sets a value of property ExifFNumber from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifFNumber(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFFNUMBER, value);
	}
  


    /**
     * Removes a value of property ExifFNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifFNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFFNUMBER, value);
	}
	
    /**
     * Removes a value of property ExifFNumber as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifFNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFFNUMBER, value);
	}
    /**
     * Removes a value of property ExifFNumber given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifFNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFFNUMBER, value);
	}
	
    /**
     * Removes a value of property ExifFNumber given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifFNumber(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFFNUMBER, value);
	}
  
    /**
     * Removes all values of property ExifFNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifFNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFFNUMBER);
	}
	
    /**
     * Removes all values of property ExifFNumber	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifFNumber() {
		Base.removeAll(this.model, this.getResource(), EXIFFNUMBER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@476acffa has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifFileSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFFILESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@476acffa has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifFileSource() {
		return Base.has(this.model, this.getResource(), EXIFFILESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@476acffa has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifFileSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFFILESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@476acffa has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifFileSource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFFILESOURCE);
	}

     /**
     * Get all values of property ExifFileSource as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFileSource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFFILESOURCE);
	}
	
    /**
     * Get all values of property ExifFileSource as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFileSource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFILESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifFileSource as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFileSource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFFILESOURCE);
	}

    /**
     * Get all values of property ExifFileSource as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFileSource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFILESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifFileSource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFileSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFFILESOURCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifFileSource as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFileSource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFILESOURCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFileSource     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFileSource() {
		return Base.getAll(this.model, this.getResource(), EXIFFILESOURCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFileSource as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFileSource_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFILESOURCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifFileSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifFileSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFFILESOURCE, value);
	}
	
    /**
     * Adds a value to property ExifFileSource as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifFileSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFFILESOURCE, value);
	}
    /**
     * Adds a value to property ExifFileSource from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifFileSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFFILESOURCE, value);
	}
	
    /**
     * Adds a value to property ExifFileSource from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifFileSource(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFFILESOURCE, value);
	}
  

    /**
     * Sets a value of property ExifFileSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifFileSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFFILESOURCE, value);
	}
	
    /**
     * Sets a value of property ExifFileSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifFileSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFFILESOURCE, value);
	}
    /**
     * Sets a value of property ExifFileSource from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifFileSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFFILESOURCE, value);
	}
	
    /**
     * Sets a value of property ExifFileSource from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifFileSource(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFFILESOURCE, value);
	}
  


    /**
     * Removes a value of property ExifFileSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifFileSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFFILESOURCE, value);
	}
	
    /**
     * Removes a value of property ExifFileSource as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifFileSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFFILESOURCE, value);
	}
    /**
     * Removes a value of property ExifFileSource given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifFileSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFFILESOURCE, value);
	}
	
    /**
     * Removes a value of property ExifFileSource given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifFileSource(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFFILESOURCE, value);
	}
  
    /**
     * Removes all values of property ExifFileSource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifFileSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFFILESOURCE);
	}
	
    /**
     * Removes all values of property ExifFileSource	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifFileSource() {
		Base.removeAll(this.model, this.getResource(), EXIFFILESOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11908def has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifFlash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFFLASH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11908def has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifFlash() {
		return Base.has(this.model, this.getResource(), EXIFFLASH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11908def has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifFlash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFFLASH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11908def has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifFlash( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFFLASH);
	}

     /**
     * Get all values of property ExifFlash as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFlash_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFFLASH);
	}
	
    /**
     * Get all values of property ExifFlash as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFlash_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFLASH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifFlash as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFlash_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFFLASH);
	}

    /**
     * Get all values of property ExifFlash as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFlash_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFLASH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifFlash     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFlash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFFLASH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifFlash as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFlash_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFLASH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFlash     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFlash() {
		return Base.getAll(this.model, this.getResource(), EXIFFLASH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFlash as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFlash_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFLASH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifFlash as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifFlash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFFLASH, value);
	}
	
    /**
     * Adds a value to property ExifFlash as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifFlash( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFFLASH, value);
	}
    /**
     * Adds a value to property ExifFlash from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifFlash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFFLASH, value);
	}
	
    /**
     * Adds a value to property ExifFlash from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifFlash(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFFLASH, value);
	}
  

    /**
     * Sets a value of property ExifFlash from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifFlash( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFFLASH, value);
	}
	
    /**
     * Sets a value of property ExifFlash from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifFlash( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFFLASH, value);
	}
    /**
     * Sets a value of property ExifFlash from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifFlash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFFLASH, value);
	}
	
    /**
     * Sets a value of property ExifFlash from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifFlash(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFFLASH, value);
	}
  


    /**
     * Removes a value of property ExifFlash as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifFlash( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFFLASH, value);
	}
	
    /**
     * Removes a value of property ExifFlash as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifFlash( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFFLASH, value);
	}
    /**
     * Removes a value of property ExifFlash given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifFlash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFFLASH, value);
	}
	
    /**
     * Removes a value of property ExifFlash given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifFlash(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFFLASH, value);
	}
  
    /**
     * Removes all values of property ExifFlash     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifFlash( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFFLASH);
	}
	
    /**
     * Removes all values of property ExifFlash	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifFlash() {
		Base.removeAll(this.model, this.getResource(), EXIFFLASH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f875b76 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifFlashEnergy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFFLASHENERGY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f875b76 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifFlashEnergy() {
		return Base.has(this.model, this.getResource(), EXIFFLASHENERGY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f875b76 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifFlashEnergy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFFLASHENERGY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f875b76 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifFlashEnergy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFFLASHENERGY);
	}

     /**
     * Get all values of property ExifFlashEnergy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFlashEnergy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFFLASHENERGY);
	}
	
    /**
     * Get all values of property ExifFlashEnergy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFlashEnergy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFLASHENERGY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifFlashEnergy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFlashEnergy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFFLASHENERGY);
	}

    /**
     * Get all values of property ExifFlashEnergy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFlashEnergy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFLASHENERGY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifFlashEnergy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFlashEnergy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFFLASHENERGY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifFlashEnergy as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFlashEnergy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFLASHENERGY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFlashEnergy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFlashEnergy() {
		return Base.getAll(this.model, this.getResource(), EXIFFLASHENERGY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFlashEnergy as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFlashEnergy_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFLASHENERGY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifFlashEnergy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifFlashEnergy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFFLASHENERGY, value);
	}
	
    /**
     * Adds a value to property ExifFlashEnergy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifFlashEnergy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFFLASHENERGY, value);
	}
    /**
     * Adds a value to property ExifFlashEnergy from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifFlashEnergy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFFLASHENERGY, value);
	}
	
    /**
     * Adds a value to property ExifFlashEnergy from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifFlashEnergy(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFFLASHENERGY, value);
	}
  

    /**
     * Sets a value of property ExifFlashEnergy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifFlashEnergy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFFLASHENERGY, value);
	}
	
    /**
     * Sets a value of property ExifFlashEnergy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifFlashEnergy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFFLASHENERGY, value);
	}
    /**
     * Sets a value of property ExifFlashEnergy from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifFlashEnergy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFFLASHENERGY, value);
	}
	
    /**
     * Sets a value of property ExifFlashEnergy from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifFlashEnergy(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFFLASHENERGY, value);
	}
  


    /**
     * Removes a value of property ExifFlashEnergy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifFlashEnergy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFFLASHENERGY, value);
	}
	
    /**
     * Removes a value of property ExifFlashEnergy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifFlashEnergy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFFLASHENERGY, value);
	}
    /**
     * Removes a value of property ExifFlashEnergy given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifFlashEnergy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFFLASHENERGY, value);
	}
	
    /**
     * Removes a value of property ExifFlashEnergy given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifFlashEnergy(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFFLASHENERGY, value);
	}
  
    /**
     * Removes all values of property ExifFlashEnergy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifFlashEnergy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFFLASHENERGY);
	}
	
    /**
     * Removes all values of property ExifFlashEnergy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifFlashEnergy() {
		Base.removeAll(this.model, this.getResource(), EXIFFLASHENERGY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62b243a2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifFlashpixVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFFLASHPIXVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62b243a2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifFlashpixVersion() {
		return Base.has(this.model, this.getResource(), EXIFFLASHPIXVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62b243a2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifFlashpixVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFFLASHPIXVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62b243a2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifFlashpixVersion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFFLASHPIXVERSION);
	}

     /**
     * Get all values of property ExifFlashpixVersion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFlashpixVersion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFFLASHPIXVERSION);
	}
	
    /**
     * Get all values of property ExifFlashpixVersion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFlashpixVersion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFLASHPIXVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifFlashpixVersion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFlashpixVersion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFFLASHPIXVERSION);
	}

    /**
     * Get all values of property ExifFlashpixVersion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFlashpixVersion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFLASHPIXVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifFlashpixVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFlashpixVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFFLASHPIXVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifFlashpixVersion as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFlashpixVersion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFLASHPIXVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFlashpixVersion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFlashpixVersion() {
		return Base.getAll(this.model, this.getResource(), EXIFFLASHPIXVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFlashpixVersion as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFlashpixVersion_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFLASHPIXVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifFlashpixVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifFlashpixVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFFLASHPIXVERSION, value);
	}
	
    /**
     * Adds a value to property ExifFlashpixVersion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifFlashpixVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFFLASHPIXVERSION, value);
	}
    /**
     * Adds a value to property ExifFlashpixVersion from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifFlashpixVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFFLASHPIXVERSION, value);
	}
	
    /**
     * Adds a value to property ExifFlashpixVersion from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifFlashpixVersion(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFFLASHPIXVERSION, value);
	}
  

    /**
     * Sets a value of property ExifFlashpixVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifFlashpixVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFFLASHPIXVERSION, value);
	}
	
    /**
     * Sets a value of property ExifFlashpixVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifFlashpixVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFFLASHPIXVERSION, value);
	}
    /**
     * Sets a value of property ExifFlashpixVersion from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifFlashpixVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFFLASHPIXVERSION, value);
	}
	
    /**
     * Sets a value of property ExifFlashpixVersion from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifFlashpixVersion(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFFLASHPIXVERSION, value);
	}
  


    /**
     * Removes a value of property ExifFlashpixVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifFlashpixVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFFLASHPIXVERSION, value);
	}
	
    /**
     * Removes a value of property ExifFlashpixVersion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifFlashpixVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFFLASHPIXVERSION, value);
	}
    /**
     * Removes a value of property ExifFlashpixVersion given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifFlashpixVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFFLASHPIXVERSION, value);
	}
	
    /**
     * Removes a value of property ExifFlashpixVersion given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifFlashpixVersion(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFFLASHPIXVERSION, value);
	}
  
    /**
     * Removes all values of property ExifFlashpixVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifFlashpixVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFFLASHPIXVERSION);
	}
	
    /**
     * Removes all values of property ExifFlashpixVersion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifFlashpixVersion() {
		Base.removeAll(this.model, this.getResource(), EXIFFLASHPIXVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57697e2a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifFocalLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFFOCALLENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57697e2a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifFocalLength() {
		return Base.has(this.model, this.getResource(), EXIFFOCALLENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57697e2a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifFocalLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFFOCALLENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57697e2a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifFocalLength( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFFOCALLENGTH);
	}

     /**
     * Get all values of property ExifFocalLength as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFocalLength_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFFOCALLENGTH);
	}
	
    /**
     * Get all values of property ExifFocalLength as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFocalLength_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFOCALLENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifFocalLength as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFocalLength_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFFOCALLENGTH);
	}

    /**
     * Get all values of property ExifFocalLength as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFocalLength_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFOCALLENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifFocalLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFFOCALLENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifFocalLength as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalLength_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFOCALLENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFocalLength     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalLength() {
		return Base.getAll(this.model, this.getResource(), EXIFFOCALLENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFocalLength as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalLength_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFOCALLENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifFocalLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifFocalLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFFOCALLENGTH, value);
	}
	
    /**
     * Adds a value to property ExifFocalLength as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifFocalLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFFOCALLENGTH, value);
	}
    /**
     * Adds a value to property ExifFocalLength from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifFocalLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFFOCALLENGTH, value);
	}
	
    /**
     * Adds a value to property ExifFocalLength from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifFocalLength(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFFOCALLENGTH, value);
	}
  

    /**
     * Sets a value of property ExifFocalLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifFocalLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFFOCALLENGTH, value);
	}
	
    /**
     * Sets a value of property ExifFocalLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifFocalLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFFOCALLENGTH, value);
	}
    /**
     * Sets a value of property ExifFocalLength from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifFocalLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFFOCALLENGTH, value);
	}
	
    /**
     * Sets a value of property ExifFocalLength from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifFocalLength(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFFOCALLENGTH, value);
	}
  


    /**
     * Removes a value of property ExifFocalLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifFocalLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFFOCALLENGTH, value);
	}
	
    /**
     * Removes a value of property ExifFocalLength as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifFocalLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFFOCALLENGTH, value);
	}
    /**
     * Removes a value of property ExifFocalLength given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifFocalLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFFOCALLENGTH, value);
	}
	
    /**
     * Removes a value of property ExifFocalLength given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifFocalLength(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFFOCALLENGTH, value);
	}
  
    /**
     * Removes all values of property ExifFocalLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifFocalLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFFOCALLENGTH);
	}
	
    /**
     * Removes all values of property ExifFocalLength	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifFocalLength() {
		Base.removeAll(this.model, this.getResource(), EXIFFOCALLENGTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74ea3b86 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifFocalLengthIn35mmFilm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFFOCALLENGTHIN35MMFILM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74ea3b86 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifFocalLengthIn35mmFilm() {
		return Base.has(this.model, this.getResource(), EXIFFOCALLENGTHIN35MMFILM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74ea3b86 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifFocalLengthIn35mmFilm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFFOCALLENGTHIN35MMFILM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74ea3b86 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifFocalLengthIn35mmFilm( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFFOCALLENGTHIN35MMFILM);
	}

     /**
     * Get all values of property ExifFocalLengthIn35mmFilm as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFocalLengthIn35mmFilm_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFFOCALLENGTHIN35MMFILM);
	}
	
    /**
     * Get all values of property ExifFocalLengthIn35mmFilm as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFocalLengthIn35mmFilm_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFOCALLENGTHIN35MMFILM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifFocalLengthIn35mmFilm as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFocalLengthIn35mmFilm_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFFOCALLENGTHIN35MMFILM);
	}

    /**
     * Get all values of property ExifFocalLengthIn35mmFilm as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFocalLengthIn35mmFilm_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFOCALLENGTHIN35MMFILM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifFocalLengthIn35mmFilm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalLengthIn35mmFilm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFFOCALLENGTHIN35MMFILM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifFocalLengthIn35mmFilm as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalLengthIn35mmFilm_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFOCALLENGTHIN35MMFILM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFocalLengthIn35mmFilm     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalLengthIn35mmFilm() {
		return Base.getAll(this.model, this.getResource(), EXIFFOCALLENGTHIN35MMFILM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFocalLengthIn35mmFilm as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalLengthIn35mmFilm_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFOCALLENGTHIN35MMFILM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifFocalLengthIn35mmFilm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifFocalLengthIn35mmFilm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFFOCALLENGTHIN35MMFILM, value);
	}
	
    /**
     * Adds a value to property ExifFocalLengthIn35mmFilm as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifFocalLengthIn35mmFilm( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFFOCALLENGTHIN35MMFILM, value);
	}
    /**
     * Adds a value to property ExifFocalLengthIn35mmFilm from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifFocalLengthIn35mmFilm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFFOCALLENGTHIN35MMFILM, value);
	}
	
    /**
     * Adds a value to property ExifFocalLengthIn35mmFilm from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifFocalLengthIn35mmFilm(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFFOCALLENGTHIN35MMFILM, value);
	}
  

    /**
     * Sets a value of property ExifFocalLengthIn35mmFilm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifFocalLengthIn35mmFilm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFFOCALLENGTHIN35MMFILM, value);
	}
	
    /**
     * Sets a value of property ExifFocalLengthIn35mmFilm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifFocalLengthIn35mmFilm( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFFOCALLENGTHIN35MMFILM, value);
	}
    /**
     * Sets a value of property ExifFocalLengthIn35mmFilm from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifFocalLengthIn35mmFilm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFFOCALLENGTHIN35MMFILM, value);
	}
	
    /**
     * Sets a value of property ExifFocalLengthIn35mmFilm from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifFocalLengthIn35mmFilm(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFFOCALLENGTHIN35MMFILM, value);
	}
  


    /**
     * Removes a value of property ExifFocalLengthIn35mmFilm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifFocalLengthIn35mmFilm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFFOCALLENGTHIN35MMFILM, value);
	}
	
    /**
     * Removes a value of property ExifFocalLengthIn35mmFilm as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifFocalLengthIn35mmFilm( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFFOCALLENGTHIN35MMFILM, value);
	}
    /**
     * Removes a value of property ExifFocalLengthIn35mmFilm given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifFocalLengthIn35mmFilm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFFOCALLENGTHIN35MMFILM, value);
	}
	
    /**
     * Removes a value of property ExifFocalLengthIn35mmFilm given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifFocalLengthIn35mmFilm(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFFOCALLENGTHIN35MMFILM, value);
	}
  
    /**
     * Removes all values of property ExifFocalLengthIn35mmFilm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifFocalLengthIn35mmFilm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFFOCALLENGTHIN35MMFILM);
	}
	
    /**
     * Removes all values of property ExifFocalLengthIn35mmFilm	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifFocalLengthIn35mmFilm() {
		Base.removeAll(this.model, this.getResource(), EXIFFOCALLENGTHIN35MMFILM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3aa3db4b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifFocalPlaneResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFFOCALPLANERESOLUTIONUNIT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3aa3db4b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifFocalPlaneResolutionUnit() {
		return Base.has(this.model, this.getResource(), EXIFFOCALPLANERESOLUTIONUNIT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3aa3db4b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifFocalPlaneResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFFOCALPLANERESOLUTIONUNIT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3aa3db4b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifFocalPlaneResolutionUnit( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFFOCALPLANERESOLUTIONUNIT);
	}

     /**
     * Get all values of property ExifFocalPlaneResolutionUnit as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFocalPlaneResolutionUnit_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFFOCALPLANERESOLUTIONUNIT);
	}
	
    /**
     * Get all values of property ExifFocalPlaneResolutionUnit as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFocalPlaneResolutionUnit_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFOCALPLANERESOLUTIONUNIT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifFocalPlaneResolutionUnit as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFocalPlaneResolutionUnit_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFFOCALPLANERESOLUTIONUNIT);
	}

    /**
     * Get all values of property ExifFocalPlaneResolutionUnit as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFocalPlaneResolutionUnit_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFOCALPLANERESOLUTIONUNIT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifFocalPlaneResolutionUnit     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalPlaneResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFFOCALPLANERESOLUTIONUNIT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifFocalPlaneResolutionUnit as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalPlaneResolutionUnit_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFOCALPLANERESOLUTIONUNIT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFocalPlaneResolutionUnit     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalPlaneResolutionUnit() {
		return Base.getAll(this.model, this.getResource(), EXIFFOCALPLANERESOLUTIONUNIT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFocalPlaneResolutionUnit as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalPlaneResolutionUnit_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFOCALPLANERESOLUTIONUNIT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifFocalPlaneResolutionUnit as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifFocalPlaneResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFFOCALPLANERESOLUTIONUNIT, value);
	}
	
    /**
     * Adds a value to property ExifFocalPlaneResolutionUnit as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifFocalPlaneResolutionUnit( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFFOCALPLANERESOLUTIONUNIT, value);
	}
    /**
     * Adds a value to property ExifFocalPlaneResolutionUnit from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifFocalPlaneResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFFOCALPLANERESOLUTIONUNIT, value);
	}
	
    /**
     * Adds a value to property ExifFocalPlaneResolutionUnit from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifFocalPlaneResolutionUnit(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFFOCALPLANERESOLUTIONUNIT, value);
	}
  

    /**
     * Sets a value of property ExifFocalPlaneResolutionUnit from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifFocalPlaneResolutionUnit( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFFOCALPLANERESOLUTIONUNIT, value);
	}
	
    /**
     * Sets a value of property ExifFocalPlaneResolutionUnit from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifFocalPlaneResolutionUnit( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFFOCALPLANERESOLUTIONUNIT, value);
	}
    /**
     * Sets a value of property ExifFocalPlaneResolutionUnit from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifFocalPlaneResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFFOCALPLANERESOLUTIONUNIT, value);
	}
	
    /**
     * Sets a value of property ExifFocalPlaneResolutionUnit from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifFocalPlaneResolutionUnit(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFFOCALPLANERESOLUTIONUNIT, value);
	}
  


    /**
     * Removes a value of property ExifFocalPlaneResolutionUnit as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifFocalPlaneResolutionUnit( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFFOCALPLANERESOLUTIONUNIT, value);
	}
	
    /**
     * Removes a value of property ExifFocalPlaneResolutionUnit as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifFocalPlaneResolutionUnit( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFFOCALPLANERESOLUTIONUNIT, value);
	}
    /**
     * Removes a value of property ExifFocalPlaneResolutionUnit given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifFocalPlaneResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFFOCALPLANERESOLUTIONUNIT, value);
	}
	
    /**
     * Removes a value of property ExifFocalPlaneResolutionUnit given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifFocalPlaneResolutionUnit(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFFOCALPLANERESOLUTIONUNIT, value);
	}
  
    /**
     * Removes all values of property ExifFocalPlaneResolutionUnit     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifFocalPlaneResolutionUnit( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFFOCALPLANERESOLUTIONUNIT);
	}
	
    /**
     * Removes all values of property ExifFocalPlaneResolutionUnit	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifFocalPlaneResolutionUnit() {
		Base.removeAll(this.model, this.getResource(), EXIFFOCALPLANERESOLUTIONUNIT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ef3f76 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifFocalPlaneXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFFOCALPLANEXRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ef3f76 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifFocalPlaneXResolution() {
		return Base.has(this.model, this.getResource(), EXIFFOCALPLANEXRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ef3f76 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifFocalPlaneXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFFOCALPLANEXRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ef3f76 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifFocalPlaneXResolution( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFFOCALPLANEXRESOLUTION);
	}

     /**
     * Get all values of property ExifFocalPlaneXResolution as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFocalPlaneXResolution_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFFOCALPLANEXRESOLUTION);
	}
	
    /**
     * Get all values of property ExifFocalPlaneXResolution as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFocalPlaneXResolution_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFOCALPLANEXRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifFocalPlaneXResolution as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFocalPlaneXResolution_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFFOCALPLANEXRESOLUTION);
	}

    /**
     * Get all values of property ExifFocalPlaneXResolution as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFocalPlaneXResolution_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFOCALPLANEXRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifFocalPlaneXResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalPlaneXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFFOCALPLANEXRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifFocalPlaneXResolution as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalPlaneXResolution_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFOCALPLANEXRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFocalPlaneXResolution     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalPlaneXResolution() {
		return Base.getAll(this.model, this.getResource(), EXIFFOCALPLANEXRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFocalPlaneXResolution as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalPlaneXResolution_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFOCALPLANEXRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifFocalPlaneXResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifFocalPlaneXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFFOCALPLANEXRESOLUTION, value);
	}
	
    /**
     * Adds a value to property ExifFocalPlaneXResolution as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifFocalPlaneXResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFFOCALPLANEXRESOLUTION, value);
	}
    /**
     * Adds a value to property ExifFocalPlaneXResolution from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifFocalPlaneXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFFOCALPLANEXRESOLUTION, value);
	}
	
    /**
     * Adds a value to property ExifFocalPlaneXResolution from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifFocalPlaneXResolution(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFFOCALPLANEXRESOLUTION, value);
	}
  

    /**
     * Sets a value of property ExifFocalPlaneXResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifFocalPlaneXResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFFOCALPLANEXRESOLUTION, value);
	}
	
    /**
     * Sets a value of property ExifFocalPlaneXResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifFocalPlaneXResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFFOCALPLANEXRESOLUTION, value);
	}
    /**
     * Sets a value of property ExifFocalPlaneXResolution from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifFocalPlaneXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFFOCALPLANEXRESOLUTION, value);
	}
	
    /**
     * Sets a value of property ExifFocalPlaneXResolution from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifFocalPlaneXResolution(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFFOCALPLANEXRESOLUTION, value);
	}
  


    /**
     * Removes a value of property ExifFocalPlaneXResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifFocalPlaneXResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFFOCALPLANEXRESOLUTION, value);
	}
	
    /**
     * Removes a value of property ExifFocalPlaneXResolution as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifFocalPlaneXResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFFOCALPLANEXRESOLUTION, value);
	}
    /**
     * Removes a value of property ExifFocalPlaneXResolution given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifFocalPlaneXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFFOCALPLANEXRESOLUTION, value);
	}
	
    /**
     * Removes a value of property ExifFocalPlaneXResolution given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifFocalPlaneXResolution(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFFOCALPLANEXRESOLUTION, value);
	}
  
    /**
     * Removes all values of property ExifFocalPlaneXResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifFocalPlaneXResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFFOCALPLANEXRESOLUTION);
	}
	
    /**
     * Removes all values of property ExifFocalPlaneXResolution	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifFocalPlaneXResolution() {
		Base.removeAll(this.model, this.getResource(), EXIFFOCALPLANEXRESOLUTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@550049b6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifFocalPlaneYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFFOCALPLANEYRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@550049b6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifFocalPlaneYResolution() {
		return Base.has(this.model, this.getResource(), EXIFFOCALPLANEYRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@550049b6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifFocalPlaneYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFFOCALPLANEYRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@550049b6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifFocalPlaneYResolution( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFFOCALPLANEYRESOLUTION);
	}

     /**
     * Get all values of property ExifFocalPlaneYResolution as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFocalPlaneYResolution_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFFOCALPLANEYRESOLUTION);
	}
	
    /**
     * Get all values of property ExifFocalPlaneYResolution as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFocalPlaneYResolution_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFOCALPLANEYRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifFocalPlaneYResolution as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifFocalPlaneYResolution_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFFOCALPLANEYRESOLUTION);
	}

    /**
     * Get all values of property ExifFocalPlaneYResolution as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifFocalPlaneYResolution_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFOCALPLANEYRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifFocalPlaneYResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalPlaneYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFFOCALPLANEYRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifFocalPlaneYResolution as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalPlaneYResolution_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFFOCALPLANEYRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFocalPlaneYResolution     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalPlaneYResolution() {
		return Base.getAll(this.model, this.getResource(), EXIFFOCALPLANEYRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifFocalPlaneYResolution as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifFocalPlaneYResolution_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFFOCALPLANEYRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifFocalPlaneYResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifFocalPlaneYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFFOCALPLANEYRESOLUTION, value);
	}
	
    /**
     * Adds a value to property ExifFocalPlaneYResolution as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifFocalPlaneYResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFFOCALPLANEYRESOLUTION, value);
	}
    /**
     * Adds a value to property ExifFocalPlaneYResolution from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifFocalPlaneYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFFOCALPLANEYRESOLUTION, value);
	}
	
    /**
     * Adds a value to property ExifFocalPlaneYResolution from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifFocalPlaneYResolution(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFFOCALPLANEYRESOLUTION, value);
	}
  

    /**
     * Sets a value of property ExifFocalPlaneYResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifFocalPlaneYResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFFOCALPLANEYRESOLUTION, value);
	}
	
    /**
     * Sets a value of property ExifFocalPlaneYResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifFocalPlaneYResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFFOCALPLANEYRESOLUTION, value);
	}
    /**
     * Sets a value of property ExifFocalPlaneYResolution from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifFocalPlaneYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFFOCALPLANEYRESOLUTION, value);
	}
	
    /**
     * Sets a value of property ExifFocalPlaneYResolution from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifFocalPlaneYResolution(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFFOCALPLANEYRESOLUTION, value);
	}
  


    /**
     * Removes a value of property ExifFocalPlaneYResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifFocalPlaneYResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFFOCALPLANEYRESOLUTION, value);
	}
	
    /**
     * Removes a value of property ExifFocalPlaneYResolution as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifFocalPlaneYResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFFOCALPLANEYRESOLUTION, value);
	}
    /**
     * Removes a value of property ExifFocalPlaneYResolution given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifFocalPlaneYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFFOCALPLANEYRESOLUTION, value);
	}
	
    /**
     * Removes a value of property ExifFocalPlaneYResolution given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifFocalPlaneYResolution(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFFOCALPLANEYRESOLUTION, value);
	}
  
    /**
     * Removes all values of property ExifFocalPlaneYResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifFocalPlaneYResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFFOCALPLANEYRESOLUTION);
	}
	
    /**
     * Removes all values of property ExifFocalPlaneYResolution	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifFocalPlaneYResolution() {
		Base.removeAll(this.model, this.getResource(), EXIFFOCALPLANEYRESOLUTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20349e80 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGainControl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGAINCONTROL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20349e80 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGainControl() {
		return Base.has(this.model, this.getResource(), EXIFGAINCONTROL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20349e80 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGainControl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGAINCONTROL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20349e80 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGainControl( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGAINCONTROL);
	}

     /**
     * Get all values of property ExifGainControl as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGainControl_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGAINCONTROL);
	}
	
    /**
     * Get all values of property ExifGainControl as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGainControl_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGAINCONTROL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGainControl as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGainControl_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGAINCONTROL);
	}

    /**
     * Get all values of property ExifGainControl as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGainControl_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGAINCONTROL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGainControl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGainControl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGAINCONTROL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGainControl as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGainControl_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGAINCONTROL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGainControl     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGainControl() {
		return Base.getAll(this.model, this.getResource(), EXIFGAINCONTROL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGainControl as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGainControl_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGAINCONTROL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGainControl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGainControl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGAINCONTROL, value);
	}
	
    /**
     * Adds a value to property ExifGainControl as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGainControl( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGAINCONTROL, value);
	}
    /**
     * Adds a value to property ExifGainControl from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGainControl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGAINCONTROL, value);
	}
	
    /**
     * Adds a value to property ExifGainControl from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGainControl(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGAINCONTROL, value);
	}
  

    /**
     * Sets a value of property ExifGainControl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGainControl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGAINCONTROL, value);
	}
	
    /**
     * Sets a value of property ExifGainControl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGainControl( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGAINCONTROL, value);
	}
    /**
     * Sets a value of property ExifGainControl from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGainControl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGAINCONTROL, value);
	}
	
    /**
     * Sets a value of property ExifGainControl from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGainControl(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGAINCONTROL, value);
	}
  


    /**
     * Removes a value of property ExifGainControl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGainControl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGAINCONTROL, value);
	}
	
    /**
     * Removes a value of property ExifGainControl as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGainControl( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGAINCONTROL, value);
	}
    /**
     * Removes a value of property ExifGainControl given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGainControl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGAINCONTROL, value);
	}
	
    /**
     * Removes a value of property ExifGainControl given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGainControl(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGAINCONTROL, value);
	}
  
    /**
     * Removes all values of property ExifGainControl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGainControl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGAINCONTROL);
	}
	
    /**
     * Removes all values of property ExifGainControl	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGainControl() {
		Base.removeAll(this.model, this.getResource(), EXIFGAINCONTROL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21daf346 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGeo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGEO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21daf346 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGeo() {
		return Base.has(this.model, this.getResource(), EXIFGEO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21daf346 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGeo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGEO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@21daf346 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGeo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGEO);
	}

     /**
     * Get all values of property ExifGeo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGeo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGEO);
	}
	
    /**
     * Get all values of property ExifGeo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGeo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGEO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGeo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGeo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGEO);
	}

    /**
     * Get all values of property ExifGeo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGeo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGEO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGeo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGeo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGEO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGeo as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGeo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGEO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGeo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGeo() {
		return Base.getAll(this.model, this.getResource(), EXIFGEO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGeo as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGeo_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGEO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGeo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGeo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGEO, value);
	}
	
    /**
     * Adds a value to property ExifGeo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGeo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGEO, value);
	}
    /**
     * Adds a value to property ExifGeo from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGeo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGEO, value);
	}
	
    /**
     * Adds a value to property ExifGeo from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGeo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGEO, value);
	}
  

    /**
     * Sets a value of property ExifGeo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGeo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGEO, value);
	}
	
    /**
     * Sets a value of property ExifGeo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGeo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGEO, value);
	}
    /**
     * Sets a value of property ExifGeo from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGeo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGEO, value);
	}
	
    /**
     * Sets a value of property ExifGeo from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGeo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGEO, value);
	}
  


    /**
     * Removes a value of property ExifGeo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGeo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGEO, value);
	}
	
    /**
     * Removes a value of property ExifGeo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGeo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGEO, value);
	}
    /**
     * Removes a value of property ExifGeo given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGeo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGEO, value);
	}
	
    /**
     * Removes a value of property ExifGeo given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGeo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGEO, value);
	}
  
    /**
     * Removes all values of property ExifGeo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGeo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGEO);
	}
	
    /**
     * Removes all values of property ExifGeo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGeo() {
		Base.removeAll(this.model, this.getResource(), EXIFGEO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4db4c9f3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsAltitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSALTITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4db4c9f3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsAltitudeRef() {
		return Base.has(this.model, this.getResource(), EXIFGPSALTITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4db4c9f3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsAltitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSALTITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4db4c9f3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsAltitudeRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSALTITUDEREF);
	}

     /**
     * Get all values of property ExifGpsAltitudeRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsAltitudeRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSALTITUDEREF);
	}
	
    /**
     * Get all values of property ExifGpsAltitudeRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsAltitudeRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSALTITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsAltitudeRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsAltitudeRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSALTITUDEREF);
	}

    /**
     * Get all values of property ExifGpsAltitudeRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsAltitudeRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSALTITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsAltitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsAltitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSALTITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsAltitudeRef as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsAltitudeRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSALTITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsAltitudeRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsAltitudeRef() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSALTITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsAltitudeRef as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsAltitudeRef_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSALTITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsAltitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsAltitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSALTITUDEREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsAltitudeRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsAltitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSALTITUDEREF, value);
	}
    /**
     * Adds a value to property ExifGpsAltitudeRef from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsAltitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSALTITUDEREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsAltitudeRef from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsAltitudeRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSALTITUDEREF, value);
	}
  

    /**
     * Sets a value of property ExifGpsAltitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsAltitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSALTITUDEREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsAltitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsAltitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSALTITUDEREF, value);
	}
    /**
     * Sets a value of property ExifGpsAltitudeRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsAltitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSALTITUDEREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsAltitudeRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsAltitudeRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSALTITUDEREF, value);
	}
  


    /**
     * Removes a value of property ExifGpsAltitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsAltitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSALTITUDEREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsAltitudeRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsAltitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSALTITUDEREF, value);
	}
    /**
     * Removes a value of property ExifGpsAltitudeRef given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsAltitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSALTITUDEREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsAltitudeRef given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsAltitudeRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSALTITUDEREF, value);
	}
  
    /**
     * Removes all values of property ExifGpsAltitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsAltitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSALTITUDEREF);
	}
	
    /**
     * Removes all values of property ExifGpsAltitudeRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsAltitudeRef() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSALTITUDEREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4628a18a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsAreaInformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSAREAINFORMATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4628a18a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsAreaInformation() {
		return Base.has(this.model, this.getResource(), EXIFGPSAREAINFORMATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4628a18a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsAreaInformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSAREAINFORMATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4628a18a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsAreaInformation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSAREAINFORMATION);
	}

     /**
     * Get all values of property ExifGpsAreaInformation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsAreaInformation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSAREAINFORMATION);
	}
	
    /**
     * Get all values of property ExifGpsAreaInformation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsAreaInformation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSAREAINFORMATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsAreaInformation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsAreaInformation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSAREAINFORMATION);
	}

    /**
     * Get all values of property ExifGpsAreaInformation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsAreaInformation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSAREAINFORMATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsAreaInformation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsAreaInformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSAREAINFORMATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsAreaInformation as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsAreaInformation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSAREAINFORMATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsAreaInformation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsAreaInformation() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSAREAINFORMATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsAreaInformation as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsAreaInformation_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSAREAINFORMATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsAreaInformation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsAreaInformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSAREAINFORMATION, value);
	}
	
    /**
     * Adds a value to property ExifGpsAreaInformation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsAreaInformation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSAREAINFORMATION, value);
	}
    /**
     * Adds a value to property ExifGpsAreaInformation from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsAreaInformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSAREAINFORMATION, value);
	}
	
    /**
     * Adds a value to property ExifGpsAreaInformation from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsAreaInformation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSAREAINFORMATION, value);
	}
  

    /**
     * Sets a value of property ExifGpsAreaInformation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsAreaInformation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSAREAINFORMATION, value);
	}
	
    /**
     * Sets a value of property ExifGpsAreaInformation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsAreaInformation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSAREAINFORMATION, value);
	}
    /**
     * Sets a value of property ExifGpsAreaInformation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsAreaInformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSAREAINFORMATION, value);
	}
	
    /**
     * Sets a value of property ExifGpsAreaInformation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsAreaInformation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSAREAINFORMATION, value);
	}
  


    /**
     * Removes a value of property ExifGpsAreaInformation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsAreaInformation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSAREAINFORMATION, value);
	}
	
    /**
     * Removes a value of property ExifGpsAreaInformation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsAreaInformation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSAREAINFORMATION, value);
	}
    /**
     * Removes a value of property ExifGpsAreaInformation given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsAreaInformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSAREAINFORMATION, value);
	}
	
    /**
     * Removes a value of property ExifGpsAreaInformation given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsAreaInformation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSAREAINFORMATION, value);
	}
  
    /**
     * Removes all values of property ExifGpsAreaInformation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsAreaInformation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSAREAINFORMATION);
	}
	
    /**
     * Removes all values of property ExifGpsAreaInformation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsAreaInformation() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSAREAINFORMATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64cd72ab has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsDOP(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSDOP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64cd72ab has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsDOP() {
		return Base.has(this.model, this.getResource(), EXIFGPSDOP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64cd72ab has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsDOP(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSDOP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64cd72ab has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsDOP( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSDOP);
	}

     /**
     * Get all values of property ExifGpsDOP as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDOP_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSDOP);
	}
	
    /**
     * Get all values of property ExifGpsDOP as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDOP_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDOP, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsDOP as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDOP_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSDOP);
	}

    /**
     * Get all values of property ExifGpsDOP as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDOP_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDOP, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsDOP     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDOP(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSDOP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsDOP as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDOP_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDOP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDOP     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDOP() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSDOP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDOP as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDOP_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDOP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsDOP as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsDOP(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSDOP, value);
	}
	
    /**
     * Adds a value to property ExifGpsDOP as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsDOP( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSDOP, value);
	}
    /**
     * Adds a value to property ExifGpsDOP from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsDOP(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSDOP, value);
	}
	
    /**
     * Adds a value to property ExifGpsDOP from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsDOP(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSDOP, value);
	}
  

    /**
     * Sets a value of property ExifGpsDOP from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsDOP( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSDOP, value);
	}
	
    /**
     * Sets a value of property ExifGpsDOP from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsDOP( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSDOP, value);
	}
    /**
     * Sets a value of property ExifGpsDOP from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsDOP(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSDOP, value);
	}
	
    /**
     * Sets a value of property ExifGpsDOP from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsDOP(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSDOP, value);
	}
  


    /**
     * Removes a value of property ExifGpsDOP as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsDOP( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSDOP, value);
	}
	
    /**
     * Removes a value of property ExifGpsDOP as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsDOP( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDOP, value);
	}
    /**
     * Removes a value of property ExifGpsDOP given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsDOP(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSDOP, value);
	}
	
    /**
     * Removes a value of property ExifGpsDOP given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsDOP(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDOP, value);
	}
  
    /**
     * Removes all values of property ExifGpsDOP     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsDOP( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSDOP);
	}
	
    /**
     * Removes all values of property ExifGpsDOP	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsDOP() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSDOP);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e174f3b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsDateStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSDATESTAMP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e174f3b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsDateStamp() {
		return Base.has(this.model, this.getResource(), EXIFGPSDATESTAMP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e174f3b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsDateStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSDATESTAMP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e174f3b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsDateStamp( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSDATESTAMP);
	}

     /**
     * Get all values of property ExifGpsDateStamp as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDateStamp_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSDATESTAMP);
	}
	
    /**
     * Get all values of property ExifGpsDateStamp as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDateStamp_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDATESTAMP, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsDateStamp as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDateStamp_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSDATESTAMP);
	}

    /**
     * Get all values of property ExifGpsDateStamp as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDateStamp_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDATESTAMP, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsDateStamp     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDateStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSDATESTAMP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsDateStamp as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDateStamp_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDATESTAMP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDateStamp     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDateStamp() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSDATESTAMP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDateStamp as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDateStamp_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDATESTAMP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsDateStamp as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsDateStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSDATESTAMP, value);
	}
	
    /**
     * Adds a value to property ExifGpsDateStamp as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsDateStamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSDATESTAMP, value);
	}
    /**
     * Adds a value to property ExifGpsDateStamp from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsDateStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSDATESTAMP, value);
	}
	
    /**
     * Adds a value to property ExifGpsDateStamp from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsDateStamp(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSDATESTAMP, value);
	}
  

    /**
     * Sets a value of property ExifGpsDateStamp from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsDateStamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSDATESTAMP, value);
	}
	
    /**
     * Sets a value of property ExifGpsDateStamp from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsDateStamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSDATESTAMP, value);
	}
    /**
     * Sets a value of property ExifGpsDateStamp from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsDateStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSDATESTAMP, value);
	}
	
    /**
     * Sets a value of property ExifGpsDateStamp from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsDateStamp(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSDATESTAMP, value);
	}
  


    /**
     * Removes a value of property ExifGpsDateStamp as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsDateStamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSDATESTAMP, value);
	}
	
    /**
     * Removes a value of property ExifGpsDateStamp as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsDateStamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDATESTAMP, value);
	}
    /**
     * Removes a value of property ExifGpsDateStamp given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsDateStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSDATESTAMP, value);
	}
	
    /**
     * Removes a value of property ExifGpsDateStamp given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsDateStamp(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDATESTAMP, value);
	}
  
    /**
     * Removes all values of property ExifGpsDateStamp     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsDateStamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSDATESTAMP);
	}
	
    /**
     * Removes all values of property ExifGpsDateStamp	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsDateStamp() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSDATESTAMP);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e1a69ee has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsDestBearing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSDESTBEARING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e1a69ee has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsDestBearing() {
		return Base.has(this.model, this.getResource(), EXIFGPSDESTBEARING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e1a69ee has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsDestBearing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSDESTBEARING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e1a69ee has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsDestBearing( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSDESTBEARING);
	}

     /**
     * Get all values of property ExifGpsDestBearing as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestBearing_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSDESTBEARING);
	}
	
    /**
     * Get all values of property ExifGpsDestBearing as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestBearing_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDESTBEARING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsDestBearing as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestBearing_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSDESTBEARING);
	}

    /**
     * Get all values of property ExifGpsDestBearing as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestBearing_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDESTBEARING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsDestBearing     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestBearing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSDESTBEARING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsDestBearing as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestBearing_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDESTBEARING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDestBearing     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestBearing() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSDESTBEARING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDestBearing as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestBearing_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDESTBEARING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsDestBearing as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsDestBearing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSDESTBEARING, value);
	}
	
    /**
     * Adds a value to property ExifGpsDestBearing as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsDestBearing( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSDESTBEARING, value);
	}
    /**
     * Adds a value to property ExifGpsDestBearing from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsDestBearing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSDESTBEARING, value);
	}
	
    /**
     * Adds a value to property ExifGpsDestBearing from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsDestBearing(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSDESTBEARING, value);
	}
  

    /**
     * Sets a value of property ExifGpsDestBearing from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsDestBearing( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSDESTBEARING, value);
	}
	
    /**
     * Sets a value of property ExifGpsDestBearing from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsDestBearing( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSDESTBEARING, value);
	}
    /**
     * Sets a value of property ExifGpsDestBearing from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsDestBearing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSDESTBEARING, value);
	}
	
    /**
     * Sets a value of property ExifGpsDestBearing from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsDestBearing(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSDESTBEARING, value);
	}
  


    /**
     * Removes a value of property ExifGpsDestBearing as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsDestBearing( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSDESTBEARING, value);
	}
	
    /**
     * Removes a value of property ExifGpsDestBearing as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsDestBearing( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDESTBEARING, value);
	}
    /**
     * Removes a value of property ExifGpsDestBearing given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsDestBearing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSDESTBEARING, value);
	}
	
    /**
     * Removes a value of property ExifGpsDestBearing given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsDestBearing(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDESTBEARING, value);
	}
  
    /**
     * Removes all values of property ExifGpsDestBearing     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsDestBearing( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSDESTBEARING);
	}
	
    /**
     * Removes all values of property ExifGpsDestBearing	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsDestBearing() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSDESTBEARING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@38287554 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsDestBearingRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSDESTBEARINGREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@38287554 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsDestBearingRef() {
		return Base.has(this.model, this.getResource(), EXIFGPSDESTBEARINGREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@38287554 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsDestBearingRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSDESTBEARINGREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@38287554 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsDestBearingRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSDESTBEARINGREF);
	}

     /**
     * Get all values of property ExifGpsDestBearingRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestBearingRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSDESTBEARINGREF);
	}
	
    /**
     * Get all values of property ExifGpsDestBearingRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestBearingRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDESTBEARINGREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsDestBearingRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestBearingRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSDESTBEARINGREF);
	}

    /**
     * Get all values of property ExifGpsDestBearingRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestBearingRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDESTBEARINGREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsDestBearingRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestBearingRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSDESTBEARINGREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsDestBearingRef as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestBearingRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDESTBEARINGREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDestBearingRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestBearingRef() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSDESTBEARINGREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDestBearingRef as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestBearingRef_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDESTBEARINGREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsDestBearingRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsDestBearingRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSDESTBEARINGREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsDestBearingRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsDestBearingRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSDESTBEARINGREF, value);
	}
    /**
     * Adds a value to property ExifGpsDestBearingRef from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsDestBearingRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSDESTBEARINGREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsDestBearingRef from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsDestBearingRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSDESTBEARINGREF, value);
	}
  

    /**
     * Sets a value of property ExifGpsDestBearingRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsDestBearingRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSDESTBEARINGREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsDestBearingRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsDestBearingRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSDESTBEARINGREF, value);
	}
    /**
     * Sets a value of property ExifGpsDestBearingRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsDestBearingRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSDESTBEARINGREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsDestBearingRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsDestBearingRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSDESTBEARINGREF, value);
	}
  


    /**
     * Removes a value of property ExifGpsDestBearingRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsDestBearingRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSDESTBEARINGREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsDestBearingRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsDestBearingRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDESTBEARINGREF, value);
	}
    /**
     * Removes a value of property ExifGpsDestBearingRef given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsDestBearingRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSDESTBEARINGREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsDestBearingRef given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsDestBearingRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDESTBEARINGREF, value);
	}
  
    /**
     * Removes all values of property ExifGpsDestBearingRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsDestBearingRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSDESTBEARINGREF);
	}
	
    /**
     * Removes all values of property ExifGpsDestBearingRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsDestBearingRef() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSDESTBEARINGREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@41c58721 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsDestDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSDESTDISTANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@41c58721 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsDestDistance() {
		return Base.has(this.model, this.getResource(), EXIFGPSDESTDISTANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@41c58721 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsDestDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSDESTDISTANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@41c58721 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsDestDistance( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSDESTDISTANCE);
	}

     /**
     * Get all values of property ExifGpsDestDistance as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestDistance_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSDESTDISTANCE);
	}
	
    /**
     * Get all values of property ExifGpsDestDistance as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestDistance_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDESTDISTANCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsDestDistance as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestDistance_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSDESTDISTANCE);
	}

    /**
     * Get all values of property ExifGpsDestDistance as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestDistance_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDESTDISTANCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsDestDistance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSDESTDISTANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsDestDistance as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestDistance_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDESTDISTANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDestDistance     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestDistance() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSDESTDISTANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDestDistance as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestDistance_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDESTDISTANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsDestDistance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsDestDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSDESTDISTANCE, value);
	}
	
    /**
     * Adds a value to property ExifGpsDestDistance as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsDestDistance( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSDESTDISTANCE, value);
	}
    /**
     * Adds a value to property ExifGpsDestDistance from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsDestDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSDESTDISTANCE, value);
	}
	
    /**
     * Adds a value to property ExifGpsDestDistance from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsDestDistance(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSDESTDISTANCE, value);
	}
  

    /**
     * Sets a value of property ExifGpsDestDistance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsDestDistance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSDESTDISTANCE, value);
	}
	
    /**
     * Sets a value of property ExifGpsDestDistance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsDestDistance( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSDESTDISTANCE, value);
	}
    /**
     * Sets a value of property ExifGpsDestDistance from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsDestDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSDESTDISTANCE, value);
	}
	
    /**
     * Sets a value of property ExifGpsDestDistance from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsDestDistance(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSDESTDISTANCE, value);
	}
  


    /**
     * Removes a value of property ExifGpsDestDistance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsDestDistance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSDESTDISTANCE, value);
	}
	
    /**
     * Removes a value of property ExifGpsDestDistance as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsDestDistance( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDESTDISTANCE, value);
	}
    /**
     * Removes a value of property ExifGpsDestDistance given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsDestDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSDESTDISTANCE, value);
	}
	
    /**
     * Removes a value of property ExifGpsDestDistance given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsDestDistance(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDESTDISTANCE, value);
	}
  
    /**
     * Removes all values of property ExifGpsDestDistance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsDestDistance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSDESTDISTANCE);
	}
	
    /**
     * Removes all values of property ExifGpsDestDistance	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsDestDistance() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSDESTDISTANCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@611cd826 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsDestDistanceRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSDESTDISTANCEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@611cd826 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsDestDistanceRef() {
		return Base.has(this.model, this.getResource(), EXIFGPSDESTDISTANCEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@611cd826 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsDestDistanceRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSDESTDISTANCEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@611cd826 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsDestDistanceRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSDESTDISTANCEREF);
	}

     /**
     * Get all values of property ExifGpsDestDistanceRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestDistanceRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSDESTDISTANCEREF);
	}
	
    /**
     * Get all values of property ExifGpsDestDistanceRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestDistanceRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDESTDISTANCEREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsDestDistanceRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestDistanceRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSDESTDISTANCEREF);
	}

    /**
     * Get all values of property ExifGpsDestDistanceRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestDistanceRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDESTDISTANCEREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsDestDistanceRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestDistanceRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSDESTDISTANCEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsDestDistanceRef as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestDistanceRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDESTDISTANCEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDestDistanceRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestDistanceRef() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSDESTDISTANCEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDestDistanceRef as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestDistanceRef_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDESTDISTANCEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsDestDistanceRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsDestDistanceRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSDESTDISTANCEREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsDestDistanceRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsDestDistanceRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSDESTDISTANCEREF, value);
	}
    /**
     * Adds a value to property ExifGpsDestDistanceRef from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsDestDistanceRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSDESTDISTANCEREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsDestDistanceRef from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsDestDistanceRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSDESTDISTANCEREF, value);
	}
  

    /**
     * Sets a value of property ExifGpsDestDistanceRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsDestDistanceRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSDESTDISTANCEREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsDestDistanceRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsDestDistanceRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSDESTDISTANCEREF, value);
	}
    /**
     * Sets a value of property ExifGpsDestDistanceRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsDestDistanceRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSDESTDISTANCEREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsDestDistanceRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsDestDistanceRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSDESTDISTANCEREF, value);
	}
  


    /**
     * Removes a value of property ExifGpsDestDistanceRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsDestDistanceRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSDESTDISTANCEREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsDestDistanceRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsDestDistanceRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDESTDISTANCEREF, value);
	}
    /**
     * Removes a value of property ExifGpsDestDistanceRef given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsDestDistanceRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSDESTDISTANCEREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsDestDistanceRef given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsDestDistanceRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDESTDISTANCEREF, value);
	}
  
    /**
     * Removes all values of property ExifGpsDestDistanceRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsDestDistanceRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSDESTDISTANCEREF);
	}
	
    /**
     * Removes all values of property ExifGpsDestDistanceRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsDestDistanceRef() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSDESTDISTANCEREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@164a7140 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsDestLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSDESTLATITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@164a7140 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsDestLatitudeRef() {
		return Base.has(this.model, this.getResource(), EXIFGPSDESTLATITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@164a7140 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsDestLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSDESTLATITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@164a7140 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsDestLatitudeRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSDESTLATITUDEREF);
	}

     /**
     * Get all values of property ExifGpsDestLatitudeRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestLatitudeRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSDESTLATITUDEREF);
	}
	
    /**
     * Get all values of property ExifGpsDestLatitudeRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestLatitudeRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDESTLATITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsDestLatitudeRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestLatitudeRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSDESTLATITUDEREF);
	}

    /**
     * Get all values of property ExifGpsDestLatitudeRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestLatitudeRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDESTLATITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsDestLatitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSDESTLATITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsDestLatitudeRef as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestLatitudeRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDESTLATITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDestLatitudeRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestLatitudeRef() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSDESTLATITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDestLatitudeRef as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestLatitudeRef_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDESTLATITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsDestLatitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsDestLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSDESTLATITUDEREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsDestLatitudeRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsDestLatitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSDESTLATITUDEREF, value);
	}
    /**
     * Adds a value to property ExifGpsDestLatitudeRef from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsDestLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSDESTLATITUDEREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsDestLatitudeRef from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsDestLatitudeRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSDESTLATITUDEREF, value);
	}
  

    /**
     * Sets a value of property ExifGpsDestLatitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsDestLatitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSDESTLATITUDEREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsDestLatitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsDestLatitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSDESTLATITUDEREF, value);
	}
    /**
     * Sets a value of property ExifGpsDestLatitudeRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsDestLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSDESTLATITUDEREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsDestLatitudeRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsDestLatitudeRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSDESTLATITUDEREF, value);
	}
  


    /**
     * Removes a value of property ExifGpsDestLatitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsDestLatitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSDESTLATITUDEREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsDestLatitudeRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsDestLatitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDESTLATITUDEREF, value);
	}
    /**
     * Removes a value of property ExifGpsDestLatitudeRef given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsDestLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSDESTLATITUDEREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsDestLatitudeRef given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsDestLatitudeRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDESTLATITUDEREF, value);
	}
  
    /**
     * Removes all values of property ExifGpsDestLatitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsDestLatitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSDESTLATITUDEREF);
	}
	
    /**
     * Removes all values of property ExifGpsDestLatitudeRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsDestLatitudeRef() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSDESTLATITUDEREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b8777a6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsDestLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSDESTLONGITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b8777a6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsDestLongitudeRef() {
		return Base.has(this.model, this.getResource(), EXIFGPSDESTLONGITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b8777a6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsDestLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSDESTLONGITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b8777a6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsDestLongitudeRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSDESTLONGITUDEREF);
	}

     /**
     * Get all values of property ExifGpsDestLongitudeRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestLongitudeRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSDESTLONGITUDEREF);
	}
	
    /**
     * Get all values of property ExifGpsDestLongitudeRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestLongitudeRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDESTLONGITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsDestLongitudeRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestLongitudeRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSDESTLONGITUDEREF);
	}

    /**
     * Get all values of property ExifGpsDestLongitudeRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDestLongitudeRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDESTLONGITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsDestLongitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSDESTLONGITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsDestLongitudeRef as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestLongitudeRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDESTLONGITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDestLongitudeRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestLongitudeRef() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSDESTLONGITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDestLongitudeRef as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDestLongitudeRef_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDESTLONGITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsDestLongitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsDestLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSDESTLONGITUDEREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsDestLongitudeRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsDestLongitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSDESTLONGITUDEREF, value);
	}
    /**
     * Adds a value to property ExifGpsDestLongitudeRef from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsDestLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSDESTLONGITUDEREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsDestLongitudeRef from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsDestLongitudeRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSDESTLONGITUDEREF, value);
	}
  

    /**
     * Sets a value of property ExifGpsDestLongitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsDestLongitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSDESTLONGITUDEREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsDestLongitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsDestLongitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSDESTLONGITUDEREF, value);
	}
    /**
     * Sets a value of property ExifGpsDestLongitudeRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsDestLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSDESTLONGITUDEREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsDestLongitudeRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsDestLongitudeRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSDESTLONGITUDEREF, value);
	}
  


    /**
     * Removes a value of property ExifGpsDestLongitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsDestLongitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSDESTLONGITUDEREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsDestLongitudeRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsDestLongitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDESTLONGITUDEREF, value);
	}
    /**
     * Removes a value of property ExifGpsDestLongitudeRef given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsDestLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSDESTLONGITUDEREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsDestLongitudeRef given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsDestLongitudeRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDESTLONGITUDEREF, value);
	}
  
    /**
     * Removes all values of property ExifGpsDestLongitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsDestLongitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSDESTLONGITUDEREF);
	}
	
    /**
     * Removes all values of property ExifGpsDestLongitudeRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsDestLongitudeRef() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSDESTLONGITUDEREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e390a9d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsDifferential(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSDIFFERENTIAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e390a9d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsDifferential() {
		return Base.has(this.model, this.getResource(), EXIFGPSDIFFERENTIAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e390a9d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsDifferential(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSDIFFERENTIAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e390a9d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsDifferential( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSDIFFERENTIAL);
	}

     /**
     * Get all values of property ExifGpsDifferential as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDifferential_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSDIFFERENTIAL);
	}
	
    /**
     * Get all values of property ExifGpsDifferential as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDifferential_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDIFFERENTIAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsDifferential as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDifferential_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSDIFFERENTIAL);
	}

    /**
     * Get all values of property ExifGpsDifferential as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsDifferential_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDIFFERENTIAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsDifferential     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDifferential(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSDIFFERENTIAL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsDifferential as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDifferential_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSDIFFERENTIAL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDifferential     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDifferential() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSDIFFERENTIAL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsDifferential as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsDifferential_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSDIFFERENTIAL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsDifferential as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsDifferential(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSDIFFERENTIAL, value);
	}
	
    /**
     * Adds a value to property ExifGpsDifferential as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsDifferential( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSDIFFERENTIAL, value);
	}
    /**
     * Adds a value to property ExifGpsDifferential from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsDifferential(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSDIFFERENTIAL, value);
	}
	
    /**
     * Adds a value to property ExifGpsDifferential from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsDifferential(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSDIFFERENTIAL, value);
	}
  

    /**
     * Sets a value of property ExifGpsDifferential from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsDifferential( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSDIFFERENTIAL, value);
	}
	
    /**
     * Sets a value of property ExifGpsDifferential from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsDifferential( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSDIFFERENTIAL, value);
	}
    /**
     * Sets a value of property ExifGpsDifferential from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsDifferential(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSDIFFERENTIAL, value);
	}
	
    /**
     * Sets a value of property ExifGpsDifferential from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsDifferential(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSDIFFERENTIAL, value);
	}
  


    /**
     * Removes a value of property ExifGpsDifferential as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsDifferential( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSDIFFERENTIAL, value);
	}
	
    /**
     * Removes a value of property ExifGpsDifferential as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsDifferential( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDIFFERENTIAL, value);
	}
    /**
     * Removes a value of property ExifGpsDifferential given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsDifferential(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSDIFFERENTIAL, value);
	}
	
    /**
     * Removes a value of property ExifGpsDifferential given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsDifferential(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSDIFFERENTIAL, value);
	}
  
    /**
     * Removes all values of property ExifGpsDifferential     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsDifferential( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSDIFFERENTIAL);
	}
	
    /**
     * Removes all values of property ExifGpsDifferential	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsDifferential() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSDIFFERENTIAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71f25f3a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsImgDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSIMGDIRECTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71f25f3a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsImgDirection() {
		return Base.has(this.model, this.getResource(), EXIFGPSIMGDIRECTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71f25f3a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsImgDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSIMGDIRECTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71f25f3a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsImgDirection( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSIMGDIRECTION);
	}

     /**
     * Get all values of property ExifGpsImgDirection as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsImgDirection_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSIMGDIRECTION);
	}
	
    /**
     * Get all values of property ExifGpsImgDirection as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsImgDirection_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSIMGDIRECTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsImgDirection as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsImgDirection_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSIMGDIRECTION);
	}

    /**
     * Get all values of property ExifGpsImgDirection as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsImgDirection_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSIMGDIRECTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsImgDirection     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsImgDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSIMGDIRECTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsImgDirection as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsImgDirection_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSIMGDIRECTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsImgDirection     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsImgDirection() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSIMGDIRECTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsImgDirection as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsImgDirection_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSIMGDIRECTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsImgDirection as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsImgDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSIMGDIRECTION, value);
	}
	
    /**
     * Adds a value to property ExifGpsImgDirection as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsImgDirection( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSIMGDIRECTION, value);
	}
    /**
     * Adds a value to property ExifGpsImgDirection from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsImgDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSIMGDIRECTION, value);
	}
	
    /**
     * Adds a value to property ExifGpsImgDirection from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsImgDirection(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSIMGDIRECTION, value);
	}
  

    /**
     * Sets a value of property ExifGpsImgDirection from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsImgDirection( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSIMGDIRECTION, value);
	}
	
    /**
     * Sets a value of property ExifGpsImgDirection from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsImgDirection( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSIMGDIRECTION, value);
	}
    /**
     * Sets a value of property ExifGpsImgDirection from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsImgDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSIMGDIRECTION, value);
	}
	
    /**
     * Sets a value of property ExifGpsImgDirection from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsImgDirection(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSIMGDIRECTION, value);
	}
  


    /**
     * Removes a value of property ExifGpsImgDirection as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsImgDirection( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSIMGDIRECTION, value);
	}
	
    /**
     * Removes a value of property ExifGpsImgDirection as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsImgDirection( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSIMGDIRECTION, value);
	}
    /**
     * Removes a value of property ExifGpsImgDirection given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsImgDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSIMGDIRECTION, value);
	}
	
    /**
     * Removes a value of property ExifGpsImgDirection given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsImgDirection(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSIMGDIRECTION, value);
	}
  
    /**
     * Removes all values of property ExifGpsImgDirection     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsImgDirection( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSIMGDIRECTION);
	}
	
    /**
     * Removes all values of property ExifGpsImgDirection	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsImgDirection() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSIMGDIRECTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a3a051f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsImgDirectionRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSIMGDIRECTIONREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a3a051f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsImgDirectionRef() {
		return Base.has(this.model, this.getResource(), EXIFGPSIMGDIRECTIONREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a3a051f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsImgDirectionRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSIMGDIRECTIONREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a3a051f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsImgDirectionRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSIMGDIRECTIONREF);
	}

     /**
     * Get all values of property ExifGpsImgDirectionRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsImgDirectionRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSIMGDIRECTIONREF);
	}
	
    /**
     * Get all values of property ExifGpsImgDirectionRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsImgDirectionRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSIMGDIRECTIONREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsImgDirectionRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsImgDirectionRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSIMGDIRECTIONREF);
	}

    /**
     * Get all values of property ExifGpsImgDirectionRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsImgDirectionRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSIMGDIRECTIONREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsImgDirectionRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsImgDirectionRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSIMGDIRECTIONREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsImgDirectionRef as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsImgDirectionRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSIMGDIRECTIONREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsImgDirectionRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsImgDirectionRef() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSIMGDIRECTIONREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsImgDirectionRef as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsImgDirectionRef_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSIMGDIRECTIONREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsImgDirectionRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsImgDirectionRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSIMGDIRECTIONREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsImgDirectionRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsImgDirectionRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSIMGDIRECTIONREF, value);
	}
    /**
     * Adds a value to property ExifGpsImgDirectionRef from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsImgDirectionRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSIMGDIRECTIONREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsImgDirectionRef from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsImgDirectionRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSIMGDIRECTIONREF, value);
	}
  

    /**
     * Sets a value of property ExifGpsImgDirectionRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsImgDirectionRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSIMGDIRECTIONREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsImgDirectionRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsImgDirectionRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSIMGDIRECTIONREF, value);
	}
    /**
     * Sets a value of property ExifGpsImgDirectionRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsImgDirectionRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSIMGDIRECTIONREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsImgDirectionRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsImgDirectionRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSIMGDIRECTIONREF, value);
	}
  


    /**
     * Removes a value of property ExifGpsImgDirectionRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsImgDirectionRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSIMGDIRECTIONREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsImgDirectionRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsImgDirectionRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSIMGDIRECTIONREF, value);
	}
    /**
     * Removes a value of property ExifGpsImgDirectionRef given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsImgDirectionRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSIMGDIRECTIONREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsImgDirectionRef given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsImgDirectionRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSIMGDIRECTIONREF, value);
	}
  
    /**
     * Removes all values of property ExifGpsImgDirectionRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsImgDirectionRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSIMGDIRECTIONREF);
	}
	
    /**
     * Removes all values of property ExifGpsImgDirectionRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsImgDirectionRef() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSIMGDIRECTIONREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@769cb63b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@769cb63b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsInfo() {
		return Base.has(this.model, this.getResource(), EXIFGPSINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@769cb63b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@769cb63b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsInfo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSINFO);
	}

     /**
     * Get all values of property ExifGpsInfo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsInfo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSINFO);
	}
	
    /**
     * Get all values of property ExifGpsInfo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsInfo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSINFO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsInfo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsInfo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSINFO);
	}

    /**
     * Get all values of property ExifGpsInfo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsInfo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSINFO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsInfo as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsInfo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsInfo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsInfo() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsInfo as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsInfo_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSINFO, value);
	}
	
    /**
     * Adds a value to property ExifGpsInfo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSINFO, value);
	}
    /**
     * Adds a value to property ExifGpsInfo from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSINFO, value);
	}
	
    /**
     * Adds a value to property ExifGpsInfo from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsInfo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSINFO, value);
	}
  

    /**
     * Sets a value of property ExifGpsInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSINFO, value);
	}
	
    /**
     * Sets a value of property ExifGpsInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSINFO, value);
	}
    /**
     * Sets a value of property ExifGpsInfo from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSINFO, value);
	}
	
    /**
     * Sets a value of property ExifGpsInfo from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsInfo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSINFO, value);
	}
  


    /**
     * Removes a value of property ExifGpsInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSINFO, value);
	}
	
    /**
     * Removes a value of property ExifGpsInfo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSINFO, value);
	}
    /**
     * Removes a value of property ExifGpsInfo given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSINFO, value);
	}
	
    /**
     * Removes a value of property ExifGpsInfo given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsInfo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSINFO, value);
	}
  
    /**
     * Removes all values of property ExifGpsInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSINFO);
	}
	
    /**
     * Removes all values of property ExifGpsInfo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsInfo() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSINFO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6536e939 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsInfoIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSINFOIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6536e939 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsInfoIFDPointer() {
		return Base.has(this.model, this.getResource(), EXIFGPSINFOIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6536e939 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsInfoIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSINFOIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6536e939 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsInfoIFDPointer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSINFOIFDPOINTER);
	}

     /**
     * Get all values of property ExifGpsInfoIFDPointer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsInfoIFDPointer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSINFOIFDPOINTER);
	}
	
    /**
     * Get all values of property ExifGpsInfoIFDPointer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsInfoIFDPointer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSINFOIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsInfoIFDPointer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsInfoIFDPointer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSINFOIFDPOINTER);
	}

    /**
     * Get all values of property ExifGpsInfoIFDPointer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsInfoIFDPointer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSINFOIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsInfoIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsInfoIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSINFOIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsInfoIFDPointer as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsInfoIFDPointer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSINFOIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsInfoIFDPointer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsInfoIFDPointer() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSINFOIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsInfoIFDPointer as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsInfoIFDPointer_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSINFOIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsInfoIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsInfoIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSINFOIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property ExifGpsInfoIFDPointer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsInfoIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSINFOIFDPOINTER, value);
	}
    /**
     * Adds a value to property ExifGpsInfoIFDPointer from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsInfoIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSINFOIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property ExifGpsInfoIFDPointer from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsInfoIFDPointer(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSINFOIFDPOINTER, value);
	}
  

    /**
     * Sets a value of property ExifGpsInfoIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsInfoIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSINFOIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property ExifGpsInfoIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsInfoIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSINFOIFDPOINTER, value);
	}
    /**
     * Sets a value of property ExifGpsInfoIFDPointer from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsInfoIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSINFOIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property ExifGpsInfoIFDPointer from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsInfoIFDPointer(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSINFOIFDPOINTER, value);
	}
  


    /**
     * Removes a value of property ExifGpsInfoIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsInfoIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSINFOIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property ExifGpsInfoIFDPointer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsInfoIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSINFOIFDPOINTER, value);
	}
    /**
     * Removes a value of property ExifGpsInfoIFDPointer given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsInfoIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSINFOIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property ExifGpsInfoIFDPointer given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsInfoIFDPointer(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSINFOIFDPOINTER, value);
	}
  
    /**
     * Removes all values of property ExifGpsInfoIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsInfoIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSINFOIFDPOINTER);
	}
	
    /**
     * Removes all values of property ExifGpsInfoIFDPointer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsInfoIFDPointer() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSINFOIFDPOINTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@439c92ab has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSLATITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@439c92ab has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsLatitudeRef() {
		return Base.has(this.model, this.getResource(), EXIFGPSLATITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@439c92ab has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSLATITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@439c92ab has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsLatitudeRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSLATITUDEREF);
	}

     /**
     * Get all values of property ExifGpsLatitudeRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsLatitudeRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSLATITUDEREF);
	}
	
    /**
     * Get all values of property ExifGpsLatitudeRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsLatitudeRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSLATITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsLatitudeRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsLatitudeRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSLATITUDEREF);
	}

    /**
     * Get all values of property ExifGpsLatitudeRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsLatitudeRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSLATITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsLatitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSLATITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsLatitudeRef as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsLatitudeRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSLATITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsLatitudeRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsLatitudeRef() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSLATITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsLatitudeRef as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsLatitudeRef_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSLATITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsLatitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSLATITUDEREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsLatitudeRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsLatitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSLATITUDEREF, value);
	}
    /**
     * Adds a value to property ExifGpsLatitudeRef from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSLATITUDEREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsLatitudeRef from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsLatitudeRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSLATITUDEREF, value);
	}
  

    /**
     * Sets a value of property ExifGpsLatitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsLatitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSLATITUDEREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsLatitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsLatitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSLATITUDEREF, value);
	}
    /**
     * Sets a value of property ExifGpsLatitudeRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSLATITUDEREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsLatitudeRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsLatitudeRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSLATITUDEREF, value);
	}
  


    /**
     * Removes a value of property ExifGpsLatitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsLatitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSLATITUDEREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsLatitudeRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsLatitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSLATITUDEREF, value);
	}
    /**
     * Removes a value of property ExifGpsLatitudeRef given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSLATITUDEREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsLatitudeRef given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsLatitudeRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSLATITUDEREF, value);
	}
  
    /**
     * Removes all values of property ExifGpsLatitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsLatitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSLATITUDEREF);
	}
	
    /**
     * Removes all values of property ExifGpsLatitudeRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsLatitudeRef() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSLATITUDEREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1bd2279c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSLONGITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1bd2279c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsLongitudeRef() {
		return Base.has(this.model, this.getResource(), EXIFGPSLONGITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1bd2279c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSLONGITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1bd2279c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsLongitudeRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSLONGITUDEREF);
	}

     /**
     * Get all values of property ExifGpsLongitudeRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsLongitudeRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSLONGITUDEREF);
	}
	
    /**
     * Get all values of property ExifGpsLongitudeRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsLongitudeRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSLONGITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsLongitudeRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsLongitudeRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSLONGITUDEREF);
	}

    /**
     * Get all values of property ExifGpsLongitudeRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsLongitudeRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSLONGITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsLongitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSLONGITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsLongitudeRef as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsLongitudeRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSLONGITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsLongitudeRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsLongitudeRef() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSLONGITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsLongitudeRef as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsLongitudeRef_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSLONGITUDEREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsLongitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSLONGITUDEREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsLongitudeRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsLongitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSLONGITUDEREF, value);
	}
    /**
     * Adds a value to property ExifGpsLongitudeRef from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSLONGITUDEREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsLongitudeRef from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsLongitudeRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSLONGITUDEREF, value);
	}
  

    /**
     * Sets a value of property ExifGpsLongitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsLongitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSLONGITUDEREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsLongitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsLongitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSLONGITUDEREF, value);
	}
    /**
     * Sets a value of property ExifGpsLongitudeRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSLONGITUDEREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsLongitudeRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsLongitudeRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSLONGITUDEREF, value);
	}
  


    /**
     * Removes a value of property ExifGpsLongitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsLongitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSLONGITUDEREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsLongitudeRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsLongitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSLONGITUDEREF, value);
	}
    /**
     * Removes a value of property ExifGpsLongitudeRef given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSLONGITUDEREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsLongitudeRef given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsLongitudeRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSLONGITUDEREF, value);
	}
  
    /**
     * Removes all values of property ExifGpsLongitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsLongitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSLONGITUDEREF);
	}
	
    /**
     * Removes all values of property ExifGpsLongitudeRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsLongitudeRef() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSLONGITUDEREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d2967a7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsMapDatum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSMAPDATUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d2967a7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsMapDatum() {
		return Base.has(this.model, this.getResource(), EXIFGPSMAPDATUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d2967a7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsMapDatum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSMAPDATUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d2967a7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsMapDatum( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSMAPDATUM);
	}

     /**
     * Get all values of property ExifGpsMapDatum as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsMapDatum_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSMAPDATUM);
	}
	
    /**
     * Get all values of property ExifGpsMapDatum as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsMapDatum_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSMAPDATUM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsMapDatum as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsMapDatum_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSMAPDATUM);
	}

    /**
     * Get all values of property ExifGpsMapDatum as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsMapDatum_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSMAPDATUM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsMapDatum     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsMapDatum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSMAPDATUM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsMapDatum as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsMapDatum_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSMAPDATUM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsMapDatum     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsMapDatum() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSMAPDATUM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsMapDatum as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsMapDatum_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSMAPDATUM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsMapDatum as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsMapDatum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSMAPDATUM, value);
	}
	
    /**
     * Adds a value to property ExifGpsMapDatum as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsMapDatum( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSMAPDATUM, value);
	}
    /**
     * Adds a value to property ExifGpsMapDatum from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsMapDatum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSMAPDATUM, value);
	}
	
    /**
     * Adds a value to property ExifGpsMapDatum from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsMapDatum(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSMAPDATUM, value);
	}
  

    /**
     * Sets a value of property ExifGpsMapDatum from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsMapDatum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSMAPDATUM, value);
	}
	
    /**
     * Sets a value of property ExifGpsMapDatum from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsMapDatum( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSMAPDATUM, value);
	}
    /**
     * Sets a value of property ExifGpsMapDatum from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsMapDatum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSMAPDATUM, value);
	}
	
    /**
     * Sets a value of property ExifGpsMapDatum from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsMapDatum(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSMAPDATUM, value);
	}
  


    /**
     * Removes a value of property ExifGpsMapDatum as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsMapDatum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSMAPDATUM, value);
	}
	
    /**
     * Removes a value of property ExifGpsMapDatum as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsMapDatum( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSMAPDATUM, value);
	}
    /**
     * Removes a value of property ExifGpsMapDatum given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsMapDatum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSMAPDATUM, value);
	}
	
    /**
     * Removes a value of property ExifGpsMapDatum given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsMapDatum(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSMAPDATUM, value);
	}
  
    /**
     * Removes all values of property ExifGpsMapDatum     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsMapDatum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSMAPDATUM);
	}
	
    /**
     * Removes all values of property ExifGpsMapDatum	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsMapDatum() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSMAPDATUM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f9726d9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsMeasureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSMEASUREMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f9726d9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsMeasureMode() {
		return Base.has(this.model, this.getResource(), EXIFGPSMEASUREMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f9726d9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsMeasureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSMEASUREMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f9726d9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsMeasureMode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSMEASUREMODE);
	}

     /**
     * Get all values of property ExifGpsMeasureMode as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsMeasureMode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSMEASUREMODE);
	}
	
    /**
     * Get all values of property ExifGpsMeasureMode as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsMeasureMode_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSMEASUREMODE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsMeasureMode as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsMeasureMode_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSMEASUREMODE);
	}

    /**
     * Get all values of property ExifGpsMeasureMode as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsMeasureMode_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSMEASUREMODE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsMeasureMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsMeasureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSMEASUREMODE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsMeasureMode as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsMeasureMode_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSMEASUREMODE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsMeasureMode     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsMeasureMode() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSMEASUREMODE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsMeasureMode as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsMeasureMode_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSMEASUREMODE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsMeasureMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsMeasureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSMEASUREMODE, value);
	}
	
    /**
     * Adds a value to property ExifGpsMeasureMode as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsMeasureMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSMEASUREMODE, value);
	}
    /**
     * Adds a value to property ExifGpsMeasureMode from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsMeasureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSMEASUREMODE, value);
	}
	
    /**
     * Adds a value to property ExifGpsMeasureMode from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsMeasureMode(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSMEASUREMODE, value);
	}
  

    /**
     * Sets a value of property ExifGpsMeasureMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsMeasureMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSMEASUREMODE, value);
	}
	
    /**
     * Sets a value of property ExifGpsMeasureMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsMeasureMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSMEASUREMODE, value);
	}
    /**
     * Sets a value of property ExifGpsMeasureMode from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsMeasureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSMEASUREMODE, value);
	}
	
    /**
     * Sets a value of property ExifGpsMeasureMode from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsMeasureMode(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSMEASUREMODE, value);
	}
  


    /**
     * Removes a value of property ExifGpsMeasureMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsMeasureMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSMEASUREMODE, value);
	}
	
    /**
     * Removes a value of property ExifGpsMeasureMode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsMeasureMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSMEASUREMODE, value);
	}
    /**
     * Removes a value of property ExifGpsMeasureMode given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsMeasureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSMEASUREMODE, value);
	}
	
    /**
     * Removes a value of property ExifGpsMeasureMode given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsMeasureMode(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSMEASUREMODE, value);
	}
  
    /**
     * Removes all values of property ExifGpsMeasureMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsMeasureMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSMEASUREMODE);
	}
	
    /**
     * Removes all values of property ExifGpsMeasureMode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsMeasureMode() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSMEASUREMODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73a1dd83 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsProcessingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSPROCESSINGMETHOD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73a1dd83 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsProcessingMethod() {
		return Base.has(this.model, this.getResource(), EXIFGPSPROCESSINGMETHOD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73a1dd83 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsProcessingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSPROCESSINGMETHOD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73a1dd83 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsProcessingMethod( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSPROCESSINGMETHOD);
	}

     /**
     * Get all values of property ExifGpsProcessingMethod as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsProcessingMethod_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSPROCESSINGMETHOD);
	}
	
    /**
     * Get all values of property ExifGpsProcessingMethod as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsProcessingMethod_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSPROCESSINGMETHOD, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsProcessingMethod as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsProcessingMethod_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSPROCESSINGMETHOD);
	}

    /**
     * Get all values of property ExifGpsProcessingMethod as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsProcessingMethod_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSPROCESSINGMETHOD, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsProcessingMethod     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsProcessingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSPROCESSINGMETHOD, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsProcessingMethod as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsProcessingMethod_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSPROCESSINGMETHOD, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsProcessingMethod     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsProcessingMethod() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSPROCESSINGMETHOD, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsProcessingMethod as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsProcessingMethod_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSPROCESSINGMETHOD, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsProcessingMethod as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsProcessingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSPROCESSINGMETHOD, value);
	}
	
    /**
     * Adds a value to property ExifGpsProcessingMethod as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsProcessingMethod( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSPROCESSINGMETHOD, value);
	}
    /**
     * Adds a value to property ExifGpsProcessingMethod from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsProcessingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSPROCESSINGMETHOD, value);
	}
	
    /**
     * Adds a value to property ExifGpsProcessingMethod from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsProcessingMethod(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSPROCESSINGMETHOD, value);
	}
  

    /**
     * Sets a value of property ExifGpsProcessingMethod from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsProcessingMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSPROCESSINGMETHOD, value);
	}
	
    /**
     * Sets a value of property ExifGpsProcessingMethod from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsProcessingMethod( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSPROCESSINGMETHOD, value);
	}
    /**
     * Sets a value of property ExifGpsProcessingMethod from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsProcessingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSPROCESSINGMETHOD, value);
	}
	
    /**
     * Sets a value of property ExifGpsProcessingMethod from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsProcessingMethod(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSPROCESSINGMETHOD, value);
	}
  


    /**
     * Removes a value of property ExifGpsProcessingMethod as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsProcessingMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSPROCESSINGMETHOD, value);
	}
	
    /**
     * Removes a value of property ExifGpsProcessingMethod as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsProcessingMethod( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSPROCESSINGMETHOD, value);
	}
    /**
     * Removes a value of property ExifGpsProcessingMethod given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsProcessingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSPROCESSINGMETHOD, value);
	}
	
    /**
     * Removes a value of property ExifGpsProcessingMethod given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsProcessingMethod(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSPROCESSINGMETHOD, value);
	}
  
    /**
     * Removes all values of property ExifGpsProcessingMethod     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsProcessingMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSPROCESSINGMETHOD);
	}
	
    /**
     * Removes all values of property ExifGpsProcessingMethod	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsProcessingMethod() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSPROCESSINGMETHOD);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7671eb24 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsSatellites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSSATELLITES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7671eb24 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsSatellites() {
		return Base.has(this.model, this.getResource(), EXIFGPSSATELLITES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7671eb24 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsSatellites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSSATELLITES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7671eb24 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsSatellites( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSSATELLITES);
	}

     /**
     * Get all values of property ExifGpsSatellites as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsSatellites_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSSATELLITES);
	}
	
    /**
     * Get all values of property ExifGpsSatellites as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsSatellites_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSSATELLITES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsSatellites as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsSatellites_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSSATELLITES);
	}

    /**
     * Get all values of property ExifGpsSatellites as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsSatellites_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSSATELLITES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsSatellites     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsSatellites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSSATELLITES, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsSatellites as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsSatellites_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSSATELLITES, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsSatellites     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsSatellites() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSSATELLITES, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsSatellites as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsSatellites_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSSATELLITES, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsSatellites as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsSatellites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSSATELLITES, value);
	}
	
    /**
     * Adds a value to property ExifGpsSatellites as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsSatellites( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSSATELLITES, value);
	}
    /**
     * Adds a value to property ExifGpsSatellites from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsSatellites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSSATELLITES, value);
	}
	
    /**
     * Adds a value to property ExifGpsSatellites from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsSatellites(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSSATELLITES, value);
	}
  

    /**
     * Sets a value of property ExifGpsSatellites from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsSatellites( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSSATELLITES, value);
	}
	
    /**
     * Sets a value of property ExifGpsSatellites from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsSatellites( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSSATELLITES, value);
	}
    /**
     * Sets a value of property ExifGpsSatellites from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsSatellites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSSATELLITES, value);
	}
	
    /**
     * Sets a value of property ExifGpsSatellites from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsSatellites(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSSATELLITES, value);
	}
  


    /**
     * Removes a value of property ExifGpsSatellites as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsSatellites( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSSATELLITES, value);
	}
	
    /**
     * Removes a value of property ExifGpsSatellites as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsSatellites( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSSATELLITES, value);
	}
    /**
     * Removes a value of property ExifGpsSatellites given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsSatellites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSSATELLITES, value);
	}
	
    /**
     * Removes a value of property ExifGpsSatellites given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsSatellites(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSSATELLITES, value);
	}
  
    /**
     * Removes all values of property ExifGpsSatellites     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsSatellites( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSSATELLITES);
	}
	
    /**
     * Removes all values of property ExifGpsSatellites	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsSatellites() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSSATELLITES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@397b0012 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSSPEED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@397b0012 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsSpeed() {
		return Base.has(this.model, this.getResource(), EXIFGPSSPEED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@397b0012 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSSPEED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@397b0012 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsSpeed( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSSPEED);
	}

     /**
     * Get all values of property ExifGpsSpeed as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsSpeed_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSSPEED);
	}
	
    /**
     * Get all values of property ExifGpsSpeed as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsSpeed_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSSPEED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsSpeed as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsSpeed_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSSPEED);
	}

    /**
     * Get all values of property ExifGpsSpeed as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsSpeed_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSSPEED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsSpeed     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSSPEED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsSpeed as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsSpeed_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSSPEED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsSpeed     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsSpeed() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSSPEED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsSpeed as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsSpeed_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSSPEED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsSpeed as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSSPEED, value);
	}
	
    /**
     * Adds a value to property ExifGpsSpeed as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsSpeed( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSSPEED, value);
	}
    /**
     * Adds a value to property ExifGpsSpeed from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSSPEED, value);
	}
	
    /**
     * Adds a value to property ExifGpsSpeed from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsSpeed(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSSPEED, value);
	}
  

    /**
     * Sets a value of property ExifGpsSpeed from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsSpeed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSSPEED, value);
	}
	
    /**
     * Sets a value of property ExifGpsSpeed from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsSpeed( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSSPEED, value);
	}
    /**
     * Sets a value of property ExifGpsSpeed from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSSPEED, value);
	}
	
    /**
     * Sets a value of property ExifGpsSpeed from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsSpeed(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSSPEED, value);
	}
  


    /**
     * Removes a value of property ExifGpsSpeed as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsSpeed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSSPEED, value);
	}
	
    /**
     * Removes a value of property ExifGpsSpeed as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsSpeed( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSSPEED, value);
	}
    /**
     * Removes a value of property ExifGpsSpeed given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSSPEED, value);
	}
	
    /**
     * Removes a value of property ExifGpsSpeed given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsSpeed(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSSPEED, value);
	}
  
    /**
     * Removes all values of property ExifGpsSpeed     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsSpeed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSSPEED);
	}
	
    /**
     * Removes all values of property ExifGpsSpeed	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsSpeed() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSSPEED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d66fb0a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsSpeedRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSSPEEDREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d66fb0a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsSpeedRef() {
		return Base.has(this.model, this.getResource(), EXIFGPSSPEEDREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d66fb0a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsSpeedRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSSPEEDREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d66fb0a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsSpeedRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSSPEEDREF);
	}

     /**
     * Get all values of property ExifGpsSpeedRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsSpeedRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSSPEEDREF);
	}
	
    /**
     * Get all values of property ExifGpsSpeedRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsSpeedRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSSPEEDREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsSpeedRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsSpeedRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSSPEEDREF);
	}

    /**
     * Get all values of property ExifGpsSpeedRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsSpeedRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSSPEEDREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsSpeedRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsSpeedRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSSPEEDREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsSpeedRef as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsSpeedRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSSPEEDREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsSpeedRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsSpeedRef() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSSPEEDREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsSpeedRef as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsSpeedRef_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSSPEEDREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsSpeedRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsSpeedRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSSPEEDREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsSpeedRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsSpeedRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSSPEEDREF, value);
	}
    /**
     * Adds a value to property ExifGpsSpeedRef from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsSpeedRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSSPEEDREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsSpeedRef from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsSpeedRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSSPEEDREF, value);
	}
  

    /**
     * Sets a value of property ExifGpsSpeedRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsSpeedRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSSPEEDREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsSpeedRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsSpeedRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSSPEEDREF, value);
	}
    /**
     * Sets a value of property ExifGpsSpeedRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsSpeedRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSSPEEDREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsSpeedRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsSpeedRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSSPEEDREF, value);
	}
  


    /**
     * Removes a value of property ExifGpsSpeedRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsSpeedRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSSPEEDREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsSpeedRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsSpeedRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSSPEEDREF, value);
	}
    /**
     * Removes a value of property ExifGpsSpeedRef given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsSpeedRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSSPEEDREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsSpeedRef given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsSpeedRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSSPEEDREF, value);
	}
  
    /**
     * Removes all values of property ExifGpsSpeedRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsSpeedRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSSPEEDREF);
	}
	
    /**
     * Removes all values of property ExifGpsSpeedRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsSpeedRef() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSSPEEDREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2dd476ab has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2dd476ab has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsStatus() {
		return Base.has(this.model, this.getResource(), EXIFGPSSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2dd476ab has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2dd476ab has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsStatus( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSSTATUS);
	}

     /**
     * Get all values of property ExifGpsStatus as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsStatus_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSSTATUS);
	}
	
    /**
     * Get all values of property ExifGpsStatus as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsStatus_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSSTATUS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsStatus as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsStatus_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSSTATUS);
	}

    /**
     * Get all values of property ExifGpsStatus as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsStatus_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSSTATUS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsStatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSSTATUS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsStatus as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsStatus_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSSTATUS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsStatus     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsStatus() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSSTATUS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsStatus as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsStatus_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSSTATUS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsStatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSSTATUS, value);
	}
	
    /**
     * Adds a value to property ExifGpsStatus as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSSTATUS, value);
	}
    /**
     * Adds a value to property ExifGpsStatus from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSSTATUS, value);
	}
	
    /**
     * Adds a value to property ExifGpsStatus from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsStatus(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSSTATUS, value);
	}
  

    /**
     * Sets a value of property ExifGpsStatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSSTATUS, value);
	}
	
    /**
     * Sets a value of property ExifGpsStatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSSTATUS, value);
	}
    /**
     * Sets a value of property ExifGpsStatus from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSSTATUS, value);
	}
	
    /**
     * Sets a value of property ExifGpsStatus from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsStatus(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSSTATUS, value);
	}
  


    /**
     * Removes a value of property ExifGpsStatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSSTATUS, value);
	}
	
    /**
     * Removes a value of property ExifGpsStatus as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSSTATUS, value);
	}
    /**
     * Removes a value of property ExifGpsStatus given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSSTATUS, value);
	}
	
    /**
     * Removes a value of property ExifGpsStatus given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsStatus(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSSTATUS, value);
	}
  
    /**
     * Removes all values of property ExifGpsStatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSSTATUS);
	}
	
    /**
     * Removes all values of property ExifGpsStatus	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsStatus() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSSTATUS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@509b7160 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsTimeStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSTIMESTAMP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@509b7160 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsTimeStamp() {
		return Base.has(this.model, this.getResource(), EXIFGPSTIMESTAMP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@509b7160 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsTimeStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSTIMESTAMP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@509b7160 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsTimeStamp( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSTIMESTAMP);
	}

     /**
     * Get all values of property ExifGpsTimeStamp as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsTimeStamp_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSTIMESTAMP);
	}
	
    /**
     * Get all values of property ExifGpsTimeStamp as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsTimeStamp_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSTIMESTAMP, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsTimeStamp as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsTimeStamp_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSTIMESTAMP);
	}

    /**
     * Get all values of property ExifGpsTimeStamp as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsTimeStamp_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSTIMESTAMP, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsTimeStamp     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsTimeStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSTIMESTAMP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsTimeStamp as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsTimeStamp_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSTIMESTAMP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsTimeStamp     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsTimeStamp() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSTIMESTAMP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsTimeStamp as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsTimeStamp_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSTIMESTAMP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsTimeStamp as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsTimeStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSTIMESTAMP, value);
	}
	
    /**
     * Adds a value to property ExifGpsTimeStamp as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsTimeStamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSTIMESTAMP, value);
	}
    /**
     * Adds a value to property ExifGpsTimeStamp from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsTimeStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSTIMESTAMP, value);
	}
	
    /**
     * Adds a value to property ExifGpsTimeStamp from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsTimeStamp(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSTIMESTAMP, value);
	}
  

    /**
     * Sets a value of property ExifGpsTimeStamp from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsTimeStamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSTIMESTAMP, value);
	}
	
    /**
     * Sets a value of property ExifGpsTimeStamp from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsTimeStamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSTIMESTAMP, value);
	}
    /**
     * Sets a value of property ExifGpsTimeStamp from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsTimeStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSTIMESTAMP, value);
	}
	
    /**
     * Sets a value of property ExifGpsTimeStamp from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsTimeStamp(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSTIMESTAMP, value);
	}
  


    /**
     * Removes a value of property ExifGpsTimeStamp as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsTimeStamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSTIMESTAMP, value);
	}
	
    /**
     * Removes a value of property ExifGpsTimeStamp as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsTimeStamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSTIMESTAMP, value);
	}
    /**
     * Removes a value of property ExifGpsTimeStamp given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsTimeStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSTIMESTAMP, value);
	}
	
    /**
     * Removes a value of property ExifGpsTimeStamp given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsTimeStamp(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSTIMESTAMP, value);
	}
  
    /**
     * Removes all values of property ExifGpsTimeStamp     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsTimeStamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSTIMESTAMP);
	}
	
    /**
     * Removes all values of property ExifGpsTimeStamp	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsTimeStamp() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSTIMESTAMP);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@226dad07 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsTrack(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSTRACK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@226dad07 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsTrack() {
		return Base.has(this.model, this.getResource(), EXIFGPSTRACK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@226dad07 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsTrack(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSTRACK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@226dad07 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsTrack( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSTRACK);
	}

     /**
     * Get all values of property ExifGpsTrack as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsTrack_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSTRACK);
	}
	
    /**
     * Get all values of property ExifGpsTrack as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsTrack_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSTRACK, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsTrack as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsTrack_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSTRACK);
	}

    /**
     * Get all values of property ExifGpsTrack as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsTrack_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSTRACK, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsTrack     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsTrack(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSTRACK, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsTrack as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsTrack_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSTRACK, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsTrack     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsTrack() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSTRACK, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsTrack as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsTrack_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSTRACK, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsTrack as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsTrack(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSTRACK, value);
	}
	
    /**
     * Adds a value to property ExifGpsTrack as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsTrack( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSTRACK, value);
	}
    /**
     * Adds a value to property ExifGpsTrack from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsTrack(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSTRACK, value);
	}
	
    /**
     * Adds a value to property ExifGpsTrack from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsTrack(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSTRACK, value);
	}
  

    /**
     * Sets a value of property ExifGpsTrack from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsTrack( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSTRACK, value);
	}
	
    /**
     * Sets a value of property ExifGpsTrack from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsTrack( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSTRACK, value);
	}
    /**
     * Sets a value of property ExifGpsTrack from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsTrack(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSTRACK, value);
	}
	
    /**
     * Sets a value of property ExifGpsTrack from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsTrack(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSTRACK, value);
	}
  


    /**
     * Removes a value of property ExifGpsTrack as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsTrack( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSTRACK, value);
	}
	
    /**
     * Removes a value of property ExifGpsTrack as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsTrack( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSTRACK, value);
	}
    /**
     * Removes a value of property ExifGpsTrack given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsTrack(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSTRACK, value);
	}
	
    /**
     * Removes a value of property ExifGpsTrack given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsTrack(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSTRACK, value);
	}
  
    /**
     * Removes all values of property ExifGpsTrack     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsTrack( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSTRACK);
	}
	
    /**
     * Removes all values of property ExifGpsTrack	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsTrack() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSTRACK);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d3b82d5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsTrackRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSTRACKREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d3b82d5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsTrackRef() {
		return Base.has(this.model, this.getResource(), EXIFGPSTRACKREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d3b82d5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsTrackRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSTRACKREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d3b82d5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsTrackRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSTRACKREF);
	}

     /**
     * Get all values of property ExifGpsTrackRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsTrackRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSTRACKREF);
	}
	
    /**
     * Get all values of property ExifGpsTrackRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsTrackRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSTRACKREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsTrackRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsTrackRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSTRACKREF);
	}

    /**
     * Get all values of property ExifGpsTrackRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsTrackRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSTRACKREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsTrackRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsTrackRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSTRACKREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsTrackRef as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsTrackRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSTRACKREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsTrackRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsTrackRef() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSTRACKREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsTrackRef as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsTrackRef_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSTRACKREF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsTrackRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsTrackRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSTRACKREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsTrackRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsTrackRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSTRACKREF, value);
	}
    /**
     * Adds a value to property ExifGpsTrackRef from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsTrackRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSTRACKREF, value);
	}
	
    /**
     * Adds a value to property ExifGpsTrackRef from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsTrackRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSTRACKREF, value);
	}
  

    /**
     * Sets a value of property ExifGpsTrackRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsTrackRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSTRACKREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsTrackRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsTrackRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSTRACKREF, value);
	}
    /**
     * Sets a value of property ExifGpsTrackRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsTrackRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSTRACKREF, value);
	}
	
    /**
     * Sets a value of property ExifGpsTrackRef from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsTrackRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSTRACKREF, value);
	}
  


    /**
     * Removes a value of property ExifGpsTrackRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsTrackRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSTRACKREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsTrackRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsTrackRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSTRACKREF, value);
	}
    /**
     * Removes a value of property ExifGpsTrackRef given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsTrackRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSTRACKREF, value);
	}
	
    /**
     * Removes a value of property ExifGpsTrackRef given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsTrackRef(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSTRACKREF, value);
	}
  
    /**
     * Removes all values of property ExifGpsTrackRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsTrackRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSTRACKREF);
	}
	
    /**
     * Removes all values of property ExifGpsTrackRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsTrackRef() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSTRACKREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20b59262 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifGpsVersionID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFGPSVERSIONID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20b59262 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifGpsVersionID() {
		return Base.has(this.model, this.getResource(), EXIFGPSVERSIONID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20b59262 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifGpsVersionID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFGPSVERSIONID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20b59262 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifGpsVersionID( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFGPSVERSIONID);
	}

     /**
     * Get all values of property ExifGpsVersionID as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsVersionID_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFGPSVERSIONID);
	}
	
    /**
     * Get all values of property ExifGpsVersionID as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsVersionID_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSVERSIONID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifGpsVersionID as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifGpsVersionID_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFGPSVERSIONID);
	}

    /**
     * Get all values of property ExifGpsVersionID as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifGpsVersionID_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSVERSIONID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifGpsVersionID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsVersionID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFGPSVERSIONID, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifGpsVersionID as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsVersionID_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFGPSVERSIONID, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsVersionID     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsVersionID() {
		return Base.getAll(this.model, this.getResource(), EXIFGPSVERSIONID, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifGpsVersionID as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifGpsVersionID_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFGPSVERSIONID, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifGpsVersionID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifGpsVersionID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFGPSVERSIONID, value);
	}
	
    /**
     * Adds a value to property ExifGpsVersionID as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifGpsVersionID( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFGPSVERSIONID, value);
	}
    /**
     * Adds a value to property ExifGpsVersionID from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifGpsVersionID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFGPSVERSIONID, value);
	}
	
    /**
     * Adds a value to property ExifGpsVersionID from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifGpsVersionID(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFGPSVERSIONID, value);
	}
  

    /**
     * Sets a value of property ExifGpsVersionID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifGpsVersionID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFGPSVERSIONID, value);
	}
	
    /**
     * Sets a value of property ExifGpsVersionID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifGpsVersionID( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFGPSVERSIONID, value);
	}
    /**
     * Sets a value of property ExifGpsVersionID from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifGpsVersionID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFGPSVERSIONID, value);
	}
	
    /**
     * Sets a value of property ExifGpsVersionID from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifGpsVersionID(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFGPSVERSIONID, value);
	}
  


    /**
     * Removes a value of property ExifGpsVersionID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifGpsVersionID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFGPSVERSIONID, value);
	}
	
    /**
     * Removes a value of property ExifGpsVersionID as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifGpsVersionID( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFGPSVERSIONID, value);
	}
    /**
     * Removes a value of property ExifGpsVersionID given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifGpsVersionID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFGPSVERSIONID, value);
	}
	
    /**
     * Removes a value of property ExifGpsVersionID given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifGpsVersionID(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFGPSVERSIONID, value);
	}
  
    /**
     * Removes all values of property ExifGpsVersionID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifGpsVersionID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFGPSVERSIONID);
	}
	
    /**
     * Removes all values of property ExifGpsVersionID	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifGpsVersionID() {
		Base.removeAll(this.model, this.getResource(), EXIFGPSVERSIONID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b0e6f59 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFHEIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b0e6f59 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifHeight() {
		return Base.has(this.model, this.getResource(), EXIFHEIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b0e6f59 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFHEIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b0e6f59 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifHeight( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFHEIGHT);
	}

     /**
     * Get all values of property ExifHeight as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifHeight_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFHEIGHT);
	}
	
    /**
     * Get all values of property ExifHeight as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifHeight_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFHEIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifHeight as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifHeight_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFHEIGHT);
	}

    /**
     * Get all values of property ExifHeight as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifHeight_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFHEIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifHeight     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFHEIGHT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifHeight as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifHeight_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFHEIGHT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifHeight     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifHeight() {
		return Base.getAll(this.model, this.getResource(), EXIFHEIGHT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifHeight as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifHeight_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFHEIGHT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifHeight as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFHEIGHT, value);
	}
	
    /**
     * Adds a value to property ExifHeight as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifHeight( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFHEIGHT, value);
	}
    /**
     * Adds a value to property ExifHeight from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFHEIGHT, value);
	}
	
    /**
     * Adds a value to property ExifHeight from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifHeight(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFHEIGHT, value);
	}
  

    /**
     * Sets a value of property ExifHeight from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifHeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFHEIGHT, value);
	}
	
    /**
     * Sets a value of property ExifHeight from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifHeight( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFHEIGHT, value);
	}
    /**
     * Sets a value of property ExifHeight from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFHEIGHT, value);
	}
	
    /**
     * Sets a value of property ExifHeight from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifHeight(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFHEIGHT, value);
	}
  


    /**
     * Removes a value of property ExifHeight as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifHeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFHEIGHT, value);
	}
	
    /**
     * Removes a value of property ExifHeight as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifHeight( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFHEIGHT, value);
	}
    /**
     * Removes a value of property ExifHeight given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFHEIGHT, value);
	}
	
    /**
     * Removes a value of property ExifHeight given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifHeight(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFHEIGHT, value);
	}
  
    /**
     * Removes all values of property ExifHeight     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifHeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFHEIGHT);
	}
	
    /**
     * Removes all values of property ExifHeight	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifHeight() {
		Base.removeAll(this.model, this.getResource(), EXIFHEIGHT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10bc5c9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifIfdPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10bc5c9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifIfdPointer() {
		return Base.has(this.model, this.getResource(), EXIFIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10bc5c9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifIfdPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10bc5c9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifIfdPointer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFIFDPOINTER);
	}

     /**
     * Get all values of property ExifIfdPointer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifIfdPointer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFIFDPOINTER);
	}
	
    /**
     * Get all values of property ExifIfdPointer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifIfdPointer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifIfdPointer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifIfdPointer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFIFDPOINTER);
	}

    /**
     * Get all values of property ExifIfdPointer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifIfdPointer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifIfdPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifIfdPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifIfdPointer as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifIfdPointer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifIfdPointer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifIfdPointer() {
		return Base.getAll(this.model, this.getResource(), EXIFIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifIfdPointer as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifIfdPointer_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifIfdPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifIfdPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property ExifIfdPointer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifIfdPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFIFDPOINTER, value);
	}
    /**
     * Adds a value to property ExifIfdPointer from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifIfdPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property ExifIfdPointer from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifIfdPointer(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFIFDPOINTER, value);
	}
  

    /**
     * Sets a value of property ExifIfdPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifIfdPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property ExifIfdPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifIfdPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFIFDPOINTER, value);
	}
    /**
     * Sets a value of property ExifIfdPointer from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifIfdPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property ExifIfdPointer from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifIfdPointer(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFIFDPOINTER, value);
	}
  


    /**
     * Removes a value of property ExifIfdPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifIfdPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property ExifIfdPointer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifIfdPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFIFDPOINTER, value);
	}
    /**
     * Removes a value of property ExifIfdPointer given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifIfdPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property ExifIfdPointer given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifIfdPointer(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFIFDPOINTER, value);
	}
  
    /**
     * Removes all values of property ExifIfdPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifIfdPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFIFDPOINTER);
	}
	
    /**
     * Removes all values of property ExifIfdPointer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifIfdPointer() {
		Base.removeAll(this.model, this.getResource(), EXIFIFDPOINTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6944da12 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifImageConfig(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFIMAGECONFIG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6944da12 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifImageConfig() {
		return Base.has(this.model, this.getResource(), EXIFIMAGECONFIG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6944da12 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifImageConfig(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFIMAGECONFIG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6944da12 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifImageConfig( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFIMAGECONFIG);
	}

     /**
     * Get all values of property ExifImageConfig as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifImageConfig_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFIMAGECONFIG);
	}
	
    /**
     * Get all values of property ExifImageConfig as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifImageConfig_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIMAGECONFIG, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifImageConfig as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifImageConfig_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFIMAGECONFIG);
	}

    /**
     * Get all values of property ExifImageConfig as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifImageConfig_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIMAGECONFIG, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifImageConfig     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageConfig(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFIMAGECONFIG, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifImageConfig as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageConfig_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIMAGECONFIG, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifImageConfig     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageConfig() {
		return Base.getAll(this.model, this.getResource(), EXIFIMAGECONFIG, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifImageConfig as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageConfig_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIMAGECONFIG, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifImageConfig as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifImageConfig(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFIMAGECONFIG, value);
	}
	
    /**
     * Adds a value to property ExifImageConfig as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifImageConfig( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFIMAGECONFIG, value);
	}
    /**
     * Adds a value to property ExifImageConfig from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifImageConfig(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFIMAGECONFIG, value);
	}
	
    /**
     * Adds a value to property ExifImageConfig from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifImageConfig(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFIMAGECONFIG, value);
	}
  

    /**
     * Sets a value of property ExifImageConfig from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifImageConfig( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFIMAGECONFIG, value);
	}
	
    /**
     * Sets a value of property ExifImageConfig from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifImageConfig( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFIMAGECONFIG, value);
	}
    /**
     * Sets a value of property ExifImageConfig from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifImageConfig(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFIMAGECONFIG, value);
	}
	
    /**
     * Sets a value of property ExifImageConfig from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifImageConfig(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFIMAGECONFIG, value);
	}
  


    /**
     * Removes a value of property ExifImageConfig as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifImageConfig( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFIMAGECONFIG, value);
	}
	
    /**
     * Removes a value of property ExifImageConfig as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifImageConfig( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFIMAGECONFIG, value);
	}
    /**
     * Removes a value of property ExifImageConfig given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifImageConfig(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFIMAGECONFIG, value);
	}
	
    /**
     * Removes a value of property ExifImageConfig given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifImageConfig(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFIMAGECONFIG, value);
	}
  
    /**
     * Removes all values of property ExifImageConfig     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifImageConfig( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFIMAGECONFIG);
	}
	
    /**
     * Removes all values of property ExifImageConfig	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifImageConfig() {
		Base.removeAll(this.model, this.getResource(), EXIFIMAGECONFIG);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18fde7a3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifImageDataCharacter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFIMAGEDATACHARACTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18fde7a3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifImageDataCharacter() {
		return Base.has(this.model, this.getResource(), EXIFIMAGEDATACHARACTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18fde7a3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifImageDataCharacter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFIMAGEDATACHARACTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18fde7a3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifImageDataCharacter( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFIMAGEDATACHARACTER);
	}

     /**
     * Get all values of property ExifImageDataCharacter as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifImageDataCharacter_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFIMAGEDATACHARACTER);
	}
	
    /**
     * Get all values of property ExifImageDataCharacter as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifImageDataCharacter_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIMAGEDATACHARACTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifImageDataCharacter as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifImageDataCharacter_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFIMAGEDATACHARACTER);
	}

    /**
     * Get all values of property ExifImageDataCharacter as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifImageDataCharacter_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIMAGEDATACHARACTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifImageDataCharacter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageDataCharacter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFIMAGEDATACHARACTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifImageDataCharacter as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageDataCharacter_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIMAGEDATACHARACTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifImageDataCharacter     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageDataCharacter() {
		return Base.getAll(this.model, this.getResource(), EXIFIMAGEDATACHARACTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifImageDataCharacter as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageDataCharacter_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIMAGEDATACHARACTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifImageDataCharacter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifImageDataCharacter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFIMAGEDATACHARACTER, value);
	}
	
    /**
     * Adds a value to property ExifImageDataCharacter as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifImageDataCharacter( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFIMAGEDATACHARACTER, value);
	}
    /**
     * Adds a value to property ExifImageDataCharacter from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifImageDataCharacter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFIMAGEDATACHARACTER, value);
	}
	
    /**
     * Adds a value to property ExifImageDataCharacter from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifImageDataCharacter(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFIMAGEDATACHARACTER, value);
	}
  

    /**
     * Sets a value of property ExifImageDataCharacter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifImageDataCharacter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFIMAGEDATACHARACTER, value);
	}
	
    /**
     * Sets a value of property ExifImageDataCharacter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifImageDataCharacter( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFIMAGEDATACHARACTER, value);
	}
    /**
     * Sets a value of property ExifImageDataCharacter from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifImageDataCharacter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFIMAGEDATACHARACTER, value);
	}
	
    /**
     * Sets a value of property ExifImageDataCharacter from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifImageDataCharacter(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFIMAGEDATACHARACTER, value);
	}
  


    /**
     * Removes a value of property ExifImageDataCharacter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifImageDataCharacter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFIMAGEDATACHARACTER, value);
	}
	
    /**
     * Removes a value of property ExifImageDataCharacter as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifImageDataCharacter( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFIMAGEDATACHARACTER, value);
	}
    /**
     * Removes a value of property ExifImageDataCharacter given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifImageDataCharacter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFIMAGEDATACHARACTER, value);
	}
	
    /**
     * Removes a value of property ExifImageDataCharacter given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifImageDataCharacter(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFIMAGEDATACHARACTER, value);
	}
  
    /**
     * Removes all values of property ExifImageDataCharacter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifImageDataCharacter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFIMAGEDATACHARACTER);
	}
	
    /**
     * Removes all values of property ExifImageDataCharacter	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifImageDataCharacter() {
		Base.removeAll(this.model, this.getResource(), EXIFIMAGEDATACHARACTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@413bc53f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifImageDataStruct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFIMAGEDATASTRUCT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@413bc53f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifImageDataStruct() {
		return Base.has(this.model, this.getResource(), EXIFIMAGEDATASTRUCT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@413bc53f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifImageDataStruct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFIMAGEDATASTRUCT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@413bc53f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifImageDataStruct( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFIMAGEDATASTRUCT);
	}

     /**
     * Get all values of property ExifImageDataStruct as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifImageDataStruct_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFIMAGEDATASTRUCT);
	}
	
    /**
     * Get all values of property ExifImageDataStruct as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifImageDataStruct_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIMAGEDATASTRUCT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifImageDataStruct as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifImageDataStruct_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFIMAGEDATASTRUCT);
	}

    /**
     * Get all values of property ExifImageDataStruct as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifImageDataStruct_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIMAGEDATASTRUCT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifImageDataStruct     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageDataStruct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFIMAGEDATASTRUCT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifImageDataStruct as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageDataStruct_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIMAGEDATASTRUCT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifImageDataStruct     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageDataStruct() {
		return Base.getAll(this.model, this.getResource(), EXIFIMAGEDATASTRUCT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifImageDataStruct as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageDataStruct_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIMAGEDATASTRUCT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifImageDataStruct as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifImageDataStruct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFIMAGEDATASTRUCT, value);
	}
	
    /**
     * Adds a value to property ExifImageDataStruct as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifImageDataStruct( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFIMAGEDATASTRUCT, value);
	}
    /**
     * Adds a value to property ExifImageDataStruct from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifImageDataStruct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFIMAGEDATASTRUCT, value);
	}
	
    /**
     * Adds a value to property ExifImageDataStruct from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifImageDataStruct(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFIMAGEDATASTRUCT, value);
	}
  

    /**
     * Sets a value of property ExifImageDataStruct from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifImageDataStruct( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFIMAGEDATASTRUCT, value);
	}
	
    /**
     * Sets a value of property ExifImageDataStruct from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifImageDataStruct( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFIMAGEDATASTRUCT, value);
	}
    /**
     * Sets a value of property ExifImageDataStruct from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifImageDataStruct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFIMAGEDATASTRUCT, value);
	}
	
    /**
     * Sets a value of property ExifImageDataStruct from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifImageDataStruct(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFIMAGEDATASTRUCT, value);
	}
  


    /**
     * Removes a value of property ExifImageDataStruct as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifImageDataStruct( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFIMAGEDATASTRUCT, value);
	}
	
    /**
     * Removes a value of property ExifImageDataStruct as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifImageDataStruct( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFIMAGEDATASTRUCT, value);
	}
    /**
     * Removes a value of property ExifImageDataStruct given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifImageDataStruct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFIMAGEDATASTRUCT, value);
	}
	
    /**
     * Removes a value of property ExifImageDataStruct given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifImageDataStruct(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFIMAGEDATASTRUCT, value);
	}
  
    /**
     * Removes all values of property ExifImageDataStruct     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifImageDataStruct( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFIMAGEDATASTRUCT);
	}
	
    /**
     * Removes all values of property ExifImageDataStruct	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifImageDataStruct() {
		Base.removeAll(this.model, this.getResource(), EXIFIMAGEDATASTRUCT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389c6ad9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifImageDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFIMAGEDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389c6ad9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifImageDescription() {
		return Base.has(this.model, this.getResource(), EXIFIMAGEDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389c6ad9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifImageDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFIMAGEDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389c6ad9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifImageDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFIMAGEDESCRIPTION);
	}

     /**
     * Get all values of property ExifImageDescription as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifImageDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFIMAGEDESCRIPTION);
	}
	
    /**
     * Get all values of property ExifImageDescription as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifImageDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIMAGEDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifImageDescription as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifImageDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFIMAGEDESCRIPTION);
	}

    /**
     * Get all values of property ExifImageDescription as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifImageDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIMAGEDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifImageDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFIMAGEDESCRIPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifImageDescription as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIMAGEDESCRIPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifImageDescription     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageDescription() {
		return Base.getAll(this.model, this.getResource(), EXIFIMAGEDESCRIPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifImageDescription as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIMAGEDESCRIPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifImageDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifImageDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFIMAGEDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property ExifImageDescription as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifImageDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFIMAGEDESCRIPTION, value);
	}
    /**
     * Adds a value to property ExifImageDescription from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifImageDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFIMAGEDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property ExifImageDescription from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifImageDescription(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFIMAGEDESCRIPTION, value);
	}
  

    /**
     * Sets a value of property ExifImageDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifImageDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFIMAGEDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property ExifImageDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifImageDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFIMAGEDESCRIPTION, value);
	}
    /**
     * Sets a value of property ExifImageDescription from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifImageDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFIMAGEDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property ExifImageDescription from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifImageDescription(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFIMAGEDESCRIPTION, value);
	}
  


    /**
     * Removes a value of property ExifImageDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifImageDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFIMAGEDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property ExifImageDescription as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifImageDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFIMAGEDESCRIPTION, value);
	}
    /**
     * Removes a value of property ExifImageDescription given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifImageDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFIMAGEDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property ExifImageDescription given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifImageDescription(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFIMAGEDESCRIPTION, value);
	}
  
    /**
     * Removes all values of property ExifImageDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifImageDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFIMAGEDESCRIPTION);
	}
	
    /**
     * Removes all values of property ExifImageDescription	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifImageDescription() {
		Base.removeAll(this.model, this.getResource(), EXIFIMAGEDESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2142ea45 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFIMAGELENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2142ea45 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifImageLength() {
		return Base.has(this.model, this.getResource(), EXIFIMAGELENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2142ea45 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFIMAGELENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2142ea45 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifImageLength( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFIMAGELENGTH);
	}

     /**
     * Get all values of property ExifImageLength as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifImageLength_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFIMAGELENGTH);
	}
	
    /**
     * Get all values of property ExifImageLength as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifImageLength_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIMAGELENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifImageLength as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifImageLength_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFIMAGELENGTH);
	}

    /**
     * Get all values of property ExifImageLength as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifImageLength_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIMAGELENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifImageLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFIMAGELENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifImageLength as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageLength_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIMAGELENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifImageLength     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageLength() {
		return Base.getAll(this.model, this.getResource(), EXIFIMAGELENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifImageLength as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageLength_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIMAGELENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifImageLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFIMAGELENGTH, value);
	}
	
    /**
     * Adds a value to property ExifImageLength as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifImageLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFIMAGELENGTH, value);
	}
    /**
     * Adds a value to property ExifImageLength from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFIMAGELENGTH, value);
	}
	
    /**
     * Adds a value to property ExifImageLength from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifImageLength(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFIMAGELENGTH, value);
	}
  

    /**
     * Sets a value of property ExifImageLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifImageLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFIMAGELENGTH, value);
	}
	
    /**
     * Sets a value of property ExifImageLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifImageLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFIMAGELENGTH, value);
	}
    /**
     * Sets a value of property ExifImageLength from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFIMAGELENGTH, value);
	}
	
    /**
     * Sets a value of property ExifImageLength from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifImageLength(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFIMAGELENGTH, value);
	}
  


    /**
     * Removes a value of property ExifImageLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifImageLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFIMAGELENGTH, value);
	}
	
    /**
     * Removes a value of property ExifImageLength as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifImageLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFIMAGELENGTH, value);
	}
    /**
     * Removes a value of property ExifImageLength given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFIMAGELENGTH, value);
	}
	
    /**
     * Removes a value of property ExifImageLength given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifImageLength(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFIMAGELENGTH, value);
	}
  
    /**
     * Removes all values of property ExifImageLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifImageLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFIMAGELENGTH);
	}
	
    /**
     * Removes all values of property ExifImageLength	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifImageLength() {
		Base.removeAll(this.model, this.getResource(), EXIFIMAGELENGTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10ddc385 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifImageUniqueID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFIMAGEUNIQUEID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10ddc385 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifImageUniqueID() {
		return Base.has(this.model, this.getResource(), EXIFIMAGEUNIQUEID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10ddc385 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifImageUniqueID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFIMAGEUNIQUEID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10ddc385 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifImageUniqueID( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFIMAGEUNIQUEID);
	}

     /**
     * Get all values of property ExifImageUniqueID as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifImageUniqueID_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFIMAGEUNIQUEID);
	}
	
    /**
     * Get all values of property ExifImageUniqueID as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifImageUniqueID_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIMAGEUNIQUEID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifImageUniqueID as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifImageUniqueID_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFIMAGEUNIQUEID);
	}

    /**
     * Get all values of property ExifImageUniqueID as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifImageUniqueID_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIMAGEUNIQUEID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifImageUniqueID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageUniqueID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFIMAGEUNIQUEID, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifImageUniqueID as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageUniqueID_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIMAGEUNIQUEID, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifImageUniqueID     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageUniqueID() {
		return Base.getAll(this.model, this.getResource(), EXIFIMAGEUNIQUEID, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifImageUniqueID as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageUniqueID_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIMAGEUNIQUEID, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifImageUniqueID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifImageUniqueID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFIMAGEUNIQUEID, value);
	}
	
    /**
     * Adds a value to property ExifImageUniqueID as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifImageUniqueID( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFIMAGEUNIQUEID, value);
	}
    /**
     * Adds a value to property ExifImageUniqueID from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifImageUniqueID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFIMAGEUNIQUEID, value);
	}
	
    /**
     * Adds a value to property ExifImageUniqueID from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifImageUniqueID(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFIMAGEUNIQUEID, value);
	}
  

    /**
     * Sets a value of property ExifImageUniqueID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifImageUniqueID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFIMAGEUNIQUEID, value);
	}
	
    /**
     * Sets a value of property ExifImageUniqueID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifImageUniqueID( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFIMAGEUNIQUEID, value);
	}
    /**
     * Sets a value of property ExifImageUniqueID from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifImageUniqueID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFIMAGEUNIQUEID, value);
	}
	
    /**
     * Sets a value of property ExifImageUniqueID from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifImageUniqueID(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFIMAGEUNIQUEID, value);
	}
  


    /**
     * Removes a value of property ExifImageUniqueID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifImageUniqueID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFIMAGEUNIQUEID, value);
	}
	
    /**
     * Removes a value of property ExifImageUniqueID as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifImageUniqueID( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFIMAGEUNIQUEID, value);
	}
    /**
     * Removes a value of property ExifImageUniqueID given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifImageUniqueID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFIMAGEUNIQUEID, value);
	}
	
    /**
     * Removes a value of property ExifImageUniqueID given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifImageUniqueID(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFIMAGEUNIQUEID, value);
	}
  
    /**
     * Removes all values of property ExifImageUniqueID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifImageUniqueID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFIMAGEUNIQUEID);
	}
	
    /**
     * Removes all values of property ExifImageUniqueID	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifImageUniqueID() {
		Base.removeAll(this.model, this.getResource(), EXIFIMAGEUNIQUEID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f870f8c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFIMAGEWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f870f8c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifImageWidth() {
		return Base.has(this.model, this.getResource(), EXIFIMAGEWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f870f8c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFIMAGEWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f870f8c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifImageWidth( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFIMAGEWIDTH);
	}

     /**
     * Get all values of property ExifImageWidth as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifImageWidth_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFIMAGEWIDTH);
	}
	
    /**
     * Get all values of property ExifImageWidth as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifImageWidth_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIMAGEWIDTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifImageWidth as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifImageWidth_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFIMAGEWIDTH);
	}

    /**
     * Get all values of property ExifImageWidth as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifImageWidth_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIMAGEWIDTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifImageWidth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFIMAGEWIDTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifImageWidth as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageWidth_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIMAGEWIDTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifImageWidth     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageWidth() {
		return Base.getAll(this.model, this.getResource(), EXIFIMAGEWIDTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifImageWidth as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifImageWidth_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIMAGEWIDTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifImageWidth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFIMAGEWIDTH, value);
	}
	
    /**
     * Adds a value to property ExifImageWidth as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifImageWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFIMAGEWIDTH, value);
	}
    /**
     * Adds a value to property ExifImageWidth from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFIMAGEWIDTH, value);
	}
	
    /**
     * Adds a value to property ExifImageWidth from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifImageWidth(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFIMAGEWIDTH, value);
	}
  

    /**
     * Sets a value of property ExifImageWidth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifImageWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFIMAGEWIDTH, value);
	}
	
    /**
     * Sets a value of property ExifImageWidth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifImageWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFIMAGEWIDTH, value);
	}
    /**
     * Sets a value of property ExifImageWidth from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFIMAGEWIDTH, value);
	}
	
    /**
     * Sets a value of property ExifImageWidth from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifImageWidth(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFIMAGEWIDTH, value);
	}
  


    /**
     * Removes a value of property ExifImageWidth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifImageWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFIMAGEWIDTH, value);
	}
	
    /**
     * Removes a value of property ExifImageWidth as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifImageWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFIMAGEWIDTH, value);
	}
    /**
     * Removes a value of property ExifImageWidth given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFIMAGEWIDTH, value);
	}
	
    /**
     * Removes a value of property ExifImageWidth given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifImageWidth(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFIMAGEWIDTH, value);
	}
  
    /**
     * Removes all values of property ExifImageWidth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifImageWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFIMAGEWIDTH);
	}
	
    /**
     * Removes all values of property ExifImageWidth	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifImageWidth() {
		Base.removeAll(this.model, this.getResource(), EXIFIMAGEWIDTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@489c34f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifInteropInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFINTEROPINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@489c34f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifInteropInfo() {
		return Base.has(this.model, this.getResource(), EXIFINTEROPINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@489c34f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifInteropInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFINTEROPINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@489c34f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifInteropInfo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFINTEROPINFO);
	}

     /**
     * Get all values of property ExifInteropInfo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifInteropInfo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFINTEROPINFO);
	}
	
    /**
     * Get all values of property ExifInteropInfo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifInteropInfo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFINTEROPINFO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifInteropInfo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifInteropInfo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFINTEROPINFO);
	}

    /**
     * Get all values of property ExifInteropInfo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifInteropInfo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFINTEROPINFO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifInteropInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteropInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFINTEROPINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifInteropInfo as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteropInfo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFINTEROPINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifInteropInfo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteropInfo() {
		return Base.getAll(this.model, this.getResource(), EXIFINTEROPINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifInteropInfo as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteropInfo_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFINTEROPINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifInteropInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifInteropInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFINTEROPINFO, value);
	}
	
    /**
     * Adds a value to property ExifInteropInfo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifInteropInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFINTEROPINFO, value);
	}
    /**
     * Adds a value to property ExifInteropInfo from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifInteropInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFINTEROPINFO, value);
	}
	
    /**
     * Adds a value to property ExifInteropInfo from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifInteropInfo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFINTEROPINFO, value);
	}
  

    /**
     * Sets a value of property ExifInteropInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifInteropInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFINTEROPINFO, value);
	}
	
    /**
     * Sets a value of property ExifInteropInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifInteropInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFINTEROPINFO, value);
	}
    /**
     * Sets a value of property ExifInteropInfo from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifInteropInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFINTEROPINFO, value);
	}
	
    /**
     * Sets a value of property ExifInteropInfo from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifInteropInfo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFINTEROPINFO, value);
	}
  


    /**
     * Removes a value of property ExifInteropInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifInteropInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFINTEROPINFO, value);
	}
	
    /**
     * Removes a value of property ExifInteropInfo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifInteropInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFINTEROPINFO, value);
	}
    /**
     * Removes a value of property ExifInteropInfo given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifInteropInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFINTEROPINFO, value);
	}
	
    /**
     * Removes a value of property ExifInteropInfo given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifInteropInfo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFINTEROPINFO, value);
	}
  
    /**
     * Removes all values of property ExifInteropInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifInteropInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFINTEROPINFO);
	}
	
    /**
     * Removes all values of property ExifInteropInfo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifInteropInfo() {
		Base.removeAll(this.model, this.getResource(), EXIFINTEROPINFO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1feb89f9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifInteroperabilityIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFINTEROPERABILITYIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1feb89f9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifInteroperabilityIFDPointer() {
		return Base.has(this.model, this.getResource(), EXIFINTEROPERABILITYIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1feb89f9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifInteroperabilityIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFINTEROPERABILITYIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1feb89f9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifInteroperabilityIFDPointer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFINTEROPERABILITYIFDPOINTER);
	}

     /**
     * Get all values of property ExifInteroperabilityIFDPointer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifInteroperabilityIFDPointer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFINTEROPERABILITYIFDPOINTER);
	}
	
    /**
     * Get all values of property ExifInteroperabilityIFDPointer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifInteroperabilityIFDPointer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFINTEROPERABILITYIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifInteroperabilityIFDPointer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifInteroperabilityIFDPointer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFINTEROPERABILITYIFDPOINTER);
	}

    /**
     * Get all values of property ExifInteroperabilityIFDPointer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifInteroperabilityIFDPointer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFINTEROPERABILITYIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifInteroperabilityIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteroperabilityIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFINTEROPERABILITYIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifInteroperabilityIFDPointer as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteroperabilityIFDPointer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFINTEROPERABILITYIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifInteroperabilityIFDPointer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteroperabilityIFDPointer() {
		return Base.getAll(this.model, this.getResource(), EXIFINTEROPERABILITYIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifInteroperabilityIFDPointer as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteroperabilityIFDPointer_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFINTEROPERABILITYIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifInteroperabilityIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifInteroperabilityIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFINTEROPERABILITYIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property ExifInteroperabilityIFDPointer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifInteroperabilityIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFINTEROPERABILITYIFDPOINTER, value);
	}
    /**
     * Adds a value to property ExifInteroperabilityIFDPointer from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifInteroperabilityIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFINTEROPERABILITYIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property ExifInteroperabilityIFDPointer from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifInteroperabilityIFDPointer(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFINTEROPERABILITYIFDPOINTER, value);
	}
  

    /**
     * Sets a value of property ExifInteroperabilityIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifInteroperabilityIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFINTEROPERABILITYIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property ExifInteroperabilityIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifInteroperabilityIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFINTEROPERABILITYIFDPOINTER, value);
	}
    /**
     * Sets a value of property ExifInteroperabilityIFDPointer from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifInteroperabilityIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFINTEROPERABILITYIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property ExifInteroperabilityIFDPointer from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifInteroperabilityIFDPointer(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFINTEROPERABILITYIFDPOINTER, value);
	}
  


    /**
     * Removes a value of property ExifInteroperabilityIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifInteroperabilityIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFINTEROPERABILITYIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property ExifInteroperabilityIFDPointer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifInteroperabilityIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFINTEROPERABILITYIFDPOINTER, value);
	}
    /**
     * Removes a value of property ExifInteroperabilityIFDPointer given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifInteroperabilityIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFINTEROPERABILITYIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property ExifInteroperabilityIFDPointer given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifInteroperabilityIFDPointer(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFINTEROPERABILITYIFDPOINTER, value);
	}
  
    /**
     * Removes all values of property ExifInteroperabilityIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifInteroperabilityIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFINTEROPERABILITYIFDPOINTER);
	}
	
    /**
     * Removes all values of property ExifInteroperabilityIFDPointer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifInteroperabilityIFDPointer() {
		Base.removeAll(this.model, this.getResource(), EXIFINTEROPERABILITYIFDPOINTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32b25421 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifInteroperabilityIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFINTEROPERABILITYINDEX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32b25421 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifInteroperabilityIndex() {
		return Base.has(this.model, this.getResource(), EXIFINTEROPERABILITYINDEX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32b25421 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifInteroperabilityIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFINTEROPERABILITYINDEX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32b25421 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifInteroperabilityIndex( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFINTEROPERABILITYINDEX);
	}

     /**
     * Get all values of property ExifInteroperabilityIndex as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifInteroperabilityIndex_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFINTEROPERABILITYINDEX);
	}
	
    /**
     * Get all values of property ExifInteroperabilityIndex as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifInteroperabilityIndex_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFINTEROPERABILITYINDEX, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifInteroperabilityIndex as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifInteroperabilityIndex_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFINTEROPERABILITYINDEX);
	}

    /**
     * Get all values of property ExifInteroperabilityIndex as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifInteroperabilityIndex_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFINTEROPERABILITYINDEX, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifInteroperabilityIndex     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteroperabilityIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFINTEROPERABILITYINDEX, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifInteroperabilityIndex as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteroperabilityIndex_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFINTEROPERABILITYINDEX, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifInteroperabilityIndex     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteroperabilityIndex() {
		return Base.getAll(this.model, this.getResource(), EXIFINTEROPERABILITYINDEX, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifInteroperabilityIndex as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteroperabilityIndex_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFINTEROPERABILITYINDEX, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifInteroperabilityIndex as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifInteroperabilityIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFINTEROPERABILITYINDEX, value);
	}
	
    /**
     * Adds a value to property ExifInteroperabilityIndex as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifInteroperabilityIndex( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFINTEROPERABILITYINDEX, value);
	}
    /**
     * Adds a value to property ExifInteroperabilityIndex from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifInteroperabilityIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFINTEROPERABILITYINDEX, value);
	}
	
    /**
     * Adds a value to property ExifInteroperabilityIndex from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifInteroperabilityIndex(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFINTEROPERABILITYINDEX, value);
	}
  

    /**
     * Sets a value of property ExifInteroperabilityIndex from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifInteroperabilityIndex( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFINTEROPERABILITYINDEX, value);
	}
	
    /**
     * Sets a value of property ExifInteroperabilityIndex from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifInteroperabilityIndex( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFINTEROPERABILITYINDEX, value);
	}
    /**
     * Sets a value of property ExifInteroperabilityIndex from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifInteroperabilityIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFINTEROPERABILITYINDEX, value);
	}
	
    /**
     * Sets a value of property ExifInteroperabilityIndex from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifInteroperabilityIndex(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFINTEROPERABILITYINDEX, value);
	}
  


    /**
     * Removes a value of property ExifInteroperabilityIndex as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifInteroperabilityIndex( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFINTEROPERABILITYINDEX, value);
	}
	
    /**
     * Removes a value of property ExifInteroperabilityIndex as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifInteroperabilityIndex( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFINTEROPERABILITYINDEX, value);
	}
    /**
     * Removes a value of property ExifInteroperabilityIndex given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifInteroperabilityIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFINTEROPERABILITYINDEX, value);
	}
	
    /**
     * Removes a value of property ExifInteroperabilityIndex given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifInteroperabilityIndex(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFINTEROPERABILITYINDEX, value);
	}
  
    /**
     * Removes all values of property ExifInteroperabilityIndex     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifInteroperabilityIndex( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFINTEROPERABILITYINDEX);
	}
	
    /**
     * Removes all values of property ExifInteroperabilityIndex	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifInteroperabilityIndex() {
		Base.removeAll(this.model, this.getResource(), EXIFINTEROPERABILITYINDEX);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74dcd458 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifInteroperabilityVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFINTEROPERABILITYVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74dcd458 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifInteroperabilityVersion() {
		return Base.has(this.model, this.getResource(), EXIFINTEROPERABILITYVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74dcd458 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifInteroperabilityVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFINTEROPERABILITYVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74dcd458 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifInteroperabilityVersion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFINTEROPERABILITYVERSION);
	}

     /**
     * Get all values of property ExifInteroperabilityVersion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifInteroperabilityVersion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFINTEROPERABILITYVERSION);
	}
	
    /**
     * Get all values of property ExifInteroperabilityVersion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifInteroperabilityVersion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFINTEROPERABILITYVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifInteroperabilityVersion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifInteroperabilityVersion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFINTEROPERABILITYVERSION);
	}

    /**
     * Get all values of property ExifInteroperabilityVersion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifInteroperabilityVersion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFINTEROPERABILITYVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifInteroperabilityVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteroperabilityVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFINTEROPERABILITYVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifInteroperabilityVersion as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteroperabilityVersion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFINTEROPERABILITYVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifInteroperabilityVersion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteroperabilityVersion() {
		return Base.getAll(this.model, this.getResource(), EXIFINTEROPERABILITYVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifInteroperabilityVersion as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifInteroperabilityVersion_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFINTEROPERABILITYVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifInteroperabilityVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifInteroperabilityVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFINTEROPERABILITYVERSION, value);
	}
	
    /**
     * Adds a value to property ExifInteroperabilityVersion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifInteroperabilityVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFINTEROPERABILITYVERSION, value);
	}
    /**
     * Adds a value to property ExifInteroperabilityVersion from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifInteroperabilityVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFINTEROPERABILITYVERSION, value);
	}
	
    /**
     * Adds a value to property ExifInteroperabilityVersion from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifInteroperabilityVersion(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFINTEROPERABILITYVERSION, value);
	}
  

    /**
     * Sets a value of property ExifInteroperabilityVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifInteroperabilityVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFINTEROPERABILITYVERSION, value);
	}
	
    /**
     * Sets a value of property ExifInteroperabilityVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifInteroperabilityVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFINTEROPERABILITYVERSION, value);
	}
    /**
     * Sets a value of property ExifInteroperabilityVersion from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifInteroperabilityVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFINTEROPERABILITYVERSION, value);
	}
	
    /**
     * Sets a value of property ExifInteroperabilityVersion from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifInteroperabilityVersion(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFINTEROPERABILITYVERSION, value);
	}
  


    /**
     * Removes a value of property ExifInteroperabilityVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifInteroperabilityVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFINTEROPERABILITYVERSION, value);
	}
	
    /**
     * Removes a value of property ExifInteroperabilityVersion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifInteroperabilityVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFINTEROPERABILITYVERSION, value);
	}
    /**
     * Removes a value of property ExifInteroperabilityVersion given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifInteroperabilityVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFINTEROPERABILITYVERSION, value);
	}
	
    /**
     * Removes a value of property ExifInteroperabilityVersion given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifInteroperabilityVersion(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFINTEROPERABILITYVERSION, value);
	}
  
    /**
     * Removes all values of property ExifInteroperabilityVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifInteroperabilityVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFINTEROPERABILITYVERSION);
	}
	
    /**
     * Removes all values of property ExifInteroperabilityVersion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifInteroperabilityVersion() {
		Base.removeAll(this.model, this.getResource(), EXIFINTEROPERABILITYVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f05c0eb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifIsoSpeedRatings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFISOSPEEDRATINGS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f05c0eb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifIsoSpeedRatings() {
		return Base.has(this.model, this.getResource(), EXIFISOSPEEDRATINGS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f05c0eb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifIsoSpeedRatings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFISOSPEEDRATINGS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f05c0eb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifIsoSpeedRatings( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFISOSPEEDRATINGS);
	}

     /**
     * Get all values of property ExifIsoSpeedRatings as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifIsoSpeedRatings_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFISOSPEEDRATINGS);
	}
	
    /**
     * Get all values of property ExifIsoSpeedRatings as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifIsoSpeedRatings_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFISOSPEEDRATINGS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifIsoSpeedRatings as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifIsoSpeedRatings_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFISOSPEEDRATINGS);
	}

    /**
     * Get all values of property ExifIsoSpeedRatings as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifIsoSpeedRatings_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFISOSPEEDRATINGS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifIsoSpeedRatings     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifIsoSpeedRatings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFISOSPEEDRATINGS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifIsoSpeedRatings as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifIsoSpeedRatings_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFISOSPEEDRATINGS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifIsoSpeedRatings     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifIsoSpeedRatings() {
		return Base.getAll(this.model, this.getResource(), EXIFISOSPEEDRATINGS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifIsoSpeedRatings as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifIsoSpeedRatings_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFISOSPEEDRATINGS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifIsoSpeedRatings as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifIsoSpeedRatings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFISOSPEEDRATINGS, value);
	}
	
    /**
     * Adds a value to property ExifIsoSpeedRatings as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifIsoSpeedRatings( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFISOSPEEDRATINGS, value);
	}
    /**
     * Adds a value to property ExifIsoSpeedRatings from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifIsoSpeedRatings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFISOSPEEDRATINGS, value);
	}
	
    /**
     * Adds a value to property ExifIsoSpeedRatings from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifIsoSpeedRatings(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFISOSPEEDRATINGS, value);
	}
  

    /**
     * Sets a value of property ExifIsoSpeedRatings from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifIsoSpeedRatings( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFISOSPEEDRATINGS, value);
	}
	
    /**
     * Sets a value of property ExifIsoSpeedRatings from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifIsoSpeedRatings( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFISOSPEEDRATINGS, value);
	}
    /**
     * Sets a value of property ExifIsoSpeedRatings from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifIsoSpeedRatings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFISOSPEEDRATINGS, value);
	}
	
    /**
     * Sets a value of property ExifIsoSpeedRatings from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifIsoSpeedRatings(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFISOSPEEDRATINGS, value);
	}
  


    /**
     * Removes a value of property ExifIsoSpeedRatings as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifIsoSpeedRatings( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFISOSPEEDRATINGS, value);
	}
	
    /**
     * Removes a value of property ExifIsoSpeedRatings as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifIsoSpeedRatings( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFISOSPEEDRATINGS, value);
	}
    /**
     * Removes a value of property ExifIsoSpeedRatings given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifIsoSpeedRatings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFISOSPEEDRATINGS, value);
	}
	
    /**
     * Removes a value of property ExifIsoSpeedRatings given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifIsoSpeedRatings(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFISOSPEEDRATINGS, value);
	}
  
    /**
     * Removes all values of property ExifIsoSpeedRatings     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifIsoSpeedRatings( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFISOSPEEDRATINGS);
	}
	
    /**
     * Removes all values of property ExifIsoSpeedRatings	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifIsoSpeedRatings() {
		Base.removeAll(this.model, this.getResource(), EXIFISOSPEEDRATINGS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71aaff0f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifJpegInterchangeFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFJPEGINTERCHANGEFORMAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71aaff0f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifJpegInterchangeFormat() {
		return Base.has(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71aaff0f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifJpegInterchangeFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFJPEGINTERCHANGEFORMAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71aaff0f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifJpegInterchangeFormat( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMAT);
	}

     /**
     * Get all values of property ExifJpegInterchangeFormat as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifJpegInterchangeFormat_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFJPEGINTERCHANGEFORMAT);
	}
	
    /**
     * Get all values of property ExifJpegInterchangeFormat as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifJpegInterchangeFormat_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFJPEGINTERCHANGEFORMAT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifJpegInterchangeFormat as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifJpegInterchangeFormat_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMAT);
	}

    /**
     * Get all values of property ExifJpegInterchangeFormat as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifJpegInterchangeFormat_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMAT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifJpegInterchangeFormat     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifJpegInterchangeFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFJPEGINTERCHANGEFORMAT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifJpegInterchangeFormat as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifJpegInterchangeFormat_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFJPEGINTERCHANGEFORMAT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifJpegInterchangeFormat     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifJpegInterchangeFormat() {
		return Base.getAll(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMAT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifJpegInterchangeFormat as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifJpegInterchangeFormat_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMAT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifJpegInterchangeFormat as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifJpegInterchangeFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFJPEGINTERCHANGEFORMAT, value);
	}
	
    /**
     * Adds a value to property ExifJpegInterchangeFormat as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifJpegInterchangeFormat( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMAT, value);
	}
    /**
     * Adds a value to property ExifJpegInterchangeFormat from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifJpegInterchangeFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFJPEGINTERCHANGEFORMAT, value);
	}
	
    /**
     * Adds a value to property ExifJpegInterchangeFormat from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifJpegInterchangeFormat(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMAT, value);
	}
  

    /**
     * Sets a value of property ExifJpegInterchangeFormat from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifJpegInterchangeFormat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFJPEGINTERCHANGEFORMAT, value);
	}
	
    /**
     * Sets a value of property ExifJpegInterchangeFormat from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifJpegInterchangeFormat( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMAT, value);
	}
    /**
     * Sets a value of property ExifJpegInterchangeFormat from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifJpegInterchangeFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFJPEGINTERCHANGEFORMAT, value);
	}
	
    /**
     * Sets a value of property ExifJpegInterchangeFormat from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifJpegInterchangeFormat(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMAT, value);
	}
  


    /**
     * Removes a value of property ExifJpegInterchangeFormat as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifJpegInterchangeFormat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFJPEGINTERCHANGEFORMAT, value);
	}
	
    /**
     * Removes a value of property ExifJpegInterchangeFormat as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifJpegInterchangeFormat( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMAT, value);
	}
    /**
     * Removes a value of property ExifJpegInterchangeFormat given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifJpegInterchangeFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFJPEGINTERCHANGEFORMAT, value);
	}
	
    /**
     * Removes a value of property ExifJpegInterchangeFormat given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifJpegInterchangeFormat(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMAT, value);
	}
  
    /**
     * Removes all values of property ExifJpegInterchangeFormat     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifJpegInterchangeFormat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFJPEGINTERCHANGEFORMAT);
	}
	
    /**
     * Removes all values of property ExifJpegInterchangeFormat	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifJpegInterchangeFormat() {
		Base.removeAll(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMAT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f10e7a4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifJpegInterchangeFormatLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFJPEGINTERCHANGEFORMATLENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f10e7a4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifJpegInterchangeFormatLength() {
		return Base.has(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMATLENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f10e7a4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifJpegInterchangeFormatLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFJPEGINTERCHANGEFORMATLENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f10e7a4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifJpegInterchangeFormatLength( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMATLENGTH);
	}

     /**
     * Get all values of property ExifJpegInterchangeFormatLength as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifJpegInterchangeFormatLength_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFJPEGINTERCHANGEFORMATLENGTH);
	}
	
    /**
     * Get all values of property ExifJpegInterchangeFormatLength as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifJpegInterchangeFormatLength_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFJPEGINTERCHANGEFORMATLENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifJpegInterchangeFormatLength as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifJpegInterchangeFormatLength_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMATLENGTH);
	}

    /**
     * Get all values of property ExifJpegInterchangeFormatLength as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifJpegInterchangeFormatLength_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMATLENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifJpegInterchangeFormatLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifJpegInterchangeFormatLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFJPEGINTERCHANGEFORMATLENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifJpegInterchangeFormatLength as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifJpegInterchangeFormatLength_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFJPEGINTERCHANGEFORMATLENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifJpegInterchangeFormatLength     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifJpegInterchangeFormatLength() {
		return Base.getAll(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMATLENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifJpegInterchangeFormatLength as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifJpegInterchangeFormatLength_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMATLENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifJpegInterchangeFormatLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifJpegInterchangeFormatLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFJPEGINTERCHANGEFORMATLENGTH, value);
	}
	
    /**
     * Adds a value to property ExifJpegInterchangeFormatLength as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifJpegInterchangeFormatLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMATLENGTH, value);
	}
    /**
     * Adds a value to property ExifJpegInterchangeFormatLength from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifJpegInterchangeFormatLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFJPEGINTERCHANGEFORMATLENGTH, value);
	}
	
    /**
     * Adds a value to property ExifJpegInterchangeFormatLength from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifJpegInterchangeFormatLength(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMATLENGTH, value);
	}
  

    /**
     * Sets a value of property ExifJpegInterchangeFormatLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifJpegInterchangeFormatLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFJPEGINTERCHANGEFORMATLENGTH, value);
	}
	
    /**
     * Sets a value of property ExifJpegInterchangeFormatLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifJpegInterchangeFormatLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMATLENGTH, value);
	}
    /**
     * Sets a value of property ExifJpegInterchangeFormatLength from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifJpegInterchangeFormatLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFJPEGINTERCHANGEFORMATLENGTH, value);
	}
	
    /**
     * Sets a value of property ExifJpegInterchangeFormatLength from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifJpegInterchangeFormatLength(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMATLENGTH, value);
	}
  


    /**
     * Removes a value of property ExifJpegInterchangeFormatLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifJpegInterchangeFormatLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFJPEGINTERCHANGEFORMATLENGTH, value);
	}
	
    /**
     * Removes a value of property ExifJpegInterchangeFormatLength as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifJpegInterchangeFormatLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMATLENGTH, value);
	}
    /**
     * Removes a value of property ExifJpegInterchangeFormatLength given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifJpegInterchangeFormatLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFJPEGINTERCHANGEFORMATLENGTH, value);
	}
	
    /**
     * Removes a value of property ExifJpegInterchangeFormatLength given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifJpegInterchangeFormatLength(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMATLENGTH, value);
	}
  
    /**
     * Removes all values of property ExifJpegInterchangeFormatLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifJpegInterchangeFormatLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFJPEGINTERCHANGEFORMATLENGTH);
	}
	
    /**
     * Removes all values of property ExifJpegInterchangeFormatLength	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifJpegInterchangeFormatLength() {
		Base.removeAll(this.model, this.getResource(), EXIFJPEGINTERCHANGEFORMATLENGTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@687307e2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFLENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@687307e2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifLength() {
		return Base.has(this.model, this.getResource(), EXIFLENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@687307e2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFLENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@687307e2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifLength( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFLENGTH);
	}

     /**
     * Get all values of property ExifLength as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifLength_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFLENGTH);
	}
	
    /**
     * Get all values of property ExifLength as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifLength_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFLENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifLength as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifLength_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFLENGTH);
	}

    /**
     * Get all values of property ExifLength as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifLength_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFLENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFLENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifLength as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifLength_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFLENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifLength     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifLength() {
		return Base.getAll(this.model, this.getResource(), EXIFLENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifLength as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifLength_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFLENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFLENGTH, value);
	}
	
    /**
     * Adds a value to property ExifLength as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFLENGTH, value);
	}
    /**
     * Adds a value to property ExifLength from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFLENGTH, value);
	}
	
    /**
     * Adds a value to property ExifLength from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifLength(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFLENGTH, value);
	}
  

    /**
     * Sets a value of property ExifLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFLENGTH, value);
	}
	
    /**
     * Sets a value of property ExifLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFLENGTH, value);
	}
    /**
     * Sets a value of property ExifLength from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFLENGTH, value);
	}
	
    /**
     * Sets a value of property ExifLength from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifLength(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFLENGTH, value);
	}
  


    /**
     * Removes a value of property ExifLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFLENGTH, value);
	}
	
    /**
     * Removes a value of property ExifLength as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFLENGTH, value);
	}
    /**
     * Removes a value of property ExifLength given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFLENGTH, value);
	}
	
    /**
     * Removes a value of property ExifLength given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifLength(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFLENGTH, value);
	}
  
    /**
     * Removes all values of property ExifLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFLENGTH);
	}
	
    /**
     * Removes all values of property ExifLength	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifLength() {
		Base.removeAll(this.model, this.getResource(), EXIFLENGTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@158fee1a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifLightSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFLIGHTSOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@158fee1a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifLightSource() {
		return Base.has(this.model, this.getResource(), EXIFLIGHTSOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@158fee1a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifLightSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFLIGHTSOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@158fee1a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifLightSource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFLIGHTSOURCE);
	}

     /**
     * Get all values of property ExifLightSource as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifLightSource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFLIGHTSOURCE);
	}
	
    /**
     * Get all values of property ExifLightSource as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifLightSource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFLIGHTSOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifLightSource as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifLightSource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFLIGHTSOURCE);
	}

    /**
     * Get all values of property ExifLightSource as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifLightSource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFLIGHTSOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifLightSource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifLightSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFLIGHTSOURCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifLightSource as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifLightSource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFLIGHTSOURCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifLightSource     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifLightSource() {
		return Base.getAll(this.model, this.getResource(), EXIFLIGHTSOURCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifLightSource as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifLightSource_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFLIGHTSOURCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifLightSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifLightSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFLIGHTSOURCE, value);
	}
	
    /**
     * Adds a value to property ExifLightSource as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifLightSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFLIGHTSOURCE, value);
	}
    /**
     * Adds a value to property ExifLightSource from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifLightSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFLIGHTSOURCE, value);
	}
	
    /**
     * Adds a value to property ExifLightSource from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifLightSource(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFLIGHTSOURCE, value);
	}
  

    /**
     * Sets a value of property ExifLightSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifLightSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFLIGHTSOURCE, value);
	}
	
    /**
     * Sets a value of property ExifLightSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifLightSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFLIGHTSOURCE, value);
	}
    /**
     * Sets a value of property ExifLightSource from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifLightSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFLIGHTSOURCE, value);
	}
	
    /**
     * Sets a value of property ExifLightSource from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifLightSource(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFLIGHTSOURCE, value);
	}
  


    /**
     * Removes a value of property ExifLightSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifLightSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFLIGHTSOURCE, value);
	}
	
    /**
     * Removes a value of property ExifLightSource as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifLightSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFLIGHTSOURCE, value);
	}
    /**
     * Removes a value of property ExifLightSource given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifLightSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFLIGHTSOURCE, value);
	}
	
    /**
     * Removes a value of property ExifLightSource given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifLightSource(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFLIGHTSOURCE, value);
	}
  
    /**
     * Removes all values of property ExifLightSource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifLightSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFLIGHTSOURCE);
	}
	
    /**
     * Removes all values of property ExifLightSource	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifLightSource() {
		Base.removeAll(this.model, this.getResource(), EXIFLIGHTSOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8bf290b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifMake(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFMAKE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8bf290b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifMake() {
		return Base.has(this.model, this.getResource(), EXIFMAKE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8bf290b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifMake(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFMAKE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8bf290b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifMake( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFMAKE);
	}

     /**
     * Get all values of property ExifMake as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifMake_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFMAKE);
	}
	
    /**
     * Get all values of property ExifMake as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifMake_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFMAKE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifMake as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifMake_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFMAKE);
	}

    /**
     * Get all values of property ExifMake as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifMake_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFMAKE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifMake     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMake(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFMAKE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifMake as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMake_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFMAKE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifMake     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMake() {
		return Base.getAll(this.model, this.getResource(), EXIFMAKE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifMake as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMake_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFMAKE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifMake as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifMake(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFMAKE, value);
	}
	
    /**
     * Adds a value to property ExifMake as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifMake( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFMAKE, value);
	}
    /**
     * Adds a value to property ExifMake from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifMake(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFMAKE, value);
	}
	
    /**
     * Adds a value to property ExifMake from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifMake(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFMAKE, value);
	}
  

    /**
     * Sets a value of property ExifMake from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifMake( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFMAKE, value);
	}
	
    /**
     * Sets a value of property ExifMake from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifMake( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFMAKE, value);
	}
    /**
     * Sets a value of property ExifMake from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifMake(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFMAKE, value);
	}
	
    /**
     * Sets a value of property ExifMake from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifMake(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFMAKE, value);
	}
  


    /**
     * Removes a value of property ExifMake as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifMake( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFMAKE, value);
	}
	
    /**
     * Removes a value of property ExifMake as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifMake( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFMAKE, value);
	}
    /**
     * Removes a value of property ExifMake given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifMake(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFMAKE, value);
	}
	
    /**
     * Removes a value of property ExifMake given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifMake(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFMAKE, value);
	}
  
    /**
     * Removes all values of property ExifMake     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifMake( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFMAKE);
	}
	
    /**
     * Removes all values of property ExifMake	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifMake() {
		Base.removeAll(this.model, this.getResource(), EXIFMAKE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2d309ce9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifMakerNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFMAKERNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2d309ce9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifMakerNote() {
		return Base.has(this.model, this.getResource(), EXIFMAKERNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2d309ce9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifMakerNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFMAKERNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2d309ce9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifMakerNote( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFMAKERNOTE);
	}

     /**
     * Get all values of property ExifMakerNote as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifMakerNote_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFMAKERNOTE);
	}
	
    /**
     * Get all values of property ExifMakerNote as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifMakerNote_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFMAKERNOTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifMakerNote as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifMakerNote_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFMAKERNOTE);
	}

    /**
     * Get all values of property ExifMakerNote as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifMakerNote_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFMAKERNOTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifMakerNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMakerNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFMAKERNOTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifMakerNote as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMakerNote_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFMAKERNOTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifMakerNote     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMakerNote() {
		return Base.getAll(this.model, this.getResource(), EXIFMAKERNOTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifMakerNote as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMakerNote_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFMAKERNOTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifMakerNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifMakerNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFMAKERNOTE, value);
	}
	
    /**
     * Adds a value to property ExifMakerNote as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifMakerNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFMAKERNOTE, value);
	}
    /**
     * Adds a value to property ExifMakerNote from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifMakerNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFMAKERNOTE, value);
	}
	
    /**
     * Adds a value to property ExifMakerNote from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifMakerNote(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFMAKERNOTE, value);
	}
  

    /**
     * Sets a value of property ExifMakerNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifMakerNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFMAKERNOTE, value);
	}
	
    /**
     * Sets a value of property ExifMakerNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifMakerNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFMAKERNOTE, value);
	}
    /**
     * Sets a value of property ExifMakerNote from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifMakerNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFMAKERNOTE, value);
	}
	
    /**
     * Sets a value of property ExifMakerNote from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifMakerNote(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFMAKERNOTE, value);
	}
  


    /**
     * Removes a value of property ExifMakerNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifMakerNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFMAKERNOTE, value);
	}
	
    /**
     * Removes a value of property ExifMakerNote as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifMakerNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFMAKERNOTE, value);
	}
    /**
     * Removes a value of property ExifMakerNote given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifMakerNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFMAKERNOTE, value);
	}
	
    /**
     * Removes a value of property ExifMakerNote given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifMakerNote(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFMAKERNOTE, value);
	}
  
    /**
     * Removes all values of property ExifMakerNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifMakerNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFMAKERNOTE);
	}
	
    /**
     * Removes all values of property ExifMakerNote	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifMakerNote() {
		Base.removeAll(this.model, this.getResource(), EXIFMAKERNOTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74eef9db has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifMaxApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFMAXAPERTUREVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74eef9db has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifMaxApertureValue() {
		return Base.has(this.model, this.getResource(), EXIFMAXAPERTUREVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74eef9db has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifMaxApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFMAXAPERTUREVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74eef9db has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifMaxApertureValue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFMAXAPERTUREVALUE);
	}

     /**
     * Get all values of property ExifMaxApertureValue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifMaxApertureValue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFMAXAPERTUREVALUE);
	}
	
    /**
     * Get all values of property ExifMaxApertureValue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifMaxApertureValue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFMAXAPERTUREVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifMaxApertureValue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifMaxApertureValue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFMAXAPERTUREVALUE);
	}

    /**
     * Get all values of property ExifMaxApertureValue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifMaxApertureValue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFMAXAPERTUREVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifMaxApertureValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMaxApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFMAXAPERTUREVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifMaxApertureValue as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMaxApertureValue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFMAXAPERTUREVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifMaxApertureValue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMaxApertureValue() {
		return Base.getAll(this.model, this.getResource(), EXIFMAXAPERTUREVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifMaxApertureValue as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMaxApertureValue_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFMAXAPERTUREVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifMaxApertureValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifMaxApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFMAXAPERTUREVALUE, value);
	}
	
    /**
     * Adds a value to property ExifMaxApertureValue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifMaxApertureValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFMAXAPERTUREVALUE, value);
	}
    /**
     * Adds a value to property ExifMaxApertureValue from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifMaxApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFMAXAPERTUREVALUE, value);
	}
	
    /**
     * Adds a value to property ExifMaxApertureValue from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifMaxApertureValue(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFMAXAPERTUREVALUE, value);
	}
  

    /**
     * Sets a value of property ExifMaxApertureValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifMaxApertureValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFMAXAPERTUREVALUE, value);
	}
	
    /**
     * Sets a value of property ExifMaxApertureValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifMaxApertureValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFMAXAPERTUREVALUE, value);
	}
    /**
     * Sets a value of property ExifMaxApertureValue from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifMaxApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFMAXAPERTUREVALUE, value);
	}
	
    /**
     * Sets a value of property ExifMaxApertureValue from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifMaxApertureValue(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFMAXAPERTUREVALUE, value);
	}
  


    /**
     * Removes a value of property ExifMaxApertureValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifMaxApertureValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFMAXAPERTUREVALUE, value);
	}
	
    /**
     * Removes a value of property ExifMaxApertureValue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifMaxApertureValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFMAXAPERTUREVALUE, value);
	}
    /**
     * Removes a value of property ExifMaxApertureValue given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifMaxApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFMAXAPERTUREVALUE, value);
	}
	
    /**
     * Removes a value of property ExifMaxApertureValue given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifMaxApertureValue(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFMAXAPERTUREVALUE, value);
	}
  
    /**
     * Removes all values of property ExifMaxApertureValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifMaxApertureValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFMAXAPERTUREVALUE);
	}
	
    /**
     * Removes all values of property ExifMaxApertureValue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifMaxApertureValue() {
		Base.removeAll(this.model, this.getResource(), EXIFMAXAPERTUREVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7815bc09 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifMeter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFMETER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7815bc09 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifMeter() {
		return Base.has(this.model, this.getResource(), EXIFMETER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7815bc09 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifMeter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFMETER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7815bc09 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifMeter( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFMETER);
	}

     /**
     * Get all values of property ExifMeter as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifMeter_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFMETER);
	}
	
    /**
     * Get all values of property ExifMeter as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifMeter_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFMETER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifMeter as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifMeter_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFMETER);
	}

    /**
     * Get all values of property ExifMeter as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifMeter_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFMETER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifMeter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMeter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFMETER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifMeter as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMeter_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFMETER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifMeter     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMeter() {
		return Base.getAll(this.model, this.getResource(), EXIFMETER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifMeter as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMeter_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFMETER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifMeter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifMeter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFMETER, value);
	}
	
    /**
     * Adds a value to property ExifMeter as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifMeter( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFMETER, value);
	}
    /**
     * Adds a value to property ExifMeter from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifMeter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFMETER, value);
	}
	
    /**
     * Adds a value to property ExifMeter from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifMeter(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFMETER, value);
	}
  

    /**
     * Sets a value of property ExifMeter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifMeter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFMETER, value);
	}
	
    /**
     * Sets a value of property ExifMeter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifMeter( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFMETER, value);
	}
    /**
     * Sets a value of property ExifMeter from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifMeter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFMETER, value);
	}
	
    /**
     * Sets a value of property ExifMeter from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifMeter(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFMETER, value);
	}
  


    /**
     * Removes a value of property ExifMeter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifMeter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFMETER, value);
	}
	
    /**
     * Removes a value of property ExifMeter as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifMeter( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFMETER, value);
	}
    /**
     * Removes a value of property ExifMeter given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifMeter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFMETER, value);
	}
	
    /**
     * Removes a value of property ExifMeter given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifMeter(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFMETER, value);
	}
  
    /**
     * Removes all values of property ExifMeter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifMeter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFMETER);
	}
	
    /**
     * Removes all values of property ExifMeter	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifMeter() {
		Base.removeAll(this.model, this.getResource(), EXIFMETER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fef7b50 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifMeteringMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFMETERINGMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fef7b50 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifMeteringMode() {
		return Base.has(this.model, this.getResource(), EXIFMETERINGMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fef7b50 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifMeteringMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFMETERINGMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fef7b50 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifMeteringMode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFMETERINGMODE);
	}

     /**
     * Get all values of property ExifMeteringMode as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifMeteringMode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFMETERINGMODE);
	}
	
    /**
     * Get all values of property ExifMeteringMode as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifMeteringMode_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFMETERINGMODE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifMeteringMode as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifMeteringMode_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFMETERINGMODE);
	}

    /**
     * Get all values of property ExifMeteringMode as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifMeteringMode_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFMETERINGMODE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifMeteringMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMeteringMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFMETERINGMODE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifMeteringMode as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMeteringMode_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFMETERINGMODE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifMeteringMode     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMeteringMode() {
		return Base.getAll(this.model, this.getResource(), EXIFMETERINGMODE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifMeteringMode as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMeteringMode_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFMETERINGMODE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifMeteringMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifMeteringMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFMETERINGMODE, value);
	}
	
    /**
     * Adds a value to property ExifMeteringMode as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifMeteringMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFMETERINGMODE, value);
	}
    /**
     * Adds a value to property ExifMeteringMode from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifMeteringMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFMETERINGMODE, value);
	}
	
    /**
     * Adds a value to property ExifMeteringMode from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifMeteringMode(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFMETERINGMODE, value);
	}
  

    /**
     * Sets a value of property ExifMeteringMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifMeteringMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFMETERINGMODE, value);
	}
	
    /**
     * Sets a value of property ExifMeteringMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifMeteringMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFMETERINGMODE, value);
	}
    /**
     * Sets a value of property ExifMeteringMode from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifMeteringMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFMETERINGMODE, value);
	}
	
    /**
     * Sets a value of property ExifMeteringMode from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifMeteringMode(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFMETERINGMODE, value);
	}
  


    /**
     * Removes a value of property ExifMeteringMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifMeteringMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFMETERINGMODE, value);
	}
	
    /**
     * Removes a value of property ExifMeteringMode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifMeteringMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFMETERINGMODE, value);
	}
    /**
     * Removes a value of property ExifMeteringMode given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifMeteringMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFMETERINGMODE, value);
	}
	
    /**
     * Removes a value of property ExifMeteringMode given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifMeteringMode(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFMETERINGMODE, value);
	}
  
    /**
     * Removes all values of property ExifMeteringMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifMeteringMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFMETERINGMODE);
	}
	
    /**
     * Removes all values of property ExifMeteringMode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifMeteringMode() {
		Base.removeAll(this.model, this.getResource(), EXIFMETERINGMODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24b397e9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifMm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFMM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24b397e9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifMm() {
		return Base.has(this.model, this.getResource(), EXIFMM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24b397e9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifMm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFMM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24b397e9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifMm( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFMM);
	}

     /**
     * Get all values of property ExifMm as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifMm_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFMM);
	}
	
    /**
     * Get all values of property ExifMm as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifMm_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFMM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifMm as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifMm_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFMM);
	}

    /**
     * Get all values of property ExifMm as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifMm_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFMM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifMm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFMM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifMm as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMm_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFMM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifMm     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMm() {
		return Base.getAll(this.model, this.getResource(), EXIFMM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifMm as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifMm_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFMM, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifMm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifMm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFMM, value);
	}
	
    /**
     * Adds a value to property ExifMm as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifMm( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFMM, value);
	}
    /**
     * Adds a value to property ExifMm from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifMm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFMM, value);
	}
	
    /**
     * Adds a value to property ExifMm from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifMm(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFMM, value);
	}
  

    /**
     * Sets a value of property ExifMm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifMm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFMM, value);
	}
	
    /**
     * Sets a value of property ExifMm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifMm( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFMM, value);
	}
    /**
     * Sets a value of property ExifMm from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifMm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFMM, value);
	}
	
    /**
     * Sets a value of property ExifMm from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifMm(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFMM, value);
	}
  


    /**
     * Removes a value of property ExifMm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifMm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFMM, value);
	}
	
    /**
     * Removes a value of property ExifMm as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifMm( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFMM, value);
	}
    /**
     * Removes a value of property ExifMm given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifMm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFMM, value);
	}
	
    /**
     * Removes a value of property ExifMm given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifMm(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFMM, value);
	}
  
    /**
     * Removes all values of property ExifMm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifMm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFMM);
	}
	
    /**
     * Removes all values of property ExifMm	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifMm() {
		Base.removeAll(this.model, this.getResource(), EXIFMM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ee65e1d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifModel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFMODEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ee65e1d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifModel() {
		return Base.has(this.model, this.getResource(), EXIFMODEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ee65e1d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifModel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFMODEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ee65e1d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifModel( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFMODEL);
	}

     /**
     * Get all values of property ExifModel as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifModel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFMODEL);
	}
	
    /**
     * Get all values of property ExifModel as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifModel_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFMODEL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifModel as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifModel_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFMODEL);
	}

    /**
     * Get all values of property ExifModel as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifModel_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFMODEL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifModel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifModel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFMODEL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifModel as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifModel_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFMODEL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifModel     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifModel() {
		return Base.getAll(this.model, this.getResource(), EXIFMODEL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifModel as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifModel_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFMODEL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifModel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifModel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFMODEL, value);
	}
	
    /**
     * Adds a value to property ExifModel as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifModel( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFMODEL, value);
	}
    /**
     * Adds a value to property ExifModel from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifModel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFMODEL, value);
	}
	
    /**
     * Adds a value to property ExifModel from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifModel(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFMODEL, value);
	}
  

    /**
     * Sets a value of property ExifModel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifModel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFMODEL, value);
	}
	
    /**
     * Sets a value of property ExifModel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifModel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFMODEL, value);
	}
    /**
     * Sets a value of property ExifModel from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifModel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFMODEL, value);
	}
	
    /**
     * Sets a value of property ExifModel from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifModel(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFMODEL, value);
	}
  


    /**
     * Removes a value of property ExifModel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifModel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFMODEL, value);
	}
	
    /**
     * Removes a value of property ExifModel as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifModel( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFMODEL, value);
	}
    /**
     * Removes a value of property ExifModel given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifModel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFMODEL, value);
	}
	
    /**
     * Removes a value of property ExifModel given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifModel(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFMODEL, value);
	}
  
    /**
     * Removes all values of property ExifModel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifModel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFMODEL);
	}
	
    /**
     * Removes all values of property ExifModel	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifModel() {
		Base.removeAll(this.model, this.getResource(), EXIFMODEL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a15a218 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifOecf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFOECF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a15a218 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifOecf() {
		return Base.has(this.model, this.getResource(), EXIFOECF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a15a218 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifOecf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFOECF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a15a218 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifOecf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFOECF);
	}

     /**
     * Get all values of property ExifOecf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifOecf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFOECF);
	}
	
    /**
     * Get all values of property ExifOecf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifOecf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFOECF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifOecf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifOecf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFOECF);
	}

    /**
     * Get all values of property ExifOecf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifOecf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFOECF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifOecf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifOecf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFOECF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifOecf as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifOecf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFOECF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifOecf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifOecf() {
		return Base.getAll(this.model, this.getResource(), EXIFOECF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifOecf as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifOecf_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFOECF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifOecf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifOecf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFOECF, value);
	}
	
    /**
     * Adds a value to property ExifOecf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifOecf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFOECF, value);
	}
    /**
     * Adds a value to property ExifOecf from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifOecf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFOECF, value);
	}
	
    /**
     * Adds a value to property ExifOecf from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifOecf(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFOECF, value);
	}
  

    /**
     * Sets a value of property ExifOecf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifOecf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFOECF, value);
	}
	
    /**
     * Sets a value of property ExifOecf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifOecf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFOECF, value);
	}
    /**
     * Sets a value of property ExifOecf from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifOecf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFOECF, value);
	}
	
    /**
     * Sets a value of property ExifOecf from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifOecf(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFOECF, value);
	}
  


    /**
     * Removes a value of property ExifOecf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifOecf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFOECF, value);
	}
	
    /**
     * Removes a value of property ExifOecf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifOecf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFOECF, value);
	}
    /**
     * Removes a value of property ExifOecf given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifOecf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFOECF, value);
	}
	
    /**
     * Removes a value of property ExifOecf given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifOecf(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFOECF, value);
	}
  
    /**
     * Removes all values of property ExifOecf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifOecf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFOECF);
	}
	
    /**
     * Removes all values of property ExifOecf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifOecf() {
		Base.removeAll(this.model, this.getResource(), EXIFOECF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11cf9944 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifOrientation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFORIENTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11cf9944 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifOrientation() {
		return Base.has(this.model, this.getResource(), EXIFORIENTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11cf9944 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifOrientation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFORIENTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11cf9944 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifOrientation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFORIENTATION);
	}

     /**
     * Get all values of property ExifOrientation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifOrientation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFORIENTATION);
	}
	
    /**
     * Get all values of property ExifOrientation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifOrientation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFORIENTATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifOrientation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifOrientation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFORIENTATION);
	}

    /**
     * Get all values of property ExifOrientation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifOrientation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFORIENTATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifOrientation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifOrientation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFORIENTATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifOrientation as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifOrientation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFORIENTATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifOrientation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifOrientation() {
		return Base.getAll(this.model, this.getResource(), EXIFORIENTATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifOrientation as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifOrientation_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFORIENTATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifOrientation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifOrientation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFORIENTATION, value);
	}
	
    /**
     * Adds a value to property ExifOrientation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifOrientation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFORIENTATION, value);
	}
    /**
     * Adds a value to property ExifOrientation from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifOrientation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFORIENTATION, value);
	}
	
    /**
     * Adds a value to property ExifOrientation from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifOrientation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFORIENTATION, value);
	}
  

    /**
     * Sets a value of property ExifOrientation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifOrientation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFORIENTATION, value);
	}
	
    /**
     * Sets a value of property ExifOrientation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifOrientation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFORIENTATION, value);
	}
    /**
     * Sets a value of property ExifOrientation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifOrientation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFORIENTATION, value);
	}
	
    /**
     * Sets a value of property ExifOrientation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifOrientation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFORIENTATION, value);
	}
  


    /**
     * Removes a value of property ExifOrientation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifOrientation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFORIENTATION, value);
	}
	
    /**
     * Removes a value of property ExifOrientation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifOrientation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFORIENTATION, value);
	}
    /**
     * Removes a value of property ExifOrientation given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifOrientation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFORIENTATION, value);
	}
	
    /**
     * Removes a value of property ExifOrientation given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifOrientation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFORIENTATION, value);
	}
  
    /**
     * Removes all values of property ExifOrientation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifOrientation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFORIENTATION);
	}
	
    /**
     * Removes all values of property ExifOrientation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifOrientation() {
		Base.removeAll(this.model, this.getResource(), EXIFORIENTATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@241b3dc8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifPhotometricInterpretation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFPHOTOMETRICINTERPRETATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@241b3dc8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifPhotometricInterpretation() {
		return Base.has(this.model, this.getResource(), EXIFPHOTOMETRICINTERPRETATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@241b3dc8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifPhotometricInterpretation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFPHOTOMETRICINTERPRETATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@241b3dc8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifPhotometricInterpretation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFPHOTOMETRICINTERPRETATION);
	}

     /**
     * Get all values of property ExifPhotometricInterpretation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPhotometricInterpretation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFPHOTOMETRICINTERPRETATION);
	}
	
    /**
     * Get all values of property ExifPhotometricInterpretation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPhotometricInterpretation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPHOTOMETRICINTERPRETATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifPhotometricInterpretation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPhotometricInterpretation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFPHOTOMETRICINTERPRETATION);
	}

    /**
     * Get all values of property ExifPhotometricInterpretation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPhotometricInterpretation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPHOTOMETRICINTERPRETATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifPhotometricInterpretation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPhotometricInterpretation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFPHOTOMETRICINTERPRETATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifPhotometricInterpretation as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPhotometricInterpretation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPHOTOMETRICINTERPRETATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPhotometricInterpretation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPhotometricInterpretation() {
		return Base.getAll(this.model, this.getResource(), EXIFPHOTOMETRICINTERPRETATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPhotometricInterpretation as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPhotometricInterpretation_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPHOTOMETRICINTERPRETATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifPhotometricInterpretation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifPhotometricInterpretation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFPHOTOMETRICINTERPRETATION, value);
	}
	
    /**
     * Adds a value to property ExifPhotometricInterpretation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifPhotometricInterpretation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFPHOTOMETRICINTERPRETATION, value);
	}
    /**
     * Adds a value to property ExifPhotometricInterpretation from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifPhotometricInterpretation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFPHOTOMETRICINTERPRETATION, value);
	}
	
    /**
     * Adds a value to property ExifPhotometricInterpretation from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifPhotometricInterpretation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFPHOTOMETRICINTERPRETATION, value);
	}
  

    /**
     * Sets a value of property ExifPhotometricInterpretation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifPhotometricInterpretation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFPHOTOMETRICINTERPRETATION, value);
	}
	
    /**
     * Sets a value of property ExifPhotometricInterpretation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifPhotometricInterpretation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFPHOTOMETRICINTERPRETATION, value);
	}
    /**
     * Sets a value of property ExifPhotometricInterpretation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifPhotometricInterpretation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFPHOTOMETRICINTERPRETATION, value);
	}
	
    /**
     * Sets a value of property ExifPhotometricInterpretation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifPhotometricInterpretation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFPHOTOMETRICINTERPRETATION, value);
	}
  


    /**
     * Removes a value of property ExifPhotometricInterpretation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifPhotometricInterpretation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFPHOTOMETRICINTERPRETATION, value);
	}
	
    /**
     * Removes a value of property ExifPhotometricInterpretation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifPhotometricInterpretation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFPHOTOMETRICINTERPRETATION, value);
	}
    /**
     * Removes a value of property ExifPhotometricInterpretation given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifPhotometricInterpretation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFPHOTOMETRICINTERPRETATION, value);
	}
	
    /**
     * Removes a value of property ExifPhotometricInterpretation given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifPhotometricInterpretation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFPHOTOMETRICINTERPRETATION, value);
	}
  
    /**
     * Removes all values of property ExifPhotometricInterpretation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifPhotometricInterpretation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFPHOTOMETRICINTERPRETATION);
	}
	
    /**
     * Removes all values of property ExifPhotometricInterpretation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifPhotometricInterpretation() {
		Base.removeAll(this.model, this.getResource(), EXIFPHOTOMETRICINTERPRETATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c42e68a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifPictTaking(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFPICTTAKING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c42e68a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifPictTaking() {
		return Base.has(this.model, this.getResource(), EXIFPICTTAKING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c42e68a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifPictTaking(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFPICTTAKING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c42e68a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifPictTaking( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFPICTTAKING);
	}

     /**
     * Get all values of property ExifPictTaking as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPictTaking_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFPICTTAKING);
	}
	
    /**
     * Get all values of property ExifPictTaking as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPictTaking_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPICTTAKING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifPictTaking as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPictTaking_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFPICTTAKING);
	}

    /**
     * Get all values of property ExifPictTaking as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPictTaking_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPICTTAKING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifPictTaking     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPictTaking(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFPICTTAKING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifPictTaking as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPictTaking_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPICTTAKING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPictTaking     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPictTaking() {
		return Base.getAll(this.model, this.getResource(), EXIFPICTTAKING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPictTaking as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPictTaking_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPICTTAKING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifPictTaking as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifPictTaking(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFPICTTAKING, value);
	}
	
    /**
     * Adds a value to property ExifPictTaking as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifPictTaking( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFPICTTAKING, value);
	}
    /**
     * Adds a value to property ExifPictTaking from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifPictTaking(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFPICTTAKING, value);
	}
	
    /**
     * Adds a value to property ExifPictTaking from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifPictTaking(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFPICTTAKING, value);
	}
  

    /**
     * Sets a value of property ExifPictTaking from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifPictTaking( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFPICTTAKING, value);
	}
	
    /**
     * Sets a value of property ExifPictTaking from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifPictTaking( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFPICTTAKING, value);
	}
    /**
     * Sets a value of property ExifPictTaking from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifPictTaking(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFPICTTAKING, value);
	}
	
    /**
     * Sets a value of property ExifPictTaking from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifPictTaking(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFPICTTAKING, value);
	}
  


    /**
     * Removes a value of property ExifPictTaking as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifPictTaking( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFPICTTAKING, value);
	}
	
    /**
     * Removes a value of property ExifPictTaking as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifPictTaking( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFPICTTAKING, value);
	}
    /**
     * Removes a value of property ExifPictTaking given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifPictTaking(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFPICTTAKING, value);
	}
	
    /**
     * Removes a value of property ExifPictTaking given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifPictTaking(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFPICTTAKING, value);
	}
  
    /**
     * Removes all values of property ExifPictTaking     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifPictTaking( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFPICTTAKING);
	}
	
    /**
     * Removes all values of property ExifPictTaking	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifPictTaking() {
		Base.removeAll(this.model, this.getResource(), EXIFPICTTAKING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63e6ed16 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifPimBrightness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFPIMBRIGHTNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63e6ed16 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifPimBrightness() {
		return Base.has(this.model, this.getResource(), EXIFPIMBRIGHTNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63e6ed16 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifPimBrightness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFPIMBRIGHTNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63e6ed16 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifPimBrightness( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFPIMBRIGHTNESS);
	}

     /**
     * Get all values of property ExifPimBrightness as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPimBrightness_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFPIMBRIGHTNESS);
	}
	
    /**
     * Get all values of property ExifPimBrightness as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPimBrightness_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIMBRIGHTNESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifPimBrightness as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPimBrightness_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFPIMBRIGHTNESS);
	}

    /**
     * Get all values of property ExifPimBrightness as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPimBrightness_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIMBRIGHTNESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifPimBrightness     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimBrightness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFPIMBRIGHTNESS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifPimBrightness as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimBrightness_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIMBRIGHTNESS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPimBrightness     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimBrightness() {
		return Base.getAll(this.model, this.getResource(), EXIFPIMBRIGHTNESS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPimBrightness as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimBrightness_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIMBRIGHTNESS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifPimBrightness as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifPimBrightness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFPIMBRIGHTNESS, value);
	}
	
    /**
     * Adds a value to property ExifPimBrightness as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifPimBrightness( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFPIMBRIGHTNESS, value);
	}
    /**
     * Adds a value to property ExifPimBrightness from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifPimBrightness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFPIMBRIGHTNESS, value);
	}
	
    /**
     * Adds a value to property ExifPimBrightness from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifPimBrightness(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFPIMBRIGHTNESS, value);
	}
  

    /**
     * Sets a value of property ExifPimBrightness from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifPimBrightness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFPIMBRIGHTNESS, value);
	}
	
    /**
     * Sets a value of property ExifPimBrightness from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifPimBrightness( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFPIMBRIGHTNESS, value);
	}
    /**
     * Sets a value of property ExifPimBrightness from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifPimBrightness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFPIMBRIGHTNESS, value);
	}
	
    /**
     * Sets a value of property ExifPimBrightness from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifPimBrightness(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFPIMBRIGHTNESS, value);
	}
  


    /**
     * Removes a value of property ExifPimBrightness as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifPimBrightness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFPIMBRIGHTNESS, value);
	}
	
    /**
     * Removes a value of property ExifPimBrightness as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifPimBrightness( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFPIMBRIGHTNESS, value);
	}
    /**
     * Removes a value of property ExifPimBrightness given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifPimBrightness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFPIMBRIGHTNESS, value);
	}
	
    /**
     * Removes a value of property ExifPimBrightness given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifPimBrightness(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFPIMBRIGHTNESS, value);
	}
  
    /**
     * Removes all values of property ExifPimBrightness     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifPimBrightness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFPIMBRIGHTNESS);
	}
	
    /**
     * Removes all values of property ExifPimBrightness	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifPimBrightness() {
		Base.removeAll(this.model, this.getResource(), EXIFPIMBRIGHTNESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34be4e59 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifPimColorBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFPIMCOLORBALANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34be4e59 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifPimColorBalance() {
		return Base.has(this.model, this.getResource(), EXIFPIMCOLORBALANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34be4e59 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifPimColorBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFPIMCOLORBALANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34be4e59 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifPimColorBalance( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFPIMCOLORBALANCE);
	}

     /**
     * Get all values of property ExifPimColorBalance as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPimColorBalance_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFPIMCOLORBALANCE);
	}
	
    /**
     * Get all values of property ExifPimColorBalance as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPimColorBalance_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIMCOLORBALANCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifPimColorBalance as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPimColorBalance_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFPIMCOLORBALANCE);
	}

    /**
     * Get all values of property ExifPimColorBalance as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPimColorBalance_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIMCOLORBALANCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifPimColorBalance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimColorBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFPIMCOLORBALANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifPimColorBalance as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimColorBalance_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIMCOLORBALANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPimColorBalance     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimColorBalance() {
		return Base.getAll(this.model, this.getResource(), EXIFPIMCOLORBALANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPimColorBalance as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimColorBalance_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIMCOLORBALANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifPimColorBalance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifPimColorBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFPIMCOLORBALANCE, value);
	}
	
    /**
     * Adds a value to property ExifPimColorBalance as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifPimColorBalance( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFPIMCOLORBALANCE, value);
	}
    /**
     * Adds a value to property ExifPimColorBalance from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifPimColorBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFPIMCOLORBALANCE, value);
	}
	
    /**
     * Adds a value to property ExifPimColorBalance from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifPimColorBalance(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFPIMCOLORBALANCE, value);
	}
  

    /**
     * Sets a value of property ExifPimColorBalance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifPimColorBalance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFPIMCOLORBALANCE, value);
	}
	
    /**
     * Sets a value of property ExifPimColorBalance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifPimColorBalance( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFPIMCOLORBALANCE, value);
	}
    /**
     * Sets a value of property ExifPimColorBalance from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifPimColorBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFPIMCOLORBALANCE, value);
	}
	
    /**
     * Sets a value of property ExifPimColorBalance from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifPimColorBalance(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFPIMCOLORBALANCE, value);
	}
  


    /**
     * Removes a value of property ExifPimColorBalance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifPimColorBalance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFPIMCOLORBALANCE, value);
	}
	
    /**
     * Removes a value of property ExifPimColorBalance as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifPimColorBalance( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFPIMCOLORBALANCE, value);
	}
    /**
     * Removes a value of property ExifPimColorBalance given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifPimColorBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFPIMCOLORBALANCE, value);
	}
	
    /**
     * Removes a value of property ExifPimColorBalance given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifPimColorBalance(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFPIMCOLORBALANCE, value);
	}
  
    /**
     * Removes all values of property ExifPimColorBalance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifPimColorBalance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFPIMCOLORBALANCE);
	}
	
    /**
     * Removes all values of property ExifPimColorBalance	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifPimColorBalance() {
		Base.removeAll(this.model, this.getResource(), EXIFPIMCOLORBALANCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19b9c35 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifPimContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFPIMCONTRAST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19b9c35 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifPimContrast() {
		return Base.has(this.model, this.getResource(), EXIFPIMCONTRAST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19b9c35 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifPimContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFPIMCONTRAST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19b9c35 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifPimContrast( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFPIMCONTRAST);
	}

     /**
     * Get all values of property ExifPimContrast as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPimContrast_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFPIMCONTRAST);
	}
	
    /**
     * Get all values of property ExifPimContrast as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPimContrast_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIMCONTRAST, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifPimContrast as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPimContrast_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFPIMCONTRAST);
	}

    /**
     * Get all values of property ExifPimContrast as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPimContrast_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIMCONTRAST, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifPimContrast     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFPIMCONTRAST, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifPimContrast as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimContrast_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIMCONTRAST, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPimContrast     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimContrast() {
		return Base.getAll(this.model, this.getResource(), EXIFPIMCONTRAST, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPimContrast as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimContrast_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIMCONTRAST, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifPimContrast as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifPimContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFPIMCONTRAST, value);
	}
	
    /**
     * Adds a value to property ExifPimContrast as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifPimContrast( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFPIMCONTRAST, value);
	}
    /**
     * Adds a value to property ExifPimContrast from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifPimContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFPIMCONTRAST, value);
	}
	
    /**
     * Adds a value to property ExifPimContrast from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifPimContrast(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFPIMCONTRAST, value);
	}
  

    /**
     * Sets a value of property ExifPimContrast from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifPimContrast( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFPIMCONTRAST, value);
	}
	
    /**
     * Sets a value of property ExifPimContrast from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifPimContrast( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFPIMCONTRAST, value);
	}
    /**
     * Sets a value of property ExifPimContrast from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifPimContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFPIMCONTRAST, value);
	}
	
    /**
     * Sets a value of property ExifPimContrast from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifPimContrast(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFPIMCONTRAST, value);
	}
  


    /**
     * Removes a value of property ExifPimContrast as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifPimContrast( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFPIMCONTRAST, value);
	}
	
    /**
     * Removes a value of property ExifPimContrast as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifPimContrast( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFPIMCONTRAST, value);
	}
    /**
     * Removes a value of property ExifPimContrast given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifPimContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFPIMCONTRAST, value);
	}
	
    /**
     * Removes a value of property ExifPimContrast given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifPimContrast(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFPIMCONTRAST, value);
	}
  
    /**
     * Removes all values of property ExifPimContrast     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifPimContrast( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFPIMCONTRAST);
	}
	
    /**
     * Removes all values of property ExifPimContrast	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifPimContrast() {
		Base.removeAll(this.model, this.getResource(), EXIFPIMCONTRAST);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bafdbb8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifPimInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFPIMINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bafdbb8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifPimInfo() {
		return Base.has(this.model, this.getResource(), EXIFPIMINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bafdbb8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifPimInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFPIMINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bafdbb8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifPimInfo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFPIMINFO);
	}

     /**
     * Get all values of property ExifPimInfo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPimInfo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFPIMINFO);
	}
	
    /**
     * Get all values of property ExifPimInfo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPimInfo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIMINFO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifPimInfo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPimInfo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFPIMINFO);
	}

    /**
     * Get all values of property ExifPimInfo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPimInfo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIMINFO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifPimInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFPIMINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifPimInfo as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimInfo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIMINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPimInfo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimInfo() {
		return Base.getAll(this.model, this.getResource(), EXIFPIMINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPimInfo as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimInfo_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIMINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifPimInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifPimInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFPIMINFO, value);
	}
	
    /**
     * Adds a value to property ExifPimInfo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifPimInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFPIMINFO, value);
	}
    /**
     * Adds a value to property ExifPimInfo from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifPimInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFPIMINFO, value);
	}
	
    /**
     * Adds a value to property ExifPimInfo from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifPimInfo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFPIMINFO, value);
	}
  

    /**
     * Sets a value of property ExifPimInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifPimInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFPIMINFO, value);
	}
	
    /**
     * Sets a value of property ExifPimInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifPimInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFPIMINFO, value);
	}
    /**
     * Sets a value of property ExifPimInfo from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifPimInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFPIMINFO, value);
	}
	
    /**
     * Sets a value of property ExifPimInfo from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifPimInfo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFPIMINFO, value);
	}
  


    /**
     * Removes a value of property ExifPimInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifPimInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFPIMINFO, value);
	}
	
    /**
     * Removes a value of property ExifPimInfo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifPimInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFPIMINFO, value);
	}
    /**
     * Removes a value of property ExifPimInfo given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifPimInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFPIMINFO, value);
	}
	
    /**
     * Removes a value of property ExifPimInfo given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifPimInfo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFPIMINFO, value);
	}
  
    /**
     * Removes all values of property ExifPimInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifPimInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFPIMINFO);
	}
	
    /**
     * Removes all values of property ExifPimInfo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifPimInfo() {
		Base.removeAll(this.model, this.getResource(), EXIFPIMINFO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@515e951d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifPimSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFPIMSATURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@515e951d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifPimSaturation() {
		return Base.has(this.model, this.getResource(), EXIFPIMSATURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@515e951d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifPimSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFPIMSATURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@515e951d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifPimSaturation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFPIMSATURATION);
	}

     /**
     * Get all values of property ExifPimSaturation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPimSaturation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFPIMSATURATION);
	}
	
    /**
     * Get all values of property ExifPimSaturation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPimSaturation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIMSATURATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifPimSaturation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPimSaturation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFPIMSATURATION);
	}

    /**
     * Get all values of property ExifPimSaturation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPimSaturation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIMSATURATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifPimSaturation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFPIMSATURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifPimSaturation as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimSaturation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIMSATURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPimSaturation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimSaturation() {
		return Base.getAll(this.model, this.getResource(), EXIFPIMSATURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPimSaturation as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimSaturation_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIMSATURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifPimSaturation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifPimSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFPIMSATURATION, value);
	}
	
    /**
     * Adds a value to property ExifPimSaturation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifPimSaturation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFPIMSATURATION, value);
	}
    /**
     * Adds a value to property ExifPimSaturation from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifPimSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFPIMSATURATION, value);
	}
	
    /**
     * Adds a value to property ExifPimSaturation from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifPimSaturation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFPIMSATURATION, value);
	}
  

    /**
     * Sets a value of property ExifPimSaturation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifPimSaturation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFPIMSATURATION, value);
	}
	
    /**
     * Sets a value of property ExifPimSaturation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifPimSaturation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFPIMSATURATION, value);
	}
    /**
     * Sets a value of property ExifPimSaturation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifPimSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFPIMSATURATION, value);
	}
	
    /**
     * Sets a value of property ExifPimSaturation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifPimSaturation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFPIMSATURATION, value);
	}
  


    /**
     * Removes a value of property ExifPimSaturation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifPimSaturation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFPIMSATURATION, value);
	}
	
    /**
     * Removes a value of property ExifPimSaturation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifPimSaturation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFPIMSATURATION, value);
	}
    /**
     * Removes a value of property ExifPimSaturation given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifPimSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFPIMSATURATION, value);
	}
	
    /**
     * Removes a value of property ExifPimSaturation given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifPimSaturation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFPIMSATURATION, value);
	}
  
    /**
     * Removes all values of property ExifPimSaturation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifPimSaturation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFPIMSATURATION);
	}
	
    /**
     * Removes all values of property ExifPimSaturation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifPimSaturation() {
		Base.removeAll(this.model, this.getResource(), EXIFPIMSATURATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49488a98 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifPimSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFPIMSHARPNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49488a98 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifPimSharpness() {
		return Base.has(this.model, this.getResource(), EXIFPIMSHARPNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49488a98 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifPimSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFPIMSHARPNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49488a98 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifPimSharpness( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFPIMSHARPNESS);
	}

     /**
     * Get all values of property ExifPimSharpness as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPimSharpness_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFPIMSHARPNESS);
	}
	
    /**
     * Get all values of property ExifPimSharpness as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPimSharpness_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIMSHARPNESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifPimSharpness as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPimSharpness_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFPIMSHARPNESS);
	}

    /**
     * Get all values of property ExifPimSharpness as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPimSharpness_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIMSHARPNESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifPimSharpness     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFPIMSHARPNESS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifPimSharpness as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimSharpness_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIMSHARPNESS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPimSharpness     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimSharpness() {
		return Base.getAll(this.model, this.getResource(), EXIFPIMSHARPNESS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPimSharpness as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPimSharpness_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIMSHARPNESS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifPimSharpness as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifPimSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFPIMSHARPNESS, value);
	}
	
    /**
     * Adds a value to property ExifPimSharpness as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifPimSharpness( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFPIMSHARPNESS, value);
	}
    /**
     * Adds a value to property ExifPimSharpness from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifPimSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFPIMSHARPNESS, value);
	}
	
    /**
     * Adds a value to property ExifPimSharpness from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifPimSharpness(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFPIMSHARPNESS, value);
	}
  

    /**
     * Sets a value of property ExifPimSharpness from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifPimSharpness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFPIMSHARPNESS, value);
	}
	
    /**
     * Sets a value of property ExifPimSharpness from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifPimSharpness( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFPIMSHARPNESS, value);
	}
    /**
     * Sets a value of property ExifPimSharpness from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifPimSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFPIMSHARPNESS, value);
	}
	
    /**
     * Sets a value of property ExifPimSharpness from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifPimSharpness(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFPIMSHARPNESS, value);
	}
  


    /**
     * Removes a value of property ExifPimSharpness as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifPimSharpness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFPIMSHARPNESS, value);
	}
	
    /**
     * Removes a value of property ExifPimSharpness as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifPimSharpness( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFPIMSHARPNESS, value);
	}
    /**
     * Removes a value of property ExifPimSharpness given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifPimSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFPIMSHARPNESS, value);
	}
	
    /**
     * Removes a value of property ExifPimSharpness given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifPimSharpness(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFPIMSHARPNESS, value);
	}
  
    /**
     * Removes all values of property ExifPimSharpness     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifPimSharpness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFPIMSHARPNESS);
	}
	
    /**
     * Removes all values of property ExifPimSharpness	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifPimSharpness() {
		Base.removeAll(this.model, this.getResource(), EXIFPIMSHARPNESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b6f0da4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifPixelXDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFPIXELXDIMENSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b6f0da4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifPixelXDimension() {
		return Base.has(this.model, this.getResource(), EXIFPIXELXDIMENSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b6f0da4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifPixelXDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFPIXELXDIMENSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b6f0da4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifPixelXDimension( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFPIXELXDIMENSION);
	}

     /**
     * Get all values of property ExifPixelXDimension as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPixelXDimension_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFPIXELXDIMENSION);
	}
	
    /**
     * Get all values of property ExifPixelXDimension as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPixelXDimension_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIXELXDIMENSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifPixelXDimension as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPixelXDimension_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFPIXELXDIMENSION);
	}

    /**
     * Get all values of property ExifPixelXDimension as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPixelXDimension_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIXELXDIMENSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifPixelXDimension     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPixelXDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFPIXELXDIMENSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifPixelXDimension as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPixelXDimension_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIXELXDIMENSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPixelXDimension     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPixelXDimension() {
		return Base.getAll(this.model, this.getResource(), EXIFPIXELXDIMENSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPixelXDimension as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPixelXDimension_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIXELXDIMENSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifPixelXDimension as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifPixelXDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFPIXELXDIMENSION, value);
	}
	
    /**
     * Adds a value to property ExifPixelXDimension as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifPixelXDimension( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFPIXELXDIMENSION, value);
	}
    /**
     * Adds a value to property ExifPixelXDimension from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifPixelXDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFPIXELXDIMENSION, value);
	}
	
    /**
     * Adds a value to property ExifPixelXDimension from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifPixelXDimension(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFPIXELXDIMENSION, value);
	}
  

    /**
     * Sets a value of property ExifPixelXDimension from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifPixelXDimension( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFPIXELXDIMENSION, value);
	}
	
    /**
     * Sets a value of property ExifPixelXDimension from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifPixelXDimension( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFPIXELXDIMENSION, value);
	}
    /**
     * Sets a value of property ExifPixelXDimension from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifPixelXDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFPIXELXDIMENSION, value);
	}
	
    /**
     * Sets a value of property ExifPixelXDimension from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifPixelXDimension(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFPIXELXDIMENSION, value);
	}
  


    /**
     * Removes a value of property ExifPixelXDimension as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifPixelXDimension( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFPIXELXDIMENSION, value);
	}
	
    /**
     * Removes a value of property ExifPixelXDimension as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifPixelXDimension( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFPIXELXDIMENSION, value);
	}
    /**
     * Removes a value of property ExifPixelXDimension given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifPixelXDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFPIXELXDIMENSION, value);
	}
	
    /**
     * Removes a value of property ExifPixelXDimension given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifPixelXDimension(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFPIXELXDIMENSION, value);
	}
  
    /**
     * Removes all values of property ExifPixelXDimension     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifPixelXDimension( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFPIXELXDIMENSION);
	}
	
    /**
     * Removes all values of property ExifPixelXDimension	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifPixelXDimension() {
		Base.removeAll(this.model, this.getResource(), EXIFPIXELXDIMENSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d220b45 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifPixelYDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFPIXELYDIMENSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d220b45 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifPixelYDimension() {
		return Base.has(this.model, this.getResource(), EXIFPIXELYDIMENSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d220b45 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifPixelYDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFPIXELYDIMENSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d220b45 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifPixelYDimension( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFPIXELYDIMENSION);
	}

     /**
     * Get all values of property ExifPixelYDimension as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPixelYDimension_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFPIXELYDIMENSION);
	}
	
    /**
     * Get all values of property ExifPixelYDimension as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPixelYDimension_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIXELYDIMENSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifPixelYDimension as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPixelYDimension_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFPIXELYDIMENSION);
	}

    /**
     * Get all values of property ExifPixelYDimension as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPixelYDimension_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIXELYDIMENSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifPixelYDimension     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPixelYDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFPIXELYDIMENSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifPixelYDimension as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPixelYDimension_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPIXELYDIMENSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPixelYDimension     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPixelYDimension() {
		return Base.getAll(this.model, this.getResource(), EXIFPIXELYDIMENSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPixelYDimension as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPixelYDimension_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPIXELYDIMENSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifPixelYDimension as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifPixelYDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFPIXELYDIMENSION, value);
	}
	
    /**
     * Adds a value to property ExifPixelYDimension as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifPixelYDimension( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFPIXELYDIMENSION, value);
	}
    /**
     * Adds a value to property ExifPixelYDimension from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifPixelYDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFPIXELYDIMENSION, value);
	}
	
    /**
     * Adds a value to property ExifPixelYDimension from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifPixelYDimension(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFPIXELYDIMENSION, value);
	}
  

    /**
     * Sets a value of property ExifPixelYDimension from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifPixelYDimension( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFPIXELYDIMENSION, value);
	}
	
    /**
     * Sets a value of property ExifPixelYDimension from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifPixelYDimension( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFPIXELYDIMENSION, value);
	}
    /**
     * Sets a value of property ExifPixelYDimension from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifPixelYDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFPIXELYDIMENSION, value);
	}
	
    /**
     * Sets a value of property ExifPixelYDimension from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifPixelYDimension(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFPIXELYDIMENSION, value);
	}
  


    /**
     * Removes a value of property ExifPixelYDimension as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifPixelYDimension( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFPIXELYDIMENSION, value);
	}
	
    /**
     * Removes a value of property ExifPixelYDimension as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifPixelYDimension( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFPIXELYDIMENSION, value);
	}
    /**
     * Removes a value of property ExifPixelYDimension given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifPixelYDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFPIXELYDIMENSION, value);
	}
	
    /**
     * Removes a value of property ExifPixelYDimension given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifPixelYDimension(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFPIXELYDIMENSION, value);
	}
  
    /**
     * Removes all values of property ExifPixelYDimension     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifPixelYDimension( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFPIXELYDIMENSION);
	}
	
    /**
     * Removes all values of property ExifPixelYDimension	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifPixelYDimension() {
		Base.removeAll(this.model, this.getResource(), EXIFPIXELYDIMENSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14a8ca58 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifPlanarConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFPLANARCONFIGURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14a8ca58 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifPlanarConfiguration() {
		return Base.has(this.model, this.getResource(), EXIFPLANARCONFIGURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14a8ca58 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifPlanarConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFPLANARCONFIGURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14a8ca58 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifPlanarConfiguration( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFPLANARCONFIGURATION);
	}

     /**
     * Get all values of property ExifPlanarConfiguration as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPlanarConfiguration_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFPLANARCONFIGURATION);
	}
	
    /**
     * Get all values of property ExifPlanarConfiguration as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPlanarConfiguration_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPLANARCONFIGURATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifPlanarConfiguration as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPlanarConfiguration_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFPLANARCONFIGURATION);
	}

    /**
     * Get all values of property ExifPlanarConfiguration as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPlanarConfiguration_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPLANARCONFIGURATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifPlanarConfiguration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPlanarConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFPLANARCONFIGURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifPlanarConfiguration as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPlanarConfiguration_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPLANARCONFIGURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPlanarConfiguration     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPlanarConfiguration() {
		return Base.getAll(this.model, this.getResource(), EXIFPLANARCONFIGURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPlanarConfiguration as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPlanarConfiguration_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPLANARCONFIGURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifPlanarConfiguration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifPlanarConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFPLANARCONFIGURATION, value);
	}
	
    /**
     * Adds a value to property ExifPlanarConfiguration as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifPlanarConfiguration( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFPLANARCONFIGURATION, value);
	}
    /**
     * Adds a value to property ExifPlanarConfiguration from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifPlanarConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFPLANARCONFIGURATION, value);
	}
	
    /**
     * Adds a value to property ExifPlanarConfiguration from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifPlanarConfiguration(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFPLANARCONFIGURATION, value);
	}
  

    /**
     * Sets a value of property ExifPlanarConfiguration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifPlanarConfiguration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFPLANARCONFIGURATION, value);
	}
	
    /**
     * Sets a value of property ExifPlanarConfiguration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifPlanarConfiguration( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFPLANARCONFIGURATION, value);
	}
    /**
     * Sets a value of property ExifPlanarConfiguration from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifPlanarConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFPLANARCONFIGURATION, value);
	}
	
    /**
     * Sets a value of property ExifPlanarConfiguration from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifPlanarConfiguration(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFPLANARCONFIGURATION, value);
	}
  


    /**
     * Removes a value of property ExifPlanarConfiguration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifPlanarConfiguration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFPLANARCONFIGURATION, value);
	}
	
    /**
     * Removes a value of property ExifPlanarConfiguration as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifPlanarConfiguration( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFPLANARCONFIGURATION, value);
	}
    /**
     * Removes a value of property ExifPlanarConfiguration given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifPlanarConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFPLANARCONFIGURATION, value);
	}
	
    /**
     * Removes a value of property ExifPlanarConfiguration given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifPlanarConfiguration(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFPLANARCONFIGURATION, value);
	}
  
    /**
     * Removes all values of property ExifPlanarConfiguration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifPlanarConfiguration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFPLANARCONFIGURATION);
	}
	
    /**
     * Removes all values of property ExifPlanarConfiguration	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifPlanarConfiguration() {
		Base.removeAll(this.model, this.getResource(), EXIFPLANARCONFIGURATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16b61e92 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifPrimaryChromaticities(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFPRIMARYCHROMATICITIES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16b61e92 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifPrimaryChromaticities() {
		return Base.has(this.model, this.getResource(), EXIFPRIMARYCHROMATICITIES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16b61e92 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifPrimaryChromaticities(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFPRIMARYCHROMATICITIES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16b61e92 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifPrimaryChromaticities( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFPRIMARYCHROMATICITIES);
	}

     /**
     * Get all values of property ExifPrimaryChromaticities as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPrimaryChromaticities_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFPRIMARYCHROMATICITIES);
	}
	
    /**
     * Get all values of property ExifPrimaryChromaticities as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPrimaryChromaticities_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPRIMARYCHROMATICITIES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifPrimaryChromaticities as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPrimaryChromaticities_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFPRIMARYCHROMATICITIES);
	}

    /**
     * Get all values of property ExifPrimaryChromaticities as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPrimaryChromaticities_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPRIMARYCHROMATICITIES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifPrimaryChromaticities     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPrimaryChromaticities(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFPRIMARYCHROMATICITIES, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifPrimaryChromaticities as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPrimaryChromaticities_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPRIMARYCHROMATICITIES, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPrimaryChromaticities     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPrimaryChromaticities() {
		return Base.getAll(this.model, this.getResource(), EXIFPRIMARYCHROMATICITIES, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPrimaryChromaticities as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPrimaryChromaticities_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPRIMARYCHROMATICITIES, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifPrimaryChromaticities as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifPrimaryChromaticities(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFPRIMARYCHROMATICITIES, value);
	}
	
    /**
     * Adds a value to property ExifPrimaryChromaticities as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifPrimaryChromaticities( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFPRIMARYCHROMATICITIES, value);
	}
    /**
     * Adds a value to property ExifPrimaryChromaticities from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifPrimaryChromaticities(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFPRIMARYCHROMATICITIES, value);
	}
	
    /**
     * Adds a value to property ExifPrimaryChromaticities from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifPrimaryChromaticities(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFPRIMARYCHROMATICITIES, value);
	}
  

    /**
     * Sets a value of property ExifPrimaryChromaticities from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifPrimaryChromaticities( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFPRIMARYCHROMATICITIES, value);
	}
	
    /**
     * Sets a value of property ExifPrimaryChromaticities from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifPrimaryChromaticities( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFPRIMARYCHROMATICITIES, value);
	}
    /**
     * Sets a value of property ExifPrimaryChromaticities from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifPrimaryChromaticities(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFPRIMARYCHROMATICITIES, value);
	}
	
    /**
     * Sets a value of property ExifPrimaryChromaticities from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifPrimaryChromaticities(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFPRIMARYCHROMATICITIES, value);
	}
  


    /**
     * Removes a value of property ExifPrimaryChromaticities as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifPrimaryChromaticities( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFPRIMARYCHROMATICITIES, value);
	}
	
    /**
     * Removes a value of property ExifPrimaryChromaticities as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifPrimaryChromaticities( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFPRIMARYCHROMATICITIES, value);
	}
    /**
     * Removes a value of property ExifPrimaryChromaticities given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifPrimaryChromaticities(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFPRIMARYCHROMATICITIES, value);
	}
	
    /**
     * Removes a value of property ExifPrimaryChromaticities given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifPrimaryChromaticities(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFPRIMARYCHROMATICITIES, value);
	}
  
    /**
     * Removes all values of property ExifPrimaryChromaticities     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifPrimaryChromaticities( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFPRIMARYCHROMATICITIES);
	}
	
    /**
     * Removes all values of property ExifPrimaryChromaticities	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifPrimaryChromaticities() {
		Base.removeAll(this.model, this.getResource(), EXIFPRIMARYCHROMATICITIES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ea8d3b0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifPrintImageMatchingIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFPRINTIMAGEMATCHINGIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ea8d3b0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifPrintImageMatchingIFDPointer() {
		return Base.has(this.model, this.getResource(), EXIFPRINTIMAGEMATCHINGIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ea8d3b0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifPrintImageMatchingIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFPRINTIMAGEMATCHINGIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ea8d3b0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifPrintImageMatchingIFDPointer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFPRINTIMAGEMATCHINGIFDPOINTER);
	}

     /**
     * Get all values of property ExifPrintImageMatchingIFDPointer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPrintImageMatchingIFDPointer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFPRINTIMAGEMATCHINGIFDPOINTER);
	}
	
    /**
     * Get all values of property ExifPrintImageMatchingIFDPointer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPrintImageMatchingIFDPointer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPRINTIMAGEMATCHINGIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifPrintImageMatchingIFDPointer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifPrintImageMatchingIFDPointer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFPRINTIMAGEMATCHINGIFDPOINTER);
	}

    /**
     * Get all values of property ExifPrintImageMatchingIFDPointer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifPrintImageMatchingIFDPointer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPRINTIMAGEMATCHINGIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifPrintImageMatchingIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPrintImageMatchingIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFPRINTIMAGEMATCHINGIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifPrintImageMatchingIFDPointer as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPrintImageMatchingIFDPointer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFPRINTIMAGEMATCHINGIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPrintImageMatchingIFDPointer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPrintImageMatchingIFDPointer() {
		return Base.getAll(this.model, this.getResource(), EXIFPRINTIMAGEMATCHINGIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifPrintImageMatchingIFDPointer as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifPrintImageMatchingIFDPointer_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFPRINTIMAGEMATCHINGIFDPOINTER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifPrintImageMatchingIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifPrintImageMatchingIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFPRINTIMAGEMATCHINGIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property ExifPrintImageMatchingIFDPointer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifPrintImageMatchingIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFPRINTIMAGEMATCHINGIFDPOINTER, value);
	}
    /**
     * Adds a value to property ExifPrintImageMatchingIFDPointer from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifPrintImageMatchingIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFPRINTIMAGEMATCHINGIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property ExifPrintImageMatchingIFDPointer from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifPrintImageMatchingIFDPointer(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFPRINTIMAGEMATCHINGIFDPOINTER, value);
	}
  

    /**
     * Sets a value of property ExifPrintImageMatchingIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifPrintImageMatchingIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFPRINTIMAGEMATCHINGIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property ExifPrintImageMatchingIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifPrintImageMatchingIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFPRINTIMAGEMATCHINGIFDPOINTER, value);
	}
    /**
     * Sets a value of property ExifPrintImageMatchingIFDPointer from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifPrintImageMatchingIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFPRINTIMAGEMATCHINGIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property ExifPrintImageMatchingIFDPointer from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifPrintImageMatchingIFDPointer(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFPRINTIMAGEMATCHINGIFDPOINTER, value);
	}
  


    /**
     * Removes a value of property ExifPrintImageMatchingIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifPrintImageMatchingIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFPRINTIMAGEMATCHINGIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property ExifPrintImageMatchingIFDPointer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifPrintImageMatchingIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFPRINTIMAGEMATCHINGIFDPOINTER, value);
	}
    /**
     * Removes a value of property ExifPrintImageMatchingIFDPointer given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifPrintImageMatchingIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFPRINTIMAGEMATCHINGIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property ExifPrintImageMatchingIFDPointer given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifPrintImageMatchingIFDPointer(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFPRINTIMAGEMATCHINGIFDPOINTER, value);
	}
  
    /**
     * Removes all values of property ExifPrintImageMatchingIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifPrintImageMatchingIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFPRINTIMAGEMATCHINGIFDPOINTER);
	}
	
    /**
     * Removes all values of property ExifPrintImageMatchingIFDPointer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifPrintImageMatchingIFDPointer() {
		Base.removeAll(this.model, this.getResource(), EXIFPRINTIMAGEMATCHINGIFDPOINTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ecda36b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifRecOffset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFRECOFFSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ecda36b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifRecOffset() {
		return Base.has(this.model, this.getResource(), EXIFRECOFFSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ecda36b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifRecOffset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFRECOFFSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ecda36b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifRecOffset( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFRECOFFSET);
	}

     /**
     * Get all values of property ExifRecOffset as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifRecOffset_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFRECOFFSET);
	}
	
    /**
     * Get all values of property ExifRecOffset as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifRecOffset_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRECOFFSET, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifRecOffset as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifRecOffset_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFRECOFFSET);
	}

    /**
     * Get all values of property ExifRecOffset as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifRecOffset_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRECOFFSET, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifRecOffset     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRecOffset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFRECOFFSET, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifRecOffset as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRecOffset_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRECOFFSET, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifRecOffset     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRecOffset() {
		return Base.getAll(this.model, this.getResource(), EXIFRECOFFSET, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifRecOffset as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRecOffset_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRECOFFSET, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifRecOffset as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifRecOffset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFRECOFFSET, value);
	}
	
    /**
     * Adds a value to property ExifRecOffset as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifRecOffset( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFRECOFFSET, value);
	}
    /**
     * Adds a value to property ExifRecOffset from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifRecOffset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFRECOFFSET, value);
	}
	
    /**
     * Adds a value to property ExifRecOffset from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifRecOffset(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFRECOFFSET, value);
	}
  

    /**
     * Sets a value of property ExifRecOffset from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifRecOffset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFRECOFFSET, value);
	}
	
    /**
     * Sets a value of property ExifRecOffset from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifRecOffset( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFRECOFFSET, value);
	}
    /**
     * Sets a value of property ExifRecOffset from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifRecOffset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFRECOFFSET, value);
	}
	
    /**
     * Sets a value of property ExifRecOffset from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifRecOffset(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFRECOFFSET, value);
	}
  


    /**
     * Removes a value of property ExifRecOffset as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifRecOffset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFRECOFFSET, value);
	}
	
    /**
     * Removes a value of property ExifRecOffset as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifRecOffset( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFRECOFFSET, value);
	}
    /**
     * Removes a value of property ExifRecOffset given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifRecOffset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFRECOFFSET, value);
	}
	
    /**
     * Removes a value of property ExifRecOffset given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifRecOffset(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFRECOFFSET, value);
	}
  
    /**
     * Removes all values of property ExifRecOffset     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifRecOffset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFRECOFFSET);
	}
	
    /**
     * Removes all values of property ExifRecOffset	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifRecOffset() {
		Base.removeAll(this.model, this.getResource(), EXIFRECOFFSET);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@878203a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifReferenceBlackWhite(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFREFERENCEBLACKWHITE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@878203a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifReferenceBlackWhite() {
		return Base.has(this.model, this.getResource(), EXIFREFERENCEBLACKWHITE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@878203a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifReferenceBlackWhite(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFREFERENCEBLACKWHITE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@878203a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifReferenceBlackWhite( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFREFERENCEBLACKWHITE);
	}

     /**
     * Get all values of property ExifReferenceBlackWhite as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifReferenceBlackWhite_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFREFERENCEBLACKWHITE);
	}
	
    /**
     * Get all values of property ExifReferenceBlackWhite as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifReferenceBlackWhite_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFREFERENCEBLACKWHITE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifReferenceBlackWhite as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifReferenceBlackWhite_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFREFERENCEBLACKWHITE);
	}

    /**
     * Get all values of property ExifReferenceBlackWhite as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifReferenceBlackWhite_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFREFERENCEBLACKWHITE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifReferenceBlackWhite     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifReferenceBlackWhite(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFREFERENCEBLACKWHITE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifReferenceBlackWhite as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifReferenceBlackWhite_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFREFERENCEBLACKWHITE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifReferenceBlackWhite     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifReferenceBlackWhite() {
		return Base.getAll(this.model, this.getResource(), EXIFREFERENCEBLACKWHITE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifReferenceBlackWhite as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifReferenceBlackWhite_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFREFERENCEBLACKWHITE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifReferenceBlackWhite as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifReferenceBlackWhite(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFREFERENCEBLACKWHITE, value);
	}
	
    /**
     * Adds a value to property ExifReferenceBlackWhite as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifReferenceBlackWhite( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFREFERENCEBLACKWHITE, value);
	}
    /**
     * Adds a value to property ExifReferenceBlackWhite from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifReferenceBlackWhite(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFREFERENCEBLACKWHITE, value);
	}
	
    /**
     * Adds a value to property ExifReferenceBlackWhite from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifReferenceBlackWhite(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFREFERENCEBLACKWHITE, value);
	}
  

    /**
     * Sets a value of property ExifReferenceBlackWhite from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifReferenceBlackWhite( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFREFERENCEBLACKWHITE, value);
	}
	
    /**
     * Sets a value of property ExifReferenceBlackWhite from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifReferenceBlackWhite( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFREFERENCEBLACKWHITE, value);
	}
    /**
     * Sets a value of property ExifReferenceBlackWhite from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifReferenceBlackWhite(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFREFERENCEBLACKWHITE, value);
	}
	
    /**
     * Sets a value of property ExifReferenceBlackWhite from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifReferenceBlackWhite(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFREFERENCEBLACKWHITE, value);
	}
  


    /**
     * Removes a value of property ExifReferenceBlackWhite as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifReferenceBlackWhite( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFREFERENCEBLACKWHITE, value);
	}
	
    /**
     * Removes a value of property ExifReferenceBlackWhite as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifReferenceBlackWhite( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFREFERENCEBLACKWHITE, value);
	}
    /**
     * Removes a value of property ExifReferenceBlackWhite given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifReferenceBlackWhite(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFREFERENCEBLACKWHITE, value);
	}
	
    /**
     * Removes a value of property ExifReferenceBlackWhite given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifReferenceBlackWhite(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFREFERENCEBLACKWHITE, value);
	}
  
    /**
     * Removes all values of property ExifReferenceBlackWhite     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifReferenceBlackWhite( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFREFERENCEBLACKWHITE);
	}
	
    /**
     * Removes all values of property ExifReferenceBlackWhite	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifReferenceBlackWhite() {
		Base.removeAll(this.model, this.getResource(), EXIFREFERENCEBLACKWHITE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ac72423 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifRelatedFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFRELATEDFILE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ac72423 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifRelatedFile() {
		return Base.has(this.model, this.getResource(), EXIFRELATEDFILE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ac72423 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifRelatedFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFRELATEDFILE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ac72423 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifRelatedFile( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFRELATEDFILE);
	}

     /**
     * Get all values of property ExifRelatedFile as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedFile_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFRELATEDFILE);
	}
	
    /**
     * Get all values of property ExifRelatedFile as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedFile_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRELATEDFILE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifRelatedFile as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedFile_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFRELATEDFILE);
	}

    /**
     * Get all values of property ExifRelatedFile as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedFile_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRELATEDFILE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifRelatedFile     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFRELATEDFILE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifRelatedFile as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedFile_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRELATEDFILE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifRelatedFile     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedFile() {
		return Base.getAll(this.model, this.getResource(), EXIFRELATEDFILE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifRelatedFile as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedFile_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRELATEDFILE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifRelatedFile as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifRelatedFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFRELATEDFILE, value);
	}
	
    /**
     * Adds a value to property ExifRelatedFile as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifRelatedFile( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFRELATEDFILE, value);
	}
    /**
     * Adds a value to property ExifRelatedFile from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifRelatedFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFRELATEDFILE, value);
	}
	
    /**
     * Adds a value to property ExifRelatedFile from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifRelatedFile(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFRELATEDFILE, value);
	}
  

    /**
     * Sets a value of property ExifRelatedFile from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifRelatedFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFRELATEDFILE, value);
	}
	
    /**
     * Sets a value of property ExifRelatedFile from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifRelatedFile( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFRELATEDFILE, value);
	}
    /**
     * Sets a value of property ExifRelatedFile from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifRelatedFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFRELATEDFILE, value);
	}
	
    /**
     * Sets a value of property ExifRelatedFile from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifRelatedFile(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFRELATEDFILE, value);
	}
  


    /**
     * Removes a value of property ExifRelatedFile as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifRelatedFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFRELATEDFILE, value);
	}
	
    /**
     * Removes a value of property ExifRelatedFile as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifRelatedFile( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFRELATEDFILE, value);
	}
    /**
     * Removes a value of property ExifRelatedFile given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifRelatedFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFRELATEDFILE, value);
	}
	
    /**
     * Removes a value of property ExifRelatedFile given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifRelatedFile(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFRELATEDFILE, value);
	}
  
    /**
     * Removes all values of property ExifRelatedFile     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifRelatedFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFRELATEDFILE);
	}
	
    /**
     * Removes all values of property ExifRelatedFile	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifRelatedFile() {
		Base.removeAll(this.model, this.getResource(), EXIFRELATEDFILE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@28fea1a9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifRelatedImageFileFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFRELATEDIMAGEFILEFORMAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@28fea1a9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifRelatedImageFileFormat() {
		return Base.has(this.model, this.getResource(), EXIFRELATEDIMAGEFILEFORMAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@28fea1a9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifRelatedImageFileFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFRELATEDIMAGEFILEFORMAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@28fea1a9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifRelatedImageFileFormat( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFRELATEDIMAGEFILEFORMAT);
	}

     /**
     * Get all values of property ExifRelatedImageFileFormat as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedImageFileFormat_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFRELATEDIMAGEFILEFORMAT);
	}
	
    /**
     * Get all values of property ExifRelatedImageFileFormat as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedImageFileFormat_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRELATEDIMAGEFILEFORMAT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifRelatedImageFileFormat as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedImageFileFormat_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFRELATEDIMAGEFILEFORMAT);
	}

    /**
     * Get all values of property ExifRelatedImageFileFormat as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedImageFileFormat_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRELATEDIMAGEFILEFORMAT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifRelatedImageFileFormat     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedImageFileFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFRELATEDIMAGEFILEFORMAT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifRelatedImageFileFormat as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedImageFileFormat_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRELATEDIMAGEFILEFORMAT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifRelatedImageFileFormat     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedImageFileFormat() {
		return Base.getAll(this.model, this.getResource(), EXIFRELATEDIMAGEFILEFORMAT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifRelatedImageFileFormat as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedImageFileFormat_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRELATEDIMAGEFILEFORMAT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifRelatedImageFileFormat as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifRelatedImageFileFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFRELATEDIMAGEFILEFORMAT, value);
	}
	
    /**
     * Adds a value to property ExifRelatedImageFileFormat as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifRelatedImageFileFormat( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFRELATEDIMAGEFILEFORMAT, value);
	}
    /**
     * Adds a value to property ExifRelatedImageFileFormat from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifRelatedImageFileFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFRELATEDIMAGEFILEFORMAT, value);
	}
	
    /**
     * Adds a value to property ExifRelatedImageFileFormat from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifRelatedImageFileFormat(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFRELATEDIMAGEFILEFORMAT, value);
	}
  

    /**
     * Sets a value of property ExifRelatedImageFileFormat from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifRelatedImageFileFormat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFRELATEDIMAGEFILEFORMAT, value);
	}
	
    /**
     * Sets a value of property ExifRelatedImageFileFormat from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifRelatedImageFileFormat( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFRELATEDIMAGEFILEFORMAT, value);
	}
    /**
     * Sets a value of property ExifRelatedImageFileFormat from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifRelatedImageFileFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFRELATEDIMAGEFILEFORMAT, value);
	}
	
    /**
     * Sets a value of property ExifRelatedImageFileFormat from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifRelatedImageFileFormat(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFRELATEDIMAGEFILEFORMAT, value);
	}
  


    /**
     * Removes a value of property ExifRelatedImageFileFormat as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifRelatedImageFileFormat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFRELATEDIMAGEFILEFORMAT, value);
	}
	
    /**
     * Removes a value of property ExifRelatedImageFileFormat as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifRelatedImageFileFormat( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFRELATEDIMAGEFILEFORMAT, value);
	}
    /**
     * Removes a value of property ExifRelatedImageFileFormat given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifRelatedImageFileFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFRELATEDIMAGEFILEFORMAT, value);
	}
	
    /**
     * Removes a value of property ExifRelatedImageFileFormat given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifRelatedImageFileFormat(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFRELATEDIMAGEFILEFORMAT, value);
	}
  
    /**
     * Removes all values of property ExifRelatedImageFileFormat     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifRelatedImageFileFormat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFRELATEDIMAGEFILEFORMAT);
	}
	
    /**
     * Removes all values of property ExifRelatedImageFileFormat	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifRelatedImageFileFormat() {
		Base.removeAll(this.model, this.getResource(), EXIFRELATEDIMAGEFILEFORMAT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@264114a7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifRelatedImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFRELATEDIMAGELENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@264114a7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifRelatedImageLength() {
		return Base.has(this.model, this.getResource(), EXIFRELATEDIMAGELENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@264114a7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifRelatedImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFRELATEDIMAGELENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@264114a7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifRelatedImageLength( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFRELATEDIMAGELENGTH);
	}

     /**
     * Get all values of property ExifRelatedImageLength as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedImageLength_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFRELATEDIMAGELENGTH);
	}
	
    /**
     * Get all values of property ExifRelatedImageLength as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedImageLength_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRELATEDIMAGELENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifRelatedImageLength as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedImageLength_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFRELATEDIMAGELENGTH);
	}

    /**
     * Get all values of property ExifRelatedImageLength as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedImageLength_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRELATEDIMAGELENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifRelatedImageLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFRELATEDIMAGELENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifRelatedImageLength as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedImageLength_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRELATEDIMAGELENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifRelatedImageLength     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedImageLength() {
		return Base.getAll(this.model, this.getResource(), EXIFRELATEDIMAGELENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifRelatedImageLength as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedImageLength_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRELATEDIMAGELENGTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifRelatedImageLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifRelatedImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFRELATEDIMAGELENGTH, value);
	}
	
    /**
     * Adds a value to property ExifRelatedImageLength as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifRelatedImageLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFRELATEDIMAGELENGTH, value);
	}
    /**
     * Adds a value to property ExifRelatedImageLength from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifRelatedImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFRELATEDIMAGELENGTH, value);
	}
	
    /**
     * Adds a value to property ExifRelatedImageLength from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifRelatedImageLength(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFRELATEDIMAGELENGTH, value);
	}
  

    /**
     * Sets a value of property ExifRelatedImageLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifRelatedImageLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFRELATEDIMAGELENGTH, value);
	}
	
    /**
     * Sets a value of property ExifRelatedImageLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifRelatedImageLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFRELATEDIMAGELENGTH, value);
	}
    /**
     * Sets a value of property ExifRelatedImageLength from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifRelatedImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFRELATEDIMAGELENGTH, value);
	}
	
    /**
     * Sets a value of property ExifRelatedImageLength from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifRelatedImageLength(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFRELATEDIMAGELENGTH, value);
	}
  


    /**
     * Removes a value of property ExifRelatedImageLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifRelatedImageLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFRELATEDIMAGELENGTH, value);
	}
	
    /**
     * Removes a value of property ExifRelatedImageLength as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifRelatedImageLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFRELATEDIMAGELENGTH, value);
	}
    /**
     * Removes a value of property ExifRelatedImageLength given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifRelatedImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFRELATEDIMAGELENGTH, value);
	}
	
    /**
     * Removes a value of property ExifRelatedImageLength given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifRelatedImageLength(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFRELATEDIMAGELENGTH, value);
	}
  
    /**
     * Removes all values of property ExifRelatedImageLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifRelatedImageLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFRELATEDIMAGELENGTH);
	}
	
    /**
     * Removes all values of property ExifRelatedImageLength	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifRelatedImageLength() {
		Base.removeAll(this.model, this.getResource(), EXIFRELATEDIMAGELENGTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@913f000 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifRelatedImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFRELATEDIMAGEWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@913f000 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifRelatedImageWidth() {
		return Base.has(this.model, this.getResource(), EXIFRELATEDIMAGEWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@913f000 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifRelatedImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFRELATEDIMAGEWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@913f000 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifRelatedImageWidth( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFRELATEDIMAGEWIDTH);
	}

     /**
     * Get all values of property ExifRelatedImageWidth as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedImageWidth_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFRELATEDIMAGEWIDTH);
	}
	
    /**
     * Get all values of property ExifRelatedImageWidth as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedImageWidth_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRELATEDIMAGEWIDTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifRelatedImageWidth as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedImageWidth_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFRELATEDIMAGEWIDTH);
	}

    /**
     * Get all values of property ExifRelatedImageWidth as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedImageWidth_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRELATEDIMAGEWIDTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifRelatedImageWidth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFRELATEDIMAGEWIDTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifRelatedImageWidth as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedImageWidth_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRELATEDIMAGEWIDTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifRelatedImageWidth     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedImageWidth() {
		return Base.getAll(this.model, this.getResource(), EXIFRELATEDIMAGEWIDTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifRelatedImageWidth as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedImageWidth_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRELATEDIMAGEWIDTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifRelatedImageWidth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifRelatedImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFRELATEDIMAGEWIDTH, value);
	}
	
    /**
     * Adds a value to property ExifRelatedImageWidth as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifRelatedImageWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFRELATEDIMAGEWIDTH, value);
	}
    /**
     * Adds a value to property ExifRelatedImageWidth from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifRelatedImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFRELATEDIMAGEWIDTH, value);
	}
	
    /**
     * Adds a value to property ExifRelatedImageWidth from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifRelatedImageWidth(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFRELATEDIMAGEWIDTH, value);
	}
  

    /**
     * Sets a value of property ExifRelatedImageWidth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifRelatedImageWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFRELATEDIMAGEWIDTH, value);
	}
	
    /**
     * Sets a value of property ExifRelatedImageWidth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifRelatedImageWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFRELATEDIMAGEWIDTH, value);
	}
    /**
     * Sets a value of property ExifRelatedImageWidth from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifRelatedImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFRELATEDIMAGEWIDTH, value);
	}
	
    /**
     * Sets a value of property ExifRelatedImageWidth from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifRelatedImageWidth(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFRELATEDIMAGEWIDTH, value);
	}
  


    /**
     * Removes a value of property ExifRelatedImageWidth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifRelatedImageWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFRELATEDIMAGEWIDTH, value);
	}
	
    /**
     * Removes a value of property ExifRelatedImageWidth as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifRelatedImageWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFRELATEDIMAGEWIDTH, value);
	}
    /**
     * Removes a value of property ExifRelatedImageWidth given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifRelatedImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFRELATEDIMAGEWIDTH, value);
	}
	
    /**
     * Removes a value of property ExifRelatedImageWidth given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifRelatedImageWidth(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFRELATEDIMAGEWIDTH, value);
	}
  
    /**
     * Removes all values of property ExifRelatedImageWidth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifRelatedImageWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFRELATEDIMAGEWIDTH);
	}
	
    /**
     * Removes all values of property ExifRelatedImageWidth	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifRelatedImageWidth() {
		Base.removeAll(this.model, this.getResource(), EXIFRELATEDIMAGEWIDTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55ca3750 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifRelatedSoundFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFRELATEDSOUNDFILE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55ca3750 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifRelatedSoundFile() {
		return Base.has(this.model, this.getResource(), EXIFRELATEDSOUNDFILE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55ca3750 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifRelatedSoundFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFRELATEDSOUNDFILE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55ca3750 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifRelatedSoundFile( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFRELATEDSOUNDFILE);
	}

     /**
     * Get all values of property ExifRelatedSoundFile as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedSoundFile_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFRELATEDSOUNDFILE);
	}
	
    /**
     * Get all values of property ExifRelatedSoundFile as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedSoundFile_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRELATEDSOUNDFILE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifRelatedSoundFile as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedSoundFile_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFRELATEDSOUNDFILE);
	}

    /**
     * Get all values of property ExifRelatedSoundFile as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifRelatedSoundFile_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRELATEDSOUNDFILE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifRelatedSoundFile     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedSoundFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFRELATEDSOUNDFILE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifRelatedSoundFile as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedSoundFile_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRELATEDSOUNDFILE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifRelatedSoundFile     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedSoundFile() {
		return Base.getAll(this.model, this.getResource(), EXIFRELATEDSOUNDFILE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifRelatedSoundFile as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRelatedSoundFile_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRELATEDSOUNDFILE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifRelatedSoundFile as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifRelatedSoundFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFRELATEDSOUNDFILE, value);
	}
	
    /**
     * Adds a value to property ExifRelatedSoundFile as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifRelatedSoundFile( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFRELATEDSOUNDFILE, value);
	}
    /**
     * Adds a value to property ExifRelatedSoundFile from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifRelatedSoundFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFRELATEDSOUNDFILE, value);
	}
	
    /**
     * Adds a value to property ExifRelatedSoundFile from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifRelatedSoundFile(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFRELATEDSOUNDFILE, value);
	}
  

    /**
     * Sets a value of property ExifRelatedSoundFile from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifRelatedSoundFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFRELATEDSOUNDFILE, value);
	}
	
    /**
     * Sets a value of property ExifRelatedSoundFile from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifRelatedSoundFile( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFRELATEDSOUNDFILE, value);
	}
    /**
     * Sets a value of property ExifRelatedSoundFile from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifRelatedSoundFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFRELATEDSOUNDFILE, value);
	}
	
    /**
     * Sets a value of property ExifRelatedSoundFile from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifRelatedSoundFile(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFRELATEDSOUNDFILE, value);
	}
  


    /**
     * Removes a value of property ExifRelatedSoundFile as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifRelatedSoundFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFRELATEDSOUNDFILE, value);
	}
	
    /**
     * Removes a value of property ExifRelatedSoundFile as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifRelatedSoundFile( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFRELATEDSOUNDFILE, value);
	}
    /**
     * Removes a value of property ExifRelatedSoundFile given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifRelatedSoundFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFRELATEDSOUNDFILE, value);
	}
	
    /**
     * Removes a value of property ExifRelatedSoundFile given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifRelatedSoundFile(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFRELATEDSOUNDFILE, value);
	}
  
    /**
     * Removes all values of property ExifRelatedSoundFile     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifRelatedSoundFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFRELATEDSOUNDFILE);
	}
	
    /**
     * Removes all values of property ExifRelatedSoundFile	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifRelatedSoundFile() {
		Base.removeAll(this.model, this.getResource(), EXIFRELATEDSOUNDFILE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1882af41 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1882af41 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifResolution() {
		return Base.has(this.model, this.getResource(), EXIFRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1882af41 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1882af41 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifResolution( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFRESOLUTION);
	}

     /**
     * Get all values of property ExifResolution as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifResolution_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFRESOLUTION);
	}
	
    /**
     * Get all values of property ExifResolution as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifResolution_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifResolution as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifResolution_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFRESOLUTION);
	}

    /**
     * Get all values of property ExifResolution as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifResolution_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifResolution as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifResolution_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifResolution     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifResolution() {
		return Base.getAll(this.model, this.getResource(), EXIFRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifResolution as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifResolution_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFRESOLUTION, value);
	}
	
    /**
     * Adds a value to property ExifResolution as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFRESOLUTION, value);
	}
    /**
     * Adds a value to property ExifResolution from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFRESOLUTION, value);
	}
	
    /**
     * Adds a value to property ExifResolution from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifResolution(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFRESOLUTION, value);
	}
  

    /**
     * Sets a value of property ExifResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFRESOLUTION, value);
	}
	
    /**
     * Sets a value of property ExifResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFRESOLUTION, value);
	}
    /**
     * Sets a value of property ExifResolution from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFRESOLUTION, value);
	}
	
    /**
     * Sets a value of property ExifResolution from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifResolution(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFRESOLUTION, value);
	}
  


    /**
     * Removes a value of property ExifResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFRESOLUTION, value);
	}
	
    /**
     * Removes a value of property ExifResolution as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFRESOLUTION, value);
	}
    /**
     * Removes a value of property ExifResolution given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFRESOLUTION, value);
	}
	
    /**
     * Removes a value of property ExifResolution given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifResolution(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFRESOLUTION, value);
	}
  
    /**
     * Removes all values of property ExifResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFRESOLUTION);
	}
	
    /**
     * Removes all values of property ExifResolution	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifResolution() {
		Base.removeAll(this.model, this.getResource(), EXIFRESOLUTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b80406e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFRESOLUTIONUNIT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b80406e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifResolutionUnit() {
		return Base.has(this.model, this.getResource(), EXIFRESOLUTIONUNIT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b80406e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFRESOLUTIONUNIT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b80406e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifResolutionUnit( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFRESOLUTIONUNIT);
	}

     /**
     * Get all values of property ExifResolutionUnit as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifResolutionUnit_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFRESOLUTIONUNIT);
	}
	
    /**
     * Get all values of property ExifResolutionUnit as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifResolutionUnit_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRESOLUTIONUNIT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifResolutionUnit as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifResolutionUnit_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFRESOLUTIONUNIT);
	}

    /**
     * Get all values of property ExifResolutionUnit as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifResolutionUnit_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRESOLUTIONUNIT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifResolutionUnit     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFRESOLUTIONUNIT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifResolutionUnit as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifResolutionUnit_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFRESOLUTIONUNIT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifResolutionUnit     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifResolutionUnit() {
		return Base.getAll(this.model, this.getResource(), EXIFRESOLUTIONUNIT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifResolutionUnit as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifResolutionUnit_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFRESOLUTIONUNIT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifResolutionUnit as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFRESOLUTIONUNIT, value);
	}
	
    /**
     * Adds a value to property ExifResolutionUnit as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifResolutionUnit( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFRESOLUTIONUNIT, value);
	}
    /**
     * Adds a value to property ExifResolutionUnit from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFRESOLUTIONUNIT, value);
	}
	
    /**
     * Adds a value to property ExifResolutionUnit from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifResolutionUnit(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFRESOLUTIONUNIT, value);
	}
  

    /**
     * Sets a value of property ExifResolutionUnit from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifResolutionUnit( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFRESOLUTIONUNIT, value);
	}
	
    /**
     * Sets a value of property ExifResolutionUnit from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifResolutionUnit( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFRESOLUTIONUNIT, value);
	}
    /**
     * Sets a value of property ExifResolutionUnit from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFRESOLUTIONUNIT, value);
	}
	
    /**
     * Sets a value of property ExifResolutionUnit from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifResolutionUnit(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFRESOLUTIONUNIT, value);
	}
  


    /**
     * Removes a value of property ExifResolutionUnit as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifResolutionUnit( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFRESOLUTIONUNIT, value);
	}
	
    /**
     * Removes a value of property ExifResolutionUnit as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifResolutionUnit( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFRESOLUTIONUNIT, value);
	}
    /**
     * Removes a value of property ExifResolutionUnit given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFRESOLUTIONUNIT, value);
	}
	
    /**
     * Removes a value of property ExifResolutionUnit given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifResolutionUnit(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFRESOLUTIONUNIT, value);
	}
  
    /**
     * Removes all values of property ExifResolutionUnit     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifResolutionUnit( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFRESOLUTIONUNIT);
	}
	
    /**
     * Removes all values of property ExifResolutionUnit	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifResolutionUnit() {
		Base.removeAll(this.model, this.getResource(), EXIFRESOLUTIONUNIT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c8f53b9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifRowsPerStrip(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFROWSPERSTRIP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c8f53b9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifRowsPerStrip() {
		return Base.has(this.model, this.getResource(), EXIFROWSPERSTRIP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c8f53b9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifRowsPerStrip(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFROWSPERSTRIP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c8f53b9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifRowsPerStrip( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFROWSPERSTRIP);
	}

     /**
     * Get all values of property ExifRowsPerStrip as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifRowsPerStrip_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFROWSPERSTRIP);
	}
	
    /**
     * Get all values of property ExifRowsPerStrip as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifRowsPerStrip_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFROWSPERSTRIP, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifRowsPerStrip as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifRowsPerStrip_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFROWSPERSTRIP);
	}

    /**
     * Get all values of property ExifRowsPerStrip as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifRowsPerStrip_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFROWSPERSTRIP, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifRowsPerStrip     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRowsPerStrip(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFROWSPERSTRIP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifRowsPerStrip as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRowsPerStrip_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFROWSPERSTRIP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifRowsPerStrip     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRowsPerStrip() {
		return Base.getAll(this.model, this.getResource(), EXIFROWSPERSTRIP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifRowsPerStrip as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifRowsPerStrip_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFROWSPERSTRIP, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifRowsPerStrip as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifRowsPerStrip(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFROWSPERSTRIP, value);
	}
	
    /**
     * Adds a value to property ExifRowsPerStrip as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifRowsPerStrip( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFROWSPERSTRIP, value);
	}
    /**
     * Adds a value to property ExifRowsPerStrip from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifRowsPerStrip(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFROWSPERSTRIP, value);
	}
	
    /**
     * Adds a value to property ExifRowsPerStrip from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifRowsPerStrip(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFROWSPERSTRIP, value);
	}
  

    /**
     * Sets a value of property ExifRowsPerStrip from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifRowsPerStrip( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFROWSPERSTRIP, value);
	}
	
    /**
     * Sets a value of property ExifRowsPerStrip from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifRowsPerStrip( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFROWSPERSTRIP, value);
	}
    /**
     * Sets a value of property ExifRowsPerStrip from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifRowsPerStrip(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFROWSPERSTRIP, value);
	}
	
    /**
     * Sets a value of property ExifRowsPerStrip from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifRowsPerStrip(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFROWSPERSTRIP, value);
	}
  


    /**
     * Removes a value of property ExifRowsPerStrip as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifRowsPerStrip( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFROWSPERSTRIP, value);
	}
	
    /**
     * Removes a value of property ExifRowsPerStrip as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifRowsPerStrip( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFROWSPERSTRIP, value);
	}
    /**
     * Removes a value of property ExifRowsPerStrip given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifRowsPerStrip(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFROWSPERSTRIP, value);
	}
	
    /**
     * Removes a value of property ExifRowsPerStrip given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifRowsPerStrip(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFROWSPERSTRIP, value);
	}
  
    /**
     * Removes all values of property ExifRowsPerStrip     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifRowsPerStrip( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFROWSPERSTRIP);
	}
	
    /**
     * Removes all values of property ExifRowsPerStrip	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifRowsPerStrip() {
		Base.removeAll(this.model, this.getResource(), EXIFROWSPERSTRIP);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52efbabf has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSamplesPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSAMPLESPERPIXEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52efbabf has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSamplesPerPixel() {
		return Base.has(this.model, this.getResource(), EXIFSAMPLESPERPIXEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52efbabf has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSamplesPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSAMPLESPERPIXEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52efbabf has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSamplesPerPixel( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSAMPLESPERPIXEL);
	}

     /**
     * Get all values of property ExifSamplesPerPixel as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSamplesPerPixel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSAMPLESPERPIXEL);
	}
	
    /**
     * Get all values of property ExifSamplesPerPixel as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSamplesPerPixel_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSAMPLESPERPIXEL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSamplesPerPixel as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSamplesPerPixel_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSAMPLESPERPIXEL);
	}

    /**
     * Get all values of property ExifSamplesPerPixel as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSamplesPerPixel_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSAMPLESPERPIXEL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSamplesPerPixel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSamplesPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSAMPLESPERPIXEL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSamplesPerPixel as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSamplesPerPixel_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSAMPLESPERPIXEL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSamplesPerPixel     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSamplesPerPixel() {
		return Base.getAll(this.model, this.getResource(), EXIFSAMPLESPERPIXEL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSamplesPerPixel as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSamplesPerPixel_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSAMPLESPERPIXEL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSamplesPerPixel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSamplesPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSAMPLESPERPIXEL, value);
	}
	
    /**
     * Adds a value to property ExifSamplesPerPixel as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSamplesPerPixel( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSAMPLESPERPIXEL, value);
	}
    /**
     * Adds a value to property ExifSamplesPerPixel from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSamplesPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSAMPLESPERPIXEL, value);
	}
	
    /**
     * Adds a value to property ExifSamplesPerPixel from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSamplesPerPixel(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSAMPLESPERPIXEL, value);
	}
  

    /**
     * Sets a value of property ExifSamplesPerPixel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSamplesPerPixel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSAMPLESPERPIXEL, value);
	}
	
    /**
     * Sets a value of property ExifSamplesPerPixel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSamplesPerPixel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSAMPLESPERPIXEL, value);
	}
    /**
     * Sets a value of property ExifSamplesPerPixel from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSamplesPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSAMPLESPERPIXEL, value);
	}
	
    /**
     * Sets a value of property ExifSamplesPerPixel from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSamplesPerPixel(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSAMPLESPERPIXEL, value);
	}
  


    /**
     * Removes a value of property ExifSamplesPerPixel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSamplesPerPixel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSAMPLESPERPIXEL, value);
	}
	
    /**
     * Removes a value of property ExifSamplesPerPixel as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSamplesPerPixel( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSAMPLESPERPIXEL, value);
	}
    /**
     * Removes a value of property ExifSamplesPerPixel given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSamplesPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSAMPLESPERPIXEL, value);
	}
	
    /**
     * Removes a value of property ExifSamplesPerPixel given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSamplesPerPixel(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSAMPLESPERPIXEL, value);
	}
  
    /**
     * Removes all values of property ExifSamplesPerPixel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSamplesPerPixel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSAMPLESPERPIXEL);
	}
	
    /**
     * Removes all values of property ExifSamplesPerPixel	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSamplesPerPixel() {
		Base.removeAll(this.model, this.getResource(), EXIFSAMPLESPERPIXEL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6eee1e2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSATURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6eee1e2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSaturation() {
		return Base.has(this.model, this.getResource(), EXIFSATURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6eee1e2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSATURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6eee1e2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSaturation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSATURATION);
	}

     /**
     * Get all values of property ExifSaturation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSaturation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSATURATION);
	}
	
    /**
     * Get all values of property ExifSaturation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSaturation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSATURATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSaturation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSaturation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSATURATION);
	}

    /**
     * Get all values of property ExifSaturation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSaturation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSATURATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSaturation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSATURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSaturation as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSaturation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSATURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSaturation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSaturation() {
		return Base.getAll(this.model, this.getResource(), EXIFSATURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSaturation as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSaturation_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSATURATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSaturation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSATURATION, value);
	}
	
    /**
     * Adds a value to property ExifSaturation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSaturation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSATURATION, value);
	}
    /**
     * Adds a value to property ExifSaturation from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSATURATION, value);
	}
	
    /**
     * Adds a value to property ExifSaturation from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSaturation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSATURATION, value);
	}
  

    /**
     * Sets a value of property ExifSaturation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSaturation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSATURATION, value);
	}
	
    /**
     * Sets a value of property ExifSaturation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSaturation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSATURATION, value);
	}
    /**
     * Sets a value of property ExifSaturation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSATURATION, value);
	}
	
    /**
     * Sets a value of property ExifSaturation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSaturation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSATURATION, value);
	}
  


    /**
     * Removes a value of property ExifSaturation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSaturation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSATURATION, value);
	}
	
    /**
     * Removes a value of property ExifSaturation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSaturation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSATURATION, value);
	}
    /**
     * Removes a value of property ExifSaturation given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSATURATION, value);
	}
	
    /**
     * Removes a value of property ExifSaturation given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSaturation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSATURATION, value);
	}
  
    /**
     * Removes all values of property ExifSaturation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSaturation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSATURATION);
	}
	
    /**
     * Removes all values of property ExifSaturation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSaturation() {
		Base.removeAll(this.model, this.getResource(), EXIFSATURATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d3d11ce has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSceneCaptureType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSCENECAPTURETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d3d11ce has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSceneCaptureType() {
		return Base.has(this.model, this.getResource(), EXIFSCENECAPTURETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d3d11ce has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSceneCaptureType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSCENECAPTURETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d3d11ce has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSceneCaptureType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSCENECAPTURETYPE);
	}

     /**
     * Get all values of property ExifSceneCaptureType as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSceneCaptureType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSCENECAPTURETYPE);
	}
	
    /**
     * Get all values of property ExifSceneCaptureType as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSceneCaptureType_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSCENECAPTURETYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSceneCaptureType as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSceneCaptureType_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSCENECAPTURETYPE);
	}

    /**
     * Get all values of property ExifSceneCaptureType as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSceneCaptureType_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSCENECAPTURETYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSceneCaptureType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSceneCaptureType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSCENECAPTURETYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSceneCaptureType as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSceneCaptureType_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSCENECAPTURETYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSceneCaptureType     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSceneCaptureType() {
		return Base.getAll(this.model, this.getResource(), EXIFSCENECAPTURETYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSceneCaptureType as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSceneCaptureType_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSCENECAPTURETYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSceneCaptureType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSceneCaptureType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSCENECAPTURETYPE, value);
	}
	
    /**
     * Adds a value to property ExifSceneCaptureType as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSceneCaptureType( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSCENECAPTURETYPE, value);
	}
    /**
     * Adds a value to property ExifSceneCaptureType from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSceneCaptureType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSCENECAPTURETYPE, value);
	}
	
    /**
     * Adds a value to property ExifSceneCaptureType from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSceneCaptureType(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSCENECAPTURETYPE, value);
	}
  

    /**
     * Sets a value of property ExifSceneCaptureType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSceneCaptureType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSCENECAPTURETYPE, value);
	}
	
    /**
     * Sets a value of property ExifSceneCaptureType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSceneCaptureType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSCENECAPTURETYPE, value);
	}
    /**
     * Sets a value of property ExifSceneCaptureType from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSceneCaptureType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSCENECAPTURETYPE, value);
	}
	
    /**
     * Sets a value of property ExifSceneCaptureType from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSceneCaptureType(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSCENECAPTURETYPE, value);
	}
  


    /**
     * Removes a value of property ExifSceneCaptureType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSceneCaptureType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSCENECAPTURETYPE, value);
	}
	
    /**
     * Removes a value of property ExifSceneCaptureType as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSceneCaptureType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSCENECAPTURETYPE, value);
	}
    /**
     * Removes a value of property ExifSceneCaptureType given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSceneCaptureType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSCENECAPTURETYPE, value);
	}
	
    /**
     * Removes a value of property ExifSceneCaptureType given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSceneCaptureType(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSCENECAPTURETYPE, value);
	}
  
    /**
     * Removes all values of property ExifSceneCaptureType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSceneCaptureType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSCENECAPTURETYPE);
	}
	
    /**
     * Removes all values of property ExifSceneCaptureType	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSceneCaptureType() {
		Base.removeAll(this.model, this.getResource(), EXIFSCENECAPTURETYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ed485be has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSceneType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSCENETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ed485be has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSceneType() {
		return Base.has(this.model, this.getResource(), EXIFSCENETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ed485be has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSceneType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSCENETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ed485be has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSceneType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSCENETYPE);
	}

     /**
     * Get all values of property ExifSceneType as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSceneType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSCENETYPE);
	}
	
    /**
     * Get all values of property ExifSceneType as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSceneType_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSCENETYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSceneType as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSceneType_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSCENETYPE);
	}

    /**
     * Get all values of property ExifSceneType as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSceneType_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSCENETYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSceneType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSceneType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSCENETYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSceneType as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSceneType_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSCENETYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSceneType     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSceneType() {
		return Base.getAll(this.model, this.getResource(), EXIFSCENETYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSceneType as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSceneType_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSCENETYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSceneType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSceneType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSCENETYPE, value);
	}
	
    /**
     * Adds a value to property ExifSceneType as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSceneType( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSCENETYPE, value);
	}
    /**
     * Adds a value to property ExifSceneType from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSceneType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSCENETYPE, value);
	}
	
    /**
     * Adds a value to property ExifSceneType from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSceneType(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSCENETYPE, value);
	}
  

    /**
     * Sets a value of property ExifSceneType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSceneType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSCENETYPE, value);
	}
	
    /**
     * Sets a value of property ExifSceneType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSceneType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSCENETYPE, value);
	}
    /**
     * Sets a value of property ExifSceneType from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSceneType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSCENETYPE, value);
	}
	
    /**
     * Sets a value of property ExifSceneType from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSceneType(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSCENETYPE, value);
	}
  


    /**
     * Removes a value of property ExifSceneType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSceneType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSCENETYPE, value);
	}
	
    /**
     * Removes a value of property ExifSceneType as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSceneType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSCENETYPE, value);
	}
    /**
     * Removes a value of property ExifSceneType given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSceneType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSCENETYPE, value);
	}
	
    /**
     * Removes a value of property ExifSceneType given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSceneType(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSCENETYPE, value);
	}
  
    /**
     * Removes all values of property ExifSceneType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSceneType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSCENETYPE);
	}
	
    /**
     * Removes all values of property ExifSceneType	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSceneType() {
		Base.removeAll(this.model, this.getResource(), EXIFSCENETYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b93ae09 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSeconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSECONDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b93ae09 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSeconds() {
		return Base.has(this.model, this.getResource(), EXIFSECONDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b93ae09 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSeconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSECONDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b93ae09 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSeconds( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSECONDS);
	}

     /**
     * Get all values of property ExifSeconds as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSeconds_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSECONDS);
	}
	
    /**
     * Get all values of property ExifSeconds as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSeconds_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSECONDS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSeconds as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSeconds_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSECONDS);
	}

    /**
     * Get all values of property ExifSeconds as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSeconds_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSECONDS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSeconds     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSeconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSECONDS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSeconds as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSeconds_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSECONDS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSeconds     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSeconds() {
		return Base.getAll(this.model, this.getResource(), EXIFSECONDS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSeconds as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSeconds_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSECONDS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSeconds as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSeconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSECONDS, value);
	}
	
    /**
     * Adds a value to property ExifSeconds as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSeconds( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSECONDS, value);
	}
    /**
     * Adds a value to property ExifSeconds from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSeconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSECONDS, value);
	}
	
    /**
     * Adds a value to property ExifSeconds from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSeconds(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSECONDS, value);
	}
  

    /**
     * Sets a value of property ExifSeconds from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSeconds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSECONDS, value);
	}
	
    /**
     * Sets a value of property ExifSeconds from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSeconds( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSECONDS, value);
	}
    /**
     * Sets a value of property ExifSeconds from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSeconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSECONDS, value);
	}
	
    /**
     * Sets a value of property ExifSeconds from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSeconds(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSECONDS, value);
	}
  


    /**
     * Removes a value of property ExifSeconds as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSeconds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSECONDS, value);
	}
	
    /**
     * Removes a value of property ExifSeconds as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSeconds( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSECONDS, value);
	}
    /**
     * Removes a value of property ExifSeconds given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSeconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSECONDS, value);
	}
	
    /**
     * Removes a value of property ExifSeconds given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSeconds(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSECONDS, value);
	}
  
    /**
     * Removes all values of property ExifSeconds     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSeconds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSECONDS);
	}
	
    /**
     * Removes all values of property ExifSeconds	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSeconds() {
		Base.removeAll(this.model, this.getResource(), EXIFSECONDS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2d2fdb80 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSensingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSENSINGMETHOD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2d2fdb80 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSensingMethod() {
		return Base.has(this.model, this.getResource(), EXIFSENSINGMETHOD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2d2fdb80 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSensingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSENSINGMETHOD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2d2fdb80 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSensingMethod( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSENSINGMETHOD);
	}

     /**
     * Get all values of property ExifSensingMethod as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSensingMethod_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSENSINGMETHOD);
	}
	
    /**
     * Get all values of property ExifSensingMethod as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSensingMethod_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSENSINGMETHOD, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSensingMethod as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSensingMethod_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSENSINGMETHOD);
	}

    /**
     * Get all values of property ExifSensingMethod as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSensingMethod_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSENSINGMETHOD, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSensingMethod     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSensingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSENSINGMETHOD, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSensingMethod as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSensingMethod_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSENSINGMETHOD, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSensingMethod     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSensingMethod() {
		return Base.getAll(this.model, this.getResource(), EXIFSENSINGMETHOD, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSensingMethod as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSensingMethod_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSENSINGMETHOD, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSensingMethod as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSensingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSENSINGMETHOD, value);
	}
	
    /**
     * Adds a value to property ExifSensingMethod as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSensingMethod( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSENSINGMETHOD, value);
	}
    /**
     * Adds a value to property ExifSensingMethod from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSensingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSENSINGMETHOD, value);
	}
	
    /**
     * Adds a value to property ExifSensingMethod from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSensingMethod(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSENSINGMETHOD, value);
	}
  

    /**
     * Sets a value of property ExifSensingMethod from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSensingMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSENSINGMETHOD, value);
	}
	
    /**
     * Sets a value of property ExifSensingMethod from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSensingMethod( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSENSINGMETHOD, value);
	}
    /**
     * Sets a value of property ExifSensingMethod from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSensingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSENSINGMETHOD, value);
	}
	
    /**
     * Sets a value of property ExifSensingMethod from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSensingMethod(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSENSINGMETHOD, value);
	}
  


    /**
     * Removes a value of property ExifSensingMethod as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSensingMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSENSINGMETHOD, value);
	}
	
    /**
     * Removes a value of property ExifSensingMethod as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSensingMethod( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSENSINGMETHOD, value);
	}
    /**
     * Removes a value of property ExifSensingMethod given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSensingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSENSINGMETHOD, value);
	}
	
    /**
     * Removes a value of property ExifSensingMethod given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSensingMethod(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSENSINGMETHOD, value);
	}
  
    /**
     * Removes all values of property ExifSensingMethod     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSensingMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSENSINGMETHOD);
	}
	
    /**
     * Removes all values of property ExifSensingMethod	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSensingMethod() {
		Base.removeAll(this.model, this.getResource(), EXIFSENSINGMETHOD);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@361f14fa has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSHARPNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@361f14fa has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSharpness() {
		return Base.has(this.model, this.getResource(), EXIFSHARPNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@361f14fa has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSHARPNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@361f14fa has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSharpness( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSHARPNESS);
	}

     /**
     * Get all values of property ExifSharpness as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSharpness_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSHARPNESS);
	}
	
    /**
     * Get all values of property ExifSharpness as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSharpness_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSHARPNESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSharpness as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSharpness_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSHARPNESS);
	}

    /**
     * Get all values of property ExifSharpness as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSharpness_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSHARPNESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSharpness     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSHARPNESS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSharpness as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSharpness_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSHARPNESS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSharpness     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSharpness() {
		return Base.getAll(this.model, this.getResource(), EXIFSHARPNESS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSharpness as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSharpness_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSHARPNESS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSharpness as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSHARPNESS, value);
	}
	
    /**
     * Adds a value to property ExifSharpness as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSharpness( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSHARPNESS, value);
	}
    /**
     * Adds a value to property ExifSharpness from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSHARPNESS, value);
	}
	
    /**
     * Adds a value to property ExifSharpness from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSharpness(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSHARPNESS, value);
	}
  

    /**
     * Sets a value of property ExifSharpness from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSharpness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSHARPNESS, value);
	}
	
    /**
     * Sets a value of property ExifSharpness from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSharpness( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSHARPNESS, value);
	}
    /**
     * Sets a value of property ExifSharpness from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSHARPNESS, value);
	}
	
    /**
     * Sets a value of property ExifSharpness from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSharpness(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSHARPNESS, value);
	}
  


    /**
     * Removes a value of property ExifSharpness as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSharpness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSHARPNESS, value);
	}
	
    /**
     * Removes a value of property ExifSharpness as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSharpness( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSHARPNESS, value);
	}
    /**
     * Removes a value of property ExifSharpness given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSHARPNESS, value);
	}
	
    /**
     * Removes a value of property ExifSharpness given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSharpness(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSHARPNESS, value);
	}
  
    /**
     * Removes all values of property ExifSharpness     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSharpness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSHARPNESS);
	}
	
    /**
     * Removes all values of property ExifSharpness	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSharpness() {
		Base.removeAll(this.model, this.getResource(), EXIFSHARPNESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@736f7162 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifShutterSpeedValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSHUTTERSPEEDVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@736f7162 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifShutterSpeedValue() {
		return Base.has(this.model, this.getResource(), EXIFSHUTTERSPEEDVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@736f7162 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifShutterSpeedValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSHUTTERSPEEDVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@736f7162 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifShutterSpeedValue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSHUTTERSPEEDVALUE);
	}

     /**
     * Get all values of property ExifShutterSpeedValue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifShutterSpeedValue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSHUTTERSPEEDVALUE);
	}
	
    /**
     * Get all values of property ExifShutterSpeedValue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifShutterSpeedValue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSHUTTERSPEEDVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifShutterSpeedValue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifShutterSpeedValue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSHUTTERSPEEDVALUE);
	}

    /**
     * Get all values of property ExifShutterSpeedValue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifShutterSpeedValue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSHUTTERSPEEDVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifShutterSpeedValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifShutterSpeedValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSHUTTERSPEEDVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifShutterSpeedValue as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifShutterSpeedValue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSHUTTERSPEEDVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifShutterSpeedValue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifShutterSpeedValue() {
		return Base.getAll(this.model, this.getResource(), EXIFSHUTTERSPEEDVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifShutterSpeedValue as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifShutterSpeedValue_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSHUTTERSPEEDVALUE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifShutterSpeedValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifShutterSpeedValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSHUTTERSPEEDVALUE, value);
	}
	
    /**
     * Adds a value to property ExifShutterSpeedValue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifShutterSpeedValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSHUTTERSPEEDVALUE, value);
	}
    /**
     * Adds a value to property ExifShutterSpeedValue from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifShutterSpeedValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSHUTTERSPEEDVALUE, value);
	}
	
    /**
     * Adds a value to property ExifShutterSpeedValue from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifShutterSpeedValue(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSHUTTERSPEEDVALUE, value);
	}
  

    /**
     * Sets a value of property ExifShutterSpeedValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifShutterSpeedValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSHUTTERSPEEDVALUE, value);
	}
	
    /**
     * Sets a value of property ExifShutterSpeedValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifShutterSpeedValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSHUTTERSPEEDVALUE, value);
	}
    /**
     * Sets a value of property ExifShutterSpeedValue from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifShutterSpeedValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSHUTTERSPEEDVALUE, value);
	}
	
    /**
     * Sets a value of property ExifShutterSpeedValue from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifShutterSpeedValue(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSHUTTERSPEEDVALUE, value);
	}
  


    /**
     * Removes a value of property ExifShutterSpeedValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifShutterSpeedValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSHUTTERSPEEDVALUE, value);
	}
	
    /**
     * Removes a value of property ExifShutterSpeedValue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifShutterSpeedValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSHUTTERSPEEDVALUE, value);
	}
    /**
     * Removes a value of property ExifShutterSpeedValue given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifShutterSpeedValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSHUTTERSPEEDVALUE, value);
	}
	
    /**
     * Removes a value of property ExifShutterSpeedValue given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifShutterSpeedValue(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSHUTTERSPEEDVALUE, value);
	}
  
    /**
     * Removes all values of property ExifShutterSpeedValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifShutterSpeedValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSHUTTERSPEEDVALUE);
	}
	
    /**
     * Removes all values of property ExifShutterSpeedValue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifShutterSpeedValue() {
		Base.removeAll(this.model, this.getResource(), EXIFSHUTTERSPEEDVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44c57c25 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSoftware(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSOFTWARE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44c57c25 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSoftware() {
		return Base.has(this.model, this.getResource(), EXIFSOFTWARE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44c57c25 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSoftware(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSOFTWARE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44c57c25 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSoftware( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSOFTWARE);
	}

     /**
     * Get all values of property ExifSoftware as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSoftware_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSOFTWARE);
	}
	
    /**
     * Get all values of property ExifSoftware as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSoftware_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSOFTWARE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSoftware as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSoftware_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSOFTWARE);
	}

    /**
     * Get all values of property ExifSoftware as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSoftware_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSOFTWARE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSoftware     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSoftware(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSOFTWARE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSoftware as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSoftware_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSOFTWARE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSoftware     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSoftware() {
		return Base.getAll(this.model, this.getResource(), EXIFSOFTWARE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSoftware as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSoftware_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSOFTWARE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSoftware as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSoftware(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSOFTWARE, value);
	}
	
    /**
     * Adds a value to property ExifSoftware as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSoftware( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSOFTWARE, value);
	}
    /**
     * Adds a value to property ExifSoftware from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSoftware(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSOFTWARE, value);
	}
	
    /**
     * Adds a value to property ExifSoftware from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSoftware(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSOFTWARE, value);
	}
  

    /**
     * Sets a value of property ExifSoftware from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSoftware( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSOFTWARE, value);
	}
	
    /**
     * Sets a value of property ExifSoftware from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSoftware( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSOFTWARE, value);
	}
    /**
     * Sets a value of property ExifSoftware from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSoftware(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSOFTWARE, value);
	}
	
    /**
     * Sets a value of property ExifSoftware from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSoftware(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSOFTWARE, value);
	}
  


    /**
     * Removes a value of property ExifSoftware as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSoftware( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSOFTWARE, value);
	}
	
    /**
     * Removes a value of property ExifSoftware as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSoftware( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSOFTWARE, value);
	}
    /**
     * Removes a value of property ExifSoftware given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSoftware(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSOFTWARE, value);
	}
	
    /**
     * Removes a value of property ExifSoftware given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSoftware(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSOFTWARE, value);
	}
  
    /**
     * Removes all values of property ExifSoftware     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSoftware( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSOFTWARE);
	}
	
    /**
     * Removes all values of property ExifSoftware	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSoftware() {
		Base.removeAll(this.model, this.getResource(), EXIFSOFTWARE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@744b508 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSpatialFrequencyResponse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSPATIALFREQUENCYRESPONSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@744b508 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSpatialFrequencyResponse() {
		return Base.has(this.model, this.getResource(), EXIFSPATIALFREQUENCYRESPONSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@744b508 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSpatialFrequencyResponse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSPATIALFREQUENCYRESPONSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@744b508 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSpatialFrequencyResponse( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSPATIALFREQUENCYRESPONSE);
	}

     /**
     * Get all values of property ExifSpatialFrequencyResponse as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSpatialFrequencyResponse_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSPATIALFREQUENCYRESPONSE);
	}
	
    /**
     * Get all values of property ExifSpatialFrequencyResponse as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSpatialFrequencyResponse_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSPATIALFREQUENCYRESPONSE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSpatialFrequencyResponse as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSpatialFrequencyResponse_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSPATIALFREQUENCYRESPONSE);
	}

    /**
     * Get all values of property ExifSpatialFrequencyResponse as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSpatialFrequencyResponse_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSPATIALFREQUENCYRESPONSE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSpatialFrequencyResponse     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSpatialFrequencyResponse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSPATIALFREQUENCYRESPONSE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSpatialFrequencyResponse as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSpatialFrequencyResponse_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSPATIALFREQUENCYRESPONSE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSpatialFrequencyResponse     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSpatialFrequencyResponse() {
		return Base.getAll(this.model, this.getResource(), EXIFSPATIALFREQUENCYRESPONSE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSpatialFrequencyResponse as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSpatialFrequencyResponse_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSPATIALFREQUENCYRESPONSE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSpatialFrequencyResponse as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSpatialFrequencyResponse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSPATIALFREQUENCYRESPONSE, value);
	}
	
    /**
     * Adds a value to property ExifSpatialFrequencyResponse as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSpatialFrequencyResponse( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSPATIALFREQUENCYRESPONSE, value);
	}
    /**
     * Adds a value to property ExifSpatialFrequencyResponse from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSpatialFrequencyResponse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSPATIALFREQUENCYRESPONSE, value);
	}
	
    /**
     * Adds a value to property ExifSpatialFrequencyResponse from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSpatialFrequencyResponse(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSPATIALFREQUENCYRESPONSE, value);
	}
  

    /**
     * Sets a value of property ExifSpatialFrequencyResponse from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSpatialFrequencyResponse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSPATIALFREQUENCYRESPONSE, value);
	}
	
    /**
     * Sets a value of property ExifSpatialFrequencyResponse from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSpatialFrequencyResponse( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSPATIALFREQUENCYRESPONSE, value);
	}
    /**
     * Sets a value of property ExifSpatialFrequencyResponse from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSpatialFrequencyResponse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSPATIALFREQUENCYRESPONSE, value);
	}
	
    /**
     * Sets a value of property ExifSpatialFrequencyResponse from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSpatialFrequencyResponse(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSPATIALFREQUENCYRESPONSE, value);
	}
  


    /**
     * Removes a value of property ExifSpatialFrequencyResponse as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSpatialFrequencyResponse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSPATIALFREQUENCYRESPONSE, value);
	}
	
    /**
     * Removes a value of property ExifSpatialFrequencyResponse as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSpatialFrequencyResponse( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSPATIALFREQUENCYRESPONSE, value);
	}
    /**
     * Removes a value of property ExifSpatialFrequencyResponse given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSpatialFrequencyResponse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSPATIALFREQUENCYRESPONSE, value);
	}
	
    /**
     * Removes a value of property ExifSpatialFrequencyResponse given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSpatialFrequencyResponse(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSPATIALFREQUENCYRESPONSE, value);
	}
  
    /**
     * Removes all values of property ExifSpatialFrequencyResponse     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSpatialFrequencyResponse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSPATIALFREQUENCYRESPONSE);
	}
	
    /**
     * Removes all values of property ExifSpatialFrequencyResponse	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSpatialFrequencyResponse() {
		Base.removeAll(this.model, this.getResource(), EXIFSPATIALFREQUENCYRESPONSE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4771c0b8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSpectralSensitivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSPECTRALSENSITIVITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4771c0b8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSpectralSensitivity() {
		return Base.has(this.model, this.getResource(), EXIFSPECTRALSENSITIVITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4771c0b8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSpectralSensitivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSPECTRALSENSITIVITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4771c0b8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSpectralSensitivity( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSPECTRALSENSITIVITY);
	}

     /**
     * Get all values of property ExifSpectralSensitivity as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSpectralSensitivity_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSPECTRALSENSITIVITY);
	}
	
    /**
     * Get all values of property ExifSpectralSensitivity as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSpectralSensitivity_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSPECTRALSENSITIVITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSpectralSensitivity as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSpectralSensitivity_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSPECTRALSENSITIVITY);
	}

    /**
     * Get all values of property ExifSpectralSensitivity as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSpectralSensitivity_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSPECTRALSENSITIVITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSpectralSensitivity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSpectralSensitivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSPECTRALSENSITIVITY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSpectralSensitivity as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSpectralSensitivity_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSPECTRALSENSITIVITY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSpectralSensitivity     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSpectralSensitivity() {
		return Base.getAll(this.model, this.getResource(), EXIFSPECTRALSENSITIVITY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSpectralSensitivity as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSpectralSensitivity_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSPECTRALSENSITIVITY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSpectralSensitivity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSpectralSensitivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSPECTRALSENSITIVITY, value);
	}
	
    /**
     * Adds a value to property ExifSpectralSensitivity as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSpectralSensitivity( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSPECTRALSENSITIVITY, value);
	}
    /**
     * Adds a value to property ExifSpectralSensitivity from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSpectralSensitivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSPECTRALSENSITIVITY, value);
	}
	
    /**
     * Adds a value to property ExifSpectralSensitivity from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSpectralSensitivity(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSPECTRALSENSITIVITY, value);
	}
  

    /**
     * Sets a value of property ExifSpectralSensitivity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSpectralSensitivity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSPECTRALSENSITIVITY, value);
	}
	
    /**
     * Sets a value of property ExifSpectralSensitivity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSpectralSensitivity( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSPECTRALSENSITIVITY, value);
	}
    /**
     * Sets a value of property ExifSpectralSensitivity from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSpectralSensitivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSPECTRALSENSITIVITY, value);
	}
	
    /**
     * Sets a value of property ExifSpectralSensitivity from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSpectralSensitivity(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSPECTRALSENSITIVITY, value);
	}
  


    /**
     * Removes a value of property ExifSpectralSensitivity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSpectralSensitivity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSPECTRALSENSITIVITY, value);
	}
	
    /**
     * Removes a value of property ExifSpectralSensitivity as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSpectralSensitivity( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSPECTRALSENSITIVITY, value);
	}
    /**
     * Removes a value of property ExifSpectralSensitivity given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSpectralSensitivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSPECTRALSENSITIVITY, value);
	}
	
    /**
     * Removes a value of property ExifSpectralSensitivity given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSpectralSensitivity(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSPECTRALSENSITIVITY, value);
	}
  
    /**
     * Removes all values of property ExifSpectralSensitivity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSpectralSensitivity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSPECTRALSENSITIVITY);
	}
	
    /**
     * Removes all values of property ExifSpectralSensitivity	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSpectralSensitivity() {
		Base.removeAll(this.model, this.getResource(), EXIFSPECTRALSENSITIVITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@314e60d2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifStripByteCounts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSTRIPBYTECOUNTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@314e60d2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifStripByteCounts() {
		return Base.has(this.model, this.getResource(), EXIFSTRIPBYTECOUNTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@314e60d2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifStripByteCounts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSTRIPBYTECOUNTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@314e60d2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifStripByteCounts( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSTRIPBYTECOUNTS);
	}

     /**
     * Get all values of property ExifStripByteCounts as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifStripByteCounts_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSTRIPBYTECOUNTS);
	}
	
    /**
     * Get all values of property ExifStripByteCounts as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifStripByteCounts_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSTRIPBYTECOUNTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifStripByteCounts as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifStripByteCounts_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSTRIPBYTECOUNTS);
	}

    /**
     * Get all values of property ExifStripByteCounts as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifStripByteCounts_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSTRIPBYTECOUNTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifStripByteCounts     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifStripByteCounts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSTRIPBYTECOUNTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifStripByteCounts as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifStripByteCounts_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSTRIPBYTECOUNTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifStripByteCounts     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifStripByteCounts() {
		return Base.getAll(this.model, this.getResource(), EXIFSTRIPBYTECOUNTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifStripByteCounts as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifStripByteCounts_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSTRIPBYTECOUNTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifStripByteCounts as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifStripByteCounts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSTRIPBYTECOUNTS, value);
	}
	
    /**
     * Adds a value to property ExifStripByteCounts as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifStripByteCounts( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSTRIPBYTECOUNTS, value);
	}
    /**
     * Adds a value to property ExifStripByteCounts from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifStripByteCounts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSTRIPBYTECOUNTS, value);
	}
	
    /**
     * Adds a value to property ExifStripByteCounts from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifStripByteCounts(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSTRIPBYTECOUNTS, value);
	}
  

    /**
     * Sets a value of property ExifStripByteCounts from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifStripByteCounts( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSTRIPBYTECOUNTS, value);
	}
	
    /**
     * Sets a value of property ExifStripByteCounts from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifStripByteCounts( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSTRIPBYTECOUNTS, value);
	}
    /**
     * Sets a value of property ExifStripByteCounts from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifStripByteCounts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSTRIPBYTECOUNTS, value);
	}
	
    /**
     * Sets a value of property ExifStripByteCounts from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifStripByteCounts(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSTRIPBYTECOUNTS, value);
	}
  


    /**
     * Removes a value of property ExifStripByteCounts as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifStripByteCounts( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSTRIPBYTECOUNTS, value);
	}
	
    /**
     * Removes a value of property ExifStripByteCounts as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifStripByteCounts( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSTRIPBYTECOUNTS, value);
	}
    /**
     * Removes a value of property ExifStripByteCounts given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifStripByteCounts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSTRIPBYTECOUNTS, value);
	}
	
    /**
     * Removes a value of property ExifStripByteCounts given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifStripByteCounts(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSTRIPBYTECOUNTS, value);
	}
  
    /**
     * Removes all values of property ExifStripByteCounts     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifStripByteCounts( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSTRIPBYTECOUNTS);
	}
	
    /**
     * Removes all values of property ExifStripByteCounts	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifStripByteCounts() {
		Base.removeAll(this.model, this.getResource(), EXIFSTRIPBYTECOUNTS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70de9d12 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifStripOffsets(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSTRIPOFFSETS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70de9d12 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifStripOffsets() {
		return Base.has(this.model, this.getResource(), EXIFSTRIPOFFSETS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70de9d12 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifStripOffsets(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSTRIPOFFSETS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70de9d12 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifStripOffsets( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSTRIPOFFSETS);
	}

     /**
     * Get all values of property ExifStripOffsets as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifStripOffsets_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSTRIPOFFSETS);
	}
	
    /**
     * Get all values of property ExifStripOffsets as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifStripOffsets_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSTRIPOFFSETS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifStripOffsets as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifStripOffsets_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSTRIPOFFSETS);
	}

    /**
     * Get all values of property ExifStripOffsets as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifStripOffsets_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSTRIPOFFSETS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifStripOffsets     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifStripOffsets(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSTRIPOFFSETS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifStripOffsets as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifStripOffsets_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSTRIPOFFSETS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifStripOffsets     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifStripOffsets() {
		return Base.getAll(this.model, this.getResource(), EXIFSTRIPOFFSETS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifStripOffsets as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifStripOffsets_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSTRIPOFFSETS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifStripOffsets as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifStripOffsets(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSTRIPOFFSETS, value);
	}
	
    /**
     * Adds a value to property ExifStripOffsets as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifStripOffsets( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSTRIPOFFSETS, value);
	}
    /**
     * Adds a value to property ExifStripOffsets from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifStripOffsets(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSTRIPOFFSETS, value);
	}
	
    /**
     * Adds a value to property ExifStripOffsets from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifStripOffsets(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSTRIPOFFSETS, value);
	}
  

    /**
     * Sets a value of property ExifStripOffsets from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifStripOffsets( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSTRIPOFFSETS, value);
	}
	
    /**
     * Sets a value of property ExifStripOffsets from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifStripOffsets( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSTRIPOFFSETS, value);
	}
    /**
     * Sets a value of property ExifStripOffsets from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifStripOffsets(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSTRIPOFFSETS, value);
	}
	
    /**
     * Sets a value of property ExifStripOffsets from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifStripOffsets(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSTRIPOFFSETS, value);
	}
  


    /**
     * Removes a value of property ExifStripOffsets as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifStripOffsets( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSTRIPOFFSETS, value);
	}
	
    /**
     * Removes a value of property ExifStripOffsets as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifStripOffsets( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSTRIPOFFSETS, value);
	}
    /**
     * Removes a value of property ExifStripOffsets given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifStripOffsets(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSTRIPOFFSETS, value);
	}
	
    /**
     * Removes a value of property ExifStripOffsets given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifStripOffsets(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSTRIPOFFSETS, value);
	}
  
    /**
     * Removes all values of property ExifStripOffsets     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifStripOffsets( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSTRIPOFFSETS);
	}
	
    /**
     * Removes all values of property ExifStripOffsets	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifStripOffsets() {
		Base.removeAll(this.model, this.getResource(), EXIFSTRIPOFFSETS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a664d5f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSubSecTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSUBSECTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a664d5f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSubSecTime() {
		return Base.has(this.model, this.getResource(), EXIFSUBSECTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a664d5f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSubSecTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSUBSECTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a664d5f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSubSecTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSUBSECTIME);
	}

     /**
     * Get all values of property ExifSubSecTime as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubSecTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSUBSECTIME);
	}
	
    /**
     * Get all values of property ExifSubSecTime as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubSecTime_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBSECTIME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSubSecTime as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubSecTime_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSUBSECTIME);
	}

    /**
     * Get all values of property ExifSubSecTime as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubSecTime_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBSECTIME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSubSecTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubSecTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSUBSECTIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSubSecTime as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubSecTime_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBSECTIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubSecTime     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubSecTime() {
		return Base.getAll(this.model, this.getResource(), EXIFSUBSECTIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubSecTime as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubSecTime_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBSECTIME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSubSecTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSubSecTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSUBSECTIME, value);
	}
	
    /**
     * Adds a value to property ExifSubSecTime as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSubSecTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSUBSECTIME, value);
	}
    /**
     * Adds a value to property ExifSubSecTime from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSubSecTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSUBSECTIME, value);
	}
	
    /**
     * Adds a value to property ExifSubSecTime from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSubSecTime(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSUBSECTIME, value);
	}
  

    /**
     * Sets a value of property ExifSubSecTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSubSecTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSUBSECTIME, value);
	}
	
    /**
     * Sets a value of property ExifSubSecTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSubSecTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSUBSECTIME, value);
	}
    /**
     * Sets a value of property ExifSubSecTime from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSubSecTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSUBSECTIME, value);
	}
	
    /**
     * Sets a value of property ExifSubSecTime from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSubSecTime(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSUBSECTIME, value);
	}
  


    /**
     * Removes a value of property ExifSubSecTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSubSecTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSUBSECTIME, value);
	}
	
    /**
     * Removes a value of property ExifSubSecTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSubSecTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSUBSECTIME, value);
	}
    /**
     * Removes a value of property ExifSubSecTime given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSubSecTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSUBSECTIME, value);
	}
	
    /**
     * Removes a value of property ExifSubSecTime given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSubSecTime(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSUBSECTIME, value);
	}
  
    /**
     * Removes all values of property ExifSubSecTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSubSecTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSUBSECTIME);
	}
	
    /**
     * Removes all values of property ExifSubSecTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSubSecTime() {
		Base.removeAll(this.model, this.getResource(), EXIFSUBSECTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1322d790 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSubSecTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSUBSECTIMEDIGITIZED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1322d790 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSubSecTimeDigitized() {
		return Base.has(this.model, this.getResource(), EXIFSUBSECTIMEDIGITIZED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1322d790 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSubSecTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSUBSECTIMEDIGITIZED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1322d790 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSubSecTimeDigitized( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSUBSECTIMEDIGITIZED);
	}

     /**
     * Get all values of property ExifSubSecTimeDigitized as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubSecTimeDigitized_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSUBSECTIMEDIGITIZED);
	}
	
    /**
     * Get all values of property ExifSubSecTimeDigitized as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubSecTimeDigitized_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBSECTIMEDIGITIZED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSubSecTimeDigitized as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubSecTimeDigitized_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSUBSECTIMEDIGITIZED);
	}

    /**
     * Get all values of property ExifSubSecTimeDigitized as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubSecTimeDigitized_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBSECTIMEDIGITIZED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSubSecTimeDigitized     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubSecTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSUBSECTIMEDIGITIZED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSubSecTimeDigitized as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubSecTimeDigitized_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBSECTIMEDIGITIZED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubSecTimeDigitized     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubSecTimeDigitized() {
		return Base.getAll(this.model, this.getResource(), EXIFSUBSECTIMEDIGITIZED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubSecTimeDigitized as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubSecTimeDigitized_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBSECTIMEDIGITIZED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSubSecTimeDigitized as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSubSecTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSUBSECTIMEDIGITIZED, value);
	}
	
    /**
     * Adds a value to property ExifSubSecTimeDigitized as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSubSecTimeDigitized( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSUBSECTIMEDIGITIZED, value);
	}
    /**
     * Adds a value to property ExifSubSecTimeDigitized from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSubSecTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSUBSECTIMEDIGITIZED, value);
	}
	
    /**
     * Adds a value to property ExifSubSecTimeDigitized from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSubSecTimeDigitized(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSUBSECTIMEDIGITIZED, value);
	}
  

    /**
     * Sets a value of property ExifSubSecTimeDigitized from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSubSecTimeDigitized( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSUBSECTIMEDIGITIZED, value);
	}
	
    /**
     * Sets a value of property ExifSubSecTimeDigitized from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSubSecTimeDigitized( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSUBSECTIMEDIGITIZED, value);
	}
    /**
     * Sets a value of property ExifSubSecTimeDigitized from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSubSecTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSUBSECTIMEDIGITIZED, value);
	}
	
    /**
     * Sets a value of property ExifSubSecTimeDigitized from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSubSecTimeDigitized(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSUBSECTIMEDIGITIZED, value);
	}
  


    /**
     * Removes a value of property ExifSubSecTimeDigitized as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSubSecTimeDigitized( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSUBSECTIMEDIGITIZED, value);
	}
	
    /**
     * Removes a value of property ExifSubSecTimeDigitized as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSubSecTimeDigitized( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSUBSECTIMEDIGITIZED, value);
	}
    /**
     * Removes a value of property ExifSubSecTimeDigitized given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSubSecTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSUBSECTIMEDIGITIZED, value);
	}
	
    /**
     * Removes a value of property ExifSubSecTimeDigitized given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSubSecTimeDigitized(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSUBSECTIMEDIGITIZED, value);
	}
  
    /**
     * Removes all values of property ExifSubSecTimeDigitized     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSubSecTimeDigitized( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSUBSECTIMEDIGITIZED);
	}
	
    /**
     * Removes all values of property ExifSubSecTimeDigitized	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSubSecTimeDigitized() {
		Base.removeAll(this.model, this.getResource(), EXIFSUBSECTIMEDIGITIZED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7bd41551 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSubSecTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSUBSECTIMEORIGINAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7bd41551 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSubSecTimeOriginal() {
		return Base.has(this.model, this.getResource(), EXIFSUBSECTIMEORIGINAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7bd41551 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSubSecTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSUBSECTIMEORIGINAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7bd41551 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSubSecTimeOriginal( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSUBSECTIMEORIGINAL);
	}

     /**
     * Get all values of property ExifSubSecTimeOriginal as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubSecTimeOriginal_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSUBSECTIMEORIGINAL);
	}
	
    /**
     * Get all values of property ExifSubSecTimeOriginal as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubSecTimeOriginal_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBSECTIMEORIGINAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSubSecTimeOriginal as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubSecTimeOriginal_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSUBSECTIMEORIGINAL);
	}

    /**
     * Get all values of property ExifSubSecTimeOriginal as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubSecTimeOriginal_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBSECTIMEORIGINAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSubSecTimeOriginal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubSecTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSUBSECTIMEORIGINAL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSubSecTimeOriginal as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubSecTimeOriginal_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBSECTIMEORIGINAL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubSecTimeOriginal     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubSecTimeOriginal() {
		return Base.getAll(this.model, this.getResource(), EXIFSUBSECTIMEORIGINAL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubSecTimeOriginal as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubSecTimeOriginal_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBSECTIMEORIGINAL, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSubSecTimeOriginal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSubSecTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSUBSECTIMEORIGINAL, value);
	}
	
    /**
     * Adds a value to property ExifSubSecTimeOriginal as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSubSecTimeOriginal( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSUBSECTIMEORIGINAL, value);
	}
    /**
     * Adds a value to property ExifSubSecTimeOriginal from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSubSecTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSUBSECTIMEORIGINAL, value);
	}
	
    /**
     * Adds a value to property ExifSubSecTimeOriginal from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSubSecTimeOriginal(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSUBSECTIMEORIGINAL, value);
	}
  

    /**
     * Sets a value of property ExifSubSecTimeOriginal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSubSecTimeOriginal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSUBSECTIMEORIGINAL, value);
	}
	
    /**
     * Sets a value of property ExifSubSecTimeOriginal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSubSecTimeOriginal( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSUBSECTIMEORIGINAL, value);
	}
    /**
     * Sets a value of property ExifSubSecTimeOriginal from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSubSecTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSUBSECTIMEORIGINAL, value);
	}
	
    /**
     * Sets a value of property ExifSubSecTimeOriginal from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSubSecTimeOriginal(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSUBSECTIMEORIGINAL, value);
	}
  


    /**
     * Removes a value of property ExifSubSecTimeOriginal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSubSecTimeOriginal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSUBSECTIMEORIGINAL, value);
	}
	
    /**
     * Removes a value of property ExifSubSecTimeOriginal as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSubSecTimeOriginal( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSUBSECTIMEORIGINAL, value);
	}
    /**
     * Removes a value of property ExifSubSecTimeOriginal given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSubSecTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSUBSECTIMEORIGINAL, value);
	}
	
    /**
     * Removes a value of property ExifSubSecTimeOriginal given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSubSecTimeOriginal(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSUBSECTIMEORIGINAL, value);
	}
  
    /**
     * Removes all values of property ExifSubSecTimeOriginal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSubSecTimeOriginal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSUBSECTIMEORIGINAL);
	}
	
    /**
     * Removes all values of property ExifSubSecTimeOriginal	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSubSecTimeOriginal() {
		Base.removeAll(this.model, this.getResource(), EXIFSUBSECTIMEORIGINAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14107e9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSubjectArea(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSUBJECTAREA);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14107e9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSubjectArea() {
		return Base.has(this.model, this.getResource(), EXIFSUBJECTAREA);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14107e9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSubjectArea(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSUBJECTAREA);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14107e9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSubjectArea( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSUBJECTAREA);
	}

     /**
     * Get all values of property ExifSubjectArea as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectArea_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSUBJECTAREA);
	}
	
    /**
     * Get all values of property ExifSubjectArea as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectArea_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBJECTAREA, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSubjectArea as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectArea_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSUBJECTAREA);
	}

    /**
     * Get all values of property ExifSubjectArea as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectArea_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBJECTAREA, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSubjectArea     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectArea(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSUBJECTAREA, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSubjectArea as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectArea_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBJECTAREA, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubjectArea     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectArea() {
		return Base.getAll(this.model, this.getResource(), EXIFSUBJECTAREA, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubjectArea as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectArea_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBJECTAREA, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSubjectArea as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSubjectArea(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSUBJECTAREA, value);
	}
	
    /**
     * Adds a value to property ExifSubjectArea as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSubjectArea( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSUBJECTAREA, value);
	}
    /**
     * Adds a value to property ExifSubjectArea from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSubjectArea(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSUBJECTAREA, value);
	}
	
    /**
     * Adds a value to property ExifSubjectArea from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSubjectArea(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSUBJECTAREA, value);
	}
  

    /**
     * Sets a value of property ExifSubjectArea from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSubjectArea( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSUBJECTAREA, value);
	}
	
    /**
     * Sets a value of property ExifSubjectArea from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSubjectArea( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSUBJECTAREA, value);
	}
    /**
     * Sets a value of property ExifSubjectArea from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSubjectArea(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSUBJECTAREA, value);
	}
	
    /**
     * Sets a value of property ExifSubjectArea from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSubjectArea(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSUBJECTAREA, value);
	}
  


    /**
     * Removes a value of property ExifSubjectArea as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSubjectArea( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSUBJECTAREA, value);
	}
	
    /**
     * Removes a value of property ExifSubjectArea as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSubjectArea( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSUBJECTAREA, value);
	}
    /**
     * Removes a value of property ExifSubjectArea given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSubjectArea(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSUBJECTAREA, value);
	}
	
    /**
     * Removes a value of property ExifSubjectArea given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSubjectArea(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSUBJECTAREA, value);
	}
  
    /**
     * Removes all values of property ExifSubjectArea     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSubjectArea( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSUBJECTAREA);
	}
	
    /**
     * Removes all values of property ExifSubjectArea	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSubjectArea() {
		Base.removeAll(this.model, this.getResource(), EXIFSUBJECTAREA);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68a6eba7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSubjectDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSUBJECTDISTANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68a6eba7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSubjectDistance() {
		return Base.has(this.model, this.getResource(), EXIFSUBJECTDISTANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68a6eba7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSubjectDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSUBJECTDISTANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68a6eba7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSubjectDistance( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSUBJECTDISTANCE);
	}

     /**
     * Get all values of property ExifSubjectDistance as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectDistance_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSUBJECTDISTANCE);
	}
	
    /**
     * Get all values of property ExifSubjectDistance as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectDistance_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBJECTDISTANCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSubjectDistance as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectDistance_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSUBJECTDISTANCE);
	}

    /**
     * Get all values of property ExifSubjectDistance as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectDistance_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBJECTDISTANCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSubjectDistance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSUBJECTDISTANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSubjectDistance as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectDistance_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBJECTDISTANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubjectDistance     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectDistance() {
		return Base.getAll(this.model, this.getResource(), EXIFSUBJECTDISTANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubjectDistance as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectDistance_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBJECTDISTANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSubjectDistance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSubjectDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSUBJECTDISTANCE, value);
	}
	
    /**
     * Adds a value to property ExifSubjectDistance as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSubjectDistance( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSUBJECTDISTANCE, value);
	}
    /**
     * Adds a value to property ExifSubjectDistance from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSubjectDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSUBJECTDISTANCE, value);
	}
	
    /**
     * Adds a value to property ExifSubjectDistance from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSubjectDistance(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSUBJECTDISTANCE, value);
	}
  

    /**
     * Sets a value of property ExifSubjectDistance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSubjectDistance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSUBJECTDISTANCE, value);
	}
	
    /**
     * Sets a value of property ExifSubjectDistance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSubjectDistance( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSUBJECTDISTANCE, value);
	}
    /**
     * Sets a value of property ExifSubjectDistance from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSubjectDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSUBJECTDISTANCE, value);
	}
	
    /**
     * Sets a value of property ExifSubjectDistance from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSubjectDistance(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSUBJECTDISTANCE, value);
	}
  


    /**
     * Removes a value of property ExifSubjectDistance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSubjectDistance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSUBJECTDISTANCE, value);
	}
	
    /**
     * Removes a value of property ExifSubjectDistance as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSubjectDistance( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSUBJECTDISTANCE, value);
	}
    /**
     * Removes a value of property ExifSubjectDistance given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSubjectDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSUBJECTDISTANCE, value);
	}
	
    /**
     * Removes a value of property ExifSubjectDistance given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSubjectDistance(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSUBJECTDISTANCE, value);
	}
  
    /**
     * Removes all values of property ExifSubjectDistance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSubjectDistance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSUBJECTDISTANCE);
	}
	
    /**
     * Removes all values of property ExifSubjectDistance	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSubjectDistance() {
		Base.removeAll(this.model, this.getResource(), EXIFSUBJECTDISTANCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d2ac818 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSubjectDistanceRange(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSUBJECTDISTANCERANGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d2ac818 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSubjectDistanceRange() {
		return Base.has(this.model, this.getResource(), EXIFSUBJECTDISTANCERANGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d2ac818 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSubjectDistanceRange(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSUBJECTDISTANCERANGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d2ac818 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSubjectDistanceRange( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSUBJECTDISTANCERANGE);
	}

     /**
     * Get all values of property ExifSubjectDistanceRange as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectDistanceRange_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSUBJECTDISTANCERANGE);
	}
	
    /**
     * Get all values of property ExifSubjectDistanceRange as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectDistanceRange_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBJECTDISTANCERANGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSubjectDistanceRange as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectDistanceRange_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSUBJECTDISTANCERANGE);
	}

    /**
     * Get all values of property ExifSubjectDistanceRange as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectDistanceRange_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBJECTDISTANCERANGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSubjectDistanceRange     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectDistanceRange(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSUBJECTDISTANCERANGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSubjectDistanceRange as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectDistanceRange_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBJECTDISTANCERANGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubjectDistanceRange     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectDistanceRange() {
		return Base.getAll(this.model, this.getResource(), EXIFSUBJECTDISTANCERANGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubjectDistanceRange as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectDistanceRange_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBJECTDISTANCERANGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSubjectDistanceRange as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSubjectDistanceRange(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSUBJECTDISTANCERANGE, value);
	}
	
    /**
     * Adds a value to property ExifSubjectDistanceRange as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSubjectDistanceRange( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSUBJECTDISTANCERANGE, value);
	}
    /**
     * Adds a value to property ExifSubjectDistanceRange from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSubjectDistanceRange(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSUBJECTDISTANCERANGE, value);
	}
	
    /**
     * Adds a value to property ExifSubjectDistanceRange from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSubjectDistanceRange(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSUBJECTDISTANCERANGE, value);
	}
  

    /**
     * Sets a value of property ExifSubjectDistanceRange from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSubjectDistanceRange( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSUBJECTDISTANCERANGE, value);
	}
	
    /**
     * Sets a value of property ExifSubjectDistanceRange from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSubjectDistanceRange( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSUBJECTDISTANCERANGE, value);
	}
    /**
     * Sets a value of property ExifSubjectDistanceRange from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSubjectDistanceRange(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSUBJECTDISTANCERANGE, value);
	}
	
    /**
     * Sets a value of property ExifSubjectDistanceRange from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSubjectDistanceRange(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSUBJECTDISTANCERANGE, value);
	}
  


    /**
     * Removes a value of property ExifSubjectDistanceRange as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSubjectDistanceRange( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSUBJECTDISTANCERANGE, value);
	}
	
    /**
     * Removes a value of property ExifSubjectDistanceRange as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSubjectDistanceRange( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSUBJECTDISTANCERANGE, value);
	}
    /**
     * Removes a value of property ExifSubjectDistanceRange given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSubjectDistanceRange(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSUBJECTDISTANCERANGE, value);
	}
	
    /**
     * Removes a value of property ExifSubjectDistanceRange given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSubjectDistanceRange(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSUBJECTDISTANCERANGE, value);
	}
  
    /**
     * Removes all values of property ExifSubjectDistanceRange     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSubjectDistanceRange( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSUBJECTDISTANCERANGE);
	}
	
    /**
     * Removes all values of property ExifSubjectDistanceRange	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSubjectDistanceRange() {
		Base.removeAll(this.model, this.getResource(), EXIFSUBJECTDISTANCERANGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e09e56a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSubjectLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSUBJECTLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e09e56a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSubjectLocation() {
		return Base.has(this.model, this.getResource(), EXIFSUBJECTLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e09e56a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSubjectLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSUBJECTLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e09e56a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSubjectLocation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSUBJECTLOCATION);
	}

     /**
     * Get all values of property ExifSubjectLocation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectLocation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSUBJECTLOCATION);
	}
	
    /**
     * Get all values of property ExifSubjectLocation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectLocation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBJECTLOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSubjectLocation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectLocation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSUBJECTLOCATION);
	}

    /**
     * Get all values of property ExifSubjectLocation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubjectLocation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBJECTLOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSubjectLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSUBJECTLOCATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSubjectLocation as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectLocation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBJECTLOCATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubjectLocation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectLocation() {
		return Base.getAll(this.model, this.getResource(), EXIFSUBJECTLOCATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubjectLocation as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubjectLocation_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBJECTLOCATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSubjectLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSubjectLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSUBJECTLOCATION, value);
	}
	
    /**
     * Adds a value to property ExifSubjectLocation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSubjectLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSUBJECTLOCATION, value);
	}
    /**
     * Adds a value to property ExifSubjectLocation from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSubjectLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSUBJECTLOCATION, value);
	}
	
    /**
     * Adds a value to property ExifSubjectLocation from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSubjectLocation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSUBJECTLOCATION, value);
	}
  

    /**
     * Sets a value of property ExifSubjectLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSubjectLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSUBJECTLOCATION, value);
	}
	
    /**
     * Sets a value of property ExifSubjectLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSubjectLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSUBJECTLOCATION, value);
	}
    /**
     * Sets a value of property ExifSubjectLocation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSubjectLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSUBJECTLOCATION, value);
	}
	
    /**
     * Sets a value of property ExifSubjectLocation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSubjectLocation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSUBJECTLOCATION, value);
	}
  


    /**
     * Removes a value of property ExifSubjectLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSubjectLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSUBJECTLOCATION, value);
	}
	
    /**
     * Removes a value of property ExifSubjectLocation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSubjectLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSUBJECTLOCATION, value);
	}
    /**
     * Removes a value of property ExifSubjectLocation given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSubjectLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSUBJECTLOCATION, value);
	}
	
    /**
     * Removes a value of property ExifSubjectLocation given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSubjectLocation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSUBJECTLOCATION, value);
	}
  
    /**
     * Removes all values of property ExifSubjectLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSubjectLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSUBJECTLOCATION);
	}
	
    /**
     * Removes all values of property ExifSubjectLocation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSubjectLocation() {
		Base.removeAll(this.model, this.getResource(), EXIFSUBJECTLOCATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c3d0083 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifSubseconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFSUBSECONDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c3d0083 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifSubseconds() {
		return Base.has(this.model, this.getResource(), EXIFSUBSECONDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c3d0083 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifSubseconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFSUBSECONDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c3d0083 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifSubseconds( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFSUBSECONDS);
	}

     /**
     * Get all values of property ExifSubseconds as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubseconds_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFSUBSECONDS);
	}
	
    /**
     * Get all values of property ExifSubseconds as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubseconds_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBSECONDS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifSubseconds as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifSubseconds_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFSUBSECONDS);
	}

    /**
     * Get all values of property ExifSubseconds as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifSubseconds_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBSECONDS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifSubseconds     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubseconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFSUBSECONDS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifSubseconds as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubseconds_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFSUBSECONDS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubseconds     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubseconds() {
		return Base.getAll(this.model, this.getResource(), EXIFSUBSECONDS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifSubseconds as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifSubseconds_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFSUBSECONDS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifSubseconds as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifSubseconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFSUBSECONDS, value);
	}
	
    /**
     * Adds a value to property ExifSubseconds as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifSubseconds( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFSUBSECONDS, value);
	}
    /**
     * Adds a value to property ExifSubseconds from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifSubseconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFSUBSECONDS, value);
	}
	
    /**
     * Adds a value to property ExifSubseconds from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifSubseconds(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFSUBSECONDS, value);
	}
  

    /**
     * Sets a value of property ExifSubseconds from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifSubseconds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFSUBSECONDS, value);
	}
	
    /**
     * Sets a value of property ExifSubseconds from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifSubseconds( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFSUBSECONDS, value);
	}
    /**
     * Sets a value of property ExifSubseconds from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifSubseconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFSUBSECONDS, value);
	}
	
    /**
     * Sets a value of property ExifSubseconds from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifSubseconds(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFSUBSECONDS, value);
	}
  


    /**
     * Removes a value of property ExifSubseconds as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifSubseconds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFSUBSECONDS, value);
	}
	
    /**
     * Removes a value of property ExifSubseconds as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifSubseconds( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFSUBSECONDS, value);
	}
    /**
     * Removes a value of property ExifSubseconds given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifSubseconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFSUBSECONDS, value);
	}
	
    /**
     * Removes a value of property ExifSubseconds given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifSubseconds(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFSUBSECONDS, value);
	}
  
    /**
     * Removes all values of property ExifSubseconds     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifSubseconds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFSUBSECONDS);
	}
	
    /**
     * Removes all values of property ExifSubseconds	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifSubseconds() {
		Base.removeAll(this.model, this.getResource(), EXIFSUBSECONDS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68405782 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifTagid(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFTAGID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68405782 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifTagid() {
		return Base.has(this.model, this.getResource(), EXIFTAGID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68405782 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifTagid(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFTAGID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68405782 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifTagid( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFTAGID);
	}

     /**
     * Get all values of property ExifTagid as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifTagid_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFTAGID);
	}
	
    /**
     * Get all values of property ExifTagid as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifTagid_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFTAGID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifTagid as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifTagid_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFTAGID);
	}

    /**
     * Get all values of property ExifTagid as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifTagid_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFTAGID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifTagid     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifTagid(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFTAGID, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifTagid as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifTagid_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFTAGID, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifTagid     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifTagid() {
		return Base.getAll(this.model, this.getResource(), EXIFTAGID, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifTagid as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifTagid_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFTAGID, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifTagid as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifTagid(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFTAGID, value);
	}
	
    /**
     * Adds a value to property ExifTagid as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifTagid( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFTAGID, value);
	}
    /**
     * Adds a value to property ExifTagid from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifTagid(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFTAGID, value);
	}
	
    /**
     * Adds a value to property ExifTagid from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifTagid(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFTAGID, value);
	}
  

    /**
     * Sets a value of property ExifTagid from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifTagid( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFTAGID, value);
	}
	
    /**
     * Sets a value of property ExifTagid from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifTagid( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFTAGID, value);
	}
    /**
     * Sets a value of property ExifTagid from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifTagid(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFTAGID, value);
	}
	
    /**
     * Sets a value of property ExifTagid from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifTagid(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFTAGID, value);
	}
  


    /**
     * Removes a value of property ExifTagid as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifTagid( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFTAGID, value);
	}
	
    /**
     * Removes a value of property ExifTagid as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifTagid( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFTAGID, value);
	}
    /**
     * Removes a value of property ExifTagid given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifTagid(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFTAGID, value);
	}
	
    /**
     * Removes a value of property ExifTagid given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifTagid(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFTAGID, value);
	}
  
    /**
     * Removes all values of property ExifTagid     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifTagid( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFTAGID);
	}
	
    /**
     * Removes all values of property ExifTagid	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifTagid() {
		Base.removeAll(this.model, this.getResource(), EXIFTAGID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c0df85f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifTransferFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFTRANSFERFUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c0df85f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifTransferFunction() {
		return Base.has(this.model, this.getResource(), EXIFTRANSFERFUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c0df85f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifTransferFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFTRANSFERFUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c0df85f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifTransferFunction( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFTRANSFERFUNCTION);
	}

     /**
     * Get all values of property ExifTransferFunction as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifTransferFunction_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFTRANSFERFUNCTION);
	}
	
    /**
     * Get all values of property ExifTransferFunction as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifTransferFunction_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFTRANSFERFUNCTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifTransferFunction as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifTransferFunction_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFTRANSFERFUNCTION);
	}

    /**
     * Get all values of property ExifTransferFunction as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifTransferFunction_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFTRANSFERFUNCTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifTransferFunction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifTransferFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFTRANSFERFUNCTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifTransferFunction as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifTransferFunction_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFTRANSFERFUNCTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifTransferFunction     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifTransferFunction() {
		return Base.getAll(this.model, this.getResource(), EXIFTRANSFERFUNCTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifTransferFunction as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifTransferFunction_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFTRANSFERFUNCTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifTransferFunction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifTransferFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFTRANSFERFUNCTION, value);
	}
	
    /**
     * Adds a value to property ExifTransferFunction as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifTransferFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFTRANSFERFUNCTION, value);
	}
    /**
     * Adds a value to property ExifTransferFunction from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifTransferFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFTRANSFERFUNCTION, value);
	}
	
    /**
     * Adds a value to property ExifTransferFunction from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifTransferFunction(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFTRANSFERFUNCTION, value);
	}
  

    /**
     * Sets a value of property ExifTransferFunction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifTransferFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFTRANSFERFUNCTION, value);
	}
	
    /**
     * Sets a value of property ExifTransferFunction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifTransferFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFTRANSFERFUNCTION, value);
	}
    /**
     * Sets a value of property ExifTransferFunction from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifTransferFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFTRANSFERFUNCTION, value);
	}
	
    /**
     * Sets a value of property ExifTransferFunction from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifTransferFunction(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFTRANSFERFUNCTION, value);
	}
  


    /**
     * Removes a value of property ExifTransferFunction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifTransferFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFTRANSFERFUNCTION, value);
	}
	
    /**
     * Removes a value of property ExifTransferFunction as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifTransferFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFTRANSFERFUNCTION, value);
	}
    /**
     * Removes a value of property ExifTransferFunction given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifTransferFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFTRANSFERFUNCTION, value);
	}
	
    /**
     * Removes a value of property ExifTransferFunction given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifTransferFunction(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFTRANSFERFUNCTION, value);
	}
  
    /**
     * Removes all values of property ExifTransferFunction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifTransferFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFTRANSFERFUNCTION);
	}
	
    /**
     * Removes all values of property ExifTransferFunction	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifTransferFunction() {
		Base.removeAll(this.model, this.getResource(), EXIFTRANSFERFUNCTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3f9b4e74 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifUnknown(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFUNKNOWN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3f9b4e74 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifUnknown() {
		return Base.has(this.model, this.getResource(), EXIFUNKNOWN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3f9b4e74 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifUnknown(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFUNKNOWN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3f9b4e74 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifUnknown( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFUNKNOWN);
	}

     /**
     * Get all values of property ExifUnknown as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifUnknown_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFUNKNOWN);
	}
	
    /**
     * Get all values of property ExifUnknown as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifUnknown_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFUNKNOWN, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifUnknown as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifUnknown_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFUNKNOWN);
	}

    /**
     * Get all values of property ExifUnknown as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifUnknown_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFUNKNOWN, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifUnknown     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifUnknown(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFUNKNOWN, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifUnknown as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifUnknown_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFUNKNOWN, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifUnknown     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifUnknown() {
		return Base.getAll(this.model, this.getResource(), EXIFUNKNOWN, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifUnknown as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifUnknown_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFUNKNOWN, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifUnknown as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifUnknown(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFUNKNOWN, value);
	}
	
    /**
     * Adds a value to property ExifUnknown as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifUnknown( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFUNKNOWN, value);
	}
    /**
     * Adds a value to property ExifUnknown from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifUnknown(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFUNKNOWN, value);
	}
	
    /**
     * Adds a value to property ExifUnknown from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifUnknown(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFUNKNOWN, value);
	}
  

    /**
     * Sets a value of property ExifUnknown from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifUnknown( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFUNKNOWN, value);
	}
	
    /**
     * Sets a value of property ExifUnknown from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifUnknown( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFUNKNOWN, value);
	}
    /**
     * Sets a value of property ExifUnknown from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifUnknown(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFUNKNOWN, value);
	}
	
    /**
     * Sets a value of property ExifUnknown from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifUnknown(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFUNKNOWN, value);
	}
  


    /**
     * Removes a value of property ExifUnknown as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifUnknown( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFUNKNOWN, value);
	}
	
    /**
     * Removes a value of property ExifUnknown as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifUnknown( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFUNKNOWN, value);
	}
    /**
     * Removes a value of property ExifUnknown given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifUnknown(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFUNKNOWN, value);
	}
	
    /**
     * Removes a value of property ExifUnknown given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifUnknown(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFUNKNOWN, value);
	}
  
    /**
     * Removes all values of property ExifUnknown     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifUnknown( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFUNKNOWN);
	}
	
    /**
     * Removes all values of property ExifUnknown	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifUnknown() {
		Base.removeAll(this.model, this.getResource(), EXIFUNKNOWN);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5268ab18 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifUserComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFUSERCOMMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5268ab18 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifUserComment() {
		return Base.has(this.model, this.getResource(), EXIFUSERCOMMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5268ab18 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifUserComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFUSERCOMMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5268ab18 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifUserComment( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFUSERCOMMENT);
	}

     /**
     * Get all values of property ExifUserComment as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifUserComment_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFUSERCOMMENT);
	}
	
    /**
     * Get all values of property ExifUserComment as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifUserComment_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFUSERCOMMENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifUserComment as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifUserComment_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFUSERCOMMENT);
	}

    /**
     * Get all values of property ExifUserComment as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifUserComment_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFUSERCOMMENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifUserComment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifUserComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFUSERCOMMENT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifUserComment as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifUserComment_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFUSERCOMMENT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifUserComment     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifUserComment() {
		return Base.getAll(this.model, this.getResource(), EXIFUSERCOMMENT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifUserComment as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifUserComment_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFUSERCOMMENT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifUserComment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifUserComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFUSERCOMMENT, value);
	}
	
    /**
     * Adds a value to property ExifUserComment as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifUserComment( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFUSERCOMMENT, value);
	}
    /**
     * Adds a value to property ExifUserComment from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifUserComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFUSERCOMMENT, value);
	}
	
    /**
     * Adds a value to property ExifUserComment from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifUserComment(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFUSERCOMMENT, value);
	}
  

    /**
     * Sets a value of property ExifUserComment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifUserComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFUSERCOMMENT, value);
	}
	
    /**
     * Sets a value of property ExifUserComment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifUserComment( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFUSERCOMMENT, value);
	}
    /**
     * Sets a value of property ExifUserComment from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifUserComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFUSERCOMMENT, value);
	}
	
    /**
     * Sets a value of property ExifUserComment from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifUserComment(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFUSERCOMMENT, value);
	}
  


    /**
     * Removes a value of property ExifUserComment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifUserComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFUSERCOMMENT, value);
	}
	
    /**
     * Removes a value of property ExifUserComment as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifUserComment( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFUSERCOMMENT, value);
	}
    /**
     * Removes a value of property ExifUserComment given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifUserComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFUSERCOMMENT, value);
	}
	
    /**
     * Removes a value of property ExifUserComment given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifUserComment(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFUSERCOMMENT, value);
	}
  
    /**
     * Removes all values of property ExifUserComment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifUserComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFUSERCOMMENT);
	}
	
    /**
     * Removes all values of property ExifUserComment	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifUserComment() {
		Base.removeAll(this.model, this.getResource(), EXIFUSERCOMMENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67ff2045 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifUserInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFUSERINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67ff2045 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifUserInfo() {
		return Base.has(this.model, this.getResource(), EXIFUSERINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67ff2045 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifUserInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFUSERINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67ff2045 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifUserInfo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFUSERINFO);
	}

     /**
     * Get all values of property ExifUserInfo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifUserInfo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFUSERINFO);
	}
	
    /**
     * Get all values of property ExifUserInfo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifUserInfo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFUSERINFO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifUserInfo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifUserInfo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFUSERINFO);
	}

    /**
     * Get all values of property ExifUserInfo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifUserInfo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFUSERINFO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifUserInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifUserInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFUSERINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifUserInfo as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifUserInfo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFUSERINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifUserInfo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifUserInfo() {
		return Base.getAll(this.model, this.getResource(), EXIFUSERINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifUserInfo as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifUserInfo_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFUSERINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifUserInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifUserInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFUSERINFO, value);
	}
	
    /**
     * Adds a value to property ExifUserInfo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifUserInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFUSERINFO, value);
	}
    /**
     * Adds a value to property ExifUserInfo from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifUserInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFUSERINFO, value);
	}
	
    /**
     * Adds a value to property ExifUserInfo from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifUserInfo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFUSERINFO, value);
	}
  

    /**
     * Sets a value of property ExifUserInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifUserInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFUSERINFO, value);
	}
	
    /**
     * Sets a value of property ExifUserInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifUserInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFUSERINFO, value);
	}
    /**
     * Sets a value of property ExifUserInfo from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifUserInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFUSERINFO, value);
	}
	
    /**
     * Sets a value of property ExifUserInfo from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifUserInfo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFUSERINFO, value);
	}
  


    /**
     * Removes a value of property ExifUserInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifUserInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFUSERINFO, value);
	}
	
    /**
     * Removes a value of property ExifUserInfo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifUserInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFUSERINFO, value);
	}
    /**
     * Removes a value of property ExifUserInfo given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifUserInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFUSERINFO, value);
	}
	
    /**
     * Removes a value of property ExifUserInfo given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifUserInfo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFUSERINFO, value);
	}
  
    /**
     * Removes all values of property ExifUserInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifUserInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFUSERINFO);
	}
	
    /**
     * Removes all values of property ExifUserInfo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifUserInfo() {
		Base.removeAll(this.model, this.getResource(), EXIFUSERINFO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e2df60d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFVERSIONINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e2df60d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifVersionInfo() {
		return Base.has(this.model, this.getResource(), EXIFVERSIONINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e2df60d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFVERSIONINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e2df60d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifVersionInfo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFVERSIONINFO);
	}

     /**
     * Get all values of property ExifVersionInfo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifVersionInfo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFVERSIONINFO);
	}
	
    /**
     * Get all values of property ExifVersionInfo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifVersionInfo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFVERSIONINFO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifVersionInfo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifVersionInfo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFVERSIONINFO);
	}

    /**
     * Get all values of property ExifVersionInfo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifVersionInfo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFVERSIONINFO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifVersionInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFVERSIONINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifVersionInfo as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifVersionInfo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFVERSIONINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifVersionInfo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifVersionInfo() {
		return Base.getAll(this.model, this.getResource(), EXIFVERSIONINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifVersionInfo as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifVersionInfo_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFVERSIONINFO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifVersionInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFVERSIONINFO, value);
	}
	
    /**
     * Adds a value to property ExifVersionInfo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFVERSIONINFO, value);
	}
    /**
     * Adds a value to property ExifVersionInfo from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFVERSIONINFO, value);
	}
	
    /**
     * Adds a value to property ExifVersionInfo from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifVersionInfo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFVERSIONINFO, value);
	}
  

    /**
     * Sets a value of property ExifVersionInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFVERSIONINFO, value);
	}
	
    /**
     * Sets a value of property ExifVersionInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFVERSIONINFO, value);
	}
    /**
     * Sets a value of property ExifVersionInfo from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFVERSIONINFO, value);
	}
	
    /**
     * Sets a value of property ExifVersionInfo from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifVersionInfo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFVERSIONINFO, value);
	}
  


    /**
     * Removes a value of property ExifVersionInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFVERSIONINFO, value);
	}
	
    /**
     * Removes a value of property ExifVersionInfo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFVERSIONINFO, value);
	}
    /**
     * Removes a value of property ExifVersionInfo given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFVERSIONINFO, value);
	}
	
    /**
     * Removes a value of property ExifVersionInfo given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifVersionInfo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFVERSIONINFO, value);
	}
  
    /**
     * Removes all values of property ExifVersionInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFVERSIONINFO);
	}
	
    /**
     * Removes all values of property ExifVersionInfo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifVersionInfo() {
		Base.removeAll(this.model, this.getResource(), EXIFVERSIONINFO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25e91fa3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifWhiteBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFWHITEBALANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25e91fa3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifWhiteBalance() {
		return Base.has(this.model, this.getResource(), EXIFWHITEBALANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25e91fa3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifWhiteBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFWHITEBALANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25e91fa3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifWhiteBalance( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFWHITEBALANCE);
	}

     /**
     * Get all values of property ExifWhiteBalance as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifWhiteBalance_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFWHITEBALANCE);
	}
	
    /**
     * Get all values of property ExifWhiteBalance as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifWhiteBalance_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFWHITEBALANCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifWhiteBalance as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifWhiteBalance_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFWHITEBALANCE);
	}

    /**
     * Get all values of property ExifWhiteBalance as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifWhiteBalance_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFWHITEBALANCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifWhiteBalance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifWhiteBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFWHITEBALANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifWhiteBalance as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifWhiteBalance_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFWHITEBALANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifWhiteBalance     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifWhiteBalance() {
		return Base.getAll(this.model, this.getResource(), EXIFWHITEBALANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifWhiteBalance as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifWhiteBalance_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFWHITEBALANCE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifWhiteBalance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifWhiteBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFWHITEBALANCE, value);
	}
	
    /**
     * Adds a value to property ExifWhiteBalance as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifWhiteBalance( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFWHITEBALANCE, value);
	}
    /**
     * Adds a value to property ExifWhiteBalance from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifWhiteBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFWHITEBALANCE, value);
	}
	
    /**
     * Adds a value to property ExifWhiteBalance from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifWhiteBalance(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFWHITEBALANCE, value);
	}
  

    /**
     * Sets a value of property ExifWhiteBalance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifWhiteBalance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFWHITEBALANCE, value);
	}
	
    /**
     * Sets a value of property ExifWhiteBalance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifWhiteBalance( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFWHITEBALANCE, value);
	}
    /**
     * Sets a value of property ExifWhiteBalance from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifWhiteBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFWHITEBALANCE, value);
	}
	
    /**
     * Sets a value of property ExifWhiteBalance from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifWhiteBalance(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFWHITEBALANCE, value);
	}
  


    /**
     * Removes a value of property ExifWhiteBalance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifWhiteBalance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFWHITEBALANCE, value);
	}
	
    /**
     * Removes a value of property ExifWhiteBalance as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifWhiteBalance( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFWHITEBALANCE, value);
	}
    /**
     * Removes a value of property ExifWhiteBalance given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifWhiteBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFWHITEBALANCE, value);
	}
	
    /**
     * Removes a value of property ExifWhiteBalance given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifWhiteBalance(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFWHITEBALANCE, value);
	}
  
    /**
     * Removes all values of property ExifWhiteBalance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifWhiteBalance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFWHITEBALANCE);
	}
	
    /**
     * Removes all values of property ExifWhiteBalance	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifWhiteBalance() {
		Base.removeAll(this.model, this.getResource(), EXIFWHITEBALANCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e1798c1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifWhitePoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFWHITEPOINT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e1798c1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifWhitePoint() {
		return Base.has(this.model, this.getResource(), EXIFWHITEPOINT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e1798c1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifWhitePoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFWHITEPOINT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e1798c1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifWhitePoint( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFWHITEPOINT);
	}

     /**
     * Get all values of property ExifWhitePoint as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifWhitePoint_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFWHITEPOINT);
	}
	
    /**
     * Get all values of property ExifWhitePoint as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifWhitePoint_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFWHITEPOINT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifWhitePoint as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifWhitePoint_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFWHITEPOINT);
	}

    /**
     * Get all values of property ExifWhitePoint as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifWhitePoint_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFWHITEPOINT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifWhitePoint     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifWhitePoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFWHITEPOINT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifWhitePoint as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifWhitePoint_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFWHITEPOINT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifWhitePoint     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifWhitePoint() {
		return Base.getAll(this.model, this.getResource(), EXIFWHITEPOINT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifWhitePoint as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifWhitePoint_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFWHITEPOINT, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifWhitePoint as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifWhitePoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFWHITEPOINT, value);
	}
	
    /**
     * Adds a value to property ExifWhitePoint as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifWhitePoint( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFWHITEPOINT, value);
	}
    /**
     * Adds a value to property ExifWhitePoint from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifWhitePoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFWHITEPOINT, value);
	}
	
    /**
     * Adds a value to property ExifWhitePoint from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifWhitePoint(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFWHITEPOINT, value);
	}
  

    /**
     * Sets a value of property ExifWhitePoint from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifWhitePoint( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFWHITEPOINT, value);
	}
	
    /**
     * Sets a value of property ExifWhitePoint from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifWhitePoint( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFWHITEPOINT, value);
	}
    /**
     * Sets a value of property ExifWhitePoint from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifWhitePoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFWHITEPOINT, value);
	}
	
    /**
     * Sets a value of property ExifWhitePoint from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifWhitePoint(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFWHITEPOINT, value);
	}
  


    /**
     * Removes a value of property ExifWhitePoint as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifWhitePoint( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFWHITEPOINT, value);
	}
	
    /**
     * Removes a value of property ExifWhitePoint as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifWhitePoint( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFWHITEPOINT, value);
	}
    /**
     * Removes a value of property ExifWhitePoint given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifWhitePoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFWHITEPOINT, value);
	}
	
    /**
     * Removes a value of property ExifWhitePoint given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifWhitePoint(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFWHITEPOINT, value);
	}
  
    /**
     * Removes all values of property ExifWhitePoint     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifWhitePoint( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFWHITEPOINT);
	}
	
    /**
     * Removes all values of property ExifWhitePoint	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifWhitePoint() {
		Base.removeAll(this.model, this.getResource(), EXIFWHITEPOINT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@359a9570 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@359a9570 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifWidth() {
		return Base.has(this.model, this.getResource(), EXIFWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@359a9570 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@359a9570 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifWidth( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFWIDTH);
	}

     /**
     * Get all values of property ExifWidth as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifWidth_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFWIDTH);
	}
	
    /**
     * Get all values of property ExifWidth as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifWidth_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFWIDTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifWidth as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifWidth_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFWIDTH);
	}

    /**
     * Get all values of property ExifWidth as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifWidth_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFWIDTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifWidth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFWIDTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifWidth as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifWidth_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFWIDTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifWidth     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifWidth() {
		return Base.getAll(this.model, this.getResource(), EXIFWIDTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifWidth as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifWidth_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFWIDTH, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifWidth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFWIDTH, value);
	}
	
    /**
     * Adds a value to property ExifWidth as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFWIDTH, value);
	}
    /**
     * Adds a value to property ExifWidth from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFWIDTH, value);
	}
	
    /**
     * Adds a value to property ExifWidth from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifWidth(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFWIDTH, value);
	}
  

    /**
     * Sets a value of property ExifWidth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFWIDTH, value);
	}
	
    /**
     * Sets a value of property ExifWidth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFWIDTH, value);
	}
    /**
     * Sets a value of property ExifWidth from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFWIDTH, value);
	}
	
    /**
     * Sets a value of property ExifWidth from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifWidth(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFWIDTH, value);
	}
  


    /**
     * Removes a value of property ExifWidth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFWIDTH, value);
	}
	
    /**
     * Removes a value of property ExifWidth as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFWIDTH, value);
	}
    /**
     * Removes a value of property ExifWidth given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFWIDTH, value);
	}
	
    /**
     * Removes a value of property ExifWidth given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifWidth(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFWIDTH, value);
	}
  
    /**
     * Removes all values of property ExifWidth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFWIDTH);
	}
	
    /**
     * Removes all values of property ExifWidth	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifWidth() {
		Base.removeAll(this.model, this.getResource(), EXIFWIDTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3420a61b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFXRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3420a61b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifXResolution() {
		return Base.has(this.model, this.getResource(), EXIFXRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3420a61b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFXRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3420a61b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifXResolution( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFXRESOLUTION);
	}

     /**
     * Get all values of property ExifXResolution as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifXResolution_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFXRESOLUTION);
	}
	
    /**
     * Get all values of property ExifXResolution as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifXResolution_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFXRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifXResolution as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifXResolution_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFXRESOLUTION);
	}

    /**
     * Get all values of property ExifXResolution as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifXResolution_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFXRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifXResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFXRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifXResolution as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifXResolution_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFXRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifXResolution     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifXResolution() {
		return Base.getAll(this.model, this.getResource(), EXIFXRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifXResolution as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifXResolution_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFXRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifXResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFXRESOLUTION, value);
	}
	
    /**
     * Adds a value to property ExifXResolution as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifXResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFXRESOLUTION, value);
	}
    /**
     * Adds a value to property ExifXResolution from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFXRESOLUTION, value);
	}
	
    /**
     * Adds a value to property ExifXResolution from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifXResolution(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFXRESOLUTION, value);
	}
  

    /**
     * Sets a value of property ExifXResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifXResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFXRESOLUTION, value);
	}
	
    /**
     * Sets a value of property ExifXResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifXResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFXRESOLUTION, value);
	}
    /**
     * Sets a value of property ExifXResolution from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFXRESOLUTION, value);
	}
	
    /**
     * Sets a value of property ExifXResolution from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifXResolution(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFXRESOLUTION, value);
	}
  


    /**
     * Removes a value of property ExifXResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifXResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFXRESOLUTION, value);
	}
	
    /**
     * Removes a value of property ExifXResolution as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifXResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFXRESOLUTION, value);
	}
    /**
     * Removes a value of property ExifXResolution given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFXRESOLUTION, value);
	}
	
    /**
     * Removes a value of property ExifXResolution given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifXResolution(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFXRESOLUTION, value);
	}
  
    /**
     * Removes all values of property ExifXResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifXResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFXRESOLUTION);
	}
	
    /**
     * Removes all values of property ExifXResolution	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifXResolution() {
		Base.removeAll(this.model, this.getResource(), EXIFXRESOLUTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ffcfd1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifYCbCrCoefficients(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFYCBCRCOEFFICIENTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ffcfd1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifYCbCrCoefficients() {
		return Base.has(this.model, this.getResource(), EXIFYCBCRCOEFFICIENTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ffcfd1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifYCbCrCoefficients(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFYCBCRCOEFFICIENTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ffcfd1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifYCbCrCoefficients( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFYCBCRCOEFFICIENTS);
	}

     /**
     * Get all values of property ExifYCbCrCoefficients as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifYCbCrCoefficients_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFYCBCRCOEFFICIENTS);
	}
	
    /**
     * Get all values of property ExifYCbCrCoefficients as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifYCbCrCoefficients_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFYCBCRCOEFFICIENTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifYCbCrCoefficients as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifYCbCrCoefficients_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFYCBCRCOEFFICIENTS);
	}

    /**
     * Get all values of property ExifYCbCrCoefficients as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifYCbCrCoefficients_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFYCBCRCOEFFICIENTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifYCbCrCoefficients     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYCbCrCoefficients(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFYCBCRCOEFFICIENTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifYCbCrCoefficients as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYCbCrCoefficients_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFYCBCRCOEFFICIENTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifYCbCrCoefficients     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYCbCrCoefficients() {
		return Base.getAll(this.model, this.getResource(), EXIFYCBCRCOEFFICIENTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifYCbCrCoefficients as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYCbCrCoefficients_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFYCBCRCOEFFICIENTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifYCbCrCoefficients as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifYCbCrCoefficients(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFYCBCRCOEFFICIENTS, value);
	}
	
    /**
     * Adds a value to property ExifYCbCrCoefficients as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifYCbCrCoefficients( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFYCBCRCOEFFICIENTS, value);
	}
    /**
     * Adds a value to property ExifYCbCrCoefficients from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifYCbCrCoefficients(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFYCBCRCOEFFICIENTS, value);
	}
	
    /**
     * Adds a value to property ExifYCbCrCoefficients from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifYCbCrCoefficients(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFYCBCRCOEFFICIENTS, value);
	}
  

    /**
     * Sets a value of property ExifYCbCrCoefficients from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifYCbCrCoefficients( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFYCBCRCOEFFICIENTS, value);
	}
	
    /**
     * Sets a value of property ExifYCbCrCoefficients from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifYCbCrCoefficients( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFYCBCRCOEFFICIENTS, value);
	}
    /**
     * Sets a value of property ExifYCbCrCoefficients from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifYCbCrCoefficients(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFYCBCRCOEFFICIENTS, value);
	}
	
    /**
     * Sets a value of property ExifYCbCrCoefficients from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifYCbCrCoefficients(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFYCBCRCOEFFICIENTS, value);
	}
  


    /**
     * Removes a value of property ExifYCbCrCoefficients as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifYCbCrCoefficients( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFYCBCRCOEFFICIENTS, value);
	}
	
    /**
     * Removes a value of property ExifYCbCrCoefficients as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifYCbCrCoefficients( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFYCBCRCOEFFICIENTS, value);
	}
    /**
     * Removes a value of property ExifYCbCrCoefficients given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifYCbCrCoefficients(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFYCBCRCOEFFICIENTS, value);
	}
	
    /**
     * Removes a value of property ExifYCbCrCoefficients given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifYCbCrCoefficients(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFYCBCRCOEFFICIENTS, value);
	}
  
    /**
     * Removes all values of property ExifYCbCrCoefficients     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifYCbCrCoefficients( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFYCBCRCOEFFICIENTS);
	}
	
    /**
     * Removes all values of property ExifYCbCrCoefficients	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifYCbCrCoefficients() {
		Base.removeAll(this.model, this.getResource(), EXIFYCBCRCOEFFICIENTS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bf841f8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifYCbCrPositioning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFYCBCRPOSITIONING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bf841f8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifYCbCrPositioning() {
		return Base.has(this.model, this.getResource(), EXIFYCBCRPOSITIONING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bf841f8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifYCbCrPositioning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFYCBCRPOSITIONING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@bf841f8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifYCbCrPositioning( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFYCBCRPOSITIONING);
	}

     /**
     * Get all values of property ExifYCbCrPositioning as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifYCbCrPositioning_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFYCBCRPOSITIONING);
	}
	
    /**
     * Get all values of property ExifYCbCrPositioning as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifYCbCrPositioning_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFYCBCRPOSITIONING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifYCbCrPositioning as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifYCbCrPositioning_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFYCBCRPOSITIONING);
	}

    /**
     * Get all values of property ExifYCbCrPositioning as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifYCbCrPositioning_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFYCBCRPOSITIONING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifYCbCrPositioning     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYCbCrPositioning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFYCBCRPOSITIONING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifYCbCrPositioning as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYCbCrPositioning_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFYCBCRPOSITIONING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifYCbCrPositioning     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYCbCrPositioning() {
		return Base.getAll(this.model, this.getResource(), EXIFYCBCRPOSITIONING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifYCbCrPositioning as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYCbCrPositioning_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFYCBCRPOSITIONING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifYCbCrPositioning as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifYCbCrPositioning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFYCBCRPOSITIONING, value);
	}
	
    /**
     * Adds a value to property ExifYCbCrPositioning as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifYCbCrPositioning( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFYCBCRPOSITIONING, value);
	}
    /**
     * Adds a value to property ExifYCbCrPositioning from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifYCbCrPositioning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFYCBCRPOSITIONING, value);
	}
	
    /**
     * Adds a value to property ExifYCbCrPositioning from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifYCbCrPositioning(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFYCBCRPOSITIONING, value);
	}
  

    /**
     * Sets a value of property ExifYCbCrPositioning from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifYCbCrPositioning( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFYCBCRPOSITIONING, value);
	}
	
    /**
     * Sets a value of property ExifYCbCrPositioning from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifYCbCrPositioning( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFYCBCRPOSITIONING, value);
	}
    /**
     * Sets a value of property ExifYCbCrPositioning from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifYCbCrPositioning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFYCBCRPOSITIONING, value);
	}
	
    /**
     * Sets a value of property ExifYCbCrPositioning from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifYCbCrPositioning(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFYCBCRPOSITIONING, value);
	}
  


    /**
     * Removes a value of property ExifYCbCrPositioning as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifYCbCrPositioning( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFYCBCRPOSITIONING, value);
	}
	
    /**
     * Removes a value of property ExifYCbCrPositioning as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifYCbCrPositioning( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFYCBCRPOSITIONING, value);
	}
    /**
     * Removes a value of property ExifYCbCrPositioning given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifYCbCrPositioning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFYCBCRPOSITIONING, value);
	}
	
    /**
     * Removes a value of property ExifYCbCrPositioning given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifYCbCrPositioning(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFYCBCRPOSITIONING, value);
	}
  
    /**
     * Removes all values of property ExifYCbCrPositioning     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifYCbCrPositioning( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFYCBCRPOSITIONING);
	}
	
    /**
     * Removes all values of property ExifYCbCrPositioning	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifYCbCrPositioning() {
		Base.removeAll(this.model, this.getResource(), EXIFYCBCRPOSITIONING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a047f1b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifYCbCrSubSampling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFYCBCRSUBSAMPLING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a047f1b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifYCbCrSubSampling() {
		return Base.has(this.model, this.getResource(), EXIFYCBCRSUBSAMPLING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a047f1b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifYCbCrSubSampling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFYCBCRSUBSAMPLING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a047f1b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifYCbCrSubSampling( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFYCBCRSUBSAMPLING);
	}

     /**
     * Get all values of property ExifYCbCrSubSampling as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifYCbCrSubSampling_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFYCBCRSUBSAMPLING);
	}
	
    /**
     * Get all values of property ExifYCbCrSubSampling as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifYCbCrSubSampling_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFYCBCRSUBSAMPLING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifYCbCrSubSampling as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifYCbCrSubSampling_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFYCBCRSUBSAMPLING);
	}

    /**
     * Get all values of property ExifYCbCrSubSampling as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifYCbCrSubSampling_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFYCBCRSUBSAMPLING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifYCbCrSubSampling     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYCbCrSubSampling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFYCBCRSUBSAMPLING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifYCbCrSubSampling as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYCbCrSubSampling_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFYCBCRSUBSAMPLING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifYCbCrSubSampling     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYCbCrSubSampling() {
		return Base.getAll(this.model, this.getResource(), EXIFYCBCRSUBSAMPLING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifYCbCrSubSampling as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYCbCrSubSampling_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFYCBCRSUBSAMPLING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifYCbCrSubSampling as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifYCbCrSubSampling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFYCBCRSUBSAMPLING, value);
	}
	
    /**
     * Adds a value to property ExifYCbCrSubSampling as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifYCbCrSubSampling( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFYCBCRSUBSAMPLING, value);
	}
    /**
     * Adds a value to property ExifYCbCrSubSampling from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifYCbCrSubSampling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFYCBCRSUBSAMPLING, value);
	}
	
    /**
     * Adds a value to property ExifYCbCrSubSampling from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifYCbCrSubSampling(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFYCBCRSUBSAMPLING, value);
	}
  

    /**
     * Sets a value of property ExifYCbCrSubSampling from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifYCbCrSubSampling( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFYCBCRSUBSAMPLING, value);
	}
	
    /**
     * Sets a value of property ExifYCbCrSubSampling from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifYCbCrSubSampling( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFYCBCRSUBSAMPLING, value);
	}
    /**
     * Sets a value of property ExifYCbCrSubSampling from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifYCbCrSubSampling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFYCBCRSUBSAMPLING, value);
	}
	
    /**
     * Sets a value of property ExifYCbCrSubSampling from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifYCbCrSubSampling(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFYCBCRSUBSAMPLING, value);
	}
  


    /**
     * Removes a value of property ExifYCbCrSubSampling as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifYCbCrSubSampling( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFYCBCRSUBSAMPLING, value);
	}
	
    /**
     * Removes a value of property ExifYCbCrSubSampling as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifYCbCrSubSampling( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFYCBCRSUBSAMPLING, value);
	}
    /**
     * Removes a value of property ExifYCbCrSubSampling given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifYCbCrSubSampling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFYCBCRSUBSAMPLING, value);
	}
	
    /**
     * Removes a value of property ExifYCbCrSubSampling given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifYCbCrSubSampling(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFYCBCRSUBSAMPLING, value);
	}
  
    /**
     * Removes all values of property ExifYCbCrSubSampling     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifYCbCrSubSampling( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFYCBCRSUBSAMPLING);
	}
	
    /**
     * Removes all values of property ExifYCbCrSubSampling	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifYCbCrSubSampling() {
		Base.removeAll(this.model, this.getResource(), EXIFYCBCRSUBSAMPLING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75bf9307 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFYRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75bf9307 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifYResolution() {
		return Base.has(this.model, this.getResource(), EXIFYRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75bf9307 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFYRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75bf9307 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifYResolution( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFYRESOLUTION);
	}

     /**
     * Get all values of property ExifYResolution as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifYResolution_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFYRESOLUTION);
	}
	
    /**
     * Get all values of property ExifYResolution as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifYResolution_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFYRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifYResolution as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifYResolution_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFYRESOLUTION);
	}

    /**
     * Get all values of property ExifYResolution as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifYResolution_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFYRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifYResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFYRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property ExifYResolution as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYResolution_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFYRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifYResolution     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYResolution() {
		return Base.getAll(this.model, this.getResource(), EXIFYRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property ExifYResolution as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllExifYResolution_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFYRESOLUTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property ExifYResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFYRESOLUTION, value);
	}
	
    /**
     * Adds a value to property ExifYResolution as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifYResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFYRESOLUTION, value);
	}
    /**
     * Adds a value to property ExifYResolution from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, EXIFYRESOLUTION, value);
	}
	
    /**
     * Adds a value to property ExifYResolution from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifYResolution(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), EXIFYRESOLUTION, value);
	}
  

    /**
     * Sets a value of property ExifYResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifYResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFYRESOLUTION, value);
	}
	
    /**
     * Sets a value of property ExifYResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifYResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFYRESOLUTION, value);
	}
    /**
     * Sets a value of property ExifYResolution from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, EXIFYRESOLUTION, value);
	}
	
    /**
     * Sets a value of property ExifYResolution from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifYResolution(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), EXIFYRESOLUTION, value);
	}
  


    /**
     * Removes a value of property ExifYResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifYResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFYRESOLUTION, value);
	}
	
    /**
     * Removes a value of property ExifYResolution as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifYResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFYRESOLUTION, value);
	}
    /**
     * Removes a value of property ExifYResolution given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, EXIFYRESOLUTION, value);
	}
	
    /**
     * Removes a value of property ExifYResolution given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifYResolution(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), EXIFYRESOLUTION, value);
	}
  
    /**
     * Removes all values of property ExifYResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifYResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFYRESOLUTION);
	}
	
    /**
     * Removes all values of property ExifYResolution	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifYResolution() {
		Base.removeAll(this.model, this.getResource(), EXIFYRESOLUTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@336f0152 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExternalIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXTERNALIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@336f0152 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExternalIdentifier() {
		return Base.has(this.model, this.getResource(), EXTERNALIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@336f0152 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExternalIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXTERNALIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@336f0152 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExternalIdentifier( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXTERNALIDENTIFIER);
	}

     /**
     * Get all values of property ExternalIdentifier as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExternalIdentifier_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXTERNALIDENTIFIER);
	}
	
    /**
     * Get all values of property ExternalIdentifier as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExternalIdentifier_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXTERNALIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExternalIdentifier as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExternalIdentifier_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXTERNALIDENTIFIER);
	}

    /**
     * Get all values of property ExternalIdentifier as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExternalIdentifier_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXTERNALIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExternalIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllExternalIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXTERNALIDENTIFIER, java.lang.String.class);
	}
	
    /**
     * Get all values of property ExternalIdentifier as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllExternalIdentifier_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXTERNALIDENTIFIER, java.lang.String.class);
	}

    /**
     * Get all values of property ExternalIdentifier     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllExternalIdentifier() {
		return Base.getAll(this.model, this.getResource(), EXTERNALIDENTIFIER, java.lang.String.class);
	}

    /**
     * Get all values of property ExternalIdentifier as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllExternalIdentifier_as() {
		return Base.getAll_as(this.model, this.getResource(), EXTERNALIDENTIFIER, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ExternalIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExternalIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXTERNALIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property ExternalIdentifier as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExternalIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXTERNALIDENTIFIER, value);
	}
    /**
     * Adds a value to property ExternalIdentifier from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExternalIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, EXTERNALIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property ExternalIdentifier from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExternalIdentifier(java.lang.String value) {
		Base.add(this.model, this.getResource(), EXTERNALIDENTIFIER, value);
	}
  

    /**
     * Sets a value of property ExternalIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExternalIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXTERNALIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property ExternalIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExternalIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXTERNALIDENTIFIER, value);
	}
    /**
     * Sets a value of property ExternalIdentifier from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExternalIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, EXTERNALIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property ExternalIdentifier from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExternalIdentifier(java.lang.String value) {
		Base.set(this.model, this.getResource(), EXTERNALIDENTIFIER, value);
	}
  


    /**
     * Removes a value of property ExternalIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExternalIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXTERNALIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property ExternalIdentifier as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExternalIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXTERNALIDENTIFIER, value);
	}
    /**
     * Removes a value of property ExternalIdentifier given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExternalIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, EXTERNALIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property ExternalIdentifier given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExternalIdentifier(java.lang.String value) {
		Base.remove(this.model, this.getResource(), EXTERNALIDENTIFIER, value);
	}
  
    /**
     * Removes all values of property ExternalIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExternalIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXTERNALIDENTIFIER);
	}
	
    /**
     * Removes all values of property ExternalIdentifier	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExternalIdentifier() {
		Base.removeAll(this.model, this.getResource(), EXTERNALIDENTIFIER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3f21708a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFavouritedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FAVOURITEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3f21708a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFavouritedBy() {
		return Base.has(this.model, this.getResource(), FAVOURITEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3f21708a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFavouritedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FAVOURITEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3f21708a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFavouritedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FAVOURITEDBY);
	}

     /**
     * Get all values of property FavouritedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFavouritedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FAVOURITEDBY);
	}
	
    /**
     * Get all values of property FavouritedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFavouritedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FAVOURITEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FavouritedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFavouritedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FAVOURITEDBY);
	}

    /**
     * Get all values of property FavouritedBy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFavouritedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FAVOURITEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FavouritedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nao.Party> getAllFavouritedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FAVOURITEDBY, eu.dime.ps.semantic.model.nao.Party.class);
	}
	
    /**
     * Get all values of property FavouritedBy as a ReactorResult of Party 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nao.Party> getAllFavouritedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FAVOURITEDBY, eu.dime.ps.semantic.model.nao.Party.class);
	}

    /**
     * Get all values of property FavouritedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nao.Party> getAllFavouritedBy() {
		return Base.getAll(this.model, this.getResource(), FAVOURITEDBY, eu.dime.ps.semantic.model.nao.Party.class);
	}

    /**
     * Get all values of property FavouritedBy as a ReactorResult of Party 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nao.Party> getAllFavouritedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), FAVOURITEDBY, eu.dime.ps.semantic.model.nao.Party.class);
	}
 
    /**
     * Adds a value to property FavouritedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFavouritedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FAVOURITEDBY, value);
	}
	
    /**
     * Adds a value to property FavouritedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFavouritedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FAVOURITEDBY, value);
	}
    /**
     * Adds a value to property FavouritedBy from an instance of Party 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFavouritedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Party value) {
		Base.add(model, instanceResource, FAVOURITEDBY, value);
	}
	
    /**
     * Adds a value to property FavouritedBy from an instance of Party 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFavouritedBy(eu.dime.ps.semantic.model.nao.Party value) {
		Base.add(this.model, this.getResource(), FAVOURITEDBY, value);
	}
  

    /**
     * Sets a value of property FavouritedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFavouritedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FAVOURITEDBY, value);
	}
	
    /**
     * Sets a value of property FavouritedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFavouritedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FAVOURITEDBY, value);
	}
    /**
     * Sets a value of property FavouritedBy from an instance of Party 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFavouritedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Party value) {
		Base.set(model, instanceResource, FAVOURITEDBY, value);
	}
	
    /**
     * Sets a value of property FavouritedBy from an instance of Party 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFavouritedBy(eu.dime.ps.semantic.model.nao.Party value) {
		Base.set(this.model, this.getResource(), FAVOURITEDBY, value);
	}
  


    /**
     * Removes a value of property FavouritedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFavouritedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FAVOURITEDBY, value);
	}
	
    /**
     * Removes a value of property FavouritedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFavouritedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FAVOURITEDBY, value);
	}
    /**
     * Removes a value of property FavouritedBy given as an instance of Party 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFavouritedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Party value) {
		Base.remove(model, instanceResource, FAVOURITEDBY, value);
	}
	
    /**
     * Removes a value of property FavouritedBy given as an instance of Party 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFavouritedBy(eu.dime.ps.semantic.model.nao.Party value) {
		Base.remove(this.model, this.getResource(), FAVOURITEDBY, value);
	}
  
    /**
     * Removes all values of property FavouritedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFavouritedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FAVOURITEDBY);
	}
	
    /**
     * Removes all values of property FavouritedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFavouritedBy() {
		Base.removeAll(this.model, this.getResource(), FAVOURITEDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c7ea694 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFirstEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FIRSTEVENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c7ea694 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFirstEvent() {
		return Base.has(this.model, this.getResource(), FIRSTEVENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c7ea694 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFirstEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FIRSTEVENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c7ea694 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFirstEvent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FIRSTEVENT);
	}

    /**
     * Get single value of property FirstEvent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getFirstEvent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, FIRSTEVENT);
	}
	
    /**
     * Get single value of property FirstEvent as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getFirstEvent_asNode() {
		return Base.get_asNode(this.model, this.getResource(), FIRSTEVENT);
	}
     /**
     * Get single value of property FirstEvent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getFirstEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, FIRSTEVENT, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property FirstEvent  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getFirstEvent() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), FIRSTEVENT, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property FirstEvent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addFirstEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, FIRSTEVENT, value, 1);
	}
	
    /**
     * Adds a value to property FirstEvent as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addFirstEvent( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FIRSTEVENT, value, 1);
	}
    /**
     * Adds a value to property FirstEvent from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addFirstEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, FIRSTEVENT, value, 1);
	}
	
    /**
     * Adds a value to property FirstEvent from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addFirstEvent(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FIRSTEVENT, value, 1);
	}
 
 

    /**
     * Sets a value of property FirstEvent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFirstEvent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FIRSTEVENT, value);
	}
	
    /**
     * Sets a value of property FirstEvent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFirstEvent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FIRSTEVENT, value);
	}
    /**
     * Sets a value of property FirstEvent from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFirstEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, FIRSTEVENT, value);
	}
	
    /**
     * Sets a value of property FirstEvent from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFirstEvent(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), FIRSTEVENT, value);
	}
  


    /**
     * Removes a value of property FirstEvent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFirstEvent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FIRSTEVENT, value);
	}
	
    /**
     * Removes a value of property FirstEvent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFirstEvent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FIRSTEVENT, value);
	}
    /**
     * Removes a value of property FirstEvent given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFirstEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, FIRSTEVENT, value);
	}
	
    /**
     * Removes a value of property FirstEvent given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFirstEvent(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), FIRSTEVENT, value);
	}
  
    /**
     * Removes all values of property FirstEvent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFirstEvent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FIRSTEVENT);
	}
	
    /**
     * Removes all values of property FirstEvent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFirstEvent() {
		Base.removeAll(this.model, this.getResource(), FIRSTEVENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58767e95 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFirstModification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FIRSTMODIFICATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58767e95 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFirstModification() {
		return Base.has(this.model, this.getResource(), FIRSTMODIFICATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58767e95 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFirstModification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FIRSTMODIFICATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58767e95 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFirstModification( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FIRSTMODIFICATION);
	}

    /**
     * Get single value of property FirstModification as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getFirstModification_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, FIRSTMODIFICATION);
	}
	
    /**
     * Get single value of property FirstModification as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getFirstModification_asNode() {
		return Base.get_asNode(this.model, this.getResource(), FIRSTMODIFICATION);
	}
     /**
     * Get single value of property FirstModification     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getFirstModification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, FIRSTMODIFICATION, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property FirstModification  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getFirstModification() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), FIRSTMODIFICATION, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property FirstModification as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addFirstModification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, FIRSTMODIFICATION, value, 1);
	}
	
    /**
     * Adds a value to property FirstModification as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addFirstModification( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FIRSTMODIFICATION, value, 1);
	}
    /**
     * Adds a value to property FirstModification from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addFirstModification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, FIRSTMODIFICATION, value, 1);
	}
	
    /**
     * Adds a value to property FirstModification from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addFirstModification(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FIRSTMODIFICATION, value, 1);
	}
 
 

    /**
     * Sets a value of property FirstModification from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFirstModification( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FIRSTMODIFICATION, value);
	}
	
    /**
     * Sets a value of property FirstModification from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFirstModification( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FIRSTMODIFICATION, value);
	}
    /**
     * Sets a value of property FirstModification from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFirstModification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, FIRSTMODIFICATION, value);
	}
	
    /**
     * Sets a value of property FirstModification from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFirstModification(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), FIRSTMODIFICATION, value);
	}
  


    /**
     * Removes a value of property FirstModification as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFirstModification( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FIRSTMODIFICATION, value);
	}
	
    /**
     * Removes a value of property FirstModification as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFirstModification( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FIRSTMODIFICATION, value);
	}
    /**
     * Removes a value of property FirstModification given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFirstModification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, FIRSTMODIFICATION, value);
	}
	
    /**
     * Removes a value of property FirstModification given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFirstModification(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), FIRSTMODIFICATION, value);
	}
  
    /**
     * Removes all values of property FirstModification     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFirstModification( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FIRSTMODIFICATION);
	}
	
    /**
     * Removes all values of property FirstModification	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFirstModification() {
		Base.removeAll(this.model, this.getResource(), FIRSTMODIFICATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11c4317c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFirstUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FIRSTUSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11c4317c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFirstUsage() {
		return Base.has(this.model, this.getResource(), FIRSTUSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11c4317c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFirstUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FIRSTUSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11c4317c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFirstUsage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FIRSTUSAGE);
	}

    /**
     * Get single value of property FirstUsage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getFirstUsage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, FIRSTUSAGE);
	}
	
    /**
     * Get single value of property FirstUsage as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getFirstUsage_asNode() {
		return Base.get_asNode(this.model, this.getResource(), FIRSTUSAGE);
	}
     /**
     * Get single value of property FirstUsage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getFirstUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, FIRSTUSAGE, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property FirstUsage  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getFirstUsage() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), FIRSTUSAGE, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property FirstUsage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addFirstUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, FIRSTUSAGE, value, 1);
	}
	
    /**
     * Adds a value to property FirstUsage as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addFirstUsage( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FIRSTUSAGE, value, 1);
	}
    /**
     * Adds a value to property FirstUsage from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addFirstUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, FIRSTUSAGE, value, 1);
	}
	
    /**
     * Adds a value to property FirstUsage from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addFirstUsage(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FIRSTUSAGE, value, 1);
	}
 
 

    /**
     * Sets a value of property FirstUsage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFirstUsage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FIRSTUSAGE, value);
	}
	
    /**
     * Sets a value of property FirstUsage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFirstUsage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FIRSTUSAGE, value);
	}
    /**
     * Sets a value of property FirstUsage from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFirstUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, FIRSTUSAGE, value);
	}
	
    /**
     * Sets a value of property FirstUsage from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFirstUsage(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), FIRSTUSAGE, value);
	}
  


    /**
     * Removes a value of property FirstUsage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFirstUsage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FIRSTUSAGE, value);
	}
	
    /**
     * Removes a value of property FirstUsage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFirstUsage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FIRSTUSAGE, value);
	}
    /**
     * Removes a value of property FirstUsage given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFirstUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, FIRSTUSAGE, value);
	}
	
    /**
     * Removes a value of property FirstUsage given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFirstUsage(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), FIRSTUSAGE, value);
	}
  
    /**
     * Removes all values of property FirstUsage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFirstUsage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FIRSTUSAGE);
	}
	
    /**
     * Removes all values of property FirstUsage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFirstUsage() {
		Base.removeAll(this.model, this.getResource(), FIRSTUSAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c54daa9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFoafMember(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FOAFMEMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c54daa9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFoafMember() {
		return Base.has(this.model, this.getResource(), FOAFMEMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c54daa9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFoafMember(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FOAFMEMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c54daa9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFoafMember( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FOAFMEMBER);
	}

     /**
     * Get all values of property FoafMember as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFoafMember_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FOAFMEMBER);
	}
	
    /**
     * Get all values of property FoafMember as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFoafMember_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOAFMEMBER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FoafMember as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFoafMember_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FOAFMEMBER);
	}

    /**
     * Get all values of property FoafMember as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFoafMember_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FOAFMEMBER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FoafMember     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllFoafMember(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FOAFMEMBER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property FoafMember as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllFoafMember_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOAFMEMBER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property FoafMember     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllFoafMember() {
		return Base.getAll(this.model, this.getResource(), FOAFMEMBER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property FoafMember as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllFoafMember_as() {
		return Base.getAll_as(this.model, this.getResource(), FOAFMEMBER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property FoafMember as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFoafMember(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FOAFMEMBER, value);
	}
	
    /**
     * Adds a value to property FoafMember as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFoafMember( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FOAFMEMBER, value);
	}
    /**
     * Adds a value to property FoafMember from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFoafMember(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, FOAFMEMBER, value);
	}
	
    /**
     * Adds a value to property FoafMember from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFoafMember(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), FOAFMEMBER, value);
	}
  

    /**
     * Sets a value of property FoafMember from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFoafMember( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FOAFMEMBER, value);
	}
	
    /**
     * Sets a value of property FoafMember from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFoafMember( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FOAFMEMBER, value);
	}
    /**
     * Sets a value of property FoafMember from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFoafMember(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, FOAFMEMBER, value);
	}
	
    /**
     * Sets a value of property FoafMember from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFoafMember(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), FOAFMEMBER, value);
	}
  


    /**
     * Removes a value of property FoafMember as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFoafMember( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FOAFMEMBER, value);
	}
	
    /**
     * Removes a value of property FoafMember as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFoafMember( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FOAFMEMBER, value);
	}
    /**
     * Removes a value of property FoafMember given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFoafMember(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, FOAFMEMBER, value);
	}
	
    /**
     * Removes a value of property FoafMember given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFoafMember(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), FOAFMEMBER, value);
	}
  
    /**
     * Removes all values of property FoafMember     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFoafMember( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FOAFMEMBER);
	}
	
    /**
     * Removes all values of property FoafMember	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFoafMember() {
		Base.removeAll(this.model, this.getResource(), FOAFMEMBER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3df47239 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFoafName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FOAFNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3df47239 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFoafName() {
		return Base.has(this.model, this.getResource(), FOAFNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3df47239 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFoafName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FOAFNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3df47239 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFoafName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FOAFNAME);
	}

     /**
     * Get all values of property FoafName as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFoafName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FOAFNAME);
	}
	
    /**
     * Get all values of property FoafName as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFoafName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOAFNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FoafName as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFoafName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FOAFNAME);
	}

    /**
     * Get all values of property FoafName as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFoafName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FOAFNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FoafName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllFoafName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FOAFNAME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property FoafName as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllFoafName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOAFNAME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property FoafName     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllFoafName() {
		return Base.getAll(this.model, this.getResource(), FOAFNAME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property FoafName as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllFoafName_as() {
		return Base.getAll_as(this.model, this.getResource(), FOAFNAME, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property FoafName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFoafName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FOAFNAME, value);
	}
	
    /**
     * Adds a value to property FoafName as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFoafName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FOAFNAME, value);
	}
    /**
     * Adds a value to property FoafName from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFoafName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, FOAFNAME, value);
	}
	
    /**
     * Adds a value to property FoafName from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFoafName(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), FOAFNAME, value);
	}
  

    /**
     * Sets a value of property FoafName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFoafName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FOAFNAME, value);
	}
	
    /**
     * Sets a value of property FoafName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFoafName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FOAFNAME, value);
	}
    /**
     * Sets a value of property FoafName from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFoafName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, FOAFNAME, value);
	}
	
    /**
     * Sets a value of property FoafName from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFoafName(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), FOAFNAME, value);
	}
  


    /**
     * Removes a value of property FoafName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFoafName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FOAFNAME, value);
	}
	
    /**
     * Removes a value of property FoafName as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFoafName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FOAFNAME, value);
	}
    /**
     * Removes a value of property FoafName given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFoafName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, FOAFNAME, value);
	}
	
    /**
     * Removes a value of property FoafName given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFoafName(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), FOAFNAME, value);
	}
  
    /**
     * Removes all values of property FoafName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFoafName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FOAFNAME);
	}
	
    /**
     * Removes all values of property FoafName	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFoafName() {
		Base.removeAll(this.model, this.getResource(), FOAFNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@246ebc80 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFrontChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FRONTCHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@246ebc80 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFrontChannels() {
		return Base.has(this.model, this.getResource(), FRONTCHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@246ebc80 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFrontChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FRONTCHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@246ebc80 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFrontChannels( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FRONTCHANNELS);
	}

    /**
     * Get single value of property FrontChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getFrontChannels_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, FRONTCHANNELS);
	}
	
    /**
     * Get single value of property FrontChannels as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getFrontChannels_asNode() {
		return Base.get_asNode(this.model, this.getResource(), FRONTCHANNELS);
	}
     /**
     * Get single value of property FrontChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getFrontChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, FRONTCHANNELS, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property FrontChannels  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getFrontChannels() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), FRONTCHANNELS, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property FrontChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addFrontChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, FRONTCHANNELS, value, 1);
	}
	
    /**
     * Adds a value to property FrontChannels as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addFrontChannels( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FRONTCHANNELS, value, 1);
	}
    /**
     * Adds a value to property FrontChannels from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addFrontChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, FRONTCHANNELS, value, 1);
	}
	
    /**
     * Adds a value to property FrontChannels from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addFrontChannels(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FRONTCHANNELS, value, 1);
	}
 
 

    /**
     * Sets a value of property FrontChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFrontChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FRONTCHANNELS, value);
	}
	
    /**
     * Sets a value of property FrontChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFrontChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FRONTCHANNELS, value);
	}
    /**
     * Sets a value of property FrontChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFrontChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, FRONTCHANNELS, value);
	}
	
    /**
     * Sets a value of property FrontChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFrontChannels(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), FRONTCHANNELS, value);
	}
  


    /**
     * Removes a value of property FrontChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFrontChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FRONTCHANNELS, value);
	}
	
    /**
     * Removes a value of property FrontChannels as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFrontChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FRONTCHANNELS, value);
	}
    /**
     * Removes a value of property FrontChannels given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFrontChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, FRONTCHANNELS, value);
	}
	
    /**
     * Removes a value of property FrontChannels given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFrontChannels(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), FRONTCHANNELS, value);
	}
  
    /**
     * Removes all values of property FrontChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFrontChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FRONTCHANNELS);
	}
	
    /**
     * Removes all values of property FrontChannels	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFrontChannels() {
		Base.removeAll(this.model, this.getResource(), FRONTCHANNELS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@238048a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsDest(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSDEST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@238048a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsDest() {
		return Base.has(this.model, this.getResource(), GPSDEST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@238048a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsDest(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSDEST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@238048a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsDest( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSDEST);
	}

     /**
     * Get all values of property GpsDest as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDest_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSDEST);
	}
	
    /**
     * Get all values of property GpsDest as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDest_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDEST, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsDest as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDest_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSDEST);
	}

    /**
     * Get all values of property GpsDest as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDest_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSDEST, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsDest     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.geo.Point> getAllGpsDest(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSDEST, eu.dime.ps.semantic.model.geo.Point.class);
	}
	
    /**
     * Get all values of property GpsDest as a ReactorResult of Point 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.geo.Point> getAllGpsDest_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDEST, eu.dime.ps.semantic.model.geo.Point.class);
	}

    /**
     * Get all values of property GpsDest     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.geo.Point> getAllGpsDest() {
		return Base.getAll(this.model, this.getResource(), GPSDEST, eu.dime.ps.semantic.model.geo.Point.class);
	}

    /**
     * Get all values of property GpsDest as a ReactorResult of Point 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.geo.Point> getAllGpsDest_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSDEST, eu.dime.ps.semantic.model.geo.Point.class);
	}
 
    /**
     * Adds a value to property GpsDest as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsDest(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSDEST, value);
	}
	
    /**
     * Adds a value to property GpsDest as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsDest( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSDEST, value);
	}
    /**
     * Adds a value to property GpsDest from an instance of Point 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsDest(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.geo.Point value) {
		Base.add(model, instanceResource, GPSDEST, value);
	}
	
    /**
     * Adds a value to property GpsDest from an instance of Point 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsDest(eu.dime.ps.semantic.model.geo.Point value) {
		Base.add(this.model, this.getResource(), GPSDEST, value);
	}
  

    /**
     * Sets a value of property GpsDest from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsDest( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSDEST, value);
	}
	
    /**
     * Sets a value of property GpsDest from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsDest( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSDEST, value);
	}
    /**
     * Sets a value of property GpsDest from an instance of Point 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsDest(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.geo.Point value) {
		Base.set(model, instanceResource, GPSDEST, value);
	}
	
    /**
     * Sets a value of property GpsDest from an instance of Point 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsDest(eu.dime.ps.semantic.model.geo.Point value) {
		Base.set(this.model, this.getResource(), GPSDEST, value);
	}
  


    /**
     * Removes a value of property GpsDest as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsDest( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSDEST, value);
	}
	
    /**
     * Removes a value of property GpsDest as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsDest( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSDEST, value);
	}
    /**
     * Removes a value of property GpsDest given as an instance of Point 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsDest(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.geo.Point value) {
		Base.remove(model, instanceResource, GPSDEST, value);
	}
	
    /**
     * Removes a value of property GpsDest given as an instance of Point 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsDest(eu.dime.ps.semantic.model.geo.Point value) {
		Base.remove(this.model, this.getResource(), GPSDEST, value);
	}
  
    /**
     * Removes all values of property GpsDest     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsDest( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSDEST);
	}
	
    /**
     * Removes all values of property GpsDest	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsDest() {
		Base.removeAll(this.model, this.getResource(), GPSDEST);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5aba18ff has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGroundingForDeletedThing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GROUNDINGFORDELETEDTHING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5aba18ff has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGroundingForDeletedThing() {
		return Base.has(this.model, this.getResource(), GROUNDINGFORDELETEDTHING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5aba18ff has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGroundingForDeletedThing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GROUNDINGFORDELETEDTHING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5aba18ff has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGroundingForDeletedThing( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GROUNDINGFORDELETEDTHING);
	}

     /**
     * Get all values of property GroundingForDeletedThing as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGroundingForDeletedThing_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GROUNDINGFORDELETEDTHING);
	}
	
    /**
     * Get all values of property GroundingForDeletedThing as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGroundingForDeletedThing_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GROUNDINGFORDELETEDTHING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GroundingForDeletedThing as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGroundingForDeletedThing_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GROUNDINGFORDELETEDTHING);
	}

    /**
     * Get all values of property GroundingForDeletedThing as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGroundingForDeletedThing_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GROUNDINGFORDELETEDTHING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GroundingForDeletedThing     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllGroundingForDeletedThing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GROUNDINGFORDELETEDTHING, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property GroundingForDeletedThing as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllGroundingForDeletedThing_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GROUNDINGFORDELETEDTHING, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property GroundingForDeletedThing     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllGroundingForDeletedThing() {
		return Base.getAll(this.model, this.getResource(), GROUNDINGFORDELETEDTHING, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property GroundingForDeletedThing as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllGroundingForDeletedThing_as() {
		return Base.getAll_as(this.model, this.getResource(), GROUNDINGFORDELETEDTHING, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property GroundingForDeletedThing as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGroundingForDeletedThing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GROUNDINGFORDELETEDTHING, value);
	}
	
    /**
     * Adds a value to property GroundingForDeletedThing as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGroundingForDeletedThing( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GROUNDINGFORDELETEDTHING, value);
	}
    /**
     * Adds a value to property GroundingForDeletedThing from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGroundingForDeletedThing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, GROUNDINGFORDELETEDTHING, value);
	}
	
    /**
     * Adds a value to property GroundingForDeletedThing from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGroundingForDeletedThing(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), GROUNDINGFORDELETEDTHING, value);
	}
  

    /**
     * Sets a value of property GroundingForDeletedThing from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGroundingForDeletedThing( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GROUNDINGFORDELETEDTHING, value);
	}
	
    /**
     * Sets a value of property GroundingForDeletedThing from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGroundingForDeletedThing( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GROUNDINGFORDELETEDTHING, value);
	}
    /**
     * Sets a value of property GroundingForDeletedThing from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGroundingForDeletedThing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, GROUNDINGFORDELETEDTHING, value);
	}
	
    /**
     * Sets a value of property GroundingForDeletedThing from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGroundingForDeletedThing(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), GROUNDINGFORDELETEDTHING, value);
	}
  


    /**
     * Removes a value of property GroundingForDeletedThing as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGroundingForDeletedThing( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GROUNDINGFORDELETEDTHING, value);
	}
	
    /**
     * Removes a value of property GroundingForDeletedThing as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGroundingForDeletedThing( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GROUNDINGFORDELETEDTHING, value);
	}
    /**
     * Removes a value of property GroundingForDeletedThing given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGroundingForDeletedThing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, GROUNDINGFORDELETEDTHING, value);
	}
	
    /**
     * Removes a value of property GroundingForDeletedThing given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGroundingForDeletedThing(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), GROUNDINGFORDELETEDTHING, value);
	}
  
    /**
     * Removes all values of property GroundingForDeletedThing     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGroundingForDeletedThing( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GROUNDINGFORDELETEDTHING);
	}
	
    /**
     * Removes all values of property GroundingForDeletedThing	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGroundingForDeletedThing() {
		Base.removeAll(this.model, this.getResource(), GROUNDINGFORDELETEDTHING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25512d66 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HOMEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25512d66 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHomepage() {
		return Base.has(this.model, this.getResource(), HOMEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25512d66 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HOMEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25512d66 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHomepage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HOMEPAGE);
	}

     /**
     * Get all values of property Homepage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHomepage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HOMEPAGE);
	}
	
    /**
     * Get all values of property Homepage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHomepage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HOMEPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Homepage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHomepage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HOMEPAGE);
	}

    /**
     * Get all values of property Homepage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHomepage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HOMEPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Homepage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HOMEPAGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Homepage as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllHomepage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HOMEPAGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Homepage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllHomepage() {
		return Base.getAll(this.model, this.getResource(), HOMEPAGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Homepage as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllHomepage_as() {
		return Base.getAll_as(this.model, this.getResource(), HOMEPAGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Homepage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HOMEPAGE, value);
	}
	
    /**
     * Adds a value to property Homepage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HOMEPAGE, value);
	}
    /**
     * Adds a value to property Homepage from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, HOMEPAGE, value);
	}
	
    /**
     * Adds a value to property Homepage from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHomepage(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), HOMEPAGE, value);
	}
  

    /**
     * Sets a value of property Homepage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HOMEPAGE, value);
	}
	
    /**
     * Sets a value of property Homepage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HOMEPAGE, value);
	}
    /**
     * Sets a value of property Homepage from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, HOMEPAGE, value);
	}
	
    /**
     * Sets a value of property Homepage from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHomepage(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), HOMEPAGE, value);
	}
  


    /**
     * Removes a value of property Homepage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HOMEPAGE, value);
	}
	
    /**
     * Removes a value of property Homepage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HOMEPAGE, value);
	}
    /**
     * Removes a value of property Homepage given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, HOMEPAGE, value);
	}
	
    /**
     * Removes a value of property Homepage given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHomepage(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), HOMEPAGE, value);
	}
  
    /**
     * Removes all values of property Homepage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HOMEPAGE);
	}
	
    /**
     * Removes all values of property Homepage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHomepage() {
		Base.removeAll(this.model, this.getResource(), HOMEPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e1336a1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e1336a1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIdentifier() {
		return Base.has(this.model, this.getResource(), IDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e1336a1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e1336a1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIdentifier( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IDENTIFIER);
	}

     /**
     * Get all values of property Identifier as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIdentifier_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IDENTIFIER);
	}
	
    /**
     * Get all values of property Identifier as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIdentifier_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Identifier as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIdentifier_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IDENTIFIER);
	}

    /**
     * Get all values of property Identifier as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIdentifier_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Identifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IDENTIFIER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Identifier as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllIdentifier_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IDENTIFIER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Identifier     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllIdentifier() {
		return Base.getAll(this.model, this.getResource(), IDENTIFIER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Identifier as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllIdentifier_as() {
		return Base.getAll_as(this.model, this.getResource(), IDENTIFIER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Identifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Adds a value to property Identifier as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IDENTIFIER, value);
	}
    /**
     * Adds a value to property Identifier from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Adds a value to property Identifier from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIdentifier(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), IDENTIFIER, value);
	}
  

    /**
     * Sets a value of property Identifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Sets a value of property Identifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IDENTIFIER, value);
	}
    /**
     * Sets a value of property Identifier from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Sets a value of property Identifier from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIdentifier(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), IDENTIFIER, value);
	}
  


    /**
     * Removes a value of property Identifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Removes a value of property Identifier as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IDENTIFIER, value);
	}
    /**
     * Removes a value of property Identifier given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, IDENTIFIER, value);
	}
	
    /**
     * Removes a value of property Identifier given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIdentifier(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), IDENTIFIER, value);
	}
  
    /**
     * Removes all values of property Identifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IDENTIFIER);
	}
	
    /**
     * Removes all values of property Identifier	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIdentifier() {
		Base.removeAll(this.model, this.getResource(), IDENTIFIER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1900c676 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInverseProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INVERSEPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1900c676 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInverseProperty() {
		return Base.has(this.model, this.getResource(), INVERSEPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1900c676 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInverseProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INVERSEPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1900c676 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInverseProperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INVERSEPROPERTY);
	}

     /**
     * Get all values of property InverseProperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInverseProperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INVERSEPROPERTY);
	}
	
    /**
     * Get all values of property InverseProperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInverseProperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERSEPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InverseProperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInverseProperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INVERSEPROPERTY);
	}

    /**
     * Get all values of property InverseProperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInverseProperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INVERSEPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InverseProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllInverseProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INVERSEPROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
	
    /**
     * Get all values of property InverseProperty as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllInverseProperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERSEPROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property InverseProperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllInverseProperty() {
		return Base.getAll(this.model, this.getResource(), INVERSEPROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property InverseProperty as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllInverseProperty_as() {
		return Base.getAll_as(this.model, this.getResource(), INVERSEPROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
 
    /**
     * Adds a value to property InverseProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInverseProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INVERSEPROPERTY, value);
	}
	
    /**
     * Adds a value to property InverseProperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInverseProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INVERSEPROPERTY, value);
	}
    /**
     * Adds a value to property InverseProperty from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInverseProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(model, instanceResource, INVERSEPROPERTY, value);
	}
	
    /**
     * Adds a value to property InverseProperty from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInverseProperty(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(this.model, this.getResource(), INVERSEPROPERTY, value);
	}
  

    /**
     * Sets a value of property InverseProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInverseProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INVERSEPROPERTY, value);
	}
	
    /**
     * Sets a value of property InverseProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInverseProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INVERSEPROPERTY, value);
	}
    /**
     * Sets a value of property InverseProperty from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInverseProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(model, instanceResource, INVERSEPROPERTY, value);
	}
	
    /**
     * Sets a value of property InverseProperty from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInverseProperty(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(this.model, this.getResource(), INVERSEPROPERTY, value);
	}
  


    /**
     * Removes a value of property InverseProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInverseProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INVERSEPROPERTY, value);
	}
	
    /**
     * Removes a value of property InverseProperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInverseProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INVERSEPROPERTY, value);
	}
    /**
     * Removes a value of property InverseProperty given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInverseProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(model, instanceResource, INVERSEPROPERTY, value);
	}
	
    /**
     * Removes a value of property InverseProperty given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInverseProperty(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(this.model, this.getResource(), INVERSEPROPERTY, value);
	}
  
    /**
     * Removes all values of property InverseProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInverseProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INVERSEPROPERTY);
	}
	
    /**
     * Removes all values of property InverseProperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInverseProperty() {
		Base.removeAll(this.model, this.getResource(), INVERSEPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@508c6a5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIsRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISRELATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@508c6a5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIsRelated() {
		return Base.has(this.model, this.getResource(), ISRELATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@508c6a5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIsRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISRELATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@508c6a5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIsRelated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISRELATED);
	}

     /**
     * Get all values of property IsRelated as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsRelated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISRELATED);
	}
	
    /**
     * Get all values of property IsRelated as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsRelated_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISRELATED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IsRelated as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsRelated_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISRELATED);
	}

    /**
     * Get all values of property IsRelated as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsRelated_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISRELATED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IsRelated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllIsRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISRELATED, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property IsRelated as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllIsRelated_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISRELATED, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property IsRelated     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllIsRelated() {
		return Base.getAll(this.model, this.getResource(), ISRELATED, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property IsRelated as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllIsRelated_as() {
		return Base.getAll_as(this.model, this.getResource(), ISRELATED, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property IsRelated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIsRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISRELATED, value);
	}
	
    /**
     * Adds a value to property IsRelated as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIsRelated( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISRELATED, value);
	}
    /**
     * Adds a value to property IsRelated from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIsRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, ISRELATED, value);
	}
	
    /**
     * Adds a value to property IsRelated from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIsRelated(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), ISRELATED, value);
	}
  

    /**
     * Sets a value of property IsRelated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIsRelated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISRELATED, value);
	}
	
    /**
     * Sets a value of property IsRelated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIsRelated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISRELATED, value);
	}
    /**
     * Sets a value of property IsRelated from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIsRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, ISRELATED, value);
	}
	
    /**
     * Sets a value of property IsRelated from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIsRelated(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), ISRELATED, value);
	}
  


    /**
     * Removes a value of property IsRelated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIsRelated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISRELATED, value);
	}
	
    /**
     * Removes a value of property IsRelated as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIsRelated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISRELATED, value);
	}
    /**
     * Removes a value of property IsRelated given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIsRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, ISRELATED, value);
	}
	
    /**
     * Removes a value of property IsRelated given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIsRelated(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), ISRELATED, value);
	}
  
    /**
     * Removes all values of property IsRelated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIsRelated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISRELATED);
	}
	
    /**
     * Removes all values of property IsRelated	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIsRelated() {
		Base.removeAll(this.model, this.getResource(), ISRELATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52b6c3c1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIsTopicOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISTOPICOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52b6c3c1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIsTopicOf() {
		return Base.has(this.model, this.getResource(), ISTOPICOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52b6c3c1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIsTopicOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISTOPICOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52b6c3c1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIsTopicOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISTOPICOF);
	}

     /**
     * Get all values of property IsTopicOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsTopicOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISTOPICOF);
	}
	
    /**
     * Get all values of property IsTopicOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsTopicOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISTOPICOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IsTopicOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsTopicOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISTOPICOF);
	}

    /**
     * Get all values of property IsTopicOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsTopicOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISTOPICOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IsTopicOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllIsTopicOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISTOPICOF, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property IsTopicOf as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllIsTopicOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISTOPICOF, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property IsTopicOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllIsTopicOf() {
		return Base.getAll(this.model, this.getResource(), ISTOPICOF, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property IsTopicOf as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllIsTopicOf_as() {
		return Base.getAll_as(this.model, this.getResource(), ISTOPICOF, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property IsTopicOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIsTopicOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISTOPICOF, value);
	}
	
    /**
     * Adds a value to property IsTopicOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIsTopicOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISTOPICOF, value);
	}
    /**
     * Adds a value to property IsTopicOf from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIsTopicOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, ISTOPICOF, value);
	}
	
    /**
     * Adds a value to property IsTopicOf from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIsTopicOf(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), ISTOPICOF, value);
	}
  

    /**
     * Sets a value of property IsTopicOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIsTopicOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISTOPICOF, value);
	}
	
    /**
     * Sets a value of property IsTopicOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIsTopicOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISTOPICOF, value);
	}
    /**
     * Sets a value of property IsTopicOf from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIsTopicOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, ISTOPICOF, value);
	}
	
    /**
     * Sets a value of property IsTopicOf from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIsTopicOf(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), ISTOPICOF, value);
	}
  


    /**
     * Removes a value of property IsTopicOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIsTopicOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISTOPICOF, value);
	}
	
    /**
     * Removes a value of property IsTopicOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIsTopicOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISTOPICOF, value);
	}
    /**
     * Removes a value of property IsTopicOf given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIsTopicOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, ISTOPICOF, value);
	}
	
    /**
     * Removes a value of property IsTopicOf given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIsTopicOf(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), ISTOPICOF, value);
	}
  
    /**
     * Removes all values of property IsTopicOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIsTopicOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISTOPICOF);
	}
	
    /**
     * Removes all values of property IsTopicOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIsTopicOf() {
		Base.removeAll(this.model, this.getResource(), ISTOPICOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bb25b81 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIsWriteable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISWRITEABLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bb25b81 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIsWriteable() {
		return Base.has(this.model, this.getResource(), ISWRITEABLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bb25b81 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIsWriteable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISWRITEABLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bb25b81 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIsWriteable( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISWRITEABLE);
	}

     /**
     * Get all values of property IsWriteable as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsWriteable_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISWRITEABLE);
	}
	
    /**
     * Get all values of property IsWriteable as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsWriteable_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISWRITEABLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IsWriteable as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsWriteable_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISWRITEABLE);
	}

    /**
     * Get all values of property IsWriteable as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsWriteable_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISWRITEABLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IsWriteable     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllIsWriteable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISWRITEABLE, java.lang.String.class);
	}
	
    /**
     * Get all values of property IsWriteable as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllIsWriteable_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISWRITEABLE, java.lang.String.class);
	}

    /**
     * Get all values of property IsWriteable     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllIsWriteable() {
		return Base.getAll(this.model, this.getResource(), ISWRITEABLE, java.lang.String.class);
	}

    /**
     * Get all values of property IsWriteable as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllIsWriteable_as() {
		return Base.getAll_as(this.model, this.getResource(), ISWRITEABLE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property IsWriteable as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIsWriteable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISWRITEABLE, value);
	}
	
    /**
     * Adds a value to property IsWriteable as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIsWriteable( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISWRITEABLE, value);
	}
    /**
     * Adds a value to property IsWriteable from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIsWriteable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, ISWRITEABLE, value);
	}
	
    /**
     * Adds a value to property IsWriteable from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIsWriteable(java.lang.String value) {
		Base.add(this.model, this.getResource(), ISWRITEABLE, value);
	}
  

    /**
     * Sets a value of property IsWriteable from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIsWriteable( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISWRITEABLE, value);
	}
	
    /**
     * Sets a value of property IsWriteable from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIsWriteable( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISWRITEABLE, value);
	}
    /**
     * Sets a value of property IsWriteable from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIsWriteable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, ISWRITEABLE, value);
	}
	
    /**
     * Sets a value of property IsWriteable from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIsWriteable(java.lang.String value) {
		Base.set(this.model, this.getResource(), ISWRITEABLE, value);
	}
  


    /**
     * Removes a value of property IsWriteable as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIsWriteable( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISWRITEABLE, value);
	}
	
    /**
     * Removes a value of property IsWriteable as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIsWriteable( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISWRITEABLE, value);
	}
    /**
     * Removes a value of property IsWriteable given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIsWriteable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, ISWRITEABLE, value);
	}
	
    /**
     * Removes a value of property IsWriteable given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIsWriteable(java.lang.String value) {
		Base.remove(this.model, this.getResource(), ISWRITEABLE, value);
	}
  
    /**
     * Removes all values of property IsWriteable     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIsWriteable( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISWRITEABLE);
	}
	
    /**
     * Removes all values of property IsWriteable	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIsWriteable() {
		Base.removeAll(this.model, this.getResource(), ISWRITEABLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42f92dbc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLastEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LASTEVENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42f92dbc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLastEvent() {
		return Base.has(this.model, this.getResource(), LASTEVENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42f92dbc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLastEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LASTEVENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42f92dbc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLastEvent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LASTEVENT);
	}

    /**
     * Get single value of property LastEvent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getLastEvent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, LASTEVENT);
	}
	
    /**
     * Get single value of property LastEvent as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getLastEvent_asNode() {
		return Base.get_asNode(this.model, this.getResource(), LASTEVENT);
	}
     /**
     * Get single value of property LastEvent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getLastEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, LASTEVENT, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property LastEvent  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getLastEvent() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), LASTEVENT, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property LastEvent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addLastEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, LASTEVENT, value, 1);
	}
	
    /**
     * Adds a value to property LastEvent as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addLastEvent( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LASTEVENT, value, 1);
	}
    /**
     * Adds a value to property LastEvent from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addLastEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, LASTEVENT, value, 1);
	}
	
    /**
     * Adds a value to property LastEvent from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addLastEvent(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LASTEVENT, value, 1);
	}
 
 

    /**
     * Sets a value of property LastEvent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLastEvent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LASTEVENT, value);
	}
	
    /**
     * Sets a value of property LastEvent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLastEvent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LASTEVENT, value);
	}
    /**
     * Sets a value of property LastEvent from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLastEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, LASTEVENT, value);
	}
	
    /**
     * Sets a value of property LastEvent from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLastEvent(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), LASTEVENT, value);
	}
  


    /**
     * Removes a value of property LastEvent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLastEvent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LASTEVENT, value);
	}
	
    /**
     * Removes a value of property LastEvent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLastEvent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LASTEVENT, value);
	}
    /**
     * Removes a value of property LastEvent given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLastEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, LASTEVENT, value);
	}
	
    /**
     * Removes a value of property LastEvent given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLastEvent(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), LASTEVENT, value);
	}
  
    /**
     * Removes all values of property LastEvent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLastEvent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LASTEVENT);
	}
	
    /**
     * Removes all values of property LastEvent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLastEvent() {
		Base.removeAll(this.model, this.getResource(), LASTEVENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7a89699a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLastModification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LASTMODIFICATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7a89699a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLastModification() {
		return Base.has(this.model, this.getResource(), LASTMODIFICATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7a89699a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLastModification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LASTMODIFICATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7a89699a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLastModification( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LASTMODIFICATION);
	}

    /**
     * Get single value of property LastModification as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getLastModification_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, LASTMODIFICATION);
	}
	
    /**
     * Get single value of property LastModification as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getLastModification_asNode() {
		return Base.get_asNode(this.model, this.getResource(), LASTMODIFICATION);
	}
     /**
     * Get single value of property LastModification     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getLastModification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, LASTMODIFICATION, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property LastModification  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getLastModification() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), LASTMODIFICATION, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property LastModification as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addLastModification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, LASTMODIFICATION, value, 1);
	}
	
    /**
     * Adds a value to property LastModification as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addLastModification( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LASTMODIFICATION, value, 1);
	}
    /**
     * Adds a value to property LastModification from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addLastModification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, LASTMODIFICATION, value, 1);
	}
	
    /**
     * Adds a value to property LastModification from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addLastModification(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LASTMODIFICATION, value, 1);
	}
 
 

    /**
     * Sets a value of property LastModification from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLastModification( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LASTMODIFICATION, value);
	}
	
    /**
     * Sets a value of property LastModification from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLastModification( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LASTMODIFICATION, value);
	}
    /**
     * Sets a value of property LastModification from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLastModification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, LASTMODIFICATION, value);
	}
	
    /**
     * Sets a value of property LastModification from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLastModification(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), LASTMODIFICATION, value);
	}
  


    /**
     * Removes a value of property LastModification as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLastModification( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LASTMODIFICATION, value);
	}
	
    /**
     * Removes a value of property LastModification as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLastModification( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LASTMODIFICATION, value);
	}
    /**
     * Removes a value of property LastModification given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLastModification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, LASTMODIFICATION, value);
	}
	
    /**
     * Removes a value of property LastModification given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLastModification(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), LASTMODIFICATION, value);
	}
  
    /**
     * Removes all values of property LastModification     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLastModification( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LASTMODIFICATION);
	}
	
    /**
     * Removes all values of property LastModification	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLastModification() {
		Base.removeAll(this.model, this.getResource(), LASTMODIFICATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48900556 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LASTMODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48900556 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLastModified() {
		return Base.has(this.model, this.getResource(), LASTMODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48900556 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LASTMODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48900556 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLastModified( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LASTMODIFIED);
	}

    /**
     * Get single value of property LastModified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getLastModified_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, LASTMODIFIED);
	}
	
    /**
     * Get single value of property LastModified as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getLastModified_asNode() {
		return Base.get_asNode(this.model, this.getResource(), LASTMODIFIED);
	}
     /**
     * Get single value of property LastModified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, LASTMODIFIED, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property LastModified  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getLastModified() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), LASTMODIFIED, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property LastModified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, LASTMODIFIED, value, 1);
	}
	
    /**
     * Adds a value to property LastModified as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addLastModified( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LASTMODIFIED, value, 1);
	}
    /**
     * Adds a value to property LastModified from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, LASTMODIFIED, value, 1);
	}
	
    /**
     * Adds a value to property LastModified from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addLastModified(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LASTMODIFIED, value, 1);
	}
 
 

    /**
     * Sets a value of property LastModified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLastModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LASTMODIFIED, value);
	}
	
    /**
     * Sets a value of property LastModified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLastModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LASTMODIFIED, value);
	}
    /**
     * Sets a value of property LastModified from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, LASTMODIFIED, value);
	}
	
    /**
     * Sets a value of property LastModified from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLastModified(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), LASTMODIFIED, value);
	}
  


    /**
     * Removes a value of property LastModified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLastModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LASTMODIFIED, value);
	}
	
    /**
     * Removes a value of property LastModified as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLastModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LASTMODIFIED, value);
	}
    /**
     * Removes a value of property LastModified given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLastModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, LASTMODIFIED, value);
	}
	
    /**
     * Removes a value of property LastModified given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLastModified(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), LASTMODIFIED, value);
	}
  
    /**
     * Removes all values of property LastModified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLastModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LASTMODIFIED);
	}
	
    /**
     * Removes all values of property LastModified	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLastModified() {
		Base.removeAll(this.model, this.getResource(), LASTMODIFIED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f0d59a4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLastUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LASTUSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f0d59a4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLastUsage() {
		return Base.has(this.model, this.getResource(), LASTUSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f0d59a4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLastUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LASTUSAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f0d59a4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLastUsage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LASTUSAGE);
	}

    /**
     * Get single value of property LastUsage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getLastUsage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, LASTUSAGE);
	}
	
    /**
     * Get single value of property LastUsage as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getLastUsage_asNode() {
		return Base.get_asNode(this.model, this.getResource(), LASTUSAGE);
	}
     /**
     * Get single value of property LastUsage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getLastUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, LASTUSAGE, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property LastUsage  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getLastUsage() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), LASTUSAGE, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property LastUsage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addLastUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, LASTUSAGE, value, 1);
	}
	
    /**
     * Adds a value to property LastUsage as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addLastUsage( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LASTUSAGE, value, 1);
	}
    /**
     * Adds a value to property LastUsage from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addLastUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, LASTUSAGE, value, 1);
	}
	
    /**
     * Adds a value to property LastUsage from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addLastUsage(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LASTUSAGE, value, 1);
	}
 
 

    /**
     * Sets a value of property LastUsage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLastUsage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LASTUSAGE, value);
	}
	
    /**
     * Sets a value of property LastUsage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLastUsage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LASTUSAGE, value);
	}
    /**
     * Sets a value of property LastUsage from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLastUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, LASTUSAGE, value);
	}
	
    /**
     * Sets a value of property LastUsage from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLastUsage(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), LASTUSAGE, value);
	}
  


    /**
     * Removes a value of property LastUsage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLastUsage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LASTUSAGE, value);
	}
	
    /**
     * Removes a value of property LastUsage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLastUsage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LASTUSAGE, value);
	}
    /**
     * Removes a value of property LastUsage given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLastUsage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, LASTUSAGE, value);
	}
	
    /**
     * Removes a value of property LastUsage given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLastUsage(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), LASTUSAGE, value);
	}
  
    /**
     * Removes all values of property LastUsage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLastUsage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LASTUSAGE);
	}
	
    /**
     * Removes all values of property LastUsage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLastUsage() {
		Base.removeAll(this.model, this.getResource(), LASTUSAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29360691 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29360691 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLat() {
		return Base.has(this.model, this.getResource(), LAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29360691 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29360691 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLat( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LAT);
	}

    /**
     * Get single value of property Lat as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getLat_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, LAT);
	}
	
    /**
     * Get single value of property Lat as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getLat_asNode() {
		return Base.get_asNode(this.model, this.getResource(), LAT);
	}
     /**
     * Get single value of property Lat     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Float getLat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Float) Base.get(model, instanceResource, LAT, java.lang.Float.class);
	}
	
    /**
     * Get single value of property Lat  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Float getLat() {
		return (java.lang.Float) Base.get(this.model, this.getResource(), LAT, java.lang.Float.class);
	}
  
    /**
     * Adds a value to property Lat as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addLat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, LAT, value, 1);
	}
	
    /**
     * Adds a value to property Lat as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addLat( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LAT, value, 1);
	}
    /**
     * Adds a value to property Lat from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addLat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value)
    throws CardinalityException {
		Base.add(model, instanceResource, LAT, value, 1);
	}
	
    /**
     * Adds a value to property Lat from an instance of java.lang.Float 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addLat(java.lang.Float value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LAT, value, 1);
	}
 
 

    /**
     * Sets a value of property Lat from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LAT, value);
	}
	
    /**
     * Sets a value of property Lat from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLat( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LAT, value);
	}
    /**
     * Sets a value of property Lat from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, LAT, value);
	}
	
    /**
     * Sets a value of property Lat from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLat(java.lang.Float value) {
		Base.set(this.model, this.getResource(), LAT, value);
	}
  


    /**
     * Removes a value of property Lat as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LAT, value);
	}
	
    /**
     * Removes a value of property Lat as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLat( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LAT, value);
	}
    /**
     * Removes a value of property Lat given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, LAT, value);
	}
	
    /**
     * Removes a value of property Lat given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLat(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), LAT, value);
	}
  
    /**
     * Removes all values of property Lat     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LAT);
	}
	
    /**
     * Removes all values of property Lat	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLat() {
		Base.removeAll(this.model, this.getResource(), LAT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32737d8a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLfeChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LFECHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32737d8a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLfeChannels() {
		return Base.has(this.model, this.getResource(), LFECHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32737d8a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLfeChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LFECHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32737d8a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLfeChannels( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LFECHANNELS);
	}

    /**
     * Get single value of property LfeChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getLfeChannels_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, LFECHANNELS);
	}
	
    /**
     * Get single value of property LfeChannels as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getLfeChannels_asNode() {
		return Base.get_asNode(this.model, this.getResource(), LFECHANNELS);
	}
     /**
     * Get single value of property LfeChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getLfeChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, LFECHANNELS, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property LfeChannels  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getLfeChannels() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), LFECHANNELS, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property LfeChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addLfeChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, LFECHANNELS, value, 1);
	}
	
    /**
     * Adds a value to property LfeChannels as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addLfeChannels( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LFECHANNELS, value, 1);
	}
    /**
     * Adds a value to property LfeChannels from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addLfeChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, LFECHANNELS, value, 1);
	}
	
    /**
     * Adds a value to property LfeChannels from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addLfeChannels(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LFECHANNELS, value, 1);
	}
 
 

    /**
     * Sets a value of property LfeChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLfeChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LFECHANNELS, value);
	}
	
    /**
     * Sets a value of property LfeChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLfeChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LFECHANNELS, value);
	}
    /**
     * Sets a value of property LfeChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLfeChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, LFECHANNELS, value);
	}
	
    /**
     * Sets a value of property LfeChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLfeChannels(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), LFECHANNELS, value);
	}
  


    /**
     * Removes a value of property LfeChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLfeChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LFECHANNELS, value);
	}
	
    /**
     * Removes a value of property LfeChannels as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLfeChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LFECHANNELS, value);
	}
    /**
     * Removes a value of property LfeChannels given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLfeChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, LFECHANNELS, value);
	}
	
    /**
     * Removes a value of property LfeChannels given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLfeChannels(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), LFECHANNELS, value);
	}
  
    /**
     * Removes all values of property LfeChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLfeChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LFECHANNELS);
	}
	
    /**
     * Removes all values of property LfeChannels	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLfeChannels() {
		Base.removeAll(this.model, this.getResource(), LFECHANNELS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@333bbf8c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LICENSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@333bbf8c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLicense() {
		return Base.has(this.model, this.getResource(), LICENSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@333bbf8c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LICENSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@333bbf8c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLicense( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LICENSE);
	}

     /**
     * Get all values of property License as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLicense_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LICENSE);
	}
	
    /**
     * Get all values of property License as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLicense_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LICENSE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property License as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLicense_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LICENSE);
	}

    /**
     * Get all values of property License as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLicense_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LICENSE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property License     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LICENSE, java.lang.String.class);
	}
	
    /**
     * Get all values of property License as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllLicense_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LICENSE, java.lang.String.class);
	}

    /**
     * Get all values of property License     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllLicense() {
		return Base.getAll(this.model, this.getResource(), LICENSE, java.lang.String.class);
	}

    /**
     * Get all values of property License as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllLicense_as() {
		return Base.getAll_as(this.model, this.getResource(), LICENSE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property License as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LICENSE, value);
	}
	
    /**
     * Adds a value to property License as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLicense( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LICENSE, value);
	}
    /**
     * Adds a value to property License from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LICENSE, value);
	}
	
    /**
     * Adds a value to property License from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLicense(java.lang.String value) {
		Base.add(this.model, this.getResource(), LICENSE, value);
	}
  

    /**
     * Sets a value of property License from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLicense( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LICENSE, value);
	}
	
    /**
     * Sets a value of property License from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLicense( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LICENSE, value);
	}
    /**
     * Sets a value of property License from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LICENSE, value);
	}
	
    /**
     * Sets a value of property License from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLicense(java.lang.String value) {
		Base.set(this.model, this.getResource(), LICENSE, value);
	}
  


    /**
     * Removes a value of property License as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLicense( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LICENSE, value);
	}
	
    /**
     * Removes a value of property License as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLicense( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LICENSE, value);
	}
    /**
     * Removes a value of property License given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LICENSE, value);
	}
	
    /**
     * Removes a value of property License given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLicense(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LICENSE, value);
	}
  
    /**
     * Removes all values of property License     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLicense( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LICENSE);
	}
	
    /**
     * Removes all values of property License	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLicense() {
		Base.removeAll(this.model, this.getResource(), LICENSE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6d39be67 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLicenseType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LICENSETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6d39be67 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLicenseType() {
		return Base.has(this.model, this.getResource(), LICENSETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6d39be67 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLicenseType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LICENSETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6d39be67 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLicenseType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LICENSETYPE);
	}

     /**
     * Get all values of property LicenseType as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLicenseType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LICENSETYPE);
	}
	
    /**
     * Get all values of property LicenseType as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLicenseType_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LICENSETYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property LicenseType as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLicenseType_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LICENSETYPE);
	}

    /**
     * Get all values of property LicenseType as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLicenseType_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LICENSETYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property LicenseType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllLicenseType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LICENSETYPE, java.lang.String.class);
	}
	
    /**
     * Get all values of property LicenseType as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllLicenseType_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LICENSETYPE, java.lang.String.class);
	}

    /**
     * Get all values of property LicenseType     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllLicenseType() {
		return Base.getAll(this.model, this.getResource(), LICENSETYPE, java.lang.String.class);
	}

    /**
     * Get all values of property LicenseType as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllLicenseType_as() {
		return Base.getAll_as(this.model, this.getResource(), LICENSETYPE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property LicenseType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLicenseType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LICENSETYPE, value);
	}
	
    /**
     * Adds a value to property LicenseType as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLicenseType( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LICENSETYPE, value);
	}
    /**
     * Adds a value to property LicenseType from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLicenseType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LICENSETYPE, value);
	}
	
    /**
     * Adds a value to property LicenseType from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLicenseType(java.lang.String value) {
		Base.add(this.model, this.getResource(), LICENSETYPE, value);
	}
  

    /**
     * Sets a value of property LicenseType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLicenseType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LICENSETYPE, value);
	}
	
    /**
     * Sets a value of property LicenseType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLicenseType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LICENSETYPE, value);
	}
    /**
     * Sets a value of property LicenseType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLicenseType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LICENSETYPE, value);
	}
	
    /**
     * Sets a value of property LicenseType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLicenseType(java.lang.String value) {
		Base.set(this.model, this.getResource(), LICENSETYPE, value);
	}
  


    /**
     * Removes a value of property LicenseType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLicenseType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LICENSETYPE, value);
	}
	
    /**
     * Removes a value of property LicenseType as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLicenseType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LICENSETYPE, value);
	}
    /**
     * Removes a value of property LicenseType given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLicenseType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LICENSETYPE, value);
	}
	
    /**
     * Removes a value of property LicenseType given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLicenseType(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LICENSETYPE, value);
	}
  
    /**
     * Removes all values of property LicenseType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLicenseType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LICENSETYPE);
	}
	
    /**
     * Removes all values of property LicenseType	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLicenseType() {
		Base.removeAll(this.model, this.getResource(), LICENSETYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@65cfd350 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLong(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LONG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@65cfd350 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLong() {
		return Base.has(this.model, this.getResource(), LONG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@65cfd350 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLong(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LONG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@65cfd350 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLong( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LONG);
	}

    /**
     * Get single value of property Long as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getLong_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, LONG);
	}
	
    /**
     * Get single value of property Long as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getLong_asNode() {
		return Base.get_asNode(this.model, this.getResource(), LONG);
	}
     /**
     * Get single value of property Long     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Float getLong(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Float) Base.get(model, instanceResource, LONG, java.lang.Float.class);
	}
	
    /**
     * Get single value of property Long  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Float getLong() {
		return (java.lang.Float) Base.get(this.model, this.getResource(), LONG, java.lang.Float.class);
	}
  
    /**
     * Adds a value to property Long as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addLong(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, LONG, value, 1);
	}
	
    /**
     * Adds a value to property Long as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addLong( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LONG, value, 1);
	}
    /**
     * Adds a value to property Long from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addLong(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value)
    throws CardinalityException {
		Base.add(model, instanceResource, LONG, value, 1);
	}
	
    /**
     * Adds a value to property Long from an instance of java.lang.Float 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addLong(java.lang.Float value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LONG, value, 1);
	}
 
 

    /**
     * Sets a value of property Long from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLong( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LONG, value);
	}
	
    /**
     * Sets a value of property Long from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLong( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LONG, value);
	}
    /**
     * Sets a value of property Long from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLong(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, LONG, value);
	}
	
    /**
     * Sets a value of property Long from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLong(java.lang.Float value) {
		Base.set(this.model, this.getResource(), LONG, value);
	}
  


    /**
     * Removes a value of property Long as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLong( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LONG, value);
	}
	
    /**
     * Removes a value of property Long as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLong( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LONG, value);
	}
    /**
     * Removes a value of property Long given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLong(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, LONG, value);
	}
	
    /**
     * Removes a value of property Long given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLong(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), LONG, value);
	}
  
    /**
     * Removes all values of property Long     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLong( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LONG);
	}
	
    /**
     * Removes all values of property Long	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLong() {
		Base.removeAll(this.model, this.getResource(), LONG);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d8b4fa6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMaintainedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MAINTAINEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d8b4fa6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMaintainedBy() {
		return Base.has(this.model, this.getResource(), MAINTAINEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d8b4fa6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMaintainedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MAINTAINEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d8b4fa6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMaintainedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MAINTAINEDBY);
	}

     /**
     * Get all values of property MaintainedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMaintainedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MAINTAINEDBY);
	}
	
    /**
     * Get all values of property MaintainedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMaintainedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAINTAINEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MaintainedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMaintainedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MAINTAINEDBY);
	}

    /**
     * Get all values of property MaintainedBy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMaintainedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MAINTAINEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MaintainedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nao.Agent> getAllMaintainedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MAINTAINEDBY, eu.dime.ps.semantic.model.nao.Agent.class);
	}
	
    /**
     * Get all values of property MaintainedBy as a ReactorResult of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nao.Agent> getAllMaintainedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAINTAINEDBY, eu.dime.ps.semantic.model.nao.Agent.class);
	}

    /**
     * Get all values of property MaintainedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nao.Agent> getAllMaintainedBy() {
		return Base.getAll(this.model, this.getResource(), MAINTAINEDBY, eu.dime.ps.semantic.model.nao.Agent.class);
	}

    /**
     * Get all values of property MaintainedBy as a ReactorResult of Agent 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nao.Agent> getAllMaintainedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), MAINTAINEDBY, eu.dime.ps.semantic.model.nao.Agent.class);
	}
 
    /**
     * Adds a value to property MaintainedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMaintainedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MAINTAINEDBY, value);
	}
	
    /**
     * Adds a value to property MaintainedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMaintainedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MAINTAINEDBY, value);
	}
    /**
     * Adds a value to property MaintainedBy from an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMaintainedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Agent value) {
		Base.add(model, instanceResource, MAINTAINEDBY, value);
	}
	
    /**
     * Adds a value to property MaintainedBy from an instance of Agent 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMaintainedBy(eu.dime.ps.semantic.model.nao.Agent value) {
		Base.add(this.model, this.getResource(), MAINTAINEDBY, value);
	}
  

    /**
     * Sets a value of property MaintainedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMaintainedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MAINTAINEDBY, value);
	}
	
    /**
     * Sets a value of property MaintainedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMaintainedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MAINTAINEDBY, value);
	}
    /**
     * Sets a value of property MaintainedBy from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMaintainedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Agent value) {
		Base.set(model, instanceResource, MAINTAINEDBY, value);
	}
	
    /**
     * Sets a value of property MaintainedBy from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMaintainedBy(eu.dime.ps.semantic.model.nao.Agent value) {
		Base.set(this.model, this.getResource(), MAINTAINEDBY, value);
	}
  


    /**
     * Removes a value of property MaintainedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMaintainedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MAINTAINEDBY, value);
	}
	
    /**
     * Removes a value of property MaintainedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMaintainedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MAINTAINEDBY, value);
	}
    /**
     * Removes a value of property MaintainedBy given as an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMaintainedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Agent value) {
		Base.remove(model, instanceResource, MAINTAINEDBY, value);
	}
	
    /**
     * Removes a value of property MaintainedBy given as an instance of Agent 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMaintainedBy(eu.dime.ps.semantic.model.nao.Agent value) {
		Base.remove(this.model, this.getResource(), MAINTAINEDBY, value);
	}
  
    /**
     * Removes all values of property MaintainedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMaintainedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MAINTAINEDBY);
	}
	
    /**
     * Removes all values of property MaintainedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMaintainedBy() {
		Base.removeAll(this.model, this.getResource(), MAINTAINEDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@320144d6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MAXCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@320144d6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMaxCardinality() {
		return Base.has(this.model, this.getResource(), MAXCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@320144d6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MAXCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@320144d6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMaxCardinality( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MAXCARDINALITY);
	}

     /**
     * Get all values of property MaxCardinality as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MAXCARDINALITY);
	}
	
    /**
     * Get all values of property MaxCardinality as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAXCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MaxCardinality as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MAXCARDINALITY);
	}

    /**
     * Get all values of property MaxCardinality as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMaxCardinality_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MAXCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MaxCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MAXCARDINALITY, java.lang.String.class);
	}
	
    /**
     * Get all values of property MaxCardinality as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllMaxCardinality_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAXCARDINALITY, java.lang.String.class);
	}

    /**
     * Get all values of property MaxCardinality     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllMaxCardinality() {
		return Base.getAll(this.model, this.getResource(), MAXCARDINALITY, java.lang.String.class);
	}

    /**
     * Get all values of property MaxCardinality as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllMaxCardinality_as() {
		return Base.getAll_as(this.model, this.getResource(), MAXCARDINALITY, java.lang.String.class);
	}
 
    /**
     * Adds a value to property MaxCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Adds a value to property MaxCardinality as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMaxCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MAXCARDINALITY, value);
	}
    /**
     * Adds a value to property MaxCardinality from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Adds a value to property MaxCardinality from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMaxCardinality(java.lang.String value) {
		Base.add(this.model, this.getResource(), MAXCARDINALITY, value);
	}
  

    /**
     * Sets a value of property MaxCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Sets a value of property MaxCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMaxCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MAXCARDINALITY, value);
	}
    /**
     * Sets a value of property MaxCardinality from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Sets a value of property MaxCardinality from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMaxCardinality(java.lang.String value) {
		Base.set(this.model, this.getResource(), MAXCARDINALITY, value);
	}
  


    /**
     * Removes a value of property MaxCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Removes a value of property MaxCardinality as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMaxCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MAXCARDINALITY, value);
	}
    /**
     * Removes a value of property MaxCardinality given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, MAXCARDINALITY, value);
	}
	
    /**
     * Removes a value of property MaxCardinality given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMaxCardinality(java.lang.String value) {
		Base.remove(this.model, this.getResource(), MAXCARDINALITY, value);
	}
  
    /**
     * Removes all values of property MaxCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MAXCARDINALITY);
	}
	
    /**
     * Removes all values of property MaxCardinality	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMaxCardinality() {
		Base.removeAll(this.model, this.getResource(), MAXCARDINALITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d494d31 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MINCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d494d31 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMinCardinality() {
		return Base.has(this.model, this.getResource(), MINCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d494d31 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MINCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d494d31 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMinCardinality( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MINCARDINALITY);
	}

     /**
     * Get all values of property MinCardinality as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMinCardinality_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MINCARDINALITY);
	}
	
    /**
     * Get all values of property MinCardinality as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMinCardinality_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MINCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MinCardinality as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMinCardinality_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MINCARDINALITY);
	}

    /**
     * Get all values of property MinCardinality as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMinCardinality_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MINCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MinCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MINCARDINALITY, java.lang.String.class);
	}
	
    /**
     * Get all values of property MinCardinality as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllMinCardinality_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MINCARDINALITY, java.lang.String.class);
	}

    /**
     * Get all values of property MinCardinality     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllMinCardinality() {
		return Base.getAll(this.model, this.getResource(), MINCARDINALITY, java.lang.String.class);
	}

    /**
     * Get all values of property MinCardinality as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllMinCardinality_as() {
		return Base.getAll_as(this.model, this.getResource(), MINCARDINALITY, java.lang.String.class);
	}
 
    /**
     * Adds a value to property MinCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Adds a value to property MinCardinality as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMinCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MINCARDINALITY, value);
	}
    /**
     * Adds a value to property MinCardinality from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Adds a value to property MinCardinality from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMinCardinality(java.lang.String value) {
		Base.add(this.model, this.getResource(), MINCARDINALITY, value);
	}
  

    /**
     * Sets a value of property MinCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMinCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Sets a value of property MinCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMinCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MINCARDINALITY, value);
	}
    /**
     * Sets a value of property MinCardinality from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Sets a value of property MinCardinality from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMinCardinality(java.lang.String value) {
		Base.set(this.model, this.getResource(), MINCARDINALITY, value);
	}
  


    /**
     * Removes a value of property MinCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMinCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Removes a value of property MinCardinality as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMinCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MINCARDINALITY, value);
	}
    /**
     * Removes a value of property MinCardinality given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMinCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, MINCARDINALITY, value);
	}
	
    /**
     * Removes a value of property MinCardinality given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMinCardinality(java.lang.String value) {
		Base.remove(this.model, this.getResource(), MINCARDINALITY, value);
	}
  
    /**
     * Removes all values of property MinCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMinCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MINCARDINALITY);
	}
	
    /**
     * Removes all values of property MinCardinality	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMinCardinality() {
		Base.removeAll(this.model, this.getResource(), MINCARDINALITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e3aca36 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasModificationCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MODIFICATIONCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e3aca36 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasModificationCount() {
		return Base.has(this.model, this.getResource(), MODIFICATIONCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e3aca36 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasModificationCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MODIFICATIONCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e3aca36 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasModificationCount( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MODIFICATIONCOUNT);
	}

    /**
     * Get single value of property ModificationCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getModificationCount_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, MODIFICATIONCOUNT);
	}
	
    /**
     * Get single value of property ModificationCount as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getModificationCount_asNode() {
		return Base.get_asNode(this.model, this.getResource(), MODIFICATIONCOUNT);
	}
     /**
     * Get single value of property ModificationCount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getModificationCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, MODIFICATIONCOUNT, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property ModificationCount  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getModificationCount() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), MODIFICATIONCOUNT, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property ModificationCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addModificationCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, MODIFICATIONCOUNT, value, 1);
	}
	
    /**
     * Adds a value to property ModificationCount as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addModificationCount( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MODIFICATIONCOUNT, value, 1);
	}
    /**
     * Adds a value to property ModificationCount from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addModificationCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, MODIFICATIONCOUNT, value, 1);
	}
	
    /**
     * Adds a value to property ModificationCount from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addModificationCount(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MODIFICATIONCOUNT, value, 1);
	}
 
 

    /**
     * Sets a value of property ModificationCount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setModificationCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MODIFICATIONCOUNT, value);
	}
	
    /**
     * Sets a value of property ModificationCount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setModificationCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MODIFICATIONCOUNT, value);
	}
    /**
     * Sets a value of property ModificationCount from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setModificationCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, MODIFICATIONCOUNT, value);
	}
	
    /**
     * Sets a value of property ModificationCount from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setModificationCount(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), MODIFICATIONCOUNT, value);
	}
  


    /**
     * Removes a value of property ModificationCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeModificationCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MODIFICATIONCOUNT, value);
	}
	
    /**
     * Removes a value of property ModificationCount as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeModificationCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MODIFICATIONCOUNT, value);
	}
    /**
     * Removes a value of property ModificationCount given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeModificationCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, MODIFICATIONCOUNT, value);
	}
	
    /**
     * Removes a value of property ModificationCount given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeModificationCount(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), MODIFICATIONCOUNT, value);
	}
  
    /**
     * Removes all values of property ModificationCount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllModificationCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MODIFICATIONCOUNT);
	}
	
    /**
     * Removes all values of property ModificationCount	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllModificationCount() {
		Base.removeAll(this.model, this.getResource(), MODIFICATIONCOUNT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@351737ba has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@351737ba has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasModified() {
		return Base.has(this.model, this.getResource(), MODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@351737ba has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@351737ba has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasModified( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MODIFIED);
	}

     /**
     * Get all values of property Modified as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModified_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MODIFIED);
	}
	
    /**
     * Get all values of property Modified as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllModified_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MODIFIED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Modified as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModified_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MODIFIED);
	}

    /**
     * Get all values of property Modified as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllModified_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MODIFIED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Modified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MODIFIED, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property Modified as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllModified_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MODIFIED, java.util.Calendar.class);
	}

    /**
     * Get all values of property Modified     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllModified() {
		return Base.getAll(this.model, this.getResource(), MODIFIED, java.util.Calendar.class);
	}

    /**
     * Get all values of property Modified as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllModified_as() {
		return Base.getAll_as(this.model, this.getResource(), MODIFIED, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property Modified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MODIFIED, value);
	}
	
    /**
     * Adds a value to property Modified as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MODIFIED, value);
	}
    /**
     * Adds a value to property Modified from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, MODIFIED, value);
	}
	
    /**
     * Adds a value to property Modified from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addModified(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), MODIFIED, value);
	}
  

    /**
     * Sets a value of property Modified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MODIFIED, value);
	}
	
    /**
     * Sets a value of property Modified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MODIFIED, value);
	}
    /**
     * Sets a value of property Modified from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, MODIFIED, value);
	}
	
    /**
     * Sets a value of property Modified from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setModified(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), MODIFIED, value);
	}
  


    /**
     * Removes a value of property Modified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MODIFIED, value);
	}
	
    /**
     * Removes a value of property Modified as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MODIFIED, value);
	}
    /**
     * Removes a value of property Modified given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, MODIFIED, value);
	}
	
    /**
     * Removes a value of property Modified given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeModified(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), MODIFIED, value);
	}
  
    /**
     * Removes all values of property Modified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MODIFIED);
	}
	
    /**
     * Removes all values of property Modified	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllModified() {
		Base.removeAll(this.model, this.getResource(), MODIFIED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e44258 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNaoUpdatable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NAOUPDATABLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e44258 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNaoUpdatable() {
		return Base.has(this.model, this.getResource(), NAOUPDATABLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e44258 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNaoUpdatable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NAOUPDATABLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e44258 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNaoUpdatable( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NAOUPDATABLE);
	}

     /**
     * Get all values of property NaoUpdatable as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNaoUpdatable_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NAOUPDATABLE);
	}
	
    /**
     * Get all values of property NaoUpdatable as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNaoUpdatable_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAOUPDATABLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NaoUpdatable as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNaoUpdatable_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NAOUPDATABLE);
	}

    /**
     * Get all values of property NaoUpdatable as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNaoUpdatable_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NAOUPDATABLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NaoUpdatable     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllNaoUpdatable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NAOUPDATABLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property NaoUpdatable as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllNaoUpdatable_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAOUPDATABLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property NaoUpdatable     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllNaoUpdatable() {
		return Base.getAll(this.model, this.getResource(), NAOUPDATABLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property NaoUpdatable as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllNaoUpdatable_as() {
		return Base.getAll_as(this.model, this.getResource(), NAOUPDATABLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property NaoUpdatable as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNaoUpdatable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NAOUPDATABLE, value);
	}
	
    /**
     * Adds a value to property NaoUpdatable as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNaoUpdatable( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NAOUPDATABLE, value);
	}
    /**
     * Adds a value to property NaoUpdatable from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNaoUpdatable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, NAOUPDATABLE, value);
	}
	
    /**
     * Adds a value to property NaoUpdatable from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNaoUpdatable(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), NAOUPDATABLE, value);
	}
  

    /**
     * Sets a value of property NaoUpdatable from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNaoUpdatable( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NAOUPDATABLE, value);
	}
	
    /**
     * Sets a value of property NaoUpdatable from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNaoUpdatable( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NAOUPDATABLE, value);
	}
    /**
     * Sets a value of property NaoUpdatable from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNaoUpdatable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, NAOUPDATABLE, value);
	}
	
    /**
     * Sets a value of property NaoUpdatable from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNaoUpdatable(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), NAOUPDATABLE, value);
	}
  


    /**
     * Removes a value of property NaoUpdatable as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNaoUpdatable( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NAOUPDATABLE, value);
	}
	
    /**
     * Removes a value of property NaoUpdatable as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNaoUpdatable( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NAOUPDATABLE, value);
	}
    /**
     * Removes a value of property NaoUpdatable given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNaoUpdatable(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, NAOUPDATABLE, value);
	}
	
    /**
     * Removes a value of property NaoUpdatable given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNaoUpdatable(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), NAOUPDATABLE, value);
	}
  
    /**
     * Removes all values of property NaoUpdatable     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNaoUpdatable( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NAOUPDATABLE);
	}
	
    /**
     * Removes all values of property NaoUpdatable	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNaoUpdatable() {
		Base.removeAll(this.model, this.getResource(), NAOUPDATABLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f5d6f48 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNieCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NIECOPYRIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f5d6f48 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNieCopyright() {
		return Base.has(this.model, this.getResource(), NIECOPYRIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f5d6f48 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNieCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NIECOPYRIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f5d6f48 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNieCopyright( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NIECOPYRIGHT);
	}

     /**
     * Get all values of property NieCopyright as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNieCopyright_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NIECOPYRIGHT);
	}
	
    /**
     * Get all values of property NieCopyright as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNieCopyright_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NIECOPYRIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NieCopyright as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNieCopyright_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NIECOPYRIGHT);
	}

    /**
     * Get all values of property NieCopyright as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNieCopyright_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NIECOPYRIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NieCopyright     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllNieCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NIECOPYRIGHT, java.lang.String.class);
	}
	
    /**
     * Get all values of property NieCopyright as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllNieCopyright_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NIECOPYRIGHT, java.lang.String.class);
	}

    /**
     * Get all values of property NieCopyright     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllNieCopyright() {
		return Base.getAll(this.model, this.getResource(), NIECOPYRIGHT, java.lang.String.class);
	}

    /**
     * Get all values of property NieCopyright as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllNieCopyright_as() {
		return Base.getAll_as(this.model, this.getResource(), NIECOPYRIGHT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property NieCopyright as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNieCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NIECOPYRIGHT, value);
	}
	
    /**
     * Adds a value to property NieCopyright as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNieCopyright( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NIECOPYRIGHT, value);
	}
    /**
     * Adds a value to property NieCopyright from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNieCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NIECOPYRIGHT, value);
	}
	
    /**
     * Adds a value to property NieCopyright from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNieCopyright(java.lang.String value) {
		Base.add(this.model, this.getResource(), NIECOPYRIGHT, value);
	}
  

    /**
     * Sets a value of property NieCopyright from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNieCopyright( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NIECOPYRIGHT, value);
	}
	
    /**
     * Sets a value of property NieCopyright from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNieCopyright( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NIECOPYRIGHT, value);
	}
    /**
     * Sets a value of property NieCopyright from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNieCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NIECOPYRIGHT, value);
	}
	
    /**
     * Sets a value of property NieCopyright from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNieCopyright(java.lang.String value) {
		Base.set(this.model, this.getResource(), NIECOPYRIGHT, value);
	}
  


    /**
     * Removes a value of property NieCopyright as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNieCopyright( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NIECOPYRIGHT, value);
	}
	
    /**
     * Removes a value of property NieCopyright as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNieCopyright( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NIECOPYRIGHT, value);
	}
    /**
     * Removes a value of property NieCopyright given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNieCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NIECOPYRIGHT, value);
	}
	
    /**
     * Removes a value of property NieCopyright given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNieCopyright(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NIECOPYRIGHT, value);
	}
  
    /**
     * Removes all values of property NieCopyright     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNieCopyright( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NIECOPYRIGHT);
	}
	
    /**
     * Removes all values of property NieCopyright	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNieCopyright() {
		Base.removeAll(this.model, this.getResource(), NIECOPYRIGHT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25fc229b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNrlMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NRLMAXCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25fc229b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNrlMaxCardinality() {
		return Base.has(this.model, this.getResource(), NRLMAXCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25fc229b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNrlMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NRLMAXCARDINALITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25fc229b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNrlMaxCardinality( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NRLMAXCARDINALITY);
	}

     /**
     * Get all values of property NrlMaxCardinality as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNrlMaxCardinality_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NRLMAXCARDINALITY);
	}
	
    /**
     * Get all values of property NrlMaxCardinality as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNrlMaxCardinality_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NRLMAXCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NrlMaxCardinality as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNrlMaxCardinality_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NRLMAXCARDINALITY);
	}

    /**
     * Get all values of property NrlMaxCardinality as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNrlMaxCardinality_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NRLMAXCARDINALITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NrlMaxCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllNrlMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NRLMAXCARDINALITY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property NrlMaxCardinality as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllNrlMaxCardinality_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NRLMAXCARDINALITY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property NrlMaxCardinality     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllNrlMaxCardinality() {
		return Base.getAll(this.model, this.getResource(), NRLMAXCARDINALITY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property NrlMaxCardinality as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllNrlMaxCardinality_as() {
		return Base.getAll_as(this.model, this.getResource(), NRLMAXCARDINALITY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property NrlMaxCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNrlMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NRLMAXCARDINALITY, value);
	}
	
    /**
     * Adds a value to property NrlMaxCardinality as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNrlMaxCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NRLMAXCARDINALITY, value);
	}
    /**
     * Adds a value to property NrlMaxCardinality from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNrlMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, NRLMAXCARDINALITY, value);
	}
	
    /**
     * Adds a value to property NrlMaxCardinality from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNrlMaxCardinality(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), NRLMAXCARDINALITY, value);
	}
  

    /**
     * Sets a value of property NrlMaxCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNrlMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NRLMAXCARDINALITY, value);
	}
	
    /**
     * Sets a value of property NrlMaxCardinality from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNrlMaxCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NRLMAXCARDINALITY, value);
	}
    /**
     * Sets a value of property NrlMaxCardinality from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNrlMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, NRLMAXCARDINALITY, value);
	}
	
    /**
     * Sets a value of property NrlMaxCardinality from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNrlMaxCardinality(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), NRLMAXCARDINALITY, value);
	}
  


    /**
     * Removes a value of property NrlMaxCardinality as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNrlMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NRLMAXCARDINALITY, value);
	}
	
    /**
     * Removes a value of property NrlMaxCardinality as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNrlMaxCardinality( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NRLMAXCARDINALITY, value);
	}
    /**
     * Removes a value of property NrlMaxCardinality given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNrlMaxCardinality(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, NRLMAXCARDINALITY, value);
	}
	
    /**
     * Removes a value of property NrlMaxCardinality given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNrlMaxCardinality(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), NRLMAXCARDINALITY, value);
	}
  
    /**
     * Removes all values of property NrlMaxCardinality     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNrlMaxCardinality( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NRLMAXCARDINALITY);
	}
	
    /**
     * Removes all values of property NrlMaxCardinality	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNrlMaxCardinality() {
		Base.removeAll(this.model, this.getResource(), NRLMAXCARDINALITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@aef4331 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNsReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NSREPLY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@aef4331 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNsReply() {
		return Base.has(this.model, this.getResource(), NSREPLY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@aef4331 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNsReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NSREPLY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@aef4331 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNsReply( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NSREPLY);
	}

     /**
     * Get all values of property NsReply as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNsReply_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NSREPLY);
	}
	
    /**
     * Get all values of property NsReply as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNsReply_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NSREPLY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NsReply as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNsReply_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NSREPLY);
	}

    /**
     * Get all values of property NsReply as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNsReply_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NSREPLY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NsReply     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllNsReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NSREPLY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property NsReply as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllNsReply_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NSREPLY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property NsReply     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllNsReply() {
		return Base.getAll(this.model, this.getResource(), NSREPLY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property NsReply as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllNsReply_as() {
		return Base.getAll_as(this.model, this.getResource(), NSREPLY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property NsReply as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNsReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NSREPLY, value);
	}
	
    /**
     * Adds a value to property NsReply as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNsReply( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NSREPLY, value);
	}
    /**
     * Adds a value to property NsReply from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNsReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, NSREPLY, value);
	}
	
    /**
     * Adds a value to property NsReply from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNsReply(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), NSREPLY, value);
	}
  

    /**
     * Sets a value of property NsReply from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNsReply( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NSREPLY, value);
	}
	
    /**
     * Sets a value of property NsReply from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNsReply( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NSREPLY, value);
	}
    /**
     * Sets a value of property NsReply from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNsReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, NSREPLY, value);
	}
	
    /**
     * Sets a value of property NsReply from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNsReply(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), NSREPLY, value);
	}
  


    /**
     * Removes a value of property NsReply as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNsReply( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NSREPLY, value);
	}
	
    /**
     * Removes a value of property NsReply as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNsReply( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NSREPLY, value);
	}
    /**
     * Removes a value of property NsReply given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNsReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, NSREPLY, value);
	}
	
    /**
     * Removes a value of property NsReply given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNsReply(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), NSREPLY, value);
	}
  
    /**
     * Removes all values of property NsReply     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNsReply( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NSREPLY);
	}
	
    /**
     * Removes all values of property NsReply	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNsReply() {
		Base.removeAll(this.model, this.getResource(), NSREPLY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e7a656f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNumericRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NUMERICRATING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e7a656f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNumericRating() {
		return Base.has(this.model, this.getResource(), NUMERICRATING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e7a656f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNumericRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NUMERICRATING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e7a656f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNumericRating( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NUMERICRATING);
	}

    /**
     * Get single value of property NumericRating as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getNumericRating_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, NUMERICRATING);
	}
	
    /**
     * Get single value of property NumericRating as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getNumericRating_asNode() {
		return Base.get_asNode(this.model, this.getResource(), NUMERICRATING);
	}
     /**
     * Get single value of property NumericRating     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getNumericRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, NUMERICRATING, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property NumericRating  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getNumericRating() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), NUMERICRATING, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property NumericRating as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addNumericRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, NUMERICRATING, value, 1);
	}
	
    /**
     * Adds a value to property NumericRating as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addNumericRating( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), NUMERICRATING, value, 1);
	}
    /**
     * Adds a value to property NumericRating from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addNumericRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, NUMERICRATING, value, 1);
	}
	
    /**
     * Adds a value to property NumericRating from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addNumericRating(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), NUMERICRATING, value, 1);
	}
 
 

    /**
     * Sets a value of property NumericRating from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNumericRating( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NUMERICRATING, value);
	}
	
    /**
     * Sets a value of property NumericRating from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNumericRating( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NUMERICRATING, value);
	}
    /**
     * Sets a value of property NumericRating from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNumericRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, NUMERICRATING, value);
	}
	
    /**
     * Sets a value of property NumericRating from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNumericRating(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), NUMERICRATING, value);
	}
  


    /**
     * Removes a value of property NumericRating as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNumericRating( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NUMERICRATING, value);
	}
	
    /**
     * Removes a value of property NumericRating as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNumericRating( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NUMERICRATING, value);
	}
    /**
     * Removes a value of property NumericRating given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNumericRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, NUMERICRATING, value);
	}
	
    /**
     * Removes a value of property NumericRating given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNumericRating(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), NUMERICRATING, value);
	}
  
    /**
     * Removes all values of property NumericRating     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNumericRating( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NUMERICRATING);
	}
	
    /**
     * Removes all values of property NumericRating	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNumericRating() {
		Base.removeAll(this.model, this.getResource(), NUMERICRATING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e8e0d42 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOntologies20070510nid3FileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ONTOLOGIES20070510NID3FILEOWNER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e8e0d42 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOntologies20070510nid3FileOwner() {
		return Base.has(this.model, this.getResource(), ONTOLOGIES20070510NID3FILEOWNER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e8e0d42 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOntologies20070510nid3FileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ONTOLOGIES20070510NID3FILEOWNER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e8e0d42 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOntologies20070510nid3FileOwner( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ONTOLOGIES20070510NID3FILEOWNER);
	}

     /**
     * Get all values of property Ontologies20070510nid3FileOwner as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOntologies20070510nid3FileOwner_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ONTOLOGIES20070510NID3FILEOWNER);
	}
	
    /**
     * Get all values of property Ontologies20070510nid3FileOwner as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOntologies20070510nid3FileOwner_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONTOLOGIES20070510NID3FILEOWNER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Ontologies20070510nid3FileOwner as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOntologies20070510nid3FileOwner_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ONTOLOGIES20070510NID3FILEOWNER);
	}

    /**
     * Get all values of property Ontologies20070510nid3FileOwner as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOntologies20070510nid3FileOwner_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ONTOLOGIES20070510NID3FILEOWNER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Ontologies20070510nid3FileOwner     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllOntologies20070510nid3FileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ONTOLOGIES20070510NID3FILEOWNER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Ontologies20070510nid3FileOwner as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllOntologies20070510nid3FileOwner_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ONTOLOGIES20070510NID3FILEOWNER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Ontologies20070510nid3FileOwner     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllOntologies20070510nid3FileOwner() {
		return Base.getAll(this.model, this.getResource(), ONTOLOGIES20070510NID3FILEOWNER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Ontologies20070510nid3FileOwner as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllOntologies20070510nid3FileOwner_as() {
		return Base.getAll_as(this.model, this.getResource(), ONTOLOGIES20070510NID3FILEOWNER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Ontologies20070510nid3FileOwner as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOntologies20070510nid3FileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ONTOLOGIES20070510NID3FILEOWNER, value);
	}
	
    /**
     * Adds a value to property Ontologies20070510nid3FileOwner as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOntologies20070510nid3FileOwner( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ONTOLOGIES20070510NID3FILEOWNER, value);
	}
    /**
     * Adds a value to property Ontologies20070510nid3FileOwner from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOntologies20070510nid3FileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, ONTOLOGIES20070510NID3FILEOWNER, value);
	}
	
    /**
     * Adds a value to property Ontologies20070510nid3FileOwner from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOntologies20070510nid3FileOwner(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), ONTOLOGIES20070510NID3FILEOWNER, value);
	}
  

    /**
     * Sets a value of property Ontologies20070510nid3FileOwner from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOntologies20070510nid3FileOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ONTOLOGIES20070510NID3FILEOWNER, value);
	}
	
    /**
     * Sets a value of property Ontologies20070510nid3FileOwner from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOntologies20070510nid3FileOwner( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ONTOLOGIES20070510NID3FILEOWNER, value);
	}
    /**
     * Sets a value of property Ontologies20070510nid3FileOwner from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOntologies20070510nid3FileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, ONTOLOGIES20070510NID3FILEOWNER, value);
	}
	
    /**
     * Sets a value of property Ontologies20070510nid3FileOwner from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOntologies20070510nid3FileOwner(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), ONTOLOGIES20070510NID3FILEOWNER, value);
	}
  


    /**
     * Removes a value of property Ontologies20070510nid3FileOwner as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOntologies20070510nid3FileOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ONTOLOGIES20070510NID3FILEOWNER, value);
	}
	
    /**
     * Removes a value of property Ontologies20070510nid3FileOwner as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOntologies20070510nid3FileOwner( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ONTOLOGIES20070510NID3FILEOWNER, value);
	}
    /**
     * Removes a value of property Ontologies20070510nid3FileOwner given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOntologies20070510nid3FileOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, ONTOLOGIES20070510NID3FILEOWNER, value);
	}
	
    /**
     * Removes a value of property Ontologies20070510nid3FileOwner given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOntologies20070510nid3FileOwner(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), ONTOLOGIES20070510NID3FILEOWNER, value);
	}
  
    /**
     * Removes all values of property Ontologies20070510nid3FileOwner     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOntologies20070510nid3FileOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ONTOLOGIES20070510NID3FILEOWNER);
	}
	
    /**
     * Removes all values of property Ontologies20070510nid3FileOwner	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOntologies20070510nid3FileOwner() {
		Base.removeAll(this.model, this.getResource(), ONTOLOGIES20070510NID3FILEOWNER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c810626 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOtherConceptualization(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, OTHERCONCEPTUALIZATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c810626 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOtherConceptualization() {
		return Base.has(this.model, this.getResource(), OTHERCONCEPTUALIZATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c810626 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOtherConceptualization(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OTHERCONCEPTUALIZATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c810626 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOtherConceptualization( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OTHERCONCEPTUALIZATION);
	}

     /**
     * Get all values of property OtherConceptualization as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOtherConceptualization_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OTHERCONCEPTUALIZATION);
	}
	
    /**
     * Get all values of property OtherConceptualization as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOtherConceptualization_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OTHERCONCEPTUALIZATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OtherConceptualization as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOtherConceptualization_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OTHERCONCEPTUALIZATION);
	}

    /**
     * Get all values of property OtherConceptualization as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOtherConceptualization_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OTHERCONCEPTUALIZATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OtherConceptualization     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Class> getAllOtherConceptualization(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, OTHERCONCEPTUALIZATION, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}
	
    /**
     * Get all values of property OtherConceptualization as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Class> getAllOtherConceptualization_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OTHERCONCEPTUALIZATION, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}

    /**
     * Get all values of property OtherConceptualization     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Class> getAllOtherConceptualization() {
		return Base.getAll(this.model, this.getResource(), OTHERCONCEPTUALIZATION, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}

    /**
     * Get all values of property OtherConceptualization as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Class> getAllOtherConceptualization_as() {
		return Base.getAll_as(this.model, this.getResource(), OTHERCONCEPTUALIZATION, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}
 
    /**
     * Adds a value to property OtherConceptualization as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOtherConceptualization(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, OTHERCONCEPTUALIZATION, value);
	}
	
    /**
     * Adds a value to property OtherConceptualization as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOtherConceptualization( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), OTHERCONCEPTUALIZATION, value);
	}
    /**
     * Adds a value to property OtherConceptualization from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOtherConceptualization(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.add(model, instanceResource, OTHERCONCEPTUALIZATION, value);
	}
	
    /**
     * Adds a value to property OtherConceptualization from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOtherConceptualization(org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.add(this.model, this.getResource(), OTHERCONCEPTUALIZATION, value);
	}
  

    /**
     * Sets a value of property OtherConceptualization from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOtherConceptualization( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, OTHERCONCEPTUALIZATION, value);
	}
	
    /**
     * Sets a value of property OtherConceptualization from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOtherConceptualization( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), OTHERCONCEPTUALIZATION, value);
	}
    /**
     * Sets a value of property OtherConceptualization from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOtherConceptualization(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.set(model, instanceResource, OTHERCONCEPTUALIZATION, value);
	}
	
    /**
     * Sets a value of property OtherConceptualization from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOtherConceptualization(org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.set(this.model, this.getResource(), OTHERCONCEPTUALIZATION, value);
	}
  


    /**
     * Removes a value of property OtherConceptualization as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOtherConceptualization( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, OTHERCONCEPTUALIZATION, value);
	}
	
    /**
     * Removes a value of property OtherConceptualization as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOtherConceptualization( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), OTHERCONCEPTUALIZATION, value);
	}
    /**
     * Removes a value of property OtherConceptualization given as an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOtherConceptualization(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.remove(model, instanceResource, OTHERCONCEPTUALIZATION, value);
	}
	
    /**
     * Removes a value of property OtherConceptualization given as an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOtherConceptualization(org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.remove(this.model, this.getResource(), OTHERCONCEPTUALIZATION, value);
	}
  
    /**
     * Removes all values of property OtherConceptualization     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOtherConceptualization( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, OTHERCONCEPTUALIZATION);
	}
	
    /**
     * Removes all values of property OtherConceptualization	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOtherConceptualization() {
		Base.removeAll(this.model, this.getResource(), OTHERCONCEPTUALIZATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c2b2bfc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOtherSlot(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, OTHERSLOT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c2b2bfc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOtherSlot() {
		return Base.has(this.model, this.getResource(), OTHERSLOT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c2b2bfc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOtherSlot(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OTHERSLOT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c2b2bfc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOtherSlot( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OTHERSLOT);
	}

     /**
     * Get all values of property OtherSlot as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOtherSlot_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OTHERSLOT);
	}
	
    /**
     * Get all values of property OtherSlot as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOtherSlot_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OTHERSLOT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OtherSlot as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOtherSlot_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OTHERSLOT);
	}

    /**
     * Get all values of property OtherSlot as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOtherSlot_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OTHERSLOT, org.ontoware.rdf2go.model.node.Node.class);
	}
    /**
     * Get all values of property OtherSlot as ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.Property
	 *
	 * [Generated from RDFReactor template rule #get9static] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOtherSlot_asorg_ontoware_rdfreactor_schema_rdfs_Property(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OTHERSLOT, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
	
    /**
     * Get all values of property OtherSlot as ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.Property
	 *
	 * [Generated from RDFReactor template rule #get10dynamic] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOtherSlot_asorg_ontoware_rdfreactor_schema_rdfs_Property() {
		return Base.getAll_as(this.model, this.getResource(), OTHERSLOT, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property OtherSlot as ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.Resource
	 *
	 * [Generated from RDFReactor template rule #get9static] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOtherSlot_asorg_ontoware_rdfreactor_schema_rdfs_Resource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OTHERSLOT, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property OtherSlot as ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ClosableIterator of org.ontoware.rdfreactor.schema.rdfs.Resource
	 *
	 * [Generated from RDFReactor template rule #get10dynamic] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOtherSlot_asorg_ontoware_rdfreactor_schema_rdfs_Resource() {
		return Base.getAll_as(this.model, this.getResource(), OTHERSLOT, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

      /**
     * Get all values of property OtherSlot     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOtherSlot(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, OTHERSLOT, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
	
    /**
     * Get all values of property OtherSlot as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOtherSlot_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OTHERSLOT, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property OtherSlot     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOtherSlot() {
		return Base.getAll(this.model, this.getResource(), OTHERSLOT, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property OtherSlot as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllOtherSlot_as() {
		return Base.getAll_as(this.model, this.getResource(), OTHERSLOT, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
 
    /**
     * Adds a value to property OtherSlot as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOtherSlot(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, OTHERSLOT, value);
	}
	
    /**
     * Adds a value to property OtherSlot as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOtherSlot( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), OTHERSLOT, value);
	}
    /**
     * Adds a value to property OtherSlot from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOtherSlot(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(model, instanceResource, OTHERSLOT, value);
	}
	
    /**
     * Adds a value to property OtherSlot from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOtherSlot(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(this.model, this.getResource(), OTHERSLOT, value);
	}
    /**
     * Adds a value to property OtherSlot from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOtherSlot(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, OTHERSLOT, value);
	}
	
    /**
     * Adds a value to property OtherSlot from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOtherSlot(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), OTHERSLOT, value);
	}
  

    /**
     * Sets a value of property OtherSlot from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOtherSlot( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, OTHERSLOT, value);
	}
	
    /**
     * Sets a value of property OtherSlot from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOtherSlot( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), OTHERSLOT, value);
	}
    /**
     * Sets a value of property OtherSlot from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOtherSlot(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(model, instanceResource, OTHERSLOT, value);
	}
	
    /**
     * Sets a value of property OtherSlot from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOtherSlot(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(this.model, this.getResource(), OTHERSLOT, value);
	}
    /**
     * Sets a value of property OtherSlot from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOtherSlot(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, OTHERSLOT, value);
	}
	
    /**
     * Sets a value of property OtherSlot from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOtherSlot(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), OTHERSLOT, value);
	}
  


    /**
     * Removes a value of property OtherSlot as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOtherSlot( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, OTHERSLOT, value);
	}
	
    /**
     * Removes a value of property OtherSlot as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOtherSlot( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), OTHERSLOT, value);
	}
    /**
     * Removes a value of property OtherSlot given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOtherSlot(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(model, instanceResource, OTHERSLOT, value);
	}
	
    /**
     * Removes a value of property OtherSlot given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOtherSlot(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(this.model, this.getResource(), OTHERSLOT, value);
	}
    /**
     * Removes a value of property OtherSlot given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOtherSlot(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, OTHERSLOT, value);
	}
	
    /**
     * Removes a value of property OtherSlot given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOtherSlot(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), OTHERSLOT, value);
	}
  
    /**
     * Removes all values of property OtherSlot     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOtherSlot( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, OTHERSLOT);
	}
	
    /**
     * Removes all values of property OtherSlot	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOtherSlot() {
		Base.removeAll(this.model, this.getResource(), OTHERSLOT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@395c2873 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@395c2873 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPage() {
		return Base.has(this.model, this.getResource(), PAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@395c2873 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@395c2873 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PAGE);
	}

     /**
     * Get all values of property Page as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PAGE);
	}
	
    /**
     * Get all values of property Page as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Page as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PAGE);
	}

    /**
     * Get all values of property Page as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Page     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PAGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Page as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllPage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Page     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllPage() {
		return Base.getAll(this.model, this.getResource(), PAGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Page as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllPage_as() {
		return Base.getAll_as(this.model, this.getResource(), PAGE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Page as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PAGE, value);
	}
	
    /**
     * Adds a value to property Page as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PAGE, value);
	}
    /**
     * Adds a value to property Page from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, PAGE, value);
	}
	
    /**
     * Adds a value to property Page from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPage(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), PAGE, value);
	}
  

    /**
     * Sets a value of property Page from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PAGE, value);
	}
	
    /**
     * Sets a value of property Page from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PAGE, value);
	}
    /**
     * Sets a value of property Page from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, PAGE, value);
	}
	
    /**
     * Sets a value of property Page from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPage(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), PAGE, value);
	}
  


    /**
     * Removes a value of property Page as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PAGE, value);
	}
	
    /**
     * Removes a value of property Page as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PAGE, value);
	}
    /**
     * Removes a value of property Page given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, PAGE, value);
	}
	
    /**
     * Removes a value of property Page given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePage(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), PAGE, value);
	}
  
    /**
     * Removes all values of property Page     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PAGE);
	}
	
    /**
     * Removes all values of property Page	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPage() {
		Base.removeAll(this.model, this.getResource(), PAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a816320 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPeers(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PEERS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a816320 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPeers() {
		return Base.has(this.model, this.getResource(), PEERS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a816320 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPeers(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PEERS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a816320 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPeers( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PEERS);
	}

     /**
     * Get all values of property Peers as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPeers_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PEERS);
	}
	
    /**
     * Get all values of property Peers as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPeers_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PEERS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Peers as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPeers_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PEERS);
	}

    /**
     * Get all values of property Peers as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPeers_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PEERS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Peers     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dcon.Peers> getAllPeers(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PEERS, eu.dime.ps.semantic.model.dcon.Peers.class);
	}
	
    /**
     * Get all values of property Peers as a ReactorResult of Peers 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dcon.Peers> getAllPeers_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PEERS, eu.dime.ps.semantic.model.dcon.Peers.class);
	}

    /**
     * Get all values of property Peers     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dcon.Peers> getAllPeers() {
		return Base.getAll(this.model, this.getResource(), PEERS, eu.dime.ps.semantic.model.dcon.Peers.class);
	}

    /**
     * Get all values of property Peers as a ReactorResult of Peers 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dcon.Peers> getAllPeers_as() {
		return Base.getAll_as(this.model, this.getResource(), PEERS, eu.dime.ps.semantic.model.dcon.Peers.class);
	}
 
    /**
     * Adds a value to property Peers as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPeers(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PEERS, value);
	}
	
    /**
     * Adds a value to property Peers as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPeers( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PEERS, value);
	}
    /**
     * Adds a value to property Peers from an instance of Peers 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPeers(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Peers value) {
		Base.add(model, instanceResource, PEERS, value);
	}
	
    /**
     * Adds a value to property Peers from an instance of Peers 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPeers(eu.dime.ps.semantic.model.dcon.Peers value) {
		Base.add(this.model, this.getResource(), PEERS, value);
	}
  

    /**
     * Sets a value of property Peers from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPeers( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PEERS, value);
	}
	
    /**
     * Sets a value of property Peers from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPeers( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PEERS, value);
	}
    /**
     * Sets a value of property Peers from an instance of Peers 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPeers(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Peers value) {
		Base.set(model, instanceResource, PEERS, value);
	}
	
    /**
     * Sets a value of property Peers from an instance of Peers 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPeers(eu.dime.ps.semantic.model.dcon.Peers value) {
		Base.set(this.model, this.getResource(), PEERS, value);
	}
  


    /**
     * Removes a value of property Peers as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePeers( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PEERS, value);
	}
	
    /**
     * Removes a value of property Peers as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePeers( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PEERS, value);
	}
    /**
     * Removes a value of property Peers given as an instance of Peers 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePeers(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Peers value) {
		Base.remove(model, instanceResource, PEERS, value);
	}
	
    /**
     * Removes a value of property Peers given as an instance of Peers 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePeers(eu.dime.ps.semantic.model.dcon.Peers value) {
		Base.remove(this.model, this.getResource(), PEERS, value);
	}
  
    /**
     * Removes all values of property Peers     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPeers( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PEERS);
	}
	
    /**
     * Removes all values of property Peers	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPeers() {
		Base.removeAll(this.model, this.getResource(), PEERS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6583cbdb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPersonalIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PERSONALIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6583cbdb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPersonalIdentifier() {
		return Base.has(this.model, this.getResource(), PERSONALIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6583cbdb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPersonalIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PERSONALIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6583cbdb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPersonalIdentifier( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PERSONALIDENTIFIER);
	}

     /**
     * Get all values of property PersonalIdentifier as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPersonalIdentifier_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PERSONALIDENTIFIER);
	}
	
    /**
     * Get all values of property PersonalIdentifier as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPersonalIdentifier_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PERSONALIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PersonalIdentifier as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPersonalIdentifier_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PERSONALIDENTIFIER);
	}

    /**
     * Get all values of property PersonalIdentifier as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPersonalIdentifier_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PERSONALIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PersonalIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPersonalIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PERSONALIDENTIFIER, java.lang.String.class);
	}
	
    /**
     * Get all values of property PersonalIdentifier as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPersonalIdentifier_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PERSONALIDENTIFIER, java.lang.String.class);
	}

    /**
     * Get all values of property PersonalIdentifier     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPersonalIdentifier() {
		return Base.getAll(this.model, this.getResource(), PERSONALIDENTIFIER, java.lang.String.class);
	}

    /**
     * Get all values of property PersonalIdentifier as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPersonalIdentifier_as() {
		return Base.getAll_as(this.model, this.getResource(), PERSONALIDENTIFIER, java.lang.String.class);
	}
 
    /**
     * Adds a value to property PersonalIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPersonalIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PERSONALIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property PersonalIdentifier as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPersonalIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PERSONALIDENTIFIER, value);
	}
    /**
     * Adds a value to property PersonalIdentifier from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPersonalIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PERSONALIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property PersonalIdentifier from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPersonalIdentifier(java.lang.String value) {
		Base.add(this.model, this.getResource(), PERSONALIDENTIFIER, value);
	}
  

    /**
     * Sets a value of property PersonalIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPersonalIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PERSONALIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property PersonalIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPersonalIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PERSONALIDENTIFIER, value);
	}
    /**
     * Sets a value of property PersonalIdentifier from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPersonalIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PERSONALIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property PersonalIdentifier from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPersonalIdentifier(java.lang.String value) {
		Base.set(this.model, this.getResource(), PERSONALIDENTIFIER, value);
	}
  


    /**
     * Removes a value of property PersonalIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePersonalIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PERSONALIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property PersonalIdentifier as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePersonalIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PERSONALIDENTIFIER, value);
	}
    /**
     * Removes a value of property PersonalIdentifier given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePersonalIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PERSONALIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property PersonalIdentifier given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePersonalIdentifier(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PERSONALIDENTIFIER, value);
	}
  
    /**
     * Removes all values of property PersonalIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPersonalIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PERSONALIDENTIFIER);
	}
	
    /**
     * Removes all values of property PersonalIdentifier	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPersonalIdentifier() {
		Base.removeAll(this.model, this.getResource(), PERSONALIDENTIFIER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b2832ca has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPluralPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PLURALPREFLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b2832ca has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPluralPrefLabel() {
		return Base.has(this.model, this.getResource(), PLURALPREFLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b2832ca has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPluralPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PLURALPREFLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b2832ca has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPluralPrefLabel( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PLURALPREFLABEL);
	}

    /**
     * Get single value of property PluralPrefLabel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getPluralPrefLabel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, PLURALPREFLABEL);
	}
	
    /**
     * Get single value of property PluralPrefLabel as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getPluralPrefLabel_asNode() {
		return Base.get_asNode(this.model, this.getResource(), PLURALPREFLABEL);
	}
     /**
     * Get single value of property PluralPrefLabel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getPluralPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, PLURALPREFLABEL, java.lang.String.class);
	}
	
    /**
     * Get single value of property PluralPrefLabel  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getPluralPrefLabel() {
		return (java.lang.String) Base.get(this.model, this.getResource(), PLURALPREFLABEL, java.lang.String.class);
	}
  
    /**
     * Adds a value to property PluralPrefLabel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addPluralPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, PLURALPREFLABEL, value, 1);
	}
	
    /**
     * Adds a value to property PluralPrefLabel as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addPluralPrefLabel( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PLURALPREFLABEL, value, 1);
	}
    /**
     * Adds a value to property PluralPrefLabel from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addPluralPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, PLURALPREFLABEL, value, 1);
	}
	
    /**
     * Adds a value to property PluralPrefLabel from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addPluralPrefLabel(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PLURALPREFLABEL, value, 1);
	}
 
 

    /**
     * Sets a value of property PluralPrefLabel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPluralPrefLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PLURALPREFLABEL, value);
	}
	
    /**
     * Sets a value of property PluralPrefLabel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPluralPrefLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PLURALPREFLABEL, value);
	}
    /**
     * Sets a value of property PluralPrefLabel from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPluralPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PLURALPREFLABEL, value);
	}
	
    /**
     * Sets a value of property PluralPrefLabel from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPluralPrefLabel(java.lang.String value) {
		Base.set(this.model, this.getResource(), PLURALPREFLABEL, value);
	}
  


    /**
     * Removes a value of property PluralPrefLabel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePluralPrefLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PLURALPREFLABEL, value);
	}
	
    /**
     * Removes a value of property PluralPrefLabel as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePluralPrefLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PLURALPREFLABEL, value);
	}
    /**
     * Removes a value of property PluralPrefLabel given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePluralPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PLURALPREFLABEL, value);
	}
	
    /**
     * Removes a value of property PluralPrefLabel given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePluralPrefLabel(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PLURALPREFLABEL, value);
	}
  
    /**
     * Removes all values of property PluralPrefLabel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPluralPrefLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PLURALPREFLABEL);
	}
	
    /**
     * Removes all values of property PluralPrefLabel	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPluralPrefLabel() {
		Base.removeAll(this.model, this.getResource(), PLURALPREFLABEL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c26bb1a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPrefSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PREFSYMBOL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c26bb1a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPrefSymbol() {
		return Base.has(this.model, this.getResource(), PREFSYMBOL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c26bb1a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPrefSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PREFSYMBOL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c26bb1a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPrefSymbol( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PREFSYMBOL);
	}

    /**
     * Get single value of property PrefSymbol as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getPrefSymbol_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, PREFSYMBOL);
	}
	
    /**
     * Get single value of property PrefSymbol as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getPrefSymbol_asNode() {
		return Base.get_asNode(this.model, this.getResource(), PREFSYMBOL);
	}
     /**
     * Get single value of property PrefSymbol     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.nao.Symbol getPrefSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.nao.Symbol) Base.get(model, instanceResource, PREFSYMBOL, eu.dime.ps.semantic.model.nao.Symbol.class);
	}
	
    /**
     * Get single value of property PrefSymbol  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.nao.Symbol getPrefSymbol() {
		return (eu.dime.ps.semantic.model.nao.Symbol) Base.get(this.model, this.getResource(), PREFSYMBOL, eu.dime.ps.semantic.model.nao.Symbol.class);
	}
  
    /**
     * Adds a value to property PrefSymbol as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addPrefSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, PREFSYMBOL, value, 1);
	}
	
    /**
     * Adds a value to property PrefSymbol as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addPrefSymbol( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PREFSYMBOL, value, 1);
	}
    /**
     * Adds a value to property PrefSymbol from an instance of Symbol 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addPrefSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Symbol value)
    throws CardinalityException {
		Base.add(model, instanceResource, PREFSYMBOL, value, 1);
	}
	
    /**
     * Adds a value to property PrefSymbol from an instance of Symbol 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addPrefSymbol(eu.dime.ps.semantic.model.nao.Symbol value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PREFSYMBOL, value, 1);
	}
 
 

    /**
     * Sets a value of property PrefSymbol from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPrefSymbol( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PREFSYMBOL, value);
	}
	
    /**
     * Sets a value of property PrefSymbol from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPrefSymbol( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PREFSYMBOL, value);
	}
    /**
     * Sets a value of property PrefSymbol from an instance of Symbol 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPrefSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.set(model, instanceResource, PREFSYMBOL, value);
	}
	
    /**
     * Sets a value of property PrefSymbol from an instance of Symbol 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPrefSymbol(eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.set(this.model, this.getResource(), PREFSYMBOL, value);
	}
  


    /**
     * Removes a value of property PrefSymbol as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePrefSymbol( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PREFSYMBOL, value);
	}
	
    /**
     * Removes a value of property PrefSymbol as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePrefSymbol( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PREFSYMBOL, value);
	}
    /**
     * Removes a value of property PrefSymbol given as an instance of Symbol 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePrefSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.remove(model, instanceResource, PREFSYMBOL, value);
	}
	
    /**
     * Removes a value of property PrefSymbol given as an instance of Symbol 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePrefSymbol(eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.remove(this.model, this.getResource(), PREFSYMBOL, value);
	}
  
    /**
     * Removes all values of property PrefSymbol     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPrefSymbol( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PREFSYMBOL);
	}
	
    /**
     * Removes all values of property PrefSymbol	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPrefSymbol() {
		Base.removeAll(this.model, this.getResource(), PREFSYMBOL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37b44519 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPreferredNamespacePrefix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PREFERREDNAMESPACEPREFIX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37b44519 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPreferredNamespacePrefix() {
		return Base.has(this.model, this.getResource(), PREFERREDNAMESPACEPREFIX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37b44519 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPreferredNamespacePrefix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PREFERREDNAMESPACEPREFIX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37b44519 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPreferredNamespacePrefix( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PREFERREDNAMESPACEPREFIX);
	}

     /**
     * Get all values of property PreferredNamespacePrefix as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPreferredNamespacePrefix_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PREFERREDNAMESPACEPREFIX);
	}
	
    /**
     * Get all values of property PreferredNamespacePrefix as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPreferredNamespacePrefix_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREFERREDNAMESPACEPREFIX, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PreferredNamespacePrefix as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPreferredNamespacePrefix_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PREFERREDNAMESPACEPREFIX);
	}

    /**
     * Get all values of property PreferredNamespacePrefix as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPreferredNamespacePrefix_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PREFERREDNAMESPACEPREFIX, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PreferredNamespacePrefix     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllPreferredNamespacePrefix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PREFERREDNAMESPACEPREFIX, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property PreferredNamespacePrefix as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllPreferredNamespacePrefix_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREFERREDNAMESPACEPREFIX, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property PreferredNamespacePrefix     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllPreferredNamespacePrefix() {
		return Base.getAll(this.model, this.getResource(), PREFERREDNAMESPACEPREFIX, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property PreferredNamespacePrefix as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllPreferredNamespacePrefix_as() {
		return Base.getAll_as(this.model, this.getResource(), PREFERREDNAMESPACEPREFIX, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property PreferredNamespacePrefix as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPreferredNamespacePrefix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PREFERREDNAMESPACEPREFIX, value);
	}
	
    /**
     * Adds a value to property PreferredNamespacePrefix as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPreferredNamespacePrefix( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PREFERREDNAMESPACEPREFIX, value);
	}
    /**
     * Adds a value to property PreferredNamespacePrefix from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPreferredNamespacePrefix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, PREFERREDNAMESPACEPREFIX, value);
	}
	
    /**
     * Adds a value to property PreferredNamespacePrefix from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPreferredNamespacePrefix(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), PREFERREDNAMESPACEPREFIX, value);
	}
  

    /**
     * Sets a value of property PreferredNamespacePrefix from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPreferredNamespacePrefix( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PREFERREDNAMESPACEPREFIX, value);
	}
	
    /**
     * Sets a value of property PreferredNamespacePrefix from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPreferredNamespacePrefix( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PREFERREDNAMESPACEPREFIX, value);
	}
    /**
     * Sets a value of property PreferredNamespacePrefix from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPreferredNamespacePrefix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, PREFERREDNAMESPACEPREFIX, value);
	}
	
    /**
     * Sets a value of property PreferredNamespacePrefix from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPreferredNamespacePrefix(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), PREFERREDNAMESPACEPREFIX, value);
	}
  


    /**
     * Removes a value of property PreferredNamespacePrefix as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePreferredNamespacePrefix( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PREFERREDNAMESPACEPREFIX, value);
	}
	
    /**
     * Removes a value of property PreferredNamespacePrefix as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePreferredNamespacePrefix( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PREFERREDNAMESPACEPREFIX, value);
	}
    /**
     * Removes a value of property PreferredNamespacePrefix given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePreferredNamespacePrefix(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, PREFERREDNAMESPACEPREFIX, value);
	}
	
    /**
     * Removes a value of property PreferredNamespacePrefix given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePreferredNamespacePrefix(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), PREFERREDNAMESPACEPREFIX, value);
	}
  
    /**
     * Removes all values of property PreferredNamespacePrefix     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPreferredNamespacePrefix( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PREFERREDNAMESPACEPREFIX);
	}
	
    /**
     * Removes all values of property PreferredNamespacePrefix	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPreferredNamespacePrefix() {
		Base.removeAll(this.model, this.getResource(), PREFERREDNAMESPACEPREFIX);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76512afa has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPreferredNamespaceUri(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PREFERREDNAMESPACEURI);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76512afa has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPreferredNamespaceUri() {
		return Base.has(this.model, this.getResource(), PREFERREDNAMESPACEURI);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76512afa has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPreferredNamespaceUri(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PREFERREDNAMESPACEURI);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76512afa has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPreferredNamespaceUri( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PREFERREDNAMESPACEURI);
	}

     /**
     * Get all values of property PreferredNamespaceUri as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPreferredNamespaceUri_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PREFERREDNAMESPACEURI);
	}
	
    /**
     * Get all values of property PreferredNamespaceUri as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPreferredNamespaceUri_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREFERREDNAMESPACEURI, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PreferredNamespaceUri as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPreferredNamespaceUri_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PREFERREDNAMESPACEURI);
	}

    /**
     * Get all values of property PreferredNamespaceUri as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPreferredNamespaceUri_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PREFERREDNAMESPACEURI, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PreferredNamespaceUri     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllPreferredNamespaceUri(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PREFERREDNAMESPACEURI, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property PreferredNamespaceUri as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllPreferredNamespaceUri_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREFERREDNAMESPACEURI, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property PreferredNamespaceUri     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllPreferredNamespaceUri() {
		return Base.getAll(this.model, this.getResource(), PREFERREDNAMESPACEURI, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property PreferredNamespaceUri as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllPreferredNamespaceUri_as() {
		return Base.getAll_as(this.model, this.getResource(), PREFERREDNAMESPACEURI, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property PreferredNamespaceUri as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPreferredNamespaceUri(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PREFERREDNAMESPACEURI, value);
	}
	
    /**
     * Adds a value to property PreferredNamespaceUri as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPreferredNamespaceUri( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PREFERREDNAMESPACEURI, value);
	}
    /**
     * Adds a value to property PreferredNamespaceUri from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPreferredNamespaceUri(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, PREFERREDNAMESPACEURI, value);
	}
	
    /**
     * Adds a value to property PreferredNamespaceUri from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPreferredNamespaceUri(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), PREFERREDNAMESPACEURI, value);
	}
  

    /**
     * Sets a value of property PreferredNamespaceUri from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPreferredNamespaceUri( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PREFERREDNAMESPACEURI, value);
	}
	
    /**
     * Sets a value of property PreferredNamespaceUri from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPreferredNamespaceUri( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PREFERREDNAMESPACEURI, value);
	}
    /**
     * Sets a value of property PreferredNamespaceUri from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPreferredNamespaceUri(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, PREFERREDNAMESPACEURI, value);
	}
	
    /**
     * Sets a value of property PreferredNamespaceUri from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPreferredNamespaceUri(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), PREFERREDNAMESPACEURI, value);
	}
  


    /**
     * Removes a value of property PreferredNamespaceUri as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePreferredNamespaceUri( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PREFERREDNAMESPACEURI, value);
	}
	
    /**
     * Removes a value of property PreferredNamespaceUri as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePreferredNamespaceUri( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PREFERREDNAMESPACEURI, value);
	}
    /**
     * Removes a value of property PreferredNamespaceUri given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePreferredNamespaceUri(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, PREFERREDNAMESPACEURI, value);
	}
	
    /**
     * Removes a value of property PreferredNamespaceUri given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePreferredNamespaceUri(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), PREFERREDNAMESPACEURI, value);
	}
  
    /**
     * Removes all values of property PreferredNamespaceUri     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPreferredNamespaceUri( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PREFERREDNAMESPACEURI);
	}
	
    /**
     * Removes all values of property PreferredNamespaceUri	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPreferredNamespaceUri() {
		Base.removeAll(this.model, this.getResource(), PREFERREDNAMESPACEURI);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5463cd7b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPrivacyLevel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRIVACYLEVEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5463cd7b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPrivacyLevel() {
		return Base.has(this.model, this.getResource(), PRIVACYLEVEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5463cd7b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPrivacyLevel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRIVACYLEVEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5463cd7b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPrivacyLevel( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRIVACYLEVEL);
	}

     /**
     * Get all values of property PrivacyLevel as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrivacyLevel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRIVACYLEVEL);
	}
	
    /**
     * Get all values of property PrivacyLevel as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrivacyLevel_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIVACYLEVEL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PrivacyLevel as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrivacyLevel_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRIVACYLEVEL);
	}

    /**
     * Get all values of property PrivacyLevel as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrivacyLevel_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRIVACYLEVEL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PrivacyLevel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Double> getAllPrivacyLevel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRIVACYLEVEL, java.lang.Double.class);
	}
	
    /**
     * Get all values of property PrivacyLevel as a ReactorResult of java.lang.Double 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Double> getAllPrivacyLevel_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIVACYLEVEL, java.lang.Double.class);
	}

    /**
     * Get all values of property PrivacyLevel     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Double> getAllPrivacyLevel() {
		return Base.getAll(this.model, this.getResource(), PRIVACYLEVEL, java.lang.Double.class);
	}

    /**
     * Get all values of property PrivacyLevel as a ReactorResult of java.lang.Double 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Double> getAllPrivacyLevel_as() {
		return Base.getAll_as(this.model, this.getResource(), PRIVACYLEVEL, java.lang.Double.class);
	}
 
    /**
     * Adds a value to property PrivacyLevel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPrivacyLevel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRIVACYLEVEL, value);
	}
	
    /**
     * Adds a value to property PrivacyLevel as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPrivacyLevel( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRIVACYLEVEL, value);
	}
    /**
     * Adds a value to property PrivacyLevel from an instance of java.lang.Double 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPrivacyLevel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Double value) {
		Base.add(model, instanceResource, PRIVACYLEVEL, value);
	}
	
    /**
     * Adds a value to property PrivacyLevel from an instance of java.lang.Double 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPrivacyLevel(java.lang.Double value) {
		Base.add(this.model, this.getResource(), PRIVACYLEVEL, value);
	}
  

    /**
     * Sets a value of property PrivacyLevel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPrivacyLevel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRIVACYLEVEL, value);
	}
	
    /**
     * Sets a value of property PrivacyLevel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPrivacyLevel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRIVACYLEVEL, value);
	}
    /**
     * Sets a value of property PrivacyLevel from an instance of java.lang.Double 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPrivacyLevel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Double value) {
		Base.set(model, instanceResource, PRIVACYLEVEL, value);
	}
	
    /**
     * Sets a value of property PrivacyLevel from an instance of java.lang.Double 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPrivacyLevel(java.lang.Double value) {
		Base.set(this.model, this.getResource(), PRIVACYLEVEL, value);
	}
  


    /**
     * Removes a value of property PrivacyLevel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePrivacyLevel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRIVACYLEVEL, value);
	}
	
    /**
     * Removes a value of property PrivacyLevel as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePrivacyLevel( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRIVACYLEVEL, value);
	}
    /**
     * Removes a value of property PrivacyLevel given as an instance of java.lang.Double 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePrivacyLevel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Double value) {
		Base.remove(model, instanceResource, PRIVACYLEVEL, value);
	}
	
    /**
     * Removes a value of property PrivacyLevel given as an instance of java.lang.Double 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePrivacyLevel(java.lang.Double value) {
		Base.remove(this.model, this.getResource(), PRIVACYLEVEL, value);
	}
  
    /**
     * Removes all values of property PrivacyLevel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPrivacyLevel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRIVACYLEVEL);
	}
	
    /**
     * Removes all values of property PrivacyLevel	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPrivacyLevel() {
		Base.removeAll(this.model, this.getResource(), PRIVACYLEVEL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32f24020 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasProgress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PROGRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32f24020 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasProgress() {
		return Base.has(this.model, this.getResource(), PROGRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32f24020 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasProgress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PROGRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32f24020 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasProgress( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PROGRESS);
	}

    /**
     * Get single value of property Progress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getProgress_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, PROGRESS);
	}
	
    /**
     * Get single value of property Progress as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getProgress_asNode() {
		return Base.get_asNode(this.model, this.getResource(), PROGRESS);
	}
     /**
     * Get single value of property Progress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getProgress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, PROGRESS, java.lang.String.class);
	}
	
    /**
     * Get single value of property Progress  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getProgress() {
		return (java.lang.String) Base.get(this.model, this.getResource(), PROGRESS, java.lang.String.class);
	}
  
    /**
     * Adds a value to property Progress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addProgress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, PROGRESS, value, 1);
	}
	
    /**
     * Adds a value to property Progress as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addProgress( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PROGRESS, value, 1);
	}
    /**
     * Adds a value to property Progress from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addProgress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, PROGRESS, value, 1);
	}
	
    /**
     * Adds a value to property Progress from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addProgress(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PROGRESS, value, 1);
	}
 
 

    /**
     * Sets a value of property Progress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setProgress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PROGRESS, value);
	}
	
    /**
     * Sets a value of property Progress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setProgress( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PROGRESS, value);
	}
    /**
     * Sets a value of property Progress from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setProgress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PROGRESS, value);
	}
	
    /**
     * Sets a value of property Progress from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setProgress(java.lang.String value) {
		Base.set(this.model, this.getResource(), PROGRESS, value);
	}
  


    /**
     * Removes a value of property Progress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeProgress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PROGRESS, value);
	}
	
    /**
     * Removes a value of property Progress as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeProgress( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PROGRESS, value);
	}
    /**
     * Removes a value of property Progress given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeProgress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PROGRESS, value);
	}
	
    /**
     * Removes a value of property Progress given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeProgress(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PROGRESS, value);
	}
  
    /**
     * Removes all values of property Progress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllProgress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PROGRESS);
	}
	
    /**
     * Removes all values of property Progress	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllProgress() {
		Base.removeAll(this.model, this.getResource(), PROGRESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c1ba52c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RATING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c1ba52c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRating() {
		return Base.has(this.model, this.getResource(), RATING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c1ba52c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RATING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c1ba52c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRating( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RATING);
	}

     /**
     * Get all values of property Rating as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRating_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RATING);
	}
	
    /**
     * Get all values of property Rating as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRating_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RATING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Rating as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRating_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RATING);
	}

    /**
     * Get all values of property Rating as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRating_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RATING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Rating     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RATING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Rating as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllRating_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RATING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Rating     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllRating() {
		return Base.getAll(this.model, this.getResource(), RATING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Rating as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllRating_as() {
		return Base.getAll_as(this.model, this.getResource(), RATING, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Rating as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RATING, value);
	}
	
    /**
     * Adds a value to property Rating as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRating( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RATING, value);
	}
    /**
     * Adds a value to property Rating from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, RATING, value);
	}
	
    /**
     * Adds a value to property Rating from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRating(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), RATING, value);
	}
  

    /**
     * Sets a value of property Rating from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRating( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RATING, value);
	}
	
    /**
     * Sets a value of property Rating from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRating( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RATING, value);
	}
    /**
     * Sets a value of property Rating from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, RATING, value);
	}
	
    /**
     * Sets a value of property Rating from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRating(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), RATING, value);
	}
  


    /**
     * Removes a value of property Rating as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRating( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RATING, value);
	}
	
    /**
     * Removes a value of property Rating as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRating( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RATING, value);
	}
    /**
     * Removes a value of property Rating given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, RATING, value);
	}
	
    /**
     * Removes a value of property Rating given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRating(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), RATING, value);
	}
  
    /**
     * Removes all values of property Rating     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRating( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RATING);
	}
	
    /**
     * Removes all values of property Rating	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRating() {
		Base.removeAll(this.model, this.getResource(), RATING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c6f9ac7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRearChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REARCHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c6f9ac7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRearChannels() {
		return Base.has(this.model, this.getResource(), REARCHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c6f9ac7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRearChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REARCHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c6f9ac7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRearChannels( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REARCHANNELS);
	}

    /**
     * Get single value of property RearChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getRearChannels_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, REARCHANNELS);
	}
	
    /**
     * Get single value of property RearChannels as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getRearChannels_asNode() {
		return Base.get_asNode(this.model, this.getResource(), REARCHANNELS);
	}
     /**
     * Get single value of property RearChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getRearChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, REARCHANNELS, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property RearChannels  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getRearChannels() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), REARCHANNELS, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property RearChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addRearChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, REARCHANNELS, value, 1);
	}
	
    /**
     * Adds a value to property RearChannels as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addRearChannels( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), REARCHANNELS, value, 1);
	}
    /**
     * Adds a value to property RearChannels from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addRearChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, REARCHANNELS, value, 1);
	}
	
    /**
     * Adds a value to property RearChannels from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addRearChannels(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), REARCHANNELS, value, 1);
	}
 
 

    /**
     * Sets a value of property RearChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRearChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REARCHANNELS, value);
	}
	
    /**
     * Sets a value of property RearChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRearChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REARCHANNELS, value);
	}
    /**
     * Sets a value of property RearChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRearChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, REARCHANNELS, value);
	}
	
    /**
     * Sets a value of property RearChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRearChannels(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), REARCHANNELS, value);
	}
  


    /**
     * Removes a value of property RearChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRearChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REARCHANNELS, value);
	}
	
    /**
     * Removes a value of property RearChannels as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRearChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REARCHANNELS, value);
	}
    /**
     * Removes a value of property RearChannels given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRearChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, REARCHANNELS, value);
	}
	
    /**
     * Removes a value of property RearChannels given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRearChannels(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), REARCHANNELS, value);
	}
  
    /**
     * Removes all values of property RearChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRearChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REARCHANNELS);
	}
	
    /**
     * Removes all values of property RearChannels	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRearChannels() {
		Base.removeAll(this.model, this.getResource(), REARCHANNELS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e5d76c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e5d76c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRelation() {
		return Base.has(this.model, this.getResource(), RELATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e5d76c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e5d76c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRelation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATION);
	}

     /**
     * Get all values of property Relation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATION);
	}
	
    /**
     * Get all values of property Relation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Relation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATION);
	}

    /**
     * Get all values of property Relation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Relation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Relation as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllRelation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Relation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllRelation() {
		return Base.getAll(this.model, this.getResource(), RELATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Relation as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllRelation_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Relation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RELATION, value);
	}
	
    /**
     * Adds a value to property Relation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRelation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RELATION, value);
	}
    /**
     * Adds a value to property Relation from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, RELATION, value);
	}
	
    /**
     * Adds a value to property Relation from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRelation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), RELATION, value);
	}
  

    /**
     * Sets a value of property Relation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRelation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELATION, value);
	}
	
    /**
     * Sets a value of property Relation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRelation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELATION, value);
	}
    /**
     * Sets a value of property Relation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, RELATION, value);
	}
	
    /**
     * Sets a value of property Relation from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRelation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), RELATION, value);
	}
  


    /**
     * Removes a value of property Relation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRelation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELATION, value);
	}
	
    /**
     * Removes a value of property Relation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRelation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELATION, value);
	}
    /**
     * Removes a value of property Relation given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, RELATION, value);
	}
	
    /**
     * Removes a value of property Relation given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRelation(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), RELATION, value);
	}
  
    /**
     * Removes all values of property Relation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRelation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATION);
	}
	
    /**
     * Removes all values of property Relation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRelation() {
		Base.removeAll(this.model, this.getResource(), RELATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a1f84da has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasReplyof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REPLYOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a1f84da has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasReplyof() {
		return Base.has(this.model, this.getResource(), REPLYOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a1f84da has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasReplyof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REPLYOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a1f84da has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasReplyof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REPLYOF);
	}

     /**
     * Get all values of property Replyof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReplyof_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REPLYOF);
	}
	
    /**
     * Get all values of property Replyof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReplyof_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPLYOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Replyof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReplyof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REPLYOF);
	}

    /**
     * Get all values of property Replyof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReplyof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REPLYOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Replyof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllReplyof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REPLYOF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Replyof as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllReplyof_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPLYOF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Replyof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllReplyof() {
		return Base.getAll(this.model, this.getResource(), REPLYOF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Replyof as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllReplyof_as() {
		return Base.getAll_as(this.model, this.getResource(), REPLYOF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Replyof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addReplyof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Adds a value to property Replyof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addReplyof( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REPLYOF, value);
	}
    /**
     * Adds a value to property Replyof from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addReplyof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Adds a value to property Replyof from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addReplyof(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), REPLYOF, value);
	}
  

    /**
     * Sets a value of property Replyof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setReplyof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Sets a value of property Replyof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setReplyof( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REPLYOF, value);
	}
    /**
     * Sets a value of property Replyof from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setReplyof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Sets a value of property Replyof from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setReplyof(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), REPLYOF, value);
	}
  


    /**
     * Removes a value of property Replyof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeReplyof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Removes a value of property Replyof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeReplyof( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REPLYOF, value);
	}
    /**
     * Removes a value of property Replyof given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeReplyof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Removes a value of property Replyof given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeReplyof(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), REPLYOF, value);
	}
  
    /**
     * Removes all values of property Replyof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllReplyof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REPLYOF);
	}
	
    /**
     * Removes all values of property Replyof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllReplyof() {
		Base.removeAll(this.model, this.getResource(), REPLYOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fd02b85 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RIGHTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fd02b85 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRights() {
		return Base.has(this.model, this.getResource(), RIGHTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fd02b85 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RIGHTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fd02b85 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRights( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RIGHTS);
	}

     /**
     * Get all values of property Rights as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRights_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RIGHTS);
	}
	
    /**
     * Get all values of property Rights as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRights_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RIGHTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Rights as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRights_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RIGHTS);
	}

    /**
     * Get all values of property Rights as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRights_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RIGHTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Rights     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RIGHTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Rights as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllRights_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RIGHTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Rights     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllRights() {
		return Base.getAll(this.model, this.getResource(), RIGHTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Rights as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllRights_as() {
		return Base.getAll_as(this.model, this.getResource(), RIGHTS, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Rights as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Adds a value to property Rights as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRights( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RIGHTS, value);
	}
    /**
     * Adds a value to property Rights from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Adds a value to property Rights from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRights(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), RIGHTS, value);
	}
  

    /**
     * Sets a value of property Rights from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Sets a value of property Rights from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRights( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RIGHTS, value);
	}
    /**
     * Sets a value of property Rights from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Sets a value of property Rights from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRights(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), RIGHTS, value);
	}
  


    /**
     * Removes a value of property Rights as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Removes a value of property Rights as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRights( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RIGHTS, value);
	}
    /**
     * Removes a value of property Rights given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRights(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, RIGHTS, value);
	}
	
    /**
     * Removes a value of property Rights given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRights(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), RIGHTS, value);
	}
  
    /**
     * Removes all values of property Rights     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRights( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RIGHTS);
	}
	
    /**
     * Removes all values of property Rights	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRights() {
		Base.removeAll(this.model, this.getResource(), RIGHTS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56a9d8e9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSchedule(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SCHEDULE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56a9d8e9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSchedule() {
		return Base.has(this.model, this.getResource(), SCHEDULE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56a9d8e9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSchedule(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SCHEDULE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56a9d8e9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSchedule( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SCHEDULE);
	}

     /**
     * Get all values of property Schedule as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSchedule_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SCHEDULE);
	}
	
    /**
     * Get all values of property Schedule as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSchedule_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCHEDULE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Schedule as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSchedule_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SCHEDULE);
	}

    /**
     * Get all values of property Schedule as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSchedule_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SCHEDULE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Schedule     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dcon.Schedule> getAllSchedule(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SCHEDULE, eu.dime.ps.semantic.model.dcon.Schedule.class);
	}
	
    /**
     * Get all values of property Schedule as a ReactorResult of Schedule 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dcon.Schedule> getAllSchedule_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCHEDULE, eu.dime.ps.semantic.model.dcon.Schedule.class);
	}

    /**
     * Get all values of property Schedule     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dcon.Schedule> getAllSchedule() {
		return Base.getAll(this.model, this.getResource(), SCHEDULE, eu.dime.ps.semantic.model.dcon.Schedule.class);
	}

    /**
     * Get all values of property Schedule as a ReactorResult of Schedule 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dcon.Schedule> getAllSchedule_as() {
		return Base.getAll_as(this.model, this.getResource(), SCHEDULE, eu.dime.ps.semantic.model.dcon.Schedule.class);
	}
 
    /**
     * Adds a value to property Schedule as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSchedule(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SCHEDULE, value);
	}
	
    /**
     * Adds a value to property Schedule as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSchedule( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SCHEDULE, value);
	}
    /**
     * Adds a value to property Schedule from an instance of Schedule 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSchedule(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Schedule value) {
		Base.add(model, instanceResource, SCHEDULE, value);
	}
	
    /**
     * Adds a value to property Schedule from an instance of Schedule 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSchedule(eu.dime.ps.semantic.model.dcon.Schedule value) {
		Base.add(this.model, this.getResource(), SCHEDULE, value);
	}
  

    /**
     * Sets a value of property Schedule from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSchedule( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SCHEDULE, value);
	}
	
    /**
     * Sets a value of property Schedule from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSchedule( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SCHEDULE, value);
	}
    /**
     * Sets a value of property Schedule from an instance of Schedule 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSchedule(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Schedule value) {
		Base.set(model, instanceResource, SCHEDULE, value);
	}
	
    /**
     * Sets a value of property Schedule from an instance of Schedule 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSchedule(eu.dime.ps.semantic.model.dcon.Schedule value) {
		Base.set(this.model, this.getResource(), SCHEDULE, value);
	}
  


    /**
     * Removes a value of property Schedule as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSchedule( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SCHEDULE, value);
	}
	
    /**
     * Removes a value of property Schedule as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSchedule( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SCHEDULE, value);
	}
    /**
     * Removes a value of property Schedule given as an instance of Schedule 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSchedule(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Schedule value) {
		Base.remove(model, instanceResource, SCHEDULE, value);
	}
	
    /**
     * Removes a value of property Schedule given as an instance of Schedule 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSchedule(eu.dime.ps.semantic.model.dcon.Schedule value) {
		Base.remove(this.model, this.getResource(), SCHEDULE, value);
	}
  
    /**
     * Removes all values of property Schedule     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSchedule( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SCHEDULE);
	}
	
    /**
     * Removes all values of property Schedule	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSchedule() {
		Base.removeAll(this.model, this.getResource(), SCHEDULE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7aa21ce7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasScore(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SCORE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7aa21ce7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasScore() {
		return Base.has(this.model, this.getResource(), SCORE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7aa21ce7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasScore(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SCORE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7aa21ce7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasScore( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SCORE);
	}

    /**
     * Get single value of property Score as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getScore_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, SCORE);
	}
	
    /**
     * Get single value of property Score as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getScore_asNode() {
		return Base.get_asNode(this.model, this.getResource(), SCORE);
	}
     /**
     * Get single value of property Score     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Float getScore(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Float) Base.get(model, instanceResource, SCORE, java.lang.Float.class);
	}
	
    /**
     * Get single value of property Score  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Float getScore() {
		return (java.lang.Float) Base.get(this.model, this.getResource(), SCORE, java.lang.Float.class);
	}
  
    /**
     * Adds a value to property Score as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addScore(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, SCORE, value, 1);
	}
	
    /**
     * Adds a value to property Score as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addScore( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SCORE, value, 1);
	}
    /**
     * Adds a value to property Score from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addScore(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value)
    throws CardinalityException {
		Base.add(model, instanceResource, SCORE, value, 1);
	}
	
    /**
     * Adds a value to property Score from an instance of java.lang.Float 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addScore(java.lang.Float value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SCORE, value, 1);
	}
 
 

    /**
     * Sets a value of property Score from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setScore( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SCORE, value);
	}
	
    /**
     * Sets a value of property Score from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setScore( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SCORE, value);
	}
    /**
     * Sets a value of property Score from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setScore(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, SCORE, value);
	}
	
    /**
     * Sets a value of property Score from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setScore(java.lang.Float value) {
		Base.set(this.model, this.getResource(), SCORE, value);
	}
  


    /**
     * Removes a value of property Score as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeScore( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SCORE, value);
	}
	
    /**
     * Removes a value of property Score as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeScore( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SCORE, value);
	}
    /**
     * Removes a value of property Score given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeScore(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, SCORE, value);
	}
	
    /**
     * Removes a value of property Score given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeScore(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), SCORE, value);
	}
  
    /**
     * Removes all values of property Score     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllScore( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SCORE);
	}
	
    /**
     * Removes all values of property Score	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllScore() {
		Base.removeAll(this.model, this.getResource(), SCORE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67ec9a89 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasScoreParameter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SCOREPARAMETER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67ec9a89 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasScoreParameter() {
		return Base.has(this.model, this.getResource(), SCOREPARAMETER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67ec9a89 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasScoreParameter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SCOREPARAMETER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@67ec9a89 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasScoreParameter( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SCOREPARAMETER);
	}

     /**
     * Get all values of property ScoreParameter as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllScoreParameter_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SCOREPARAMETER);
	}
	
    /**
     * Get all values of property ScoreParameter as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllScoreParameter_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCOREPARAMETER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ScoreParameter as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllScoreParameter_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SCOREPARAMETER);
	}

    /**
     * Get all values of property ScoreParameter as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllScoreParameter_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SCOREPARAMETER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ScoreParameter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllScoreParameter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SCOREPARAMETER, java.lang.Float.class);
	}
	
    /**
     * Get all values of property ScoreParameter as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllScoreParameter_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCOREPARAMETER, java.lang.Float.class);
	}

    /**
     * Get all values of property ScoreParameter     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllScoreParameter() {
		return Base.getAll(this.model, this.getResource(), SCOREPARAMETER, java.lang.Float.class);
	}

    /**
     * Get all values of property ScoreParameter as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllScoreParameter_as() {
		return Base.getAll_as(this.model, this.getResource(), SCOREPARAMETER, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property ScoreParameter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addScoreParameter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SCOREPARAMETER, value);
	}
	
    /**
     * Adds a value to property ScoreParameter as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addScoreParameter( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SCOREPARAMETER, value);
	}
    /**
     * Adds a value to property ScoreParameter from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addScoreParameter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, SCOREPARAMETER, value);
	}
	
    /**
     * Adds a value to property ScoreParameter from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addScoreParameter(java.lang.Float value) {
		Base.add(this.model, this.getResource(), SCOREPARAMETER, value);
	}
  

    /**
     * Sets a value of property ScoreParameter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setScoreParameter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SCOREPARAMETER, value);
	}
	
    /**
     * Sets a value of property ScoreParameter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setScoreParameter( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SCOREPARAMETER, value);
	}
    /**
     * Sets a value of property ScoreParameter from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setScoreParameter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, SCOREPARAMETER, value);
	}
	
    /**
     * Sets a value of property ScoreParameter from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setScoreParameter(java.lang.Float value) {
		Base.set(this.model, this.getResource(), SCOREPARAMETER, value);
	}
  


    /**
     * Removes a value of property ScoreParameter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeScoreParameter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SCOREPARAMETER, value);
	}
	
    /**
     * Removes a value of property ScoreParameter as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeScoreParameter( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SCOREPARAMETER, value);
	}
    /**
     * Removes a value of property ScoreParameter given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeScoreParameter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, SCOREPARAMETER, value);
	}
	
    /**
     * Removes a value of property ScoreParameter given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeScoreParameter(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), SCOREPARAMETER, value);
	}
  
    /**
     * Removes all values of property ScoreParameter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllScoreParameter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SCOREPARAMETER);
	}
	
    /**
     * Removes all values of property ScoreParameter	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllScoreParameter() {
		Base.removeAll(this.model, this.getResource(), SCOREPARAMETER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7746fcd6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSharedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SHAREDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7746fcd6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSharedBy() {
		return Base.has(this.model, this.getResource(), SHAREDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7746fcd6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSharedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SHAREDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7746fcd6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSharedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SHAREDBY);
	}

     /**
     * Get all values of property SharedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SHAREDBY);
	}
	
    /**
     * Get all values of property SharedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHAREDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SharedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SHAREDBY);
	}

    /**
     * Get all values of property SharedBy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SHAREDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SharedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SHAREDBY, eu.dime.ps.semantic.model.pimo.Agent.class);
	}
	
    /**
     * Get all values of property SharedBy as a ReactorResult of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHAREDBY, eu.dime.ps.semantic.model.pimo.Agent.class);
	}

    /**
     * Get all values of property SharedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedBy() {
		return Base.getAll(this.model, this.getResource(), SHAREDBY, eu.dime.ps.semantic.model.pimo.Agent.class);
	}

    /**
     * Get all values of property SharedBy as a ReactorResult of Agent 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), SHAREDBY, eu.dime.ps.semantic.model.pimo.Agent.class);
	}
 
    /**
     * Adds a value to property SharedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSharedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SHAREDBY, value);
	}
	
    /**
     * Adds a value to property SharedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSharedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SHAREDBY, value);
	}
    /**
     * Adds a value to property SharedBy from an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSharedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.add(model, instanceResource, SHAREDBY, value);
	}
	
    /**
     * Adds a value to property SharedBy from an instance of Agent 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSharedBy(eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.add(this.model, this.getResource(), SHAREDBY, value);
	}
  

    /**
     * Sets a value of property SharedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSharedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SHAREDBY, value);
	}
	
    /**
     * Sets a value of property SharedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSharedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SHAREDBY, value);
	}
    /**
     * Sets a value of property SharedBy from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSharedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.set(model, instanceResource, SHAREDBY, value);
	}
	
    /**
     * Sets a value of property SharedBy from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSharedBy(eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.set(this.model, this.getResource(), SHAREDBY, value);
	}
  


    /**
     * Removes a value of property SharedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSharedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SHAREDBY, value);
	}
	
    /**
     * Removes a value of property SharedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSharedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SHAREDBY, value);
	}
    /**
     * Removes a value of property SharedBy given as an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSharedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.remove(model, instanceResource, SHAREDBY, value);
	}
	
    /**
     * Removes a value of property SharedBy given as an instance of Agent 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSharedBy(eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.remove(this.model, this.getResource(), SHAREDBY, value);
	}
  
    /**
     * Removes all values of property SharedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSharedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SHAREDBY);
	}
	
    /**
     * Removes all values of property SharedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSharedBy() {
		Base.removeAll(this.model, this.getResource(), SHAREDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7915c214 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSharedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SHAREDWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7915c214 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSharedWith() {
		return Base.has(this.model, this.getResource(), SHAREDWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7915c214 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSharedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SHAREDWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7915c214 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSharedWith( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SHAREDWITH);
	}

     /**
     * Get all values of property SharedWith as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharedWith_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SHAREDWITH);
	}
	
    /**
     * Get all values of property SharedWith as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharedWith_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHAREDWITH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SharedWith as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharedWith_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SHAREDWITH);
	}

    /**
     * Get all values of property SharedWith as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharedWith_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SHAREDWITH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SharedWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SHAREDWITH, eu.dime.ps.semantic.model.pimo.Agent.class);
	}
	
    /**
     * Get all values of property SharedWith as a ReactorResult of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedWith_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHAREDWITH, eu.dime.ps.semantic.model.pimo.Agent.class);
	}

    /**
     * Get all values of property SharedWith     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedWith() {
		return Base.getAll(this.model, this.getResource(), SHAREDWITH, eu.dime.ps.semantic.model.pimo.Agent.class);
	}

    /**
     * Get all values of property SharedWith as a ReactorResult of Agent 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedWith_as() {
		return Base.getAll_as(this.model, this.getResource(), SHAREDWITH, eu.dime.ps.semantic.model.pimo.Agent.class);
	}
 
    /**
     * Adds a value to property SharedWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSharedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SHAREDWITH, value);
	}
	
    /**
     * Adds a value to property SharedWith as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSharedWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SHAREDWITH, value);
	}
    /**
     * Adds a value to property SharedWith from an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSharedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.add(model, instanceResource, SHAREDWITH, value);
	}
	
    /**
     * Adds a value to property SharedWith from an instance of Agent 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSharedWith(eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.add(this.model, this.getResource(), SHAREDWITH, value);
	}
  

    /**
     * Sets a value of property SharedWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSharedWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SHAREDWITH, value);
	}
	
    /**
     * Sets a value of property SharedWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSharedWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SHAREDWITH, value);
	}
    /**
     * Sets a value of property SharedWith from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSharedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.set(model, instanceResource, SHAREDWITH, value);
	}
	
    /**
     * Sets a value of property SharedWith from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSharedWith(eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.set(this.model, this.getResource(), SHAREDWITH, value);
	}
  


    /**
     * Removes a value of property SharedWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSharedWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SHAREDWITH, value);
	}
	
    /**
     * Removes a value of property SharedWith as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSharedWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SHAREDWITH, value);
	}
    /**
     * Removes a value of property SharedWith given as an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSharedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.remove(model, instanceResource, SHAREDWITH, value);
	}
	
    /**
     * Removes a value of property SharedWith given as an instance of Agent 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSharedWith(eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.remove(this.model, this.getResource(), SHAREDWITH, value);
	}
  
    /**
     * Removes all values of property SharedWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSharedWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SHAREDWITH);
	}
	
    /**
     * Removes all values of property SharedWith	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSharedWith() {
		Base.removeAll(this.model, this.getResource(), SHAREDWITH);
	}
	
    /**
    * Check if org.ontoware.rdfreactor.generator.java.JProperty@7746fcd6 has at least one value set 
    * @param model an RDF2Go model
    * @param resource an RDF2Go resource
    * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
    */
	public static boolean hasSharedThrough(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SHAREDTHROUGH);
	}

   /**
    * Check if org.ontoware.rdfreactor.generator.java.JProperty@7746fcd6 has at least one value set 
    * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
    */
	public boolean hasSharedThrough() {
		return Base.has(this.model, this.getResource(), SHAREDTHROUGH);
	}

   /**
    * Check if org.ontoware.rdfreactor.generator.java.JProperty@7746fcd6 has the given value (maybe among other values).  
    * @param model an RDF2Go model
    * @param resource an RDF2Go resource
	 * @param value the value to be checked
    * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
    */
	public static boolean hasSharedThrough(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SHAREDTHROUGH);
	}

   /**
    * Check if org.ontoware.rdfreactor.generator.java.JProperty@7746fcd6 has the given value (maybe among other values).  
	 * @param value the value to be checked
    * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
    */
	public boolean hasSharedThrough( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SHAREDTHROUGH);
	}

	public eu.dime.ps.semantic.model.dao.Account getSharedThrough() {
		return (eu.dime.ps.semantic.model.dao.Account) Base.get(this.model, this.getResource(), SHAREDTHROUGH, eu.dime.ps.semantic.model.dao.Account.class);
	}

   /**
    * Sets a value of property SharedThrough from an RDF2Go node.
    * First, all existing values are removed, then this value is added.
    * Cardinality constraints are not checked, but this method exists only for properties with
    * no minCardinality or minCardinality == 1.
    * @param model an RDF2Go model
    * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
    */
	public static void setSharedThrough( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SHAREDTHROUGH, value);
	}
	
   /**
    * Sets a value of property SharedThrough from an RDF2Go node.
    * First, all existing values are removed, then this value is added.
    * Cardinality constraints are not checked, but this method exists only for properties with
    * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
    */
	public void setSharedThrough( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SHAREDTHROUGH, value);
	}
   /**
    * Sets a value of property SharedThrough from an instance of Agent 
    * First, all existing values are removed, then this value is added.
    * Cardinality constraints are not checked, but this method exists only for properties with
    * no minCardinality or minCardinality == 1.
    * @param model an RDF2Go model
    * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
    */
	public static void setSharedThrough(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dao.Account value) {
		Base.set(model, instanceResource, SHAREDTHROUGH, value);
	}
	
   /**
    * Sets a value of property SharedThrough from an instance of Agent 
    * First, all existing values are removed, then this value is added.
    * Cardinality constraints are not checked, but this method exists only for properties with
    * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
    */
	public void setSharedThrough(eu.dime.ps.semantic.model.dao.Account value) {
		Base.set(this.model, this.getResource(), SHAREDTHROUGH, value);
	}
 


   /**
    * Removes a value of property SharedThrough as an RDF2Go node 
    * @param model an RDF2Go model
    * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
    */
	public static void removeSharedThrough( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SHAREDTHROUGH, value);
	}
	
   /**
    * Removes a value of property SharedThrough as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
    */
	public void removeSharedThrough( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SHAREDTHROUGH, value);
	}
   /**
    * Removes a value of property SharedThrough given as an instance of Agent 
    * @param model an RDF2Go model
    * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
    */
	public static void removeSharedThrough(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dao.Account value) {
		Base.remove(model, instanceResource, SHAREDTHROUGH, value);
	}
	
   /**
    * Removes a value of property SharedThrough given as an instance of Agent 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
    */
	public void removeSharedThrough(eu.dime.ps.semantic.model.dao.Account value) {
		Base.remove(this.model, this.getResource(), SHAREDTHROUGH, value);
	}
 
   /**
    * Removes all values of property SharedThrough     * @param model an RDF2Go model
    * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
    */
	public static void removeAllSharedThrough( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SHAREDTHROUGH);
	}
	
   /**
    * Removes all values of property SharedThrough	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
    */
	public void removeAllSharedThrough() {
		Base.removeAll(this.model, this.getResource(), SHAREDTHROUGH);
	}
	
    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@cbb5ec0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSharedWithContact(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SHAREDWITHCONTACT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@cbb5ec0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSharedWithContact() {
		return Base.has(this.model, this.getResource(), SHAREDWITHCONTACT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@cbb5ec0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSharedWithContact(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SHAREDWITHCONTACT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@cbb5ec0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSharedWithContact( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SHAREDWITHCONTACT);
	}

     /**
     * Get all values of property SharedWithContact as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharedWithContact_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SHAREDWITHCONTACT);
	}
	
    /**
     * Get all values of property SharedWithContact as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharedWithContact_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHAREDWITHCONTACT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SharedWithContact as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharedWithContact_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SHAREDWITHCONTACT);
	}

    /**
     * Get all values of property SharedWithContact as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharedWithContact_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SHAREDWITHCONTACT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SharedWithContact     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllSharedWithContact(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SHAREDWITHCONTACT, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property SharedWithContact as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllSharedWithContact_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHAREDWITHCONTACT, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property SharedWithContact     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllSharedWithContact() {
		return Base.getAll(this.model, this.getResource(), SHAREDWITHCONTACT, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property SharedWithContact as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllSharedWithContact_as() {
		return Base.getAll_as(this.model, this.getResource(), SHAREDWITHCONTACT, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property SharedWithContact as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSharedWithContact(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SHAREDWITHCONTACT, value);
	}
	
    /**
     * Adds a value to property SharedWithContact as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSharedWithContact( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SHAREDWITHCONTACT, value);
	}
    /**
     * Adds a value to property SharedWithContact from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSharedWithContact(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, SHAREDWITHCONTACT, value);
	}
	
    /**
     * Adds a value to property SharedWithContact from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSharedWithContact(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), SHAREDWITHCONTACT, value);
	}
  

    /**
     * Sets a value of property SharedWithContact from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSharedWithContact( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SHAREDWITHCONTACT, value);
	}
	
    /**
     * Sets a value of property SharedWithContact from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSharedWithContact( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SHAREDWITHCONTACT, value);
	}
    /**
     * Sets a value of property SharedWithContact from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSharedWithContact(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, SHAREDWITHCONTACT, value);
	}
	
    /**
     * Sets a value of property SharedWithContact from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSharedWithContact(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), SHAREDWITHCONTACT, value);
	}
  


    /**
     * Removes a value of property SharedWithContact as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSharedWithContact( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SHAREDWITHCONTACT, value);
	}
	
    /**
     * Removes a value of property SharedWithContact as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSharedWithContact( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SHAREDWITHCONTACT, value);
	}
    /**
     * Removes a value of property SharedWithContact given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSharedWithContact(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, SHAREDWITHCONTACT, value);
	}
	
    /**
     * Removes a value of property SharedWithContact given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSharedWithContact(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), SHAREDWITHCONTACT, value);
	}
  
    /**
     * Removes all values of property SharedWithContact     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSharedWithContact( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SHAREDWITHCONTACT);
	}
	
    /**
     * Removes all values of property SharedWithContact	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSharedWithContact() {
		Base.removeAll(this.model, this.getResource(), SHAREDWITHCONTACT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7955f12b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSharedWithGroup(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SHAREDWITHGROUP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7955f12b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSharedWithGroup() {
		return Base.has(this.model, this.getResource(), SHAREDWITHGROUP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7955f12b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSharedWithGroup(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SHAREDWITHGROUP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7955f12b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSharedWithGroup( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SHAREDWITHGROUP);
	}

     /**
     * Get all values of property SharedWithGroup as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharedWithGroup_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SHAREDWITHGROUP);
	}
	
    /**
     * Get all values of property SharedWithGroup as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharedWithGroup_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHAREDWITHGROUP, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SharedWithGroup as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharedWithGroup_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SHAREDWITHGROUP);
	}

    /**
     * Get all values of property SharedWithGroup as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharedWithGroup_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SHAREDWITHGROUP, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SharedWithGroup     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.ContactGroup> getAllSharedWithGroup(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SHAREDWITHGROUP, eu.dime.ps.semantic.model.nco.ContactGroup.class);
	}
	
    /**
     * Get all values of property SharedWithGroup as a ReactorResult of ContactGroup 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.ContactGroup> getAllSharedWithGroup_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHAREDWITHGROUP, eu.dime.ps.semantic.model.nco.ContactGroup.class);
	}

    /**
     * Get all values of property SharedWithGroup     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.ContactGroup> getAllSharedWithGroup() {
		return Base.getAll(this.model, this.getResource(), SHAREDWITHGROUP, eu.dime.ps.semantic.model.nco.ContactGroup.class);
	}

    /**
     * Get all values of property SharedWithGroup as a ReactorResult of ContactGroup 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.ContactGroup> getAllSharedWithGroup_as() {
		return Base.getAll_as(this.model, this.getResource(), SHAREDWITHGROUP, eu.dime.ps.semantic.model.nco.ContactGroup.class);
	}
 
    /**
     * Adds a value to property SharedWithGroup as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSharedWithGroup(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SHAREDWITHGROUP, value);
	}
	
    /**
     * Adds a value to property SharedWithGroup as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSharedWithGroup( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SHAREDWITHGROUP, value);
	}
    /**
     * Adds a value to property SharedWithGroup from an instance of ContactGroup 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSharedWithGroup(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactGroup value) {
		Base.add(model, instanceResource, SHAREDWITHGROUP, value);
	}
	
    /**
     * Adds a value to property SharedWithGroup from an instance of ContactGroup 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSharedWithGroup(eu.dime.ps.semantic.model.nco.ContactGroup value) {
		Base.add(this.model, this.getResource(), SHAREDWITHGROUP, value);
	}
  

    /**
     * Sets a value of property SharedWithGroup from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSharedWithGroup( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SHAREDWITHGROUP, value);
	}
	
    /**
     * Sets a value of property SharedWithGroup from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSharedWithGroup( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SHAREDWITHGROUP, value);
	}
    /**
     * Sets a value of property SharedWithGroup from an instance of ContactGroup 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSharedWithGroup(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactGroup value) {
		Base.set(model, instanceResource, SHAREDWITHGROUP, value);
	}
	
    /**
     * Sets a value of property SharedWithGroup from an instance of ContactGroup 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSharedWithGroup(eu.dime.ps.semantic.model.nco.ContactGroup value) {
		Base.set(this.model, this.getResource(), SHAREDWITHGROUP, value);
	}
  


    /**
     * Removes a value of property SharedWithGroup as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSharedWithGroup( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SHAREDWITHGROUP, value);
	}
	
    /**
     * Removes a value of property SharedWithGroup as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSharedWithGroup( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SHAREDWITHGROUP, value);
	}
    /**
     * Removes a value of property SharedWithGroup given as an instance of ContactGroup 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSharedWithGroup(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactGroup value) {
		Base.remove(model, instanceResource, SHAREDWITHGROUP, value);
	}
	
    /**
     * Removes a value of property SharedWithGroup given as an instance of ContactGroup 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSharedWithGroup(eu.dime.ps.semantic.model.nco.ContactGroup value) {
		Base.remove(this.model, this.getResource(), SHAREDWITHGROUP, value);
	}
  
    /**
     * Removes all values of property SharedWithGroup     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSharedWithGroup( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SHAREDWITHGROUP);
	}
	
    /**
     * Removes all values of property SharedWithGroup	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSharedWithGroup() {
		Base.removeAll(this.model, this.getResource(), SHAREDWITHGROUP);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74a2ccbd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSideChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SIDECHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74a2ccbd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSideChannels() {
		return Base.has(this.model, this.getResource(), SIDECHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74a2ccbd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSideChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SIDECHANNELS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74a2ccbd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSideChannels( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SIDECHANNELS);
	}

    /**
     * Get single value of property SideChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getSideChannels_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, SIDECHANNELS);
	}
	
    /**
     * Get single value of property SideChannels as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getSideChannels_asNode() {
		return Base.get_asNode(this.model, this.getResource(), SIDECHANNELS);
	}
     /**
     * Get single value of property SideChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getSideChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, SIDECHANNELS, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property SideChannels  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getSideChannels() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), SIDECHANNELS, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property SideChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addSideChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, SIDECHANNELS, value, 1);
	}
	
    /**
     * Adds a value to property SideChannels as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addSideChannels( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SIDECHANNELS, value, 1);
	}
    /**
     * Adds a value to property SideChannels from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addSideChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, SIDECHANNELS, value, 1);
	}
	
    /**
     * Adds a value to property SideChannels from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addSideChannels(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SIDECHANNELS, value, 1);
	}
 
 

    /**
     * Sets a value of property SideChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSideChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SIDECHANNELS, value);
	}
	
    /**
     * Sets a value of property SideChannels from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSideChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SIDECHANNELS, value);
	}
    /**
     * Sets a value of property SideChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSideChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, SIDECHANNELS, value);
	}
	
    /**
     * Sets a value of property SideChannels from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSideChannels(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), SIDECHANNELS, value);
	}
  


    /**
     * Removes a value of property SideChannels as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSideChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SIDECHANNELS, value);
	}
	
    /**
     * Removes a value of property SideChannels as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSideChannels( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SIDECHANNELS, value);
	}
    /**
     * Removes a value of property SideChannels given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSideChannels(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, SIDECHANNELS, value);
	}
	
    /**
     * Removes a value of property SideChannels given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSideChannels(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), SIDECHANNELS, value);
	}
  
    /**
     * Removes all values of property SideChannels     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSideChannels( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SIDECHANNELS);
	}
	
    /**
     * Removes all values of property SideChannels	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSideChannels() {
		Base.removeAll(this.model, this.getResource(), SIDECHANNELS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6948ed52 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6948ed52 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSource() {
		return Base.has(this.model, this.getResource(), SOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6948ed52 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6948ed52 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOURCE);
	}

     /**
     * Get all values of property Source as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOURCE);
	}
	
    /**
     * Get all values of property Source as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Source as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOURCE);
	}

    /**
     * Get all values of property Source as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Source     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dao.Account> getAllSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOURCE, eu.dime.ps.semantic.model.dao.Account.class);
	}
	
    /**
     * Get all values of property Source as a ReactorResult of Account 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dao.Account> getAllSource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOURCE, eu.dime.ps.semantic.model.dao.Account.class);
	}

    /**
     * Get all values of property Source     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dao.Account> getAllSource() {
		return Base.getAll(this.model, this.getResource(), SOURCE, eu.dime.ps.semantic.model.dao.Account.class);
	}

    /**
     * Get all values of property Source as a ReactorResult of Account 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dao.Account> getAllSource_as() {
		return Base.getAll_as(this.model, this.getResource(), SOURCE, eu.dime.ps.semantic.model.dao.Account.class);
	}
 
    /**
     * Adds a value to property Source as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOURCE, value);
	}
	
    /**
     * Adds a value to property Source as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOURCE, value);
	}
    /**
     * Adds a value to property Source from an instance of Account 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dao.Account value) {
		Base.add(model, instanceResource, SOURCE, value);
	}
	
    /**
     * Adds a value to property Source from an instance of Account 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSource(eu.dime.ps.semantic.model.dao.Account value) {
		Base.add(this.model, this.getResource(), SOURCE, value);
	}
  

    /**
     * Sets a value of property Source from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOURCE, value);
	}
	
    /**
     * Sets a value of property Source from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOURCE, value);
	}
    /**
     * Sets a value of property Source from an instance of Account 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dao.Account value) {
		Base.set(model, instanceResource, SOURCE, value);
	}
	
    /**
     * Sets a value of property Source from an instance of Account 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSource(eu.dime.ps.semantic.model.dao.Account value) {
		Base.set(this.model, this.getResource(), SOURCE, value);
	}
  


    /**
     * Removes a value of property Source as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOURCE, value);
	}
	
    /**
     * Removes a value of property Source as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOURCE, value);
	}
    /**
     * Removes a value of property Source given as an instance of Account 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dao.Account value) {
		Base.remove(model, instanceResource, SOURCE, value);
	}
	
    /**
     * Removes a value of property Source given as an instance of Account 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSource(eu.dime.ps.semantic.model.dao.Account value) {
		Base.remove(this.model, this.getResource(), SOURCE, value);
	}
  
    /**
     * Removes all values of property Source     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOURCE);
	}
	
    /**
     * Removes all values of property Source	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSource() {
		Base.removeAll(this.model, this.getResource(), SOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e7403c9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSpaTem(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SPATEM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e7403c9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSpaTem() {
		return Base.has(this.model, this.getResource(), SPATEM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e7403c9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSpaTem(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SPATEM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e7403c9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSpaTem( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SPATEM);
	}

     /**
     * Get all values of property SpaTem as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSpaTem_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SPATEM);
	}
	
    /**
     * Get all values of property SpaTem as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSpaTem_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPATEM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SpaTem as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSpaTem_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SPATEM);
	}

    /**
     * Get all values of property SpaTem as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSpaTem_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SPATEM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SpaTem     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dcon.SpaTem> getAllSpaTem(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SPATEM, eu.dime.ps.semantic.model.dcon.SpaTem.class);
	}
	
    /**
     * Get all values of property SpaTem as a ReactorResult of SpaTem 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dcon.SpaTem> getAllSpaTem_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPATEM, eu.dime.ps.semantic.model.dcon.SpaTem.class);
	}

    /**
     * Get all values of property SpaTem     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dcon.SpaTem> getAllSpaTem() {
		return Base.getAll(this.model, this.getResource(), SPATEM, eu.dime.ps.semantic.model.dcon.SpaTem.class);
	}

    /**
     * Get all values of property SpaTem as a ReactorResult of SpaTem 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dcon.SpaTem> getAllSpaTem_as() {
		return Base.getAll_as(this.model, this.getResource(), SPATEM, eu.dime.ps.semantic.model.dcon.SpaTem.class);
	}
 
    /**
     * Adds a value to property SpaTem as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSpaTem(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SPATEM, value);
	}
	
    /**
     * Adds a value to property SpaTem as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSpaTem( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SPATEM, value);
	}
    /**
     * Adds a value to property SpaTem from an instance of SpaTem 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSpaTem(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.SpaTem value) {
		Base.add(model, instanceResource, SPATEM, value);
	}
	
    /**
     * Adds a value to property SpaTem from an instance of SpaTem 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSpaTem(eu.dime.ps.semantic.model.dcon.SpaTem value) {
		Base.add(this.model, this.getResource(), SPATEM, value);
	}
  

    /**
     * Sets a value of property SpaTem from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSpaTem( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SPATEM, value);
	}
	
    /**
     * Sets a value of property SpaTem from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSpaTem( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SPATEM, value);
	}
    /**
     * Sets a value of property SpaTem from an instance of SpaTem 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSpaTem(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.SpaTem value) {
		Base.set(model, instanceResource, SPATEM, value);
	}
	
    /**
     * Sets a value of property SpaTem from an instance of SpaTem 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSpaTem(eu.dime.ps.semantic.model.dcon.SpaTem value) {
		Base.set(this.model, this.getResource(), SPATEM, value);
	}
  


    /**
     * Removes a value of property SpaTem as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSpaTem( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SPATEM, value);
	}
	
    /**
     * Removes a value of property SpaTem as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSpaTem( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SPATEM, value);
	}
    /**
     * Removes a value of property SpaTem given as an instance of SpaTem 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSpaTem(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.SpaTem value) {
		Base.remove(model, instanceResource, SPATEM, value);
	}
	
    /**
     * Removes a value of property SpaTem given as an instance of SpaTem 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSpaTem(eu.dime.ps.semantic.model.dcon.SpaTem value) {
		Base.remove(this.model, this.getResource(), SPATEM, value);
	}
  
    /**
     * Removes all values of property SpaTem     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSpaTem( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SPATEM);
	}
	
    /**
     * Removes all values of property SpaTem	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSpaTem() {
		Base.removeAll(this.model, this.getResource(), SPATEM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@30f4def0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, STARTTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@30f4def0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasStartTime() {
		return Base.has(this.model, this.getResource(), STARTTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@30f4def0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, STARTTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@30f4def0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasStartTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), STARTTIME);
	}

    /**
     * Get single value of property StartTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getStartTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, STARTTIME);
	}
	
    /**
     * Get single value of property StartTime as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getStartTime_asNode() {
		return Base.get_asNode(this.model, this.getResource(), STARTTIME);
	}
     /**
     * Get single value of property StartTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, STARTTIME, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property StartTime  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getStartTime() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), STARTTIME, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property StartTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, STARTTIME, value, 1);
	}
	
    /**
     * Adds a value to property StartTime as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addStartTime( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), STARTTIME, value, 1);
	}
    /**
     * Adds a value to property StartTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, STARTTIME, value, 1);
	}
	
    /**
     * Adds a value to property StartTime from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addStartTime(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), STARTTIME, value, 1);
	}
 
 

    /**
     * Sets a value of property StartTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setStartTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, STARTTIME, value);
	}
	
    /**
     * Sets a value of property StartTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setStartTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), STARTTIME, value);
	}
    /**
     * Sets a value of property StartTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, STARTTIME, value);
	}
	
    /**
     * Sets a value of property StartTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setStartTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), STARTTIME, value);
	}
  


    /**
     * Removes a value of property StartTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeStartTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, STARTTIME, value);
	}
	
    /**
     * Removes a value of property StartTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeStartTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), STARTTIME, value);
	}
    /**
     * Removes a value of property StartTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, STARTTIME, value);
	}
	
    /**
     * Removes a value of property StartTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeStartTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), STARTTIME, value);
	}
  
    /**
     * Removes all values of property StartTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllStartTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, STARTTIME);
	}
	
    /**
     * Removes all values of property StartTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllStartTime() {
		Base.removeAll(this.model, this.getResource(), STARTTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2d547681 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, STATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2d547681 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasState() {
		return Base.has(this.model, this.getResource(), STATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2d547681 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, STATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2d547681 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasState( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), STATE);
	}

     /**
     * Get all values of property State as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllState_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, STATE);
	}
	
    /**
     * Get all values of property State as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllState_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property State as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllState_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), STATE);
	}

    /**
     * Get all values of property State as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllState_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), STATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property State     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dcon.State> getAllState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, STATE, eu.dime.ps.semantic.model.dcon.State.class);
	}
	
    /**
     * Get all values of property State as a ReactorResult of State 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dcon.State> getAllState_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STATE, eu.dime.ps.semantic.model.dcon.State.class);
	}

    /**
     * Get all values of property State     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dcon.State> getAllState() {
		return Base.getAll(this.model, this.getResource(), STATE, eu.dime.ps.semantic.model.dcon.State.class);
	}

    /**
     * Get all values of property State as a ReactorResult of State 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dcon.State> getAllState_as() {
		return Base.getAll_as(this.model, this.getResource(), STATE, eu.dime.ps.semantic.model.dcon.State.class);
	}
 
    /**
     * Adds a value to property State as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, STATE, value);
	}
	
    /**
     * Adds a value to property State as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addState( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), STATE, value);
	}
    /**
     * Adds a value to property State from an instance of State 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.State value) {
		Base.add(model, instanceResource, STATE, value);
	}
	
    /**
     * Adds a value to property State from an instance of State 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addState(eu.dime.ps.semantic.model.dcon.State value) {
		Base.add(this.model, this.getResource(), STATE, value);
	}
  

    /**
     * Sets a value of property State from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setState( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, STATE, value);
	}
	
    /**
     * Sets a value of property State from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setState( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), STATE, value);
	}
    /**
     * Sets a value of property State from an instance of State 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.State value) {
		Base.set(model, instanceResource, STATE, value);
	}
	
    /**
     * Sets a value of property State from an instance of State 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setState(eu.dime.ps.semantic.model.dcon.State value) {
		Base.set(this.model, this.getResource(), STATE, value);
	}
  


    /**
     * Removes a value of property State as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeState( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, STATE, value);
	}
	
    /**
     * Removes a value of property State as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeState( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), STATE, value);
	}
    /**
     * Removes a value of property State given as an instance of State 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.State value) {
		Base.remove(model, instanceResource, STATE, value);
	}
	
    /**
     * Removes a value of property State given as an instance of State 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeState(eu.dime.ps.semantic.model.dcon.State value) {
		Base.remove(this.model, this.getResource(), STATE, value);
	}
  
    /**
     * Removes all values of property State     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllState( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, STATE);
	}
	
    /**
     * Removes all values of property State	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllState() {
		Base.removeAll(this.model, this.getResource(), STATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55858df1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasStateTypeRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, STATETYPEROLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55858df1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasStateTypeRole() {
		return Base.has(this.model, this.getResource(), STATETYPEROLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55858df1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasStateTypeRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, STATETYPEROLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55858df1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasStateTypeRole( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), STATETYPEROLE);
	}

    /**
     * Get single value of property StateTypeRole as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getStateTypeRole_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, STATETYPEROLE);
	}
	
    /**
     * Get single value of property StateTypeRole as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getStateTypeRole_asNode() {
		return Base.get_asNode(this.model, this.getResource(), STATETYPEROLE);
	}
     /**
     * Get single value of property StateTypeRole     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static org.ontoware.rdfreactor.schema.rdfs.Resource getStateTypeRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdfreactor.schema.rdfs.Resource) Base.get(model, instanceResource, STATETYPEROLE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get single value of property StateTypeRole  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public org.ontoware.rdfreactor.schema.rdfs.Resource getStateTypeRole() {
		return (org.ontoware.rdfreactor.schema.rdfs.Resource) Base.get(this.model, this.getResource(), STATETYPEROLE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
  
    /**
     * Adds a value to property StateTypeRole as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addStateTypeRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, STATETYPEROLE, value, 1);
	}
	
    /**
     * Adds a value to property StateTypeRole as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addStateTypeRole( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), STATETYPEROLE, value, 1);
	}
    /**
     * Adds a value to property StateTypeRole from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addStateTypeRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value)
    throws CardinalityException {
		Base.add(model, instanceResource, STATETYPEROLE, value, 1);
	}
	
    /**
     * Adds a value to property StateTypeRole from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addStateTypeRole(org.ontoware.rdfreactor.schema.rdfs.Resource value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), STATETYPEROLE, value, 1);
	}
 
 

    /**
     * Sets a value of property StateTypeRole from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setStateTypeRole( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, STATETYPEROLE, value);
	}
	
    /**
     * Sets a value of property StateTypeRole from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setStateTypeRole( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), STATETYPEROLE, value);
	}
    /**
     * Sets a value of property StateTypeRole from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setStateTypeRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, STATETYPEROLE, value);
	}
	
    /**
     * Sets a value of property StateTypeRole from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setStateTypeRole(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), STATETYPEROLE, value);
	}
  


    /**
     * Removes a value of property StateTypeRole as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeStateTypeRole( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, STATETYPEROLE, value);
	}
	
    /**
     * Removes a value of property StateTypeRole as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeStateTypeRole( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), STATETYPEROLE, value);
	}
    /**
     * Removes a value of property StateTypeRole given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeStateTypeRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, STATETYPEROLE, value);
	}
	
    /**
     * Removes a value of property StateTypeRole given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeStateTypeRole(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), STATETYPEROLE, value);
	}
  
    /**
     * Removes all values of property StateTypeRole     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllStateTypeRole( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, STATETYPEROLE);
	}
	
    /**
     * Removes all values of property StateTypeRole	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllStateTypeRole() {
		Base.removeAll(this.model, this.getResource(), STATETYPEROLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@556c08de has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBRESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@556c08de has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubResource() {
		return Base.has(this.model, this.getResource(), SUBRESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@556c08de has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBRESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@556c08de has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubResource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBRESOURCE);
	}

     /**
     * Get all values of property SubResource as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubResource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBRESOURCE);
	}
	
    /**
     * Get all values of property SubResource as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubResource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBRESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SubResource as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubResource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBRESOURCE);
	}

    /**
     * Get all values of property SubResource as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubResource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBRESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SubResource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSubResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property SubResource as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSubResource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property SubResource     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSubResource() {
		return Base.getAll(this.model, this.getResource(), SUBRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property SubResource as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSubResource_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property SubResource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBRESOURCE, value);
	}
	
    /**
     * Adds a value to property SubResource as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBRESOURCE, value);
	}
    /**
     * Adds a value to property SubResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, SUBRESOURCE, value);
	}
	
    /**
     * Adds a value to property SubResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubResource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), SUBRESOURCE, value);
	}
  

    /**
     * Sets a value of property SubResource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBRESOURCE, value);
	}
	
    /**
     * Sets a value of property SubResource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBRESOURCE, value);
	}
    /**
     * Sets a value of property SubResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, SUBRESOURCE, value);
	}
	
    /**
     * Sets a value of property SubResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubResource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), SUBRESOURCE, value);
	}
  


    /**
     * Removes a value of property SubResource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBRESOURCE, value);
	}
	
    /**
     * Removes a value of property SubResource as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBRESOURCE, value);
	}
    /**
     * Removes a value of property SubResource given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, SUBRESOURCE, value);
	}
	
    /**
     * Removes a value of property SubResource given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubResource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), SUBRESOURCE, value);
	}
  
    /**
     * Removes all values of property SubResource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBRESOURCE);
	}
	
    /**
     * Removes all values of property SubResource	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubResource() {
		Base.removeAll(this.model, this.getResource(), SUBRESOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a5af141 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubsecond(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBSECOND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a5af141 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubsecond() {
		return Base.has(this.model, this.getResource(), SUBSECOND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a5af141 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubsecond(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBSECOND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a5af141 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubsecond( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBSECOND);
	}

     /**
     * Get all values of property Subsecond as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubsecond_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBSECOND);
	}
	
    /**
     * Get all values of property Subsecond as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubsecond_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBSECOND, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Subsecond as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubsecond_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBSECOND);
	}

    /**
     * Get all values of property Subsecond as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubsecond_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBSECOND, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Subsecond     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllSubsecond(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBSECOND, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Subsecond as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllSubsecond_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBSECOND, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Subsecond     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllSubsecond() {
		return Base.getAll(this.model, this.getResource(), SUBSECOND, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Subsecond as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllSubsecond_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBSECOND, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Subsecond as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubsecond(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBSECOND, value);
	}
	
    /**
     * Adds a value to property Subsecond as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubsecond( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBSECOND, value);
	}
    /**
     * Adds a value to property Subsecond from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubsecond(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, SUBSECOND, value);
	}
	
    /**
     * Adds a value to property Subsecond from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubsecond(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), SUBSECOND, value);
	}
  

    /**
     * Sets a value of property Subsecond from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubsecond( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBSECOND, value);
	}
	
    /**
     * Sets a value of property Subsecond from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubsecond( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBSECOND, value);
	}
    /**
     * Sets a value of property Subsecond from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubsecond(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, SUBSECOND, value);
	}
	
    /**
     * Sets a value of property Subsecond from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubsecond(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), SUBSECOND, value);
	}
  


    /**
     * Removes a value of property Subsecond as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubsecond( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBSECOND, value);
	}
	
    /**
     * Removes a value of property Subsecond as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubsecond( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBSECOND, value);
	}
    /**
     * Removes a value of property Subsecond given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubsecond(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, SUBSECOND, value);
	}
	
    /**
     * Removes a value of property Subsecond given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubsecond(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), SUBSECOND, value);
	}
  
    /**
     * Removes all values of property Subsecond     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubsecond( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBSECOND);
	}
	
    /**
     * Removes all values of property Subsecond	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubsecond() {
		Base.removeAll(this.model, this.getResource(), SUBSECOND);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d3015e7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSuperResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUPERRESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d3015e7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSuperResource() {
		return Base.has(this.model, this.getResource(), SUPERRESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d3015e7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSuperResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUPERRESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d3015e7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSuperResource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUPERRESOURCE);
	}

     /**
     * Get all values of property SuperResource as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSuperResource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUPERRESOURCE);
	}
	
    /**
     * Get all values of property SuperResource as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSuperResource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUPERRESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SuperResource as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSuperResource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUPERRESOURCE);
	}

    /**
     * Get all values of property SuperResource as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSuperResource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUPERRESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SuperResource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSuperResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUPERRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property SuperResource as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSuperResource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUPERRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property SuperResource     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSuperResource() {
		return Base.getAll(this.model, this.getResource(), SUPERRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property SuperResource as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSuperResource_as() {
		return Base.getAll_as(this.model, this.getResource(), SUPERRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property SuperResource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSuperResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUPERRESOURCE, value);
	}
	
    /**
     * Adds a value to property SuperResource as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSuperResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUPERRESOURCE, value);
	}
    /**
     * Adds a value to property SuperResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSuperResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, SUPERRESOURCE, value);
	}
	
    /**
     * Adds a value to property SuperResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSuperResource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), SUPERRESOURCE, value);
	}
  

    /**
     * Sets a value of property SuperResource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSuperResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUPERRESOURCE, value);
	}
	
    /**
     * Sets a value of property SuperResource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSuperResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUPERRESOURCE, value);
	}
    /**
     * Sets a value of property SuperResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSuperResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, SUPERRESOURCE, value);
	}
	
    /**
     * Sets a value of property SuperResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSuperResource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), SUPERRESOURCE, value);
	}
  


    /**
     * Removes a value of property SuperResource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSuperResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUPERRESOURCE, value);
	}
	
    /**
     * Removes a value of property SuperResource as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSuperResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUPERRESOURCE, value);
	}
    /**
     * Removes a value of property SuperResource given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSuperResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, SUPERRESOURCE, value);
	}
	
    /**
     * Removes a value of property SuperResource given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSuperResource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), SUPERRESOURCE, value);
	}
  
    /**
     * Removes all values of property SuperResource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSuperResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUPERRESOURCE);
	}
	
    /**
     * Removes all values of property SuperResource	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSuperResource() {
		Base.removeAll(this.model, this.getResource(), SUPERRESOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ff94f45 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SYMBOL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ff94f45 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSymbol() {
		return Base.has(this.model, this.getResource(), SYMBOL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ff94f45 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SYMBOL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ff94f45 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSymbol( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SYMBOL);
	}

     /**
     * Get all values of property Symbol as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSymbol_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SYMBOL);
	}
	
    /**
     * Get all values of property Symbol as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSymbol_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SYMBOL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Symbol as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSymbol_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SYMBOL);
	}

    /**
     * Get all values of property Symbol as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSymbol_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SYMBOL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Symbol     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nao.Symbol> getAllSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SYMBOL, eu.dime.ps.semantic.model.nao.Symbol.class);
	}
	
    /**
     * Get all values of property Symbol as a ReactorResult of Symbol 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nao.Symbol> getAllSymbol_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SYMBOL, eu.dime.ps.semantic.model.nao.Symbol.class);
	}

    /**
     * Get all values of property Symbol     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nao.Symbol> getAllSymbol() {
		return Base.getAll(this.model, this.getResource(), SYMBOL, eu.dime.ps.semantic.model.nao.Symbol.class);
	}

    /**
     * Get all values of property Symbol as a ReactorResult of Symbol 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nao.Symbol> getAllSymbol_as() {
		return Base.getAll_as(this.model, this.getResource(), SYMBOL, eu.dime.ps.semantic.model.nao.Symbol.class);
	}
 
    /**
     * Adds a value to property Symbol as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SYMBOL, value);
	}
	
    /**
     * Adds a value to property Symbol as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSymbol( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SYMBOL, value);
	}
    /**
     * Adds a value to property Symbol from an instance of Symbol 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.add(model, instanceResource, SYMBOL, value);
	}
	
    /**
     * Adds a value to property Symbol from an instance of Symbol 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSymbol(eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.add(this.model, this.getResource(), SYMBOL, value);
	}
  

    /**
     * Sets a value of property Symbol from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSymbol( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SYMBOL, value);
	}
	
    /**
     * Sets a value of property Symbol from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSymbol( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SYMBOL, value);
	}
    /**
     * Sets a value of property Symbol from an instance of Symbol 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.set(model, instanceResource, SYMBOL, value);
	}
	
    /**
     * Sets a value of property Symbol from an instance of Symbol 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSymbol(eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.set(this.model, this.getResource(), SYMBOL, value);
	}
  


    /**
     * Removes a value of property Symbol as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSymbol( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SYMBOL, value);
	}
	
    /**
     * Removes a value of property Symbol as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSymbol( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SYMBOL, value);
	}
    /**
     * Removes a value of property Symbol given as an instance of Symbol 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSymbol(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.remove(model, instanceResource, SYMBOL, value);
	}
	
    /**
     * Removes a value of property Symbol given as an instance of Symbol 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSymbol(eu.dime.ps.semantic.model.nao.Symbol value) {
		Base.remove(this.model, this.getResource(), SYMBOL, value);
	}
  
    /**
     * Removes all values of property Symbol     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSymbol( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SYMBOL);
	}
	
    /**
     * Removes all values of property Symbol	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSymbol() {
		Base.removeAll(this.model, this.getResource(), SYMBOL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b7b65f8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSystemRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SYSTEMROLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b7b65f8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSystemRole() {
		return Base.has(this.model, this.getResource(), SYSTEMROLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b7b65f8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSystemRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SYSTEMROLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b7b65f8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSystemRole( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SYSTEMROLE);
	}

     /**
     * Get all values of property SystemRole as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSystemRole_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SYSTEMROLE);
	}
	
    /**
     * Get all values of property SystemRole as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSystemRole_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SYSTEMROLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SystemRole as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSystemRole_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SYSTEMROLE);
	}

    /**
     * Get all values of property SystemRole as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSystemRole_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SYSTEMROLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SystemRole     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllSystemRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SYSTEMROLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property SystemRole as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllSystemRole_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SYSTEMROLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property SystemRole     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllSystemRole() {
		return Base.getAll(this.model, this.getResource(), SYSTEMROLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property SystemRole as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllSystemRole_as() {
		return Base.getAll_as(this.model, this.getResource(), SYSTEMROLE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property SystemRole as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSystemRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SYSTEMROLE, value);
	}
	
    /**
     * Adds a value to property SystemRole as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSystemRole( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SYSTEMROLE, value);
	}
    /**
     * Adds a value to property SystemRole from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSystemRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, SYSTEMROLE, value);
	}
	
    /**
     * Adds a value to property SystemRole from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSystemRole(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), SYSTEMROLE, value);
	}
  

    /**
     * Sets a value of property SystemRole from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSystemRole( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SYSTEMROLE, value);
	}
	
    /**
     * Sets a value of property SystemRole from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSystemRole( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SYSTEMROLE, value);
	}
    /**
     * Sets a value of property SystemRole from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSystemRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, SYSTEMROLE, value);
	}
	
    /**
     * Sets a value of property SystemRole from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSystemRole(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), SYSTEMROLE, value);
	}
  


    /**
     * Removes a value of property SystemRole as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSystemRole( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SYSTEMROLE, value);
	}
	
    /**
     * Removes a value of property SystemRole as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSystemRole( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SYSTEMROLE, value);
	}
    /**
     * Removes a value of property SystemRole given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSystemRole(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, SYSTEMROLE, value);
	}
	
    /**
     * Removes a value of property SystemRole given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSystemRole(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), SYSTEMROLE, value);
	}
  
    /**
     * Removes all values of property SystemRole     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSystemRole( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SYSTEMROLE);
	}
	
    /**
     * Removes all values of property SystemRole	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSystemRole() {
		Base.removeAll(this.model, this.getResource(), SYSTEMROLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a3edd4c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TAG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a3edd4c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTag() {
		return Base.has(this.model, this.getResource(), TAG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a3edd4c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TAG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a3edd4c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTag( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TAG);
	}

     /**
     * Get all values of property Tag as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTag_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TAG);
	}
	
    /**
     * Get all values of property Tag as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTag_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TAG, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Tag as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTag_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TAG);
	}

    /**
     * Get all values of property Tag as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTag_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TAG, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Tag     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nao.Tag> getAllTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TAG, eu.dime.ps.semantic.model.nao.Tag.class);
	}
	
    /**
     * Get all values of property Tag as a ReactorResult of Tag 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nao.Tag> getAllTag_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TAG, eu.dime.ps.semantic.model.nao.Tag.class);
	}

    /**
     * Get all values of property Tag     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nao.Tag> getAllTag() {
		return Base.getAll(this.model, this.getResource(), TAG, eu.dime.ps.semantic.model.nao.Tag.class);
	}

    /**
     * Get all values of property Tag as a ReactorResult of Tag 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nao.Tag> getAllTag_as() {
		return Base.getAll_as(this.model, this.getResource(), TAG, eu.dime.ps.semantic.model.nao.Tag.class);
	}
 
    /**
     * Adds a value to property Tag as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TAG, value);
	}
	
    /**
     * Adds a value to property Tag as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTag( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TAG, value);
	}
    /**
     * Adds a value to property Tag from an instance of Tag 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Tag value) {
		Base.add(model, instanceResource, TAG, value);
	}
	
    /**
     * Adds a value to property Tag from an instance of Tag 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTag(eu.dime.ps.semantic.model.nao.Tag value) {
		Base.add(this.model, this.getResource(), TAG, value);
	}
  

    /**
     * Sets a value of property Tag from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTag( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TAG, value);
	}
	
    /**
     * Sets a value of property Tag from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTag( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TAG, value);
	}
    /**
     * Sets a value of property Tag from an instance of Tag 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Tag value) {
		Base.set(model, instanceResource, TAG, value);
	}
	
    /**
     * Sets a value of property Tag from an instance of Tag 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTag(eu.dime.ps.semantic.model.nao.Tag value) {
		Base.set(this.model, this.getResource(), TAG, value);
	}
  


    /**
     * Removes a value of property Tag as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTag( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TAG, value);
	}
	
    /**
     * Removes a value of property Tag as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTag( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TAG, value);
	}
    /**
     * Removes a value of property Tag given as an instance of Tag 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nao.Tag value) {
		Base.remove(model, instanceResource, TAG, value);
	}
	
    /**
     * Removes a value of property Tag given as an instance of Tag 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTag(eu.dime.ps.semantic.model.nao.Tag value) {
		Base.remove(this.model, this.getResource(), TAG, value);
	}
  
    /**
     * Removes all values of property Tag     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTag( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TAG);
	}
	
    /**
     * Removes all values of property Tag	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTag() {
		Base.removeAll(this.model, this.getResource(), TAG);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@152818d1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTagnumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TAGNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@152818d1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTagnumber() {
		return Base.has(this.model, this.getResource(), TAGNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@152818d1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTagnumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TAGNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@152818d1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTagnumber( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TAGNUMBER);
	}

     /**
     * Get all values of property Tagnumber as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTagnumber_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TAGNUMBER);
	}
	
    /**
     * Get all values of property Tagnumber as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTagnumber_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TAGNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Tagnumber as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTagnumber_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TAGNUMBER);
	}

    /**
     * Get all values of property Tagnumber as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTagnumber_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TAGNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Tagnumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTagnumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TAGNUMBER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Tagnumber as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTagnumber_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TAGNUMBER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Tagnumber     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTagnumber() {
		return Base.getAll(this.model, this.getResource(), TAGNUMBER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Tagnumber as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTagnumber_as() {
		return Base.getAll_as(this.model, this.getResource(), TAGNUMBER, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Tagnumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTagnumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TAGNUMBER, value);
	}
	
    /**
     * Adds a value to property Tagnumber as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTagnumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TAGNUMBER, value);
	}
    /**
     * Adds a value to property Tagnumber from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTagnumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, TAGNUMBER, value);
	}
	
    /**
     * Adds a value to property Tagnumber from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTagnumber(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), TAGNUMBER, value);
	}
  

    /**
     * Sets a value of property Tagnumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTagnumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TAGNUMBER, value);
	}
	
    /**
     * Sets a value of property Tagnumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTagnumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TAGNUMBER, value);
	}
    /**
     * Sets a value of property Tagnumber from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTagnumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, TAGNUMBER, value);
	}
	
    /**
     * Sets a value of property Tagnumber from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTagnumber(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), TAGNUMBER, value);
	}
  


    /**
     * Removes a value of property Tagnumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTagnumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TAGNUMBER, value);
	}
	
    /**
     * Removes a value of property Tagnumber as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTagnumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TAGNUMBER, value);
	}
    /**
     * Removes a value of property Tagnumber given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTagnumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, TAGNUMBER, value);
	}
	
    /**
     * Removes a value of property Tagnumber given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTagnumber(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), TAGNUMBER, value);
	}
  
    /**
     * Removes all values of property Tagnumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTagnumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TAGNUMBER);
	}
	
    /**
     * Removes all values of property Tagnumber	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTagnumber() {
		Base.removeAll(this.model, this.getResource(), TAGNUMBER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@531d1aa6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTargetTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@531d1aa6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTargetTime() {
		return Base.has(this.model, this.getResource(), TARGETTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@531d1aa6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTargetTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TARGETTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@531d1aa6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTargetTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETTIME);
	}

    /**
     * Get single value of property TargetTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTargetTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TARGETTIME);
	}
	
    /**
     * Get single value of property TargetTime as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTargetTime_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TARGETTIME);
	}
     /**
     * Get single value of property TargetTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getTargetTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, TARGETTIME, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property TargetTime  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getTargetTime() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), TARGETTIME, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property TargetTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTargetTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TARGETTIME, value, 1);
	}
	
    /**
     * Adds a value to property TargetTime as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTargetTime( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TARGETTIME, value, 1);
	}
    /**
     * Adds a value to property TargetTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTargetTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, TARGETTIME, value, 1);
	}
	
    /**
     * Adds a value to property TargetTime from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTargetTime(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TARGETTIME, value, 1);
	}
 
 

    /**
     * Sets a value of property TargetTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTargetTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TARGETTIME, value);
	}
	
    /**
     * Sets a value of property TargetTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTargetTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TARGETTIME, value);
	}
    /**
     * Sets a value of property TargetTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTargetTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, TARGETTIME, value);
	}
	
    /**
     * Sets a value of property TargetTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTargetTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), TARGETTIME, value);
	}
  


    /**
     * Removes a value of property TargetTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTargetTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TARGETTIME, value);
	}
	
    /**
     * Removes a value of property TargetTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTargetTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TARGETTIME, value);
	}
    /**
     * Removes a value of property TargetTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTargetTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, TARGETTIME, value);
	}
	
    /**
     * Removes a value of property TargetTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTargetTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), TARGETTIME, value);
	}
  
    /**
     * Removes all values of property TargetTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTargetTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETTIME);
	}
	
    /**
     * Removes all values of property TargetTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTargetTime() {
		Base.removeAll(this.model, this.getResource(), TARGETTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b9881ac has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTermsCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TERMSCREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b9881ac has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTermsCreated() {
		return Base.has(this.model, this.getResource(), TERMSCREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b9881ac has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTermsCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TERMSCREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b9881ac has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTermsCreated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TERMSCREATED);
	}

     /**
     * Get all values of property TermsCreated as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsCreated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TERMSCREATED);
	}
	
    /**
     * Get all values of property TermsCreated as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsCreated_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSCREATED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TermsCreated as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsCreated_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TERMSCREATED);
	}

    /**
     * Get all values of property TermsCreated as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsCreated_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TERMSCREATED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TermsCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TERMSCREATED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property TermsCreated as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsCreated_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSCREATED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property TermsCreated     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsCreated() {
		return Base.getAll(this.model, this.getResource(), TERMSCREATED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property TermsCreated as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsCreated_as() {
		return Base.getAll_as(this.model, this.getResource(), TERMSCREATED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property TermsCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTermsCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TERMSCREATED, value);
	}
	
    /**
     * Adds a value to property TermsCreated as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTermsCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TERMSCREATED, value);
	}
    /**
     * Adds a value to property TermsCreated from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTermsCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, TERMSCREATED, value);
	}
	
    /**
     * Adds a value to property TermsCreated from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTermsCreated(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), TERMSCREATED, value);
	}
  

    /**
     * Sets a value of property TermsCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTermsCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TERMSCREATED, value);
	}
	
    /**
     * Sets a value of property TermsCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTermsCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TERMSCREATED, value);
	}
    /**
     * Sets a value of property TermsCreated from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTermsCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, TERMSCREATED, value);
	}
	
    /**
     * Sets a value of property TermsCreated from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTermsCreated(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), TERMSCREATED, value);
	}
  


    /**
     * Removes a value of property TermsCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTermsCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TERMSCREATED, value);
	}
	
    /**
     * Removes a value of property TermsCreated as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTermsCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TERMSCREATED, value);
	}
    /**
     * Removes a value of property TermsCreated given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTermsCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, TERMSCREATED, value);
	}
	
    /**
     * Removes a value of property TermsCreated given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTermsCreated(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), TERMSCREATED, value);
	}
  
    /**
     * Removes all values of property TermsCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTermsCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TERMSCREATED);
	}
	
    /**
     * Removes all values of property TermsCreated	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTermsCreated() {
		Base.removeAll(this.model, this.getResource(), TERMSCREATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@efadff9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TERMSISPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@efadff9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTermsIsPartOf() {
		return Base.has(this.model, this.getResource(), TERMSISPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@efadff9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TERMSISPARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@efadff9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTermsIsPartOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TERMSISPARTOF);
	}

     /**
     * Get all values of property TermsIsPartOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsIsPartOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TERMSISPARTOF);
	}
	
    /**
     * Get all values of property TermsIsPartOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsIsPartOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSISPARTOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TermsIsPartOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsIsPartOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TERMSISPARTOF);
	}

    /**
     * Get all values of property TermsIsPartOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsIsPartOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TERMSISPARTOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TermsIsPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TERMSISPARTOF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property TermsIsPartOf as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsIsPartOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSISPARTOF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property TermsIsPartOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsIsPartOf() {
		return Base.getAll(this.model, this.getResource(), TERMSISPARTOF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property TermsIsPartOf as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsIsPartOf_as() {
		return Base.getAll_as(this.model, this.getResource(), TERMSISPARTOF, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property TermsIsPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TERMSISPARTOF, value);
	}
	
    /**
     * Adds a value to property TermsIsPartOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTermsIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TERMSISPARTOF, value);
	}
    /**
     * Adds a value to property TermsIsPartOf from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, TERMSISPARTOF, value);
	}
	
    /**
     * Adds a value to property TermsIsPartOf from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTermsIsPartOf(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), TERMSISPARTOF, value);
	}
  

    /**
     * Sets a value of property TermsIsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTermsIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TERMSISPARTOF, value);
	}
	
    /**
     * Sets a value of property TermsIsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTermsIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TERMSISPARTOF, value);
	}
    /**
     * Sets a value of property TermsIsPartOf from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, TERMSISPARTOF, value);
	}
	
    /**
     * Sets a value of property TermsIsPartOf from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTermsIsPartOf(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), TERMSISPARTOF, value);
	}
  


    /**
     * Removes a value of property TermsIsPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTermsIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TERMSISPARTOF, value);
	}
	
    /**
     * Removes a value of property TermsIsPartOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTermsIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TERMSISPARTOF, value);
	}
    /**
     * Removes a value of property TermsIsPartOf given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, TERMSISPARTOF, value);
	}
	
    /**
     * Removes a value of property TermsIsPartOf given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTermsIsPartOf(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), TERMSISPARTOF, value);
	}
  
    /**
     * Removes all values of property TermsIsPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTermsIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TERMSISPARTOF);
	}
	
    /**
     * Removes all values of property TermsIsPartOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTermsIsPartOf() {
		Base.removeAll(this.model, this.getResource(), TERMSISPARTOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@530f9eb9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTermsLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TERMSLICENSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@530f9eb9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTermsLicense() {
		return Base.has(this.model, this.getResource(), TERMSLICENSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@530f9eb9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTermsLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TERMSLICENSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@530f9eb9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTermsLicense( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TERMSLICENSE);
	}

     /**
     * Get all values of property TermsLicense as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsLicense_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TERMSLICENSE);
	}
	
    /**
     * Get all values of property TermsLicense as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsLicense_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSLICENSE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TermsLicense as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsLicense_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TERMSLICENSE);
	}

    /**
     * Get all values of property TermsLicense as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsLicense_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TERMSLICENSE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TermsLicense     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TERMSLICENSE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property TermsLicense as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsLicense_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSLICENSE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property TermsLicense     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsLicense() {
		return Base.getAll(this.model, this.getResource(), TERMSLICENSE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property TermsLicense as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsLicense_as() {
		return Base.getAll_as(this.model, this.getResource(), TERMSLICENSE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property TermsLicense as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTermsLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TERMSLICENSE, value);
	}
	
    /**
     * Adds a value to property TermsLicense as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTermsLicense( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TERMSLICENSE, value);
	}
    /**
     * Adds a value to property TermsLicense from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTermsLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, TERMSLICENSE, value);
	}
	
    /**
     * Adds a value to property TermsLicense from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTermsLicense(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), TERMSLICENSE, value);
	}
  

    /**
     * Sets a value of property TermsLicense from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTermsLicense( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TERMSLICENSE, value);
	}
	
    /**
     * Sets a value of property TermsLicense from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTermsLicense( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TERMSLICENSE, value);
	}
    /**
     * Sets a value of property TermsLicense from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTermsLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, TERMSLICENSE, value);
	}
	
    /**
     * Sets a value of property TermsLicense from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTermsLicense(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), TERMSLICENSE, value);
	}
  


    /**
     * Removes a value of property TermsLicense as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTermsLicense( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TERMSLICENSE, value);
	}
	
    /**
     * Removes a value of property TermsLicense as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTermsLicense( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TERMSLICENSE, value);
	}
    /**
     * Removes a value of property TermsLicense given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTermsLicense(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, TERMSLICENSE, value);
	}
	
    /**
     * Removes a value of property TermsLicense given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTermsLicense(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), TERMSLICENSE, value);
	}
  
    /**
     * Removes all values of property TermsLicense     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTermsLicense( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TERMSLICENSE);
	}
	
    /**
     * Removes all values of property TermsLicense	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTermsLicense() {
		Base.removeAll(this.model, this.getResource(), TERMSLICENSE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45813f99 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTermsModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TERMSMODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45813f99 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTermsModified() {
		return Base.has(this.model, this.getResource(), TERMSMODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45813f99 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTermsModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TERMSMODIFIED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45813f99 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTermsModified( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TERMSMODIFIED);
	}

     /**
     * Get all values of property TermsModified as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsModified_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TERMSMODIFIED);
	}
	
    /**
     * Get all values of property TermsModified as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsModified_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSMODIFIED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TermsModified as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsModified_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TERMSMODIFIED);
	}

    /**
     * Get all values of property TermsModified as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsModified_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TERMSMODIFIED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TermsModified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TERMSMODIFIED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property TermsModified as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsModified_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSMODIFIED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property TermsModified     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsModified() {
		return Base.getAll(this.model, this.getResource(), TERMSMODIFIED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property TermsModified as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsModified_as() {
		return Base.getAll_as(this.model, this.getResource(), TERMSMODIFIED, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property TermsModified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTermsModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TERMSMODIFIED, value);
	}
	
    /**
     * Adds a value to property TermsModified as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTermsModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TERMSMODIFIED, value);
	}
    /**
     * Adds a value to property TermsModified from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTermsModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, TERMSMODIFIED, value);
	}
	
    /**
     * Adds a value to property TermsModified from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTermsModified(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), TERMSMODIFIED, value);
	}
  

    /**
     * Sets a value of property TermsModified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTermsModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TERMSMODIFIED, value);
	}
	
    /**
     * Sets a value of property TermsModified from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTermsModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TERMSMODIFIED, value);
	}
    /**
     * Sets a value of property TermsModified from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTermsModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, TERMSMODIFIED, value);
	}
	
    /**
     * Sets a value of property TermsModified from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTermsModified(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), TERMSMODIFIED, value);
	}
  


    /**
     * Removes a value of property TermsModified as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTermsModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TERMSMODIFIED, value);
	}
	
    /**
     * Removes a value of property TermsModified as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTermsModified( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TERMSMODIFIED, value);
	}
    /**
     * Removes a value of property TermsModified given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTermsModified(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, TERMSMODIFIED, value);
	}
	
    /**
     * Removes a value of property TermsModified given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTermsModified(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), TERMSMODIFIED, value);
	}
  
    /**
     * Removes all values of property TermsModified     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTermsModified( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TERMSMODIFIED);
	}
	
    /**
     * Removes all values of property TermsModified	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTermsModified() {
		Base.removeAll(this.model, this.getResource(), TERMSMODIFIED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29fbd541 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTermsPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TERMSPART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29fbd541 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTermsPart() {
		return Base.has(this.model, this.getResource(), TERMSPART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29fbd541 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTermsPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TERMSPART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29fbd541 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTermsPart( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TERMSPART);
	}

     /**
     * Get all values of property TermsPart as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsPart_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TERMSPART);
	}
	
    /**
     * Get all values of property TermsPart as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsPart_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSPART, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TermsPart as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsPart_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TERMSPART);
	}

    /**
     * Get all values of property TermsPart as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsPart_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TERMSPART, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TermsPart     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TERMSPART, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property TermsPart as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsPart_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSPART, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property TermsPart     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsPart() {
		return Base.getAll(this.model, this.getResource(), TERMSPART, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property TermsPart as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsPart_as() {
		return Base.getAll_as(this.model, this.getResource(), TERMSPART, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property TermsPart as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTermsPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TERMSPART, value);
	}
	
    /**
     * Adds a value to property TermsPart as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTermsPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TERMSPART, value);
	}
    /**
     * Adds a value to property TermsPart from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTermsPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, TERMSPART, value);
	}
	
    /**
     * Adds a value to property TermsPart from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTermsPart(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), TERMSPART, value);
	}
  

    /**
     * Sets a value of property TermsPart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTermsPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TERMSPART, value);
	}
	
    /**
     * Sets a value of property TermsPart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTermsPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TERMSPART, value);
	}
    /**
     * Sets a value of property TermsPart from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTermsPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, TERMSPART, value);
	}
	
    /**
     * Sets a value of property TermsPart from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTermsPart(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), TERMSPART, value);
	}
  


    /**
     * Removes a value of property TermsPart as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTermsPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TERMSPART, value);
	}
	
    /**
     * Removes a value of property TermsPart as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTermsPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TERMSPART, value);
	}
    /**
     * Removes a value of property TermsPart given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTermsPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, TERMSPART, value);
	}
	
    /**
     * Removes a value of property TermsPart given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTermsPart(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), TERMSPART, value);
	}
  
    /**
     * Removes all values of property TermsPart     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTermsPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TERMSPART);
	}
	
    /**
     * Removes all values of property TermsPart	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTermsPart() {
		Base.removeAll(this.model, this.getResource(), TERMSPART);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3011c001 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTermsVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TERMSVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3011c001 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTermsVersion() {
		return Base.has(this.model, this.getResource(), TERMSVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3011c001 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTermsVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TERMSVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3011c001 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTermsVersion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TERMSVERSION);
	}

     /**
     * Get all values of property TermsVersion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsVersion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TERMSVERSION);
	}
	
    /**
     * Get all values of property TermsVersion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsVersion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TermsVersion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTermsVersion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TERMSVERSION);
	}

    /**
     * Get all values of property TermsVersion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTermsVersion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TERMSVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TermsVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TERMSVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property TermsVersion as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsVersion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property TermsVersion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsVersion() {
		return Base.getAll(this.model, this.getResource(), TERMSVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property TermsVersion as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTermsVersion_as() {
		return Base.getAll_as(this.model, this.getResource(), TERMSVERSION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property TermsVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTermsVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TERMSVERSION, value);
	}
	
    /**
     * Adds a value to property TermsVersion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTermsVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TERMSVERSION, value);
	}
    /**
     * Adds a value to property TermsVersion from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTermsVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, TERMSVERSION, value);
	}
	
    /**
     * Adds a value to property TermsVersion from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTermsVersion(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), TERMSVERSION, value);
	}
  

    /**
     * Sets a value of property TermsVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTermsVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TERMSVERSION, value);
	}
	
    /**
     * Sets a value of property TermsVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTermsVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TERMSVERSION, value);
	}
    /**
     * Sets a value of property TermsVersion from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTermsVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, TERMSVERSION, value);
	}
	
    /**
     * Sets a value of property TermsVersion from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTermsVersion(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), TERMSVERSION, value);
	}
  


    /**
     * Removes a value of property TermsVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTermsVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TERMSVERSION, value);
	}
	
    /**
     * Removes a value of property TermsVersion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTermsVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TERMSVERSION, value);
	}
    /**
     * Removes a value of property TermsVersion given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTermsVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, TERMSVERSION, value);
	}
	
    /**
     * Removes a value of property TermsVersion given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTermsVersion(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), TERMSVERSION, value);
	}
  
    /**
     * Removes all values of property TermsVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTermsVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TERMSVERSION);
	}
	
    /**
     * Removes all values of property TermsVersion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTermsVersion() {
		Base.removeAll(this.model, this.getResource(), TERMSVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ad2fe46 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTimemanagement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TIMEMANAGEMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ad2fe46 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTimemanagement() {
		return Base.has(this.model, this.getResource(), TIMEMANAGEMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ad2fe46 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTimemanagement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TIMEMANAGEMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ad2fe46 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTimemanagement( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TIMEMANAGEMENT);
	}

    /**
     * Get single value of property Timemanagement as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTimemanagement_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TIMEMANAGEMENT);
	}
	
    /**
     * Get single value of property Timemanagement as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTimemanagement_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TIMEMANAGEMENT);
	}
     /**
     * Get single value of property Timemanagement     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getTimemanagement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, TIMEMANAGEMENT, java.lang.String.class);
	}
	
    /**
     * Get single value of property Timemanagement  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getTimemanagement() {
		return (java.lang.String) Base.get(this.model, this.getResource(), TIMEMANAGEMENT, java.lang.String.class);
	}
  
    /**
     * Adds a value to property Timemanagement as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTimemanagement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TIMEMANAGEMENT, value, 1);
	}
	
    /**
     * Adds a value to property Timemanagement as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTimemanagement( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TIMEMANAGEMENT, value, 1);
	}
    /**
     * Adds a value to property Timemanagement from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTimemanagement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, TIMEMANAGEMENT, value, 1);
	}
	
    /**
     * Adds a value to property Timemanagement from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTimemanagement(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TIMEMANAGEMENT, value, 1);
	}
 
 

    /**
     * Sets a value of property Timemanagement from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTimemanagement( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TIMEMANAGEMENT, value);
	}
	
    /**
     * Sets a value of property Timemanagement from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTimemanagement( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TIMEMANAGEMENT, value);
	}
    /**
     * Sets a value of property Timemanagement from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTimemanagement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, TIMEMANAGEMENT, value);
	}
	
    /**
     * Sets a value of property Timemanagement from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTimemanagement(java.lang.String value) {
		Base.set(this.model, this.getResource(), TIMEMANAGEMENT, value);
	}
  


    /**
     * Removes a value of property Timemanagement as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTimemanagement( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TIMEMANAGEMENT, value);
	}
	
    /**
     * Removes a value of property Timemanagement as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTimemanagement( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TIMEMANAGEMENT, value);
	}
    /**
     * Removes a value of property Timemanagement given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTimemanagement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, TIMEMANAGEMENT, value);
	}
	
    /**
     * Removes a value of property Timemanagement given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTimemanagement(java.lang.String value) {
		Base.remove(this.model, this.getResource(), TIMEMANAGEMENT, value);
	}
  
    /**
     * Removes all values of property Timemanagement     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTimemanagement( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TIMEMANAGEMENT);
	}
	
    /**
     * Removes all values of property Timemanagement	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTimemanagement() {
		Base.removeAll(this.model, this.getResource(), TIMEMANAGEMENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a87a6ca has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTmoDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TMODATETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a87a6ca has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTmoDateTime() {
		return Base.has(this.model, this.getResource(), TMODATETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a87a6ca has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTmoDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TMODATETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a87a6ca has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTmoDateTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TMODATETIME);
	}

    /**
     * Get single value of property TmoDateTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTmoDateTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TMODATETIME);
	}
	
    /**
     * Get single value of property TmoDateTime as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTmoDateTime_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TMODATETIME);
	}
     /**
     * Get single value of property TmoDateTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getTmoDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, TMODATETIME, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property TmoDateTime  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getTmoDateTime() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), TMODATETIME, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property TmoDateTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTmoDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TMODATETIME, value, 1);
	}
	
    /**
     * Adds a value to property TmoDateTime as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTmoDateTime( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TMODATETIME, value, 1);
	}
    /**
     * Adds a value to property TmoDateTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTmoDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, TMODATETIME, value, 1);
	}
	
    /**
     * Adds a value to property TmoDateTime from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTmoDateTime(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TMODATETIME, value, 1);
	}
 
 

    /**
     * Sets a value of property TmoDateTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTmoDateTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TMODATETIME, value);
	}
	
    /**
     * Sets a value of property TmoDateTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTmoDateTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TMODATETIME, value);
	}
    /**
     * Sets a value of property TmoDateTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTmoDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, TMODATETIME, value);
	}
	
    /**
     * Sets a value of property TmoDateTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTmoDateTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), TMODATETIME, value);
	}
  


    /**
     * Removes a value of property TmoDateTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTmoDateTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TMODATETIME, value);
	}
	
    /**
     * Removes a value of property TmoDateTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTmoDateTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TMODATETIME, value);
	}
    /**
     * Removes a value of property TmoDateTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTmoDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, TMODATETIME, value);
	}
	
    /**
     * Removes a value of property TmoDateTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTmoDateTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), TMODATETIME, value);
	}
  
    /**
     * Removes all values of property TmoDateTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTmoDateTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TMODATETIME);
	}
	
    /**
     * Removes all values of property TmoDateTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTmoDateTime() {
		Base.removeAll(this.model, this.getResource(), TMODATETIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48c8d800 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTopic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TOPIC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48c8d800 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTopic() {
		return Base.has(this.model, this.getResource(), TOPIC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48c8d800 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTopic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TOPIC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48c8d800 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTopic( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TOPIC);
	}

     /**
     * Get all values of property Topic as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTopic_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TOPIC);
	}
	
    /**
     * Get all values of property Topic as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTopic_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TOPIC, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Topic as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTopic_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TOPIC);
	}

    /**
     * Get all values of property Topic as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTopic_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TOPIC, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Topic     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllTopic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TOPIC, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property Topic as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllTopic_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TOPIC, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Topic     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllTopic() {
		return Base.getAll(this.model, this.getResource(), TOPIC, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Topic as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllTopic_as() {
		return Base.getAll_as(this.model, this.getResource(), TOPIC, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property Topic as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTopic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TOPIC, value);
	}
	
    /**
     * Adds a value to property Topic as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTopic( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TOPIC, value);
	}
    /**
     * Adds a value to property Topic from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTopic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, TOPIC, value);
	}
	
    /**
     * Adds a value to property Topic from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTopic(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), TOPIC, value);
	}
  

    /**
     * Sets a value of property Topic from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTopic( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TOPIC, value);
	}
	
    /**
     * Sets a value of property Topic from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTopic( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TOPIC, value);
	}
    /**
     * Sets a value of property Topic from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTopic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, TOPIC, value);
	}
	
    /**
     * Sets a value of property Topic from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTopic(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), TOPIC, value);
	}
  


    /**
     * Removes a value of property Topic as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTopic( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TOPIC, value);
	}
	
    /**
     * Removes a value of property Topic as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTopic( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TOPIC, value);
	}
    /**
     * Removes a value of property Topic given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTopic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, TOPIC, value);
	}
	
    /**
     * Removes a value of property Topic given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTopic(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), TOPIC, value);
	}
  
    /**
     * Removes all values of property Topic     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTopic( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TOPIC);
	}
	
    /**
     * Removes all values of property Topic	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTopic() {
		Base.removeAll(this.model, this.getResource(), TOPIC);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ae9c52d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTotalEventDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TOTALEVENTDURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ae9c52d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTotalEventDuration() {
		return Base.has(this.model, this.getResource(), TOTALEVENTDURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ae9c52d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTotalEventDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TOTALEVENTDURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ae9c52d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTotalEventDuration( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TOTALEVENTDURATION);
	}

    /**
     * Get single value of property TotalEventDuration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTotalEventDuration_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TOTALEVENTDURATION);
	}
	
    /**
     * Get single value of property TotalEventDuration as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTotalEventDuration_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TOTALEVENTDURATION);
	}
     /**
     * Get single value of property TotalEventDuration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.xmlschema.Duration getTotalEventDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.xmlschema.Duration) Base.get(model, instanceResource, TOTALEVENTDURATION, eu.dime.ps.semantic.model.xmlschema.Duration.class);
	}
	
    /**
     * Get single value of property TotalEventDuration  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.xmlschema.Duration getTotalEventDuration() {
		return (eu.dime.ps.semantic.model.xmlschema.Duration) Base.get(this.model, this.getResource(), TOTALEVENTDURATION, eu.dime.ps.semantic.model.xmlschema.Duration.class);
	}
  
    /**
     * Adds a value to property TotalEventDuration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTotalEventDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TOTALEVENTDURATION, value, 1);
	}
	
    /**
     * Adds a value to property TotalEventDuration as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTotalEventDuration( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TOTALEVENTDURATION, value, 1);
	}
    /**
     * Adds a value to property TotalEventDuration from an instance of Duration 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTotalEventDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.xmlschema.Duration value)
    throws CardinalityException {
		Base.add(model, instanceResource, TOTALEVENTDURATION, value, 1);
	}
	
    /**
     * Adds a value to property TotalEventDuration from an instance of Duration 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTotalEventDuration(eu.dime.ps.semantic.model.xmlschema.Duration value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TOTALEVENTDURATION, value, 1);
	}
 
 

    /**
     * Sets a value of property TotalEventDuration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTotalEventDuration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TOTALEVENTDURATION, value);
	}
	
    /**
     * Sets a value of property TotalEventDuration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTotalEventDuration( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TOTALEVENTDURATION, value);
	}
    /**
     * Sets a value of property TotalEventDuration from an instance of Duration 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTotalEventDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.set(model, instanceResource, TOTALEVENTDURATION, value);
	}
	
    /**
     * Sets a value of property TotalEventDuration from an instance of Duration 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTotalEventDuration(eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.set(this.model, this.getResource(), TOTALEVENTDURATION, value);
	}
  


    /**
     * Removes a value of property TotalEventDuration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTotalEventDuration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TOTALEVENTDURATION, value);
	}
	
    /**
     * Removes a value of property TotalEventDuration as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTotalEventDuration( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TOTALEVENTDURATION, value);
	}
    /**
     * Removes a value of property TotalEventDuration given as an instance of Duration 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTotalEventDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.remove(model, instanceResource, TOTALEVENTDURATION, value);
	}
	
    /**
     * Removes a value of property TotalEventDuration given as an instance of Duration 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTotalEventDuration(eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.remove(this.model, this.getResource(), TOTALEVENTDURATION, value);
	}
  
    /**
     * Removes all values of property TotalEventDuration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTotalEventDuration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TOTALEVENTDURATION);
	}
	
    /**
     * Removes all values of property TotalEventDuration	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTotalEventDuration() {
		Base.removeAll(this.model, this.getResource(), TOTALEVENTDURATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15c41a24 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTotalModificationDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TOTALMODIFICATIONDURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15c41a24 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTotalModificationDuration() {
		return Base.has(this.model, this.getResource(), TOTALMODIFICATIONDURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15c41a24 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTotalModificationDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TOTALMODIFICATIONDURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@15c41a24 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTotalModificationDuration( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TOTALMODIFICATIONDURATION);
	}

    /**
     * Get single value of property TotalModificationDuration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTotalModificationDuration_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TOTALMODIFICATIONDURATION);
	}
	
    /**
     * Get single value of property TotalModificationDuration as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTotalModificationDuration_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TOTALMODIFICATIONDURATION);
	}
     /**
     * Get single value of property TotalModificationDuration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.xmlschema.Duration getTotalModificationDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.xmlschema.Duration) Base.get(model, instanceResource, TOTALMODIFICATIONDURATION, eu.dime.ps.semantic.model.xmlschema.Duration.class);
	}
	
    /**
     * Get single value of property TotalModificationDuration  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.xmlschema.Duration getTotalModificationDuration() {
		return (eu.dime.ps.semantic.model.xmlschema.Duration) Base.get(this.model, this.getResource(), TOTALMODIFICATIONDURATION, eu.dime.ps.semantic.model.xmlschema.Duration.class);
	}
  
    /**
     * Adds a value to property TotalModificationDuration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTotalModificationDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TOTALMODIFICATIONDURATION, value, 1);
	}
	
    /**
     * Adds a value to property TotalModificationDuration as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTotalModificationDuration( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TOTALMODIFICATIONDURATION, value, 1);
	}
    /**
     * Adds a value to property TotalModificationDuration from an instance of Duration 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTotalModificationDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.xmlschema.Duration value)
    throws CardinalityException {
		Base.add(model, instanceResource, TOTALMODIFICATIONDURATION, value, 1);
	}
	
    /**
     * Adds a value to property TotalModificationDuration from an instance of Duration 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTotalModificationDuration(eu.dime.ps.semantic.model.xmlschema.Duration value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TOTALMODIFICATIONDURATION, value, 1);
	}
 
 

    /**
     * Sets a value of property TotalModificationDuration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTotalModificationDuration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TOTALMODIFICATIONDURATION, value);
	}
	
    /**
     * Sets a value of property TotalModificationDuration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTotalModificationDuration( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TOTALMODIFICATIONDURATION, value);
	}
    /**
     * Sets a value of property TotalModificationDuration from an instance of Duration 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTotalModificationDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.set(model, instanceResource, TOTALMODIFICATIONDURATION, value);
	}
	
    /**
     * Sets a value of property TotalModificationDuration from an instance of Duration 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTotalModificationDuration(eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.set(this.model, this.getResource(), TOTALMODIFICATIONDURATION, value);
	}
  


    /**
     * Removes a value of property TotalModificationDuration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTotalModificationDuration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TOTALMODIFICATIONDURATION, value);
	}
	
    /**
     * Removes a value of property TotalModificationDuration as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTotalModificationDuration( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TOTALMODIFICATIONDURATION, value);
	}
    /**
     * Removes a value of property TotalModificationDuration given as an instance of Duration 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTotalModificationDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.remove(model, instanceResource, TOTALMODIFICATIONDURATION, value);
	}
	
    /**
     * Removes a value of property TotalModificationDuration given as an instance of Duration 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTotalModificationDuration(eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.remove(this.model, this.getResource(), TOTALMODIFICATIONDURATION, value);
	}
  
    /**
     * Removes all values of property TotalModificationDuration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTotalModificationDuration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TOTALMODIFICATIONDURATION);
	}
	
    /**
     * Removes all values of property TotalModificationDuration	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTotalModificationDuration() {
		Base.removeAll(this.model, this.getResource(), TOTALMODIFICATIONDURATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a10f4a7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTotalUsageDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TOTALUSAGEDURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a10f4a7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTotalUsageDuration() {
		return Base.has(this.model, this.getResource(), TOTALUSAGEDURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a10f4a7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTotalUsageDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TOTALUSAGEDURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a10f4a7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTotalUsageDuration( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TOTALUSAGEDURATION);
	}

    /**
     * Get single value of property TotalUsageDuration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTotalUsageDuration_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TOTALUSAGEDURATION);
	}
	
    /**
     * Get single value of property TotalUsageDuration as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTotalUsageDuration_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TOTALUSAGEDURATION);
	}
     /**
     * Get single value of property TotalUsageDuration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.xmlschema.Duration getTotalUsageDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.xmlschema.Duration) Base.get(model, instanceResource, TOTALUSAGEDURATION, eu.dime.ps.semantic.model.xmlschema.Duration.class);
	}
	
    /**
     * Get single value of property TotalUsageDuration  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.xmlschema.Duration getTotalUsageDuration() {
		return (eu.dime.ps.semantic.model.xmlschema.Duration) Base.get(this.model, this.getResource(), TOTALUSAGEDURATION, eu.dime.ps.semantic.model.xmlschema.Duration.class);
	}
  
    /**
     * Adds a value to property TotalUsageDuration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTotalUsageDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TOTALUSAGEDURATION, value, 1);
	}
	
    /**
     * Adds a value to property TotalUsageDuration as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTotalUsageDuration( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TOTALUSAGEDURATION, value, 1);
	}
    /**
     * Adds a value to property TotalUsageDuration from an instance of Duration 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTotalUsageDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.xmlschema.Duration value)
    throws CardinalityException {
		Base.add(model, instanceResource, TOTALUSAGEDURATION, value, 1);
	}
	
    /**
     * Adds a value to property TotalUsageDuration from an instance of Duration 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTotalUsageDuration(eu.dime.ps.semantic.model.xmlschema.Duration value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TOTALUSAGEDURATION, value, 1);
	}
 
 

    /**
     * Sets a value of property TotalUsageDuration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTotalUsageDuration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TOTALUSAGEDURATION, value);
	}
	
    /**
     * Sets a value of property TotalUsageDuration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTotalUsageDuration( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TOTALUSAGEDURATION, value);
	}
    /**
     * Sets a value of property TotalUsageDuration from an instance of Duration 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTotalUsageDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.set(model, instanceResource, TOTALUSAGEDURATION, value);
	}
	
    /**
     * Sets a value of property TotalUsageDuration from an instance of Duration 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTotalUsageDuration(eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.set(this.model, this.getResource(), TOTALUSAGEDURATION, value);
	}
  


    /**
     * Removes a value of property TotalUsageDuration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTotalUsageDuration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TOTALUSAGEDURATION, value);
	}
	
    /**
     * Removes a value of property TotalUsageDuration as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTotalUsageDuration( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TOTALUSAGEDURATION, value);
	}
    /**
     * Removes a value of property TotalUsageDuration given as an instance of Duration 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTotalUsageDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.remove(model, instanceResource, TOTALUSAGEDURATION, value);
	}
	
    /**
     * Removes a value of property TotalUsageDuration given as an instance of Duration 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTotalUsageDuration(eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.remove(this.model, this.getResource(), TOTALUSAGEDURATION, value);
	}
  
    /**
     * Removes all values of property TotalUsageDuration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTotalUsageDuration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TOTALUSAGEDURATION);
	}
	
    /**
     * Removes all values of property TotalUsageDuration	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTotalUsageDuration() {
		Base.removeAll(this.model, this.getResource(), TOTALUSAGEDURATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49be4a09 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49be4a09 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasType() {
		return Base.has(this.model, this.getResource(), TYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49be4a09 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49be4a09 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TYPE);
	}

     /**
     * Get all values of property Type as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TYPE);
	}
	
    /**
     * Get all values of property Type as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllType_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Type as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllType_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TYPE);
	}

    /**
     * Get all values of property Type as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllType_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Type     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTypes(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Type as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTypes_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Type     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllTypes() {
		return Base.getAll(this.model, this.getResource(), TYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Type as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllTypes_as() {
		return Base.getAll_as(this.model, this.getResource(), TYPE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Type as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TYPE, value);
	}
	
    /**
     * Adds a value to property Type as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addType( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TYPE, value);
	}
    /**
     * Adds a value to property Type from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, TYPE, value);
	}
	
    /**
     * Adds a value to property Type from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addType(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), TYPE, value);
	}
  

    /**
     * Sets a value of property Type from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TYPE, value);
	}
	
    /**
     * Sets a value of property Type from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TYPE, value);
	}
    /**
     * Sets a value of property Type from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, TYPE, value);
	}
	
    /**
     * Sets a value of property Type from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setType(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), TYPE, value);
	}
  


    /**
     * Removes a value of property Type as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TYPE, value);
	}
	
    /**
     * Removes a value of property Type as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TYPE, value);
	}
    /**
     * Removes a value of property Type given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, TYPE, value);
	}
	
    /**
     * Removes a value of property Type given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeType(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), TYPE, value);
	}
  
    /**
     * Removes all values of property Type     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TYPE);
	}
	
    /**
     * Removes all values of property Type	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllType() {
		Base.removeAll(this.model, this.getResource(), TYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b6fe24b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUsageCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, USAGECOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b6fe24b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUsageCount() {
		return Base.has(this.model, this.getResource(), USAGECOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b6fe24b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUsageCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, USAGECOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b6fe24b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUsageCount( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), USAGECOUNT);
	}

    /**
     * Get single value of property UsageCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getUsageCount_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, USAGECOUNT);
	}
	
    /**
     * Get single value of property UsageCount as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getUsageCount_asNode() {
		return Base.get_asNode(this.model, this.getResource(), USAGECOUNT);
	}
     /**
     * Get single value of property UsageCount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getUsageCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, USAGECOUNT, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property UsageCount  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getUsageCount() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), USAGECOUNT, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property UsageCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addUsageCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, USAGECOUNT, value, 1);
	}
	
    /**
     * Adds a value to property UsageCount as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addUsageCount( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), USAGECOUNT, value, 1);
	}
    /**
     * Adds a value to property UsageCount from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addUsageCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, USAGECOUNT, value, 1);
	}
	
    /**
     * Adds a value to property UsageCount from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addUsageCount(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), USAGECOUNT, value, 1);
	}
 
 

    /**
     * Sets a value of property UsageCount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUsageCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, USAGECOUNT, value);
	}
	
    /**
     * Sets a value of property UsageCount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUsageCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), USAGECOUNT, value);
	}
    /**
     * Sets a value of property UsageCount from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUsageCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, USAGECOUNT, value);
	}
	
    /**
     * Sets a value of property UsageCount from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUsageCount(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), USAGECOUNT, value);
	}
  


    /**
     * Removes a value of property UsageCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUsageCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, USAGECOUNT, value);
	}
	
    /**
     * Removes a value of property UsageCount as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUsageCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), USAGECOUNT, value);
	}
    /**
     * Removes a value of property UsageCount given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUsageCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, USAGECOUNT, value);
	}
	
    /**
     * Removes a value of property UsageCount given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUsageCount(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), USAGECOUNT, value);
	}
  
    /**
     * Removes all values of property UsageCount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUsageCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, USAGECOUNT);
	}
	
    /**
     * Removes all values of property UsageCount	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUsageCount() {
		Base.removeAll(this.model, this.getResource(), USAGECOUNT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26fda07e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUserVisible(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, USERVISIBLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26fda07e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUserVisible() {
		return Base.has(this.model, this.getResource(), USERVISIBLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26fda07e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUserVisible(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, USERVISIBLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26fda07e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUserVisible( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), USERVISIBLE);
	}

    /**
     * Get single value of property UserVisible as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getUserVisible_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, USERVISIBLE);
	}
	
    /**
     * Get single value of property UserVisible as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getUserVisible_asNode() {
		return Base.get_asNode(this.model, this.getResource(), USERVISIBLE);
	}
     /**
     * Get single value of property UserVisible     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Boolean getUserVisible(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Boolean) Base.get(model, instanceResource, USERVISIBLE, java.lang.Boolean.class);
	}
	
    /**
     * Get single value of property UserVisible  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Boolean getUserVisible() {
		return (java.lang.Boolean) Base.get(this.model, this.getResource(), USERVISIBLE, java.lang.Boolean.class);
	}
  
    /**
     * Adds a value to property UserVisible as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addUserVisible(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, USERVISIBLE, value, 1);
	}
	
    /**
     * Adds a value to property UserVisible as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addUserVisible( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), USERVISIBLE, value, 1);
	}
    /**
     * Adds a value to property UserVisible from an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addUserVisible(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value)
    throws CardinalityException {
		Base.add(model, instanceResource, USERVISIBLE, value, 1);
	}
	
    /**
     * Adds a value to property UserVisible from an instance of java.lang.Boolean 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addUserVisible(java.lang.Boolean value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), USERVISIBLE, value, 1);
	}
 
 

    /**
     * Sets a value of property UserVisible from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUserVisible( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, USERVISIBLE, value);
	}
	
    /**
     * Sets a value of property UserVisible from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUserVisible( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), USERVISIBLE, value);
	}
    /**
     * Sets a value of property UserVisible from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUserVisible(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.set(model, instanceResource, USERVISIBLE, value);
	}
	
    /**
     * Sets a value of property UserVisible from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUserVisible(java.lang.Boolean value) {
		Base.set(this.model, this.getResource(), USERVISIBLE, value);
	}
  


    /**
     * Removes a value of property UserVisible as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUserVisible( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, USERVISIBLE, value);
	}
	
    /**
     * Removes a value of property UserVisible as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUserVisible( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), USERVISIBLE, value);
	}
    /**
     * Removes a value of property UserVisible given as an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUserVisible(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.remove(model, instanceResource, USERVISIBLE, value);
	}
	
    /**
     * Removes a value of property UserVisible given as an instance of java.lang.Boolean 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUserVisible(java.lang.Boolean value) {
		Base.remove(this.model, this.getResource(), USERVISIBLE, value);
	}
  
    /**
     * Removes all values of property UserVisible     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUserVisible( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, USERVISIBLE);
	}
	
    /**
     * Removes all values of property UserVisible	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUserVisible() {
		Base.removeAll(this.model, this.getResource(), USERVISIBLE);
	}
	
	
	public static final URI PREFLABEL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#prefLabel", false);
	public static boolean hasPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PREFLABEL);
	}
	public boolean hasPrefLabel() {
		return Base.has(this.model, this.getResource(), PREFLABEL);
	}
	public static boolean hasPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PREFLABEL);
	}
	public boolean hasPrefLabel( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PREFLABEL);
	}
	public static org.ontoware.rdf2go.model.node.Node getPrefLabel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, PREFLABEL);
	}
	public org.ontoware.rdf2go.model.node.Node getPrefLabel_asNode() {
		return Base.get_asNode(this.model, this.getResource(), PREFLABEL);
	}
	public static java.lang.String getPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, PREFLABEL, java.lang.String.class);
	}
	public java.lang.String getPrefLabel() {
		return (java.lang.String) Base.get(this.model, this.getResource(), PREFLABEL, java.lang.String.class);
	}
	public static void addPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, PREFLABEL, value, 1);
	}
	public void addPrefLabel( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PREFLABEL, value, 1);
	}
	public static void addPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, PREFLABEL, value, 1);
	}
	public void addPrefLabel(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PREFLABEL, value, 1);
	}
	public static void setPrefLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PREFLABEL, value);
	}
	public void setPrefLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PREFLABEL, value);
	}
	public static void setPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PREFLABEL, value);
	}
	public void setPrefLabel(java.lang.String value) {
		Base.set(this.model, this.getResource(), PREFLABEL, value);
	}
	public static void removePrefLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PREFLABEL, value);
	}
	public void removePrefLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PREFLABEL, value);
	}
	public static void removePrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PREFLABEL, value);
	}
	public void removePrefLabel(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PREFLABEL, value);
	}
	public static void removeAllPrefLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PREFLABEL);
	}
	public void removeAllPrefLabel() {
		Base.removeAll(this.model, this.getResource(), PREFLABEL);
	}

 }