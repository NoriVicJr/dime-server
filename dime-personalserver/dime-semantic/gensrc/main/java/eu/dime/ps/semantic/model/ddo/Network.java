package eu.dime.ps.semantic.model.ddo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Connected </li>
 *   <li> NetworkID </li>
 *   <li> NetworkSpeed </li>
 *   <li> Signal </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Network extends eu.dime.ps.semantic.model.RDFReactorThing {

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#Network */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#Network", false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#connected */
    @SuppressWarnings("hiding")
	public static final URI CONNECTED = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#connected",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#networkID */
    @SuppressWarnings("hiding")
	public static final URI NETWORKID = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#networkID",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#networkSpeed */
    @SuppressWarnings("hiding")
	public static final URI NETWORKSPEED = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#networkSpeed",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#signal */
    @SuppressWarnings("hiding")
	public static final URI SIGNAL = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#signal",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#connected",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#networkID",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#networkSpeed",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#signal",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Network (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Network (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Network (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Network (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Network (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Network  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Network  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Network.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#Network).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Network> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Network.class );
	}

    /**
	 * Remove rdf:type Network from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Connection' to this Network instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllConnection_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.dcon.Connectivity.CONNECTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Connection' to this Network instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllConnection_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.dcon.Connectivity.CONNECTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Connection' to this Network instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllConnection_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.dcon.Connectivity.CONNECTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'KnownNetwork' to this Network instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllKnownNetwork_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.ddo.Device.KNOWNNETWORK, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'KnownNetwork' to this Network instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllKnownNetwork_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.ddo.Device.KNOWNNETWORK, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'KnownNetwork' to this Network instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllKnownNetwork_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.ddo.Device.KNOWNNETWORK, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c9b085d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasConnected(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONNECTED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c9b085d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasConnected() {
		return Base.has(this.model, this.getResource(), CONNECTED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c9b085d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasConnected(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONNECTED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c9b085d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasConnected( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONNECTED);
	}

     /**
     * Get all values of property Connected as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllConnected_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONNECTED);
	}
	
    /**
     * Get all values of property Connected as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllConnected_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONNECTED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Connected as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllConnected_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONNECTED);
	}

    /**
     * Get all values of property Connected as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllConnected_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONNECTED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Connected     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Boolean> getAllConnected(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONNECTED, java.lang.Boolean.class);
	}
	
    /**
     * Get all values of property Connected as a ReactorResult of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Boolean> getAllConnected_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONNECTED, java.lang.Boolean.class);
	}

    /**
     * Get all values of property Connected     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Boolean> getAllConnected() {
		return Base.getAll(this.model, this.getResource(), CONNECTED, java.lang.Boolean.class);
	}

    /**
     * Get all values of property Connected as a ReactorResult of java.lang.Boolean 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Boolean> getAllConnected_as() {
		return Base.getAll_as(this.model, this.getResource(), CONNECTED, java.lang.Boolean.class);
	}
 
    /**
     * Adds a value to property Connected as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addConnected(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONNECTED, value);
	}
	
    /**
     * Adds a value to property Connected as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addConnected( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONNECTED, value);
	}
    /**
     * Adds a value to property Connected from an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addConnected(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.add(model, instanceResource, CONNECTED, value);
	}
	
    /**
     * Adds a value to property Connected from an instance of java.lang.Boolean 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addConnected(java.lang.Boolean value) {
		Base.add(this.model, this.getResource(), CONNECTED, value);
	}
  

    /**
     * Sets a value of property Connected from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setConnected( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONNECTED, value);
	}
	
    /**
     * Sets a value of property Connected from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setConnected( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONNECTED, value);
	}
    /**
     * Sets a value of property Connected from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setConnected(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.set(model, instanceResource, CONNECTED, value);
	}
	
    /**
     * Sets a value of property Connected from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setConnected(java.lang.Boolean value) {
		Base.set(this.model, this.getResource(), CONNECTED, value);
	}
  


    /**
     * Removes a value of property Connected as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeConnected( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONNECTED, value);
	}
	
    /**
     * Removes a value of property Connected as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeConnected( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONNECTED, value);
	}
    /**
     * Removes a value of property Connected given as an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeConnected(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.remove(model, instanceResource, CONNECTED, value);
	}
	
    /**
     * Removes a value of property Connected given as an instance of java.lang.Boolean 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeConnected(java.lang.Boolean value) {
		Base.remove(this.model, this.getResource(), CONNECTED, value);
	}
  
    /**
     * Removes all values of property Connected     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllConnected( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONNECTED);
	}
	
    /**
     * Removes all values of property Connected	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllConnected() {
		Base.removeAll(this.model, this.getResource(), CONNECTED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b541798 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNetworkID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NETWORKID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b541798 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNetworkID() {
		return Base.has(this.model, this.getResource(), NETWORKID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b541798 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNetworkID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NETWORKID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b541798 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNetworkID( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NETWORKID);
	}

     /**
     * Get all values of property NetworkID as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNetworkID_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NETWORKID);
	}
	
    /**
     * Get all values of property NetworkID as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNetworkID_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NETWORKID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NetworkID as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNetworkID_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NETWORKID);
	}

    /**
     * Get all values of property NetworkID as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNetworkID_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NETWORKID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NetworkID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllNetworkID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NETWORKID, java.lang.String.class);
	}
	
    /**
     * Get all values of property NetworkID as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllNetworkID_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NETWORKID, java.lang.String.class);
	}

    /**
     * Get all values of property NetworkID     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllNetworkID() {
		return Base.getAll(this.model, this.getResource(), NETWORKID, java.lang.String.class);
	}

    /**
     * Get all values of property NetworkID as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllNetworkID_as() {
		return Base.getAll_as(this.model, this.getResource(), NETWORKID, java.lang.String.class);
	}
 
    /**
     * Adds a value to property NetworkID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNetworkID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NETWORKID, value);
	}
	
    /**
     * Adds a value to property NetworkID as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNetworkID( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NETWORKID, value);
	}
    /**
     * Adds a value to property NetworkID from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNetworkID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NETWORKID, value);
	}
	
    /**
     * Adds a value to property NetworkID from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNetworkID(java.lang.String value) {
		Base.add(this.model, this.getResource(), NETWORKID, value);
	}
  

    /**
     * Sets a value of property NetworkID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNetworkID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NETWORKID, value);
	}
	
    /**
     * Sets a value of property NetworkID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNetworkID( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NETWORKID, value);
	}
    /**
     * Sets a value of property NetworkID from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNetworkID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NETWORKID, value);
	}
	
    /**
     * Sets a value of property NetworkID from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNetworkID(java.lang.String value) {
		Base.set(this.model, this.getResource(), NETWORKID, value);
	}
  


    /**
     * Removes a value of property NetworkID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNetworkID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NETWORKID, value);
	}
	
    /**
     * Removes a value of property NetworkID as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNetworkID( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NETWORKID, value);
	}
    /**
     * Removes a value of property NetworkID given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNetworkID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NETWORKID, value);
	}
	
    /**
     * Removes a value of property NetworkID given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNetworkID(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NETWORKID, value);
	}
  
    /**
     * Removes all values of property NetworkID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNetworkID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NETWORKID);
	}
	
    /**
     * Removes all values of property NetworkID	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNetworkID() {
		Base.removeAll(this.model, this.getResource(), NETWORKID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ad4b61 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNetworkSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NETWORKSPEED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ad4b61 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNetworkSpeed() {
		return Base.has(this.model, this.getResource(), NETWORKSPEED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ad4b61 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNetworkSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NETWORKSPEED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ad4b61 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNetworkSpeed( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NETWORKSPEED);
	}

     /**
     * Get all values of property NetworkSpeed as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNetworkSpeed_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NETWORKSPEED);
	}
	
    /**
     * Get all values of property NetworkSpeed as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNetworkSpeed_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NETWORKSPEED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NetworkSpeed as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNetworkSpeed_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NETWORKSPEED);
	}

    /**
     * Get all values of property NetworkSpeed as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNetworkSpeed_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NETWORKSPEED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NetworkSpeed     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllNetworkSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NETWORKSPEED, java.lang.Float.class);
	}
	
    /**
     * Get all values of property NetworkSpeed as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllNetworkSpeed_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NETWORKSPEED, java.lang.Float.class);
	}

    /**
     * Get all values of property NetworkSpeed     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllNetworkSpeed() {
		return Base.getAll(this.model, this.getResource(), NETWORKSPEED, java.lang.Float.class);
	}

    /**
     * Get all values of property NetworkSpeed as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllNetworkSpeed_as() {
		return Base.getAll_as(this.model, this.getResource(), NETWORKSPEED, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property NetworkSpeed as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNetworkSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NETWORKSPEED, value);
	}
	
    /**
     * Adds a value to property NetworkSpeed as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNetworkSpeed( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NETWORKSPEED, value);
	}
    /**
     * Adds a value to property NetworkSpeed from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNetworkSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, NETWORKSPEED, value);
	}
	
    /**
     * Adds a value to property NetworkSpeed from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNetworkSpeed(java.lang.Float value) {
		Base.add(this.model, this.getResource(), NETWORKSPEED, value);
	}
  

    /**
     * Sets a value of property NetworkSpeed from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNetworkSpeed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NETWORKSPEED, value);
	}
	
    /**
     * Sets a value of property NetworkSpeed from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNetworkSpeed( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NETWORKSPEED, value);
	}
    /**
     * Sets a value of property NetworkSpeed from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNetworkSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, NETWORKSPEED, value);
	}
	
    /**
     * Sets a value of property NetworkSpeed from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNetworkSpeed(java.lang.Float value) {
		Base.set(this.model, this.getResource(), NETWORKSPEED, value);
	}
  


    /**
     * Removes a value of property NetworkSpeed as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNetworkSpeed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NETWORKSPEED, value);
	}
	
    /**
     * Removes a value of property NetworkSpeed as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNetworkSpeed( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NETWORKSPEED, value);
	}
    /**
     * Removes a value of property NetworkSpeed given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNetworkSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, NETWORKSPEED, value);
	}
	
    /**
     * Removes a value of property NetworkSpeed given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNetworkSpeed(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), NETWORKSPEED, value);
	}
  
    /**
     * Removes all values of property NetworkSpeed     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNetworkSpeed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NETWORKSPEED);
	}
	
    /**
     * Removes all values of property NetworkSpeed	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNetworkSpeed() {
		Base.removeAll(this.model, this.getResource(), NETWORKSPEED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6cd0d5b5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSignal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SIGNAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6cd0d5b5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSignal() {
		return Base.has(this.model, this.getResource(), SIGNAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6cd0d5b5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSignal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SIGNAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6cd0d5b5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSignal( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SIGNAL);
	}

     /**
     * Get all values of property Signal as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSignal_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SIGNAL);
	}
	
    /**
     * Get all values of property Signal as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSignal_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SIGNAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Signal as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSignal_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SIGNAL);
	}

    /**
     * Get all values of property Signal as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSignal_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SIGNAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Signal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllSignal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SIGNAL, java.lang.Float.class);
	}
	
    /**
     * Get all values of property Signal as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllSignal_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SIGNAL, java.lang.Float.class);
	}

    /**
     * Get all values of property Signal     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllSignal() {
		return Base.getAll(this.model, this.getResource(), SIGNAL, java.lang.Float.class);
	}

    /**
     * Get all values of property Signal as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllSignal_as() {
		return Base.getAll_as(this.model, this.getResource(), SIGNAL, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property Signal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSignal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SIGNAL, value);
	}
	
    /**
     * Adds a value to property Signal as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSignal( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SIGNAL, value);
	}
    /**
     * Adds a value to property Signal from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSignal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, SIGNAL, value);
	}
	
    /**
     * Adds a value to property Signal from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSignal(java.lang.Float value) {
		Base.add(this.model, this.getResource(), SIGNAL, value);
	}
  

    /**
     * Sets a value of property Signal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSignal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SIGNAL, value);
	}
	
    /**
     * Sets a value of property Signal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSignal( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SIGNAL, value);
	}
    /**
     * Sets a value of property Signal from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSignal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, SIGNAL, value);
	}
	
    /**
     * Sets a value of property Signal from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSignal(java.lang.Float value) {
		Base.set(this.model, this.getResource(), SIGNAL, value);
	}
  


    /**
     * Removes a value of property Signal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSignal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SIGNAL, value);
	}
	
    /**
     * Removes a value of property Signal as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSignal( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SIGNAL, value);
	}
    /**
     * Removes a value of property Signal given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSignal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, SIGNAL, value);
	}
	
    /**
     * Removes a value of property Signal given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSignal(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), SIGNAL, value);
	}
  
    /**
     * Removes all values of property Signal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSignal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SIGNAL);
	}
	
    /**
     * Removes all values of property Signal	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSignal() {
		Base.removeAll(this.model, this.getResource(), SIGNAL);
	}
 }