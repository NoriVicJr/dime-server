/*
* Copyright 2013 by the digital.me project (http://www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.dcon;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> AverageDirection </li>
 *   <li> AverageSpeed </li>
 *   <li> CurrentAbsoluteAltitude </li>
 *   <li> CurrentAltitude </li>
 *   <li> CurrentPlace </li>
 *   <li> CurrentTime </li>
 *   <li> NearbyEvent </li>
 *   <li> NearbyPlace </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class SpaTem extends eu.dime.ps.semantic.model.dcon.Aspect {

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#SpaTem */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#SpaTem", false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#averageDirection */
    @SuppressWarnings("hiding")
	public static final URI AVERAGEDIRECTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#averageDirection",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#averageSpeed */
    @SuppressWarnings("hiding")
	public static final URI AVERAGESPEED = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#averageSpeed",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#currentAbsoluteAltitude */
    @SuppressWarnings("hiding")
	public static final URI CURRENTABSOLUTEALTITUDE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#currentAbsoluteAltitude",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#currentAltitude */
    @SuppressWarnings("hiding")
	public static final URI CURRENTALTITUDE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#currentAltitude",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#currentPlace */
    @SuppressWarnings("hiding")
	public static final URI CURRENTPLACE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#currentPlace",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#currentTime */
    @SuppressWarnings("hiding")
	public static final URI CURRENTTIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#currentTime",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#nearbyEvent */
    @SuppressWarnings("hiding")
	public static final URI NEARBYEVENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#nearbyEvent",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#nearbyPlace */
    @SuppressWarnings("hiding")
	public static final URI NEARBYPLACE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#nearbyPlace",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#averageDirection",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#averageSpeed",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#currentAbsoluteAltitude",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#currentAltitude",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#currentPlace",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#currentTime",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#nearbyEvent",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#nearbyPlace",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected SpaTem (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public SpaTem (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public SpaTem (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public SpaTem (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public SpaTem (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of SpaTem  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static SpaTem  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, SpaTem.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#SpaTem).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends SpaTem> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, SpaTem.class );
	}

    /**
	 * Remove rdf:type SpaTem from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SpaTem' to this SpaTem instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSpaTem_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.SPATEM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SpaTem' to this SpaTem instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSpaTem_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.SPATEM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SpaTem' to this SpaTem instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSpaTem_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.SPATEM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61bb3dbf has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAverageDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, AVERAGEDIRECTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61bb3dbf has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAverageDirection() {
		return Base.has(this.model, this.getResource(), AVERAGEDIRECTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61bb3dbf has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAverageDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, AVERAGEDIRECTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61bb3dbf has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAverageDirection( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), AVERAGEDIRECTION);
	}

     /**
     * Get all values of property AverageDirection as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAverageDirection_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, AVERAGEDIRECTION);
	}
	
    /**
     * Get all values of property AverageDirection as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAverageDirection_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AVERAGEDIRECTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AverageDirection as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAverageDirection_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), AVERAGEDIRECTION);
	}

    /**
     * Get all values of property AverageDirection as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAverageDirection_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), AVERAGEDIRECTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AverageDirection     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dpo.Direction> getAllAverageDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, AVERAGEDIRECTION, eu.dime.ps.semantic.model.dpo.Direction.class);
	}
	
    /**
     * Get all values of property AverageDirection as a ReactorResult of Direction 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dpo.Direction> getAllAverageDirection_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AVERAGEDIRECTION, eu.dime.ps.semantic.model.dpo.Direction.class);
	}

    /**
     * Get all values of property AverageDirection     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dpo.Direction> getAllAverageDirection() {
		return Base.getAll(this.model, this.getResource(), AVERAGEDIRECTION, eu.dime.ps.semantic.model.dpo.Direction.class);
	}

    /**
     * Get all values of property AverageDirection as a ReactorResult of Direction 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dpo.Direction> getAllAverageDirection_as() {
		return Base.getAll_as(this.model, this.getResource(), AVERAGEDIRECTION, eu.dime.ps.semantic.model.dpo.Direction.class);
	}
 
    /**
     * Adds a value to property AverageDirection as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAverageDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, AVERAGEDIRECTION, value);
	}
	
    /**
     * Adds a value to property AverageDirection as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAverageDirection( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), AVERAGEDIRECTION, value);
	}
    /**
     * Adds a value to property AverageDirection from an instance of Direction 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAverageDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Direction value) {
		Base.add(model, instanceResource, AVERAGEDIRECTION, value);
	}
	
    /**
     * Adds a value to property AverageDirection from an instance of Direction 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAverageDirection(eu.dime.ps.semantic.model.dpo.Direction value) {
		Base.add(this.model, this.getResource(), AVERAGEDIRECTION, value);
	}
  

    /**
     * Sets a value of property AverageDirection from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAverageDirection( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, AVERAGEDIRECTION, value);
	}
	
    /**
     * Sets a value of property AverageDirection from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAverageDirection( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), AVERAGEDIRECTION, value);
	}
    /**
     * Sets a value of property AverageDirection from an instance of Direction 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAverageDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Direction value) {
		Base.set(model, instanceResource, AVERAGEDIRECTION, value);
	}
	
    /**
     * Sets a value of property AverageDirection from an instance of Direction 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAverageDirection(eu.dime.ps.semantic.model.dpo.Direction value) {
		Base.set(this.model, this.getResource(), AVERAGEDIRECTION, value);
	}
  


    /**
     * Removes a value of property AverageDirection as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAverageDirection( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, AVERAGEDIRECTION, value);
	}
	
    /**
     * Removes a value of property AverageDirection as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAverageDirection( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), AVERAGEDIRECTION, value);
	}
    /**
     * Removes a value of property AverageDirection given as an instance of Direction 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAverageDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Direction value) {
		Base.remove(model, instanceResource, AVERAGEDIRECTION, value);
	}
	
    /**
     * Removes a value of property AverageDirection given as an instance of Direction 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAverageDirection(eu.dime.ps.semantic.model.dpo.Direction value) {
		Base.remove(this.model, this.getResource(), AVERAGEDIRECTION, value);
	}
  
    /**
     * Removes all values of property AverageDirection     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAverageDirection( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, AVERAGEDIRECTION);
	}
	
    /**
     * Removes all values of property AverageDirection	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAverageDirection() {
		Base.removeAll(this.model, this.getResource(), AVERAGEDIRECTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22976eda has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAverageSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, AVERAGESPEED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22976eda has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAverageSpeed() {
		return Base.has(this.model, this.getResource(), AVERAGESPEED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22976eda has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAverageSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, AVERAGESPEED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22976eda has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAverageSpeed( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), AVERAGESPEED);
	}

     /**
     * Get all values of property AverageSpeed as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAverageSpeed_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, AVERAGESPEED);
	}
	
    /**
     * Get all values of property AverageSpeed as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAverageSpeed_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AVERAGESPEED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AverageSpeed as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAverageSpeed_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), AVERAGESPEED);
	}

    /**
     * Get all values of property AverageSpeed as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAverageSpeed_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), AVERAGESPEED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AverageSpeed     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dpo.Movement> getAllAverageSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, AVERAGESPEED, eu.dime.ps.semantic.model.dpo.Movement.class);
	}
	
    /**
     * Get all values of property AverageSpeed as a ReactorResult of Movement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dpo.Movement> getAllAverageSpeed_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AVERAGESPEED, eu.dime.ps.semantic.model.dpo.Movement.class);
	}

    /**
     * Get all values of property AverageSpeed     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dpo.Movement> getAllAverageSpeed() {
		return Base.getAll(this.model, this.getResource(), AVERAGESPEED, eu.dime.ps.semantic.model.dpo.Movement.class);
	}

    /**
     * Get all values of property AverageSpeed as a ReactorResult of Movement 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dpo.Movement> getAllAverageSpeed_as() {
		return Base.getAll_as(this.model, this.getResource(), AVERAGESPEED, eu.dime.ps.semantic.model.dpo.Movement.class);
	}
 
    /**
     * Adds a value to property AverageSpeed as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAverageSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, AVERAGESPEED, value);
	}
	
    /**
     * Adds a value to property AverageSpeed as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAverageSpeed( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), AVERAGESPEED, value);
	}
    /**
     * Adds a value to property AverageSpeed from an instance of Movement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAverageSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Movement value) {
		Base.add(model, instanceResource, AVERAGESPEED, value);
	}
	
    /**
     * Adds a value to property AverageSpeed from an instance of Movement 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAverageSpeed(eu.dime.ps.semantic.model.dpo.Movement value) {
		Base.add(this.model, this.getResource(), AVERAGESPEED, value);
	}
  

    /**
     * Sets a value of property AverageSpeed from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAverageSpeed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, AVERAGESPEED, value);
	}
	
    /**
     * Sets a value of property AverageSpeed from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAverageSpeed( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), AVERAGESPEED, value);
	}
    /**
     * Sets a value of property AverageSpeed from an instance of Movement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAverageSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Movement value) {
		Base.set(model, instanceResource, AVERAGESPEED, value);
	}
	
    /**
     * Sets a value of property AverageSpeed from an instance of Movement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAverageSpeed(eu.dime.ps.semantic.model.dpo.Movement value) {
		Base.set(this.model, this.getResource(), AVERAGESPEED, value);
	}
  


    /**
     * Removes a value of property AverageSpeed as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAverageSpeed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, AVERAGESPEED, value);
	}
	
    /**
     * Removes a value of property AverageSpeed as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAverageSpeed( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), AVERAGESPEED, value);
	}
    /**
     * Removes a value of property AverageSpeed given as an instance of Movement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAverageSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Movement value) {
		Base.remove(model, instanceResource, AVERAGESPEED, value);
	}
	
    /**
     * Removes a value of property AverageSpeed given as an instance of Movement 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAverageSpeed(eu.dime.ps.semantic.model.dpo.Movement value) {
		Base.remove(this.model, this.getResource(), AVERAGESPEED, value);
	}
  
    /**
     * Removes all values of property AverageSpeed     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAverageSpeed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, AVERAGESPEED);
	}
	
    /**
     * Removes all values of property AverageSpeed	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAverageSpeed() {
		Base.removeAll(this.model, this.getResource(), AVERAGESPEED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17c58ca5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCurrentAbsoluteAltitude(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CURRENTABSOLUTEALTITUDE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17c58ca5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCurrentAbsoluteAltitude() {
		return Base.has(this.model, this.getResource(), CURRENTABSOLUTEALTITUDE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17c58ca5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCurrentAbsoluteAltitude(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CURRENTABSOLUTEALTITUDE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17c58ca5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCurrentAbsoluteAltitude( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CURRENTABSOLUTEALTITUDE);
	}

     /**
     * Get all values of property CurrentAbsoluteAltitude as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCurrentAbsoluteAltitude_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CURRENTABSOLUTEALTITUDE);
	}
	
    /**
     * Get all values of property CurrentAbsoluteAltitude as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCurrentAbsoluteAltitude_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CURRENTABSOLUTEALTITUDE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property CurrentAbsoluteAltitude as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCurrentAbsoluteAltitude_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CURRENTABSOLUTEALTITUDE);
	}

    /**
     * Get all values of property CurrentAbsoluteAltitude as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCurrentAbsoluteAltitude_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CURRENTABSOLUTEALTITUDE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property CurrentAbsoluteAltitude     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dpo.Altitude> getAllCurrentAbsoluteAltitude(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CURRENTABSOLUTEALTITUDE, eu.dime.ps.semantic.model.dpo.Altitude.class);
	}
	
    /**
     * Get all values of property CurrentAbsoluteAltitude as a ReactorResult of Altitude 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dpo.Altitude> getAllCurrentAbsoluteAltitude_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CURRENTABSOLUTEALTITUDE, eu.dime.ps.semantic.model.dpo.Altitude.class);
	}

    /**
     * Get all values of property CurrentAbsoluteAltitude     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dpo.Altitude> getAllCurrentAbsoluteAltitude() {
		return Base.getAll(this.model, this.getResource(), CURRENTABSOLUTEALTITUDE, eu.dime.ps.semantic.model.dpo.Altitude.class);
	}

    /**
     * Get all values of property CurrentAbsoluteAltitude as a ReactorResult of Altitude 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dpo.Altitude> getAllCurrentAbsoluteAltitude_as() {
		return Base.getAll_as(this.model, this.getResource(), CURRENTABSOLUTEALTITUDE, eu.dime.ps.semantic.model.dpo.Altitude.class);
	}
 
    /**
     * Adds a value to property CurrentAbsoluteAltitude as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCurrentAbsoluteAltitude(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CURRENTABSOLUTEALTITUDE, value);
	}
	
    /**
     * Adds a value to property CurrentAbsoluteAltitude as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCurrentAbsoluteAltitude( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CURRENTABSOLUTEALTITUDE, value);
	}
    /**
     * Adds a value to property CurrentAbsoluteAltitude from an instance of Altitude 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCurrentAbsoluteAltitude(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Altitude value) {
		Base.add(model, instanceResource, CURRENTABSOLUTEALTITUDE, value);
	}
	
    /**
     * Adds a value to property CurrentAbsoluteAltitude from an instance of Altitude 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCurrentAbsoluteAltitude(eu.dime.ps.semantic.model.dpo.Altitude value) {
		Base.add(this.model, this.getResource(), CURRENTABSOLUTEALTITUDE, value);
	}
  

    /**
     * Sets a value of property CurrentAbsoluteAltitude from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCurrentAbsoluteAltitude( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CURRENTABSOLUTEALTITUDE, value);
	}
	
    /**
     * Sets a value of property CurrentAbsoluteAltitude from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCurrentAbsoluteAltitude( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CURRENTABSOLUTEALTITUDE, value);
	}
    /**
     * Sets a value of property CurrentAbsoluteAltitude from an instance of Altitude 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCurrentAbsoluteAltitude(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Altitude value) {
		Base.set(model, instanceResource, CURRENTABSOLUTEALTITUDE, value);
	}
	
    /**
     * Sets a value of property CurrentAbsoluteAltitude from an instance of Altitude 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCurrentAbsoluteAltitude(eu.dime.ps.semantic.model.dpo.Altitude value) {
		Base.set(this.model, this.getResource(), CURRENTABSOLUTEALTITUDE, value);
	}
  


    /**
     * Removes a value of property CurrentAbsoluteAltitude as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCurrentAbsoluteAltitude( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CURRENTABSOLUTEALTITUDE, value);
	}
	
    /**
     * Removes a value of property CurrentAbsoluteAltitude as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCurrentAbsoluteAltitude( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CURRENTABSOLUTEALTITUDE, value);
	}
    /**
     * Removes a value of property CurrentAbsoluteAltitude given as an instance of Altitude 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCurrentAbsoluteAltitude(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Altitude value) {
		Base.remove(model, instanceResource, CURRENTABSOLUTEALTITUDE, value);
	}
	
    /**
     * Removes a value of property CurrentAbsoluteAltitude given as an instance of Altitude 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCurrentAbsoluteAltitude(eu.dime.ps.semantic.model.dpo.Altitude value) {
		Base.remove(this.model, this.getResource(), CURRENTABSOLUTEALTITUDE, value);
	}
  
    /**
     * Removes all values of property CurrentAbsoluteAltitude     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCurrentAbsoluteAltitude( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CURRENTABSOLUTEALTITUDE);
	}
	
    /**
     * Removes all values of property CurrentAbsoluteAltitude	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCurrentAbsoluteAltitude() {
		Base.removeAll(this.model, this.getResource(), CURRENTABSOLUTEALTITUDE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@cb19f76 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCurrentAltitude(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CURRENTALTITUDE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@cb19f76 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCurrentAltitude() {
		return Base.has(this.model, this.getResource(), CURRENTALTITUDE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@cb19f76 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCurrentAltitude(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CURRENTALTITUDE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@cb19f76 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCurrentAltitude( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CURRENTALTITUDE);
	}

     /**
     * Get all values of property CurrentAltitude as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCurrentAltitude_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CURRENTALTITUDE);
	}
	
    /**
     * Get all values of property CurrentAltitude as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCurrentAltitude_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CURRENTALTITUDE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property CurrentAltitude as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCurrentAltitude_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CURRENTALTITUDE);
	}

    /**
     * Get all values of property CurrentAltitude as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCurrentAltitude_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CURRENTALTITUDE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property CurrentAltitude     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dpo.Altitude> getAllCurrentAltitude(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CURRENTALTITUDE, eu.dime.ps.semantic.model.dpo.Altitude.class);
	}
	
    /**
     * Get all values of property CurrentAltitude as a ReactorResult of Altitude 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dpo.Altitude> getAllCurrentAltitude_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CURRENTALTITUDE, eu.dime.ps.semantic.model.dpo.Altitude.class);
	}

    /**
     * Get all values of property CurrentAltitude     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dpo.Altitude> getAllCurrentAltitude() {
		return Base.getAll(this.model, this.getResource(), CURRENTALTITUDE, eu.dime.ps.semantic.model.dpo.Altitude.class);
	}

    /**
     * Get all values of property CurrentAltitude as a ReactorResult of Altitude 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dpo.Altitude> getAllCurrentAltitude_as() {
		return Base.getAll_as(this.model, this.getResource(), CURRENTALTITUDE, eu.dime.ps.semantic.model.dpo.Altitude.class);
	}
 
    /**
     * Adds a value to property CurrentAltitude as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCurrentAltitude(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CURRENTALTITUDE, value);
	}
	
    /**
     * Adds a value to property CurrentAltitude as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCurrentAltitude( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CURRENTALTITUDE, value);
	}
    /**
     * Adds a value to property CurrentAltitude from an instance of Altitude 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCurrentAltitude(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Altitude value) {
		Base.add(model, instanceResource, CURRENTALTITUDE, value);
	}
	
    /**
     * Adds a value to property CurrentAltitude from an instance of Altitude 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCurrentAltitude(eu.dime.ps.semantic.model.dpo.Altitude value) {
		Base.add(this.model, this.getResource(), CURRENTALTITUDE, value);
	}
  

    /**
     * Sets a value of property CurrentAltitude from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCurrentAltitude( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CURRENTALTITUDE, value);
	}
	
    /**
     * Sets a value of property CurrentAltitude from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCurrentAltitude( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CURRENTALTITUDE, value);
	}
    /**
     * Sets a value of property CurrentAltitude from an instance of Altitude 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCurrentAltitude(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Altitude value) {
		Base.set(model, instanceResource, CURRENTALTITUDE, value);
	}
	
    /**
     * Sets a value of property CurrentAltitude from an instance of Altitude 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCurrentAltitude(eu.dime.ps.semantic.model.dpo.Altitude value) {
		Base.set(this.model, this.getResource(), CURRENTALTITUDE, value);
	}
  


    /**
     * Removes a value of property CurrentAltitude as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCurrentAltitude( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CURRENTALTITUDE, value);
	}
	
    /**
     * Removes a value of property CurrentAltitude as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCurrentAltitude( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CURRENTALTITUDE, value);
	}
    /**
     * Removes a value of property CurrentAltitude given as an instance of Altitude 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCurrentAltitude(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Altitude value) {
		Base.remove(model, instanceResource, CURRENTALTITUDE, value);
	}
	
    /**
     * Removes a value of property CurrentAltitude given as an instance of Altitude 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCurrentAltitude(eu.dime.ps.semantic.model.dpo.Altitude value) {
		Base.remove(this.model, this.getResource(), CURRENTALTITUDE, value);
	}
  
    /**
     * Removes all values of property CurrentAltitude     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCurrentAltitude( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CURRENTALTITUDE);
	}
	
    /**
     * Removes all values of property CurrentAltitude	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCurrentAltitude() {
		Base.removeAll(this.model, this.getResource(), CURRENTALTITUDE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2795cc92 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCurrentPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CURRENTPLACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2795cc92 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCurrentPlace() {
		return Base.has(this.model, this.getResource(), CURRENTPLACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2795cc92 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCurrentPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CURRENTPLACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2795cc92 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCurrentPlace( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CURRENTPLACE);
	}

     /**
     * Get all values of property CurrentPlace as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCurrentPlace_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CURRENTPLACE);
	}
	
    /**
     * Get all values of property CurrentPlace as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCurrentPlace_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CURRENTPLACE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property CurrentPlace as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCurrentPlace_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CURRENTPLACE);
	}

    /**
     * Get all values of property CurrentPlace as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCurrentPlace_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CURRENTPLACE, org.ontoware.rdf2go.model.node.Node.class);
	}
    /**
     * Get all values of property CurrentPlace as ReactorResult of eu.dime.ps.semantic.model.dpo.Place     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of Place
	 *
	 * [Generated from RDFReactor template rule #get9static] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dpo.Place> getAllCurrentPlace_asPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CURRENTPLACE, eu.dime.ps.semantic.model.dpo.Place.class);
	}
	
    /**
     * Get all values of property CurrentPlace as ReactorResult of Place 
     * @return a ClosableIterator of Place
	 *
	 * [Generated from RDFReactor template rule #get10dynamic] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dpo.Place> getAllCurrentPlace_asPlace() {
		return Base.getAll_as(this.model, this.getResource(), CURRENTPLACE, eu.dime.ps.semantic.model.dpo.Place.class);
	}

    /**
     * Get all values of property CurrentPlace as ReactorResult of eu.dime.ps.semantic.model.dpo.Place     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of Location
	 *
	 * [Generated from RDFReactor template rule #get9static] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.pimo.Location> getAllCurrentPlace_asLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CURRENTPLACE, eu.dime.ps.semantic.model.pimo.Location.class);
	}
	
    /**
     * Get all values of property CurrentPlace as ReactorResult of Location 
     * @return a ClosableIterator of Location
	 *
	 * [Generated from RDFReactor template rule #get10dynamic] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.pimo.Location> getAllCurrentPlace_asLocation() {
		return Base.getAll_as(this.model, this.getResource(), CURRENTPLACE, eu.dime.ps.semantic.model.pimo.Location.class);
	}

      /**
     * Get all values of property CurrentPlace     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dpo.Place> getAllCurrentPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CURRENTPLACE, eu.dime.ps.semantic.model.dpo.Place.class);
	}
	
    /**
     * Get all values of property CurrentPlace as a ReactorResult of Place 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dpo.Place> getAllCurrentPlace_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CURRENTPLACE, eu.dime.ps.semantic.model.dpo.Place.class);
	}

    /**
     * Get all values of property CurrentPlace     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dpo.Place> getAllCurrentPlace() {
		return Base.getAll(this.model, this.getResource(), CURRENTPLACE, eu.dime.ps.semantic.model.dpo.Place.class);
	}

    /**
     * Get all values of property CurrentPlace as a ReactorResult of Place 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dpo.Place> getAllCurrentPlace_as() {
		return Base.getAll_as(this.model, this.getResource(), CURRENTPLACE, eu.dime.ps.semantic.model.dpo.Place.class);
	}
 
    /**
     * Adds a value to property CurrentPlace as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCurrentPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CURRENTPLACE, value);
	}
	
    /**
     * Adds a value to property CurrentPlace as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCurrentPlace( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CURRENTPLACE, value);
	}
    /**
     * Adds a value to property CurrentPlace from an instance of Place 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCurrentPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Place value) {
		Base.add(model, instanceResource, CURRENTPLACE, value);
	}
	
    /**
     * Adds a value to property CurrentPlace from an instance of Place 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCurrentPlace(eu.dime.ps.semantic.model.dpo.Place value) {
		Base.add(this.model, this.getResource(), CURRENTPLACE, value);
	}
    /**
     * Adds a value to property CurrentPlace from an instance of Location 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCurrentPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Location value) {
		Base.add(model, instanceResource, CURRENTPLACE, value);
	}
	
    /**
     * Adds a value to property CurrentPlace from an instance of Location 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCurrentPlace(eu.dime.ps.semantic.model.pimo.Location value) {
		Base.add(this.model, this.getResource(), CURRENTPLACE, value);
	}
  

    /**
     * Sets a value of property CurrentPlace from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCurrentPlace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CURRENTPLACE, value);
	}
	
    /**
     * Sets a value of property CurrentPlace from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCurrentPlace( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CURRENTPLACE, value);
	}
    /**
     * Sets a value of property CurrentPlace from an instance of Place 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCurrentPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Place value) {
		Base.set(model, instanceResource, CURRENTPLACE, value);
	}
	
    /**
     * Sets a value of property CurrentPlace from an instance of Place 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCurrentPlace(eu.dime.ps.semantic.model.dpo.Place value) {
		Base.set(this.model, this.getResource(), CURRENTPLACE, value);
	}
    /**
     * Sets a value of property CurrentPlace from an instance of Location 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCurrentPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Location value) {
		Base.set(model, instanceResource, CURRENTPLACE, value);
	}
	
    /**
     * Sets a value of property CurrentPlace from an instance of Location 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCurrentPlace(eu.dime.ps.semantic.model.pimo.Location value) {
		Base.set(this.model, this.getResource(), CURRENTPLACE, value);
	}
  


    /**
     * Removes a value of property CurrentPlace as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCurrentPlace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CURRENTPLACE, value);
	}
	
    /**
     * Removes a value of property CurrentPlace as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCurrentPlace( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CURRENTPLACE, value);
	}
    /**
     * Removes a value of property CurrentPlace given as an instance of Place 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCurrentPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Place value) {
		Base.remove(model, instanceResource, CURRENTPLACE, value);
	}
	
    /**
     * Removes a value of property CurrentPlace given as an instance of Place 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCurrentPlace(eu.dime.ps.semantic.model.dpo.Place value) {
		Base.remove(this.model, this.getResource(), CURRENTPLACE, value);
	}
    /**
     * Removes a value of property CurrentPlace given as an instance of Location 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCurrentPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Location value) {
		Base.remove(model, instanceResource, CURRENTPLACE, value);
	}
	
    /**
     * Removes a value of property CurrentPlace given as an instance of Location 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCurrentPlace(eu.dime.ps.semantic.model.pimo.Location value) {
		Base.remove(this.model, this.getResource(), CURRENTPLACE, value);
	}
  
    /**
     * Removes all values of property CurrentPlace     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCurrentPlace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CURRENTPLACE);
	}
	
    /**
     * Removes all values of property CurrentPlace	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCurrentPlace() {
		Base.removeAll(this.model, this.getResource(), CURRENTPLACE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@88959af has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCurrentTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CURRENTTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@88959af has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCurrentTime() {
		return Base.has(this.model, this.getResource(), CURRENTTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@88959af has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCurrentTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CURRENTTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@88959af has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCurrentTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CURRENTTIME);
	}

     /**
     * Get all values of property CurrentTime as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCurrentTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CURRENTTIME);
	}
	
    /**
     * Get all values of property CurrentTime as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCurrentTime_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CURRENTTIME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property CurrentTime as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCurrentTime_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CURRENTTIME);
	}

    /**
     * Get all values of property CurrentTime as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCurrentTime_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CURRENTTIME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property CurrentTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dpo.TimePeriod> getAllCurrentTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CURRENTTIME, eu.dime.ps.semantic.model.dpo.TimePeriod.class);
	}
	
    /**
     * Get all values of property CurrentTime as a ReactorResult of TimePeriod 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dpo.TimePeriod> getAllCurrentTime_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CURRENTTIME, eu.dime.ps.semantic.model.dpo.TimePeriod.class);
	}

    /**
     * Get all values of property CurrentTime     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dpo.TimePeriod> getAllCurrentTime() {
		return Base.getAll(this.model, this.getResource(), CURRENTTIME, eu.dime.ps.semantic.model.dpo.TimePeriod.class);
	}

    /**
     * Get all values of property CurrentTime as a ReactorResult of TimePeriod 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dpo.TimePeriod> getAllCurrentTime_as() {
		return Base.getAll_as(this.model, this.getResource(), CURRENTTIME, eu.dime.ps.semantic.model.dpo.TimePeriod.class);
	}
 
    /**
     * Adds a value to property CurrentTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCurrentTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CURRENTTIME, value);
	}
	
    /**
     * Adds a value to property CurrentTime as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCurrentTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CURRENTTIME, value);
	}
    /**
     * Adds a value to property CurrentTime from an instance of TimePeriod 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCurrentTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.TimePeriod value) {
		Base.add(model, instanceResource, CURRENTTIME, value);
	}
	
    /**
     * Adds a value to property CurrentTime from an instance of TimePeriod 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCurrentTime(eu.dime.ps.semantic.model.dpo.TimePeriod value) {
		Base.add(this.model, this.getResource(), CURRENTTIME, value);
	}
  

    /**
     * Sets a value of property CurrentTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCurrentTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CURRENTTIME, value);
	}
	
    /**
     * Sets a value of property CurrentTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCurrentTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CURRENTTIME, value);
	}
    /**
     * Sets a value of property CurrentTime from an instance of TimePeriod 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCurrentTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.TimePeriod value) {
		Base.set(model, instanceResource, CURRENTTIME, value);
	}
	
    /**
     * Sets a value of property CurrentTime from an instance of TimePeriod 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCurrentTime(eu.dime.ps.semantic.model.dpo.TimePeriod value) {
		Base.set(this.model, this.getResource(), CURRENTTIME, value);
	}
  


    /**
     * Removes a value of property CurrentTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCurrentTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CURRENTTIME, value);
	}
	
    /**
     * Removes a value of property CurrentTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCurrentTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CURRENTTIME, value);
	}
    /**
     * Removes a value of property CurrentTime given as an instance of TimePeriod 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCurrentTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.TimePeriod value) {
		Base.remove(model, instanceResource, CURRENTTIME, value);
	}
	
    /**
     * Removes a value of property CurrentTime given as an instance of TimePeriod 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCurrentTime(eu.dime.ps.semantic.model.dpo.TimePeriod value) {
		Base.remove(this.model, this.getResource(), CURRENTTIME, value);
	}
  
    /**
     * Removes all values of property CurrentTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCurrentTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CURRENTTIME);
	}
	
    /**
     * Removes all values of property CurrentTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCurrentTime() {
		Base.removeAll(this.model, this.getResource(), CURRENTTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d52fc56 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNearbyEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NEARBYEVENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d52fc56 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNearbyEvent() {
		return Base.has(this.model, this.getResource(), NEARBYEVENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d52fc56 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNearbyEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NEARBYEVENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d52fc56 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNearbyEvent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NEARBYEVENT);
	}

     /**
     * Get all values of property NearbyEvent as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNearbyEvent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NEARBYEVENT);
	}
	
    /**
     * Get all values of property NearbyEvent as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNearbyEvent_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEARBYEVENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NearbyEvent as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNearbyEvent_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NEARBYEVENT);
	}

    /**
     * Get all values of property NearbyEvent as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNearbyEvent_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NEARBYEVENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NearbyEvent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.ncal.Event> getAllNearbyEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NEARBYEVENT, eu.dime.ps.semantic.model.ncal.Event.class);
	}
	
    /**
     * Get all values of property NearbyEvent as a ReactorResult of Event 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.ncal.Event> getAllNearbyEvent_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEARBYEVENT, eu.dime.ps.semantic.model.ncal.Event.class);
	}

    /**
     * Get all values of property NearbyEvent     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.ncal.Event> getAllNearbyEvent() {
		return Base.getAll(this.model, this.getResource(), NEARBYEVENT, eu.dime.ps.semantic.model.ncal.Event.class);
	}

    /**
     * Get all values of property NearbyEvent as a ReactorResult of Event 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.ncal.Event> getAllNearbyEvent_as() {
		return Base.getAll_as(this.model, this.getResource(), NEARBYEVENT, eu.dime.ps.semantic.model.ncal.Event.class);
	}
 
    /**
     * Adds a value to property NearbyEvent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNearbyEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NEARBYEVENT, value);
	}
	
    /**
     * Adds a value to property NearbyEvent as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNearbyEvent( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NEARBYEVENT, value);
	}
    /**
     * Adds a value to property NearbyEvent from an instance of Event 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNearbyEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.Event value) {
		Base.add(model, instanceResource, NEARBYEVENT, value);
	}
	
    /**
     * Adds a value to property NearbyEvent from an instance of Event 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNearbyEvent(eu.dime.ps.semantic.model.ncal.Event value) {
		Base.add(this.model, this.getResource(), NEARBYEVENT, value);
	}
  

    /**
     * Sets a value of property NearbyEvent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNearbyEvent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NEARBYEVENT, value);
	}
	
    /**
     * Sets a value of property NearbyEvent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNearbyEvent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NEARBYEVENT, value);
	}
    /**
     * Sets a value of property NearbyEvent from an instance of Event 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNearbyEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.Event value) {
		Base.set(model, instanceResource, NEARBYEVENT, value);
	}
	
    /**
     * Sets a value of property NearbyEvent from an instance of Event 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNearbyEvent(eu.dime.ps.semantic.model.ncal.Event value) {
		Base.set(this.model, this.getResource(), NEARBYEVENT, value);
	}
  


    /**
     * Removes a value of property NearbyEvent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNearbyEvent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NEARBYEVENT, value);
	}
	
    /**
     * Removes a value of property NearbyEvent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNearbyEvent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NEARBYEVENT, value);
	}
    /**
     * Removes a value of property NearbyEvent given as an instance of Event 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNearbyEvent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.Event value) {
		Base.remove(model, instanceResource, NEARBYEVENT, value);
	}
	
    /**
     * Removes a value of property NearbyEvent given as an instance of Event 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNearbyEvent(eu.dime.ps.semantic.model.ncal.Event value) {
		Base.remove(this.model, this.getResource(), NEARBYEVENT, value);
	}
  
    /**
     * Removes all values of property NearbyEvent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNearbyEvent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NEARBYEVENT);
	}
	
    /**
     * Removes all values of property NearbyEvent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNearbyEvent() {
		Base.removeAll(this.model, this.getResource(), NEARBYEVENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59217628 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNearbyPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NEARBYPLACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59217628 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNearbyPlace() {
		return Base.has(this.model, this.getResource(), NEARBYPLACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59217628 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNearbyPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NEARBYPLACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59217628 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNearbyPlace( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NEARBYPLACE);
	}

     /**
     * Get all values of property NearbyPlace as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNearbyPlace_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NEARBYPLACE);
	}
	
    /**
     * Get all values of property NearbyPlace as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNearbyPlace_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEARBYPLACE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NearbyPlace as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNearbyPlace_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NEARBYPLACE);
	}

    /**
     * Get all values of property NearbyPlace as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNearbyPlace_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NEARBYPLACE, org.ontoware.rdf2go.model.node.Node.class);
	}
    /**
     * Get all values of property NearbyPlace as ReactorResult of eu.dime.ps.semantic.model.dpo.Place     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of Place
	 *
	 * [Generated from RDFReactor template rule #get9static] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dpo.Place> getAllNearbyPlace_asPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEARBYPLACE, eu.dime.ps.semantic.model.dpo.Place.class);
	}
	
    /**
     * Get all values of property NearbyPlace as ReactorResult of Place 
     * @return a ClosableIterator of Place
	 *
	 * [Generated from RDFReactor template rule #get10dynamic] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dpo.Place> getAllNearbyPlace_asPlace() {
		return Base.getAll_as(this.model, this.getResource(), NEARBYPLACE, eu.dime.ps.semantic.model.dpo.Place.class);
	}

    /**
     * Get all values of property NearbyPlace as ReactorResult of eu.dime.ps.semantic.model.dpo.Place     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of Location
	 *
	 * [Generated from RDFReactor template rule #get9static] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.pimo.Location> getAllNearbyPlace_asLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEARBYPLACE, eu.dime.ps.semantic.model.pimo.Location.class);
	}
	
    /**
     * Get all values of property NearbyPlace as ReactorResult of Location 
     * @return a ClosableIterator of Location
	 *
	 * [Generated from RDFReactor template rule #get10dynamic] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.pimo.Location> getAllNearbyPlace_asLocation() {
		return Base.getAll_as(this.model, this.getResource(), NEARBYPLACE, eu.dime.ps.semantic.model.pimo.Location.class);
	}

      /**
     * Get all values of property NearbyPlace     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dpo.Place> getAllNearbyPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NEARBYPLACE, eu.dime.ps.semantic.model.dpo.Place.class);
	}
	
    /**
     * Get all values of property NearbyPlace as a ReactorResult of Place 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dpo.Place> getAllNearbyPlace_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEARBYPLACE, eu.dime.ps.semantic.model.dpo.Place.class);
	}

    /**
     * Get all values of property NearbyPlace     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dpo.Place> getAllNearbyPlace() {
		return Base.getAll(this.model, this.getResource(), NEARBYPLACE, eu.dime.ps.semantic.model.dpo.Place.class);
	}

    /**
     * Get all values of property NearbyPlace as a ReactorResult of Place 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dpo.Place> getAllNearbyPlace_as() {
		return Base.getAll_as(this.model, this.getResource(), NEARBYPLACE, eu.dime.ps.semantic.model.dpo.Place.class);
	}
 
    /**
     * Adds a value to property NearbyPlace as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNearbyPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NEARBYPLACE, value);
	}
	
    /**
     * Adds a value to property NearbyPlace as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNearbyPlace( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NEARBYPLACE, value);
	}
    /**
     * Adds a value to property NearbyPlace from an instance of Place 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNearbyPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Place value) {
		Base.add(model, instanceResource, NEARBYPLACE, value);
	}
	
    /**
     * Adds a value to property NearbyPlace from an instance of Place 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNearbyPlace(eu.dime.ps.semantic.model.dpo.Place value) {
		Base.add(this.model, this.getResource(), NEARBYPLACE, value);
	}
    /**
     * Adds a value to property NearbyPlace from an instance of Location 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNearbyPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Location value) {
		Base.add(model, instanceResource, NEARBYPLACE, value);
	}
	
    /**
     * Adds a value to property NearbyPlace from an instance of Location 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNearbyPlace(eu.dime.ps.semantic.model.pimo.Location value) {
		Base.add(this.model, this.getResource(), NEARBYPLACE, value);
	}
  

    /**
     * Sets a value of property NearbyPlace from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNearbyPlace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NEARBYPLACE, value);
	}
	
    /**
     * Sets a value of property NearbyPlace from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNearbyPlace( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NEARBYPLACE, value);
	}
    /**
     * Sets a value of property NearbyPlace from an instance of Place 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNearbyPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Place value) {
		Base.set(model, instanceResource, NEARBYPLACE, value);
	}
	
    /**
     * Sets a value of property NearbyPlace from an instance of Place 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNearbyPlace(eu.dime.ps.semantic.model.dpo.Place value) {
		Base.set(this.model, this.getResource(), NEARBYPLACE, value);
	}
    /**
     * Sets a value of property NearbyPlace from an instance of Location 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNearbyPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Location value) {
		Base.set(model, instanceResource, NEARBYPLACE, value);
	}
	
    /**
     * Sets a value of property NearbyPlace from an instance of Location 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNearbyPlace(eu.dime.ps.semantic.model.pimo.Location value) {
		Base.set(this.model, this.getResource(), NEARBYPLACE, value);
	}
  


    /**
     * Removes a value of property NearbyPlace as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNearbyPlace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NEARBYPLACE, value);
	}
	
    /**
     * Removes a value of property NearbyPlace as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNearbyPlace( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NEARBYPLACE, value);
	}
    /**
     * Removes a value of property NearbyPlace given as an instance of Place 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNearbyPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dpo.Place value) {
		Base.remove(model, instanceResource, NEARBYPLACE, value);
	}
	
    /**
     * Removes a value of property NearbyPlace given as an instance of Place 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNearbyPlace(eu.dime.ps.semantic.model.dpo.Place value) {
		Base.remove(this.model, this.getResource(), NEARBYPLACE, value);
	}
    /**
     * Removes a value of property NearbyPlace given as an instance of Location 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNearbyPlace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Location value) {
		Base.remove(model, instanceResource, NEARBYPLACE, value);
	}
	
    /**
     * Removes a value of property NearbyPlace given as an instance of Location 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNearbyPlace(eu.dime.ps.semantic.model.pimo.Location value) {
		Base.remove(this.model, this.getResource(), NEARBYPLACE, value);
	}
  
    /**
     * Removes all values of property NearbyPlace     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNearbyPlace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NEARBYPLACE);
	}
	
    /**
     * Removes all values of property NearbyPlace	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNearbyPlace() {
		Base.removeAll(this.model, this.getResource(), NEARBYPLACE);
	}
 }