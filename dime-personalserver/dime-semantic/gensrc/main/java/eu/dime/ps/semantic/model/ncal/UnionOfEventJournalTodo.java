/*
* Copyright 2013 by the digital.me project (http://www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.ncal;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Categories </li>
 *   <li> Class </li>
 *   <li> Exrule </li>
 *   <li> NcalCreated </li>
 *   <li> NcalRelation </li>
 *   <li> RelatedToChild </li>
 *   <li> RelatedToParent </li>
 *   <li> RelatedToSibling </li>
 *   <li> Sequence </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class UnionOfEventJournalTodo extends eu.dime.ps.semantic.model.ncal.UnionParentClass {

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#UnionOfEventJournalTodo */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#UnionOfEventJournalTodo", false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#categories */
    @SuppressWarnings("hiding")
	public static final URI CATEGORIES = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#categories",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#class */
    @SuppressWarnings("hiding")
	public static final URI CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#class",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#exrule */
    @SuppressWarnings("hiding")
	public static final URI EXRULE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#exrule",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#created */
    @SuppressWarnings("hiding")
	public static final URI NCALCREATED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#created",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#ncalRelation */
    @SuppressWarnings("hiding")
	public static final URI NCALRELATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#ncalRelation",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#relatedToChild */
    @SuppressWarnings("hiding")
	public static final URI RELATEDTOCHILD = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#relatedToChild",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#relatedToParent */
    @SuppressWarnings("hiding")
	public static final URI RELATEDTOPARENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#relatedToParent",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#relatedToSibling */
    @SuppressWarnings("hiding")
	public static final URI RELATEDTOSIBLING = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#relatedToSibling",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#sequence */
    @SuppressWarnings("hiding")
	public static final URI SEQUENCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#sequence",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#categories",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#class",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#exrule",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#created",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#ncalRelation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#relatedToChild",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#relatedToParent",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#relatedToSibling",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#sequence",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected UnionOfEventJournalTodo (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public UnionOfEventJournalTodo (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public UnionOfEventJournalTodo (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public UnionOfEventJournalTodo (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public UnionOfEventJournalTodo (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of UnionOfEventJournalTodo  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static UnionOfEventJournalTodo  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, UnionOfEventJournalTodo.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#UnionOfEventJournalTodo).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends UnionOfEventJournalTodo> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, UnionOfEventJournalTodo.class );
	}

    /**
	 * Remove rdf:type UnionOfEventJournalTodo from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29137481 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCategories(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CATEGORIES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29137481 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCategories() {
		return Base.has(this.model, this.getResource(), CATEGORIES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29137481 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCategories(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CATEGORIES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29137481 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCategories( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CATEGORIES);
	}

     /**
     * Get all values of property Categories as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCategories_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CATEGORIES);
	}
	
    /**
     * Get all values of property Categories as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCategories_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CATEGORIES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Categories as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCategories_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CATEGORIES);
	}

    /**
     * Get all values of property Categories as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCategories_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CATEGORIES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Categories     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllCategories(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CATEGORIES, java.lang.String.class);
	}
	
    /**
     * Get all values of property Categories as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllCategories_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CATEGORIES, java.lang.String.class);
	}

    /**
     * Get all values of property Categories     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllCategories() {
		return Base.getAll(this.model, this.getResource(), CATEGORIES, java.lang.String.class);
	}

    /**
     * Get all values of property Categories as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllCategories_as() {
		return Base.getAll_as(this.model, this.getResource(), CATEGORIES, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Categories as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCategories(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CATEGORIES, value);
	}
	
    /**
     * Adds a value to property Categories as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCategories( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CATEGORIES, value);
	}
    /**
     * Adds a value to property Categories from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCategories(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, CATEGORIES, value);
	}
	
    /**
     * Adds a value to property Categories from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCategories(java.lang.String value) {
		Base.add(this.model, this.getResource(), CATEGORIES, value);
	}
  

    /**
     * Sets a value of property Categories from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCategories( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CATEGORIES, value);
	}
	
    /**
     * Sets a value of property Categories from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCategories( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CATEGORIES, value);
	}
    /**
     * Sets a value of property Categories from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCategories(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, CATEGORIES, value);
	}
	
    /**
     * Sets a value of property Categories from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCategories(java.lang.String value) {
		Base.set(this.model, this.getResource(), CATEGORIES, value);
	}
  


    /**
     * Removes a value of property Categories as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCategories( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CATEGORIES, value);
	}
	
    /**
     * Removes a value of property Categories as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCategories( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CATEGORIES, value);
	}
    /**
     * Removes a value of property Categories given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCategories(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, CATEGORIES, value);
	}
	
    /**
     * Removes a value of property Categories given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCategories(java.lang.String value) {
		Base.remove(this.model, this.getResource(), CATEGORIES, value);
	}
  
    /**
     * Removes all values of property Categories     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCategories( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CATEGORIES);
	}
	
    /**
     * Removes all values of property Categories	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCategories() {
		Base.removeAll(this.model, this.getResource(), CATEGORIES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25b91df9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasClassification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25b91df9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasClassification() {
		return Base.has(this.model, this.getResource(), CLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25b91df9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasClassification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@25b91df9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasClassification( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CLASS);
	}

    /**
     * Get single value of property Class as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getClass_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, CLASS);
	}
	
    /**
     * Get single value of property Class as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getClass_asNode() {
		return Base.get_asNode(this.model, this.getResource(), CLASS);
	}
     /**
     * Get single value of property Class     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.ncal.AccessClassification getClassification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.ncal.AccessClassification) Base.get(model, instanceResource, CLASS, eu.dime.ps.semantic.model.ncal.AccessClassification.class);
	}
	
    /**
     * Get single value of property Class  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.ncal.AccessClassification getClassification() {
		return (eu.dime.ps.semantic.model.ncal.AccessClassification) Base.get(this.model, this.getResource(), CLASS, eu.dime.ps.semantic.model.ncal.AccessClassification.class);
	}
  
    /**
     * Adds a value to property Class as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addClassification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CLASS, value, 1);
	}
	
    /**
     * Adds a value to property Class as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addClassification( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CLASS, value, 1);
	}
    /**
     * Adds a value to property Class from an instance of AccessClassification 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addClassification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.AccessClassification value)
    throws CardinalityException {
		Base.add(model, instanceResource, CLASS, value, 1);
	}
	
    /**
     * Adds a value to property Class from an instance of AccessClassification 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addClassification(eu.dime.ps.semantic.model.ncal.AccessClassification value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CLASS, value, 1);
	}
 
 

    /**
     * Sets a value of property Class from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setClassification( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CLASS, value);
	}
	
    /**
     * Sets a value of property Class from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setClassification( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CLASS, value);
	}
    /**
     * Sets a value of property Class from an instance of AccessClassification 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setClassification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.AccessClassification value) {
		Base.set(model, instanceResource, CLASS, value);
	}
	
    /**
     * Sets a value of property Class from an instance of AccessClassification 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setClassification(eu.dime.ps.semantic.model.ncal.AccessClassification value) {
		Base.set(this.model, this.getResource(), CLASS, value);
	}
  


    /**
     * Removes a value of property Class as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeClassification( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CLASS, value);
	}
	
    /**
     * Removes a value of property Class as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeClassification( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CLASS, value);
	}
    /**
     * Removes a value of property Class given as an instance of AccessClassification 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeClassification(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.AccessClassification value) {
		Base.remove(model, instanceResource, CLASS, value);
	}
	
    /**
     * Removes a value of property Class given as an instance of AccessClassification 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeClassification(eu.dime.ps.semantic.model.ncal.AccessClassification value) {
		Base.remove(this.model, this.getResource(), CLASS, value);
	}
  
    /**
     * Removes all values of property Class     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllClassification( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CLASS);
	}
	
    /**
     * Removes all values of property Class	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllClassification() {
		Base.removeAll(this.model, this.getResource(), CLASS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1aab0875 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExrule(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXRULE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1aab0875 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExrule() {
		return Base.has(this.model, this.getResource(), EXRULE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1aab0875 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExrule(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXRULE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1aab0875 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExrule( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXRULE);
	}

     /**
     * Get all values of property Exrule as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExrule_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXRULE);
	}
	
    /**
     * Get all values of property Exrule as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExrule_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXRULE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Exrule as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExrule_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXRULE);
	}

    /**
     * Get all values of property Exrule as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExrule_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXRULE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Exrule     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.ncal.RecurrenceRule> getAllExrule(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXRULE, eu.dime.ps.semantic.model.ncal.RecurrenceRule.class);
	}
	
    /**
     * Get all values of property Exrule as a ReactorResult of RecurrenceRule 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.ncal.RecurrenceRule> getAllExrule_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXRULE, eu.dime.ps.semantic.model.ncal.RecurrenceRule.class);
	}

    /**
     * Get all values of property Exrule     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.ncal.RecurrenceRule> getAllExrule() {
		return Base.getAll(this.model, this.getResource(), EXRULE, eu.dime.ps.semantic.model.ncal.RecurrenceRule.class);
	}

    /**
     * Get all values of property Exrule as a ReactorResult of RecurrenceRule 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.ncal.RecurrenceRule> getAllExrule_as() {
		return Base.getAll_as(this.model, this.getResource(), EXRULE, eu.dime.ps.semantic.model.ncal.RecurrenceRule.class);
	}
 
    /**
     * Adds a value to property Exrule as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExrule(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXRULE, value);
	}
	
    /**
     * Adds a value to property Exrule as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExrule( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXRULE, value);
	}
    /**
     * Adds a value to property Exrule from an instance of RecurrenceRule 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExrule(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.RecurrenceRule value) {
		Base.add(model, instanceResource, EXRULE, value);
	}
	
    /**
     * Adds a value to property Exrule from an instance of RecurrenceRule 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExrule(eu.dime.ps.semantic.model.ncal.RecurrenceRule value) {
		Base.add(this.model, this.getResource(), EXRULE, value);
	}
  

    /**
     * Sets a value of property Exrule from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExrule( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXRULE, value);
	}
	
    /**
     * Sets a value of property Exrule from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExrule( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXRULE, value);
	}
    /**
     * Sets a value of property Exrule from an instance of RecurrenceRule 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExrule(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.RecurrenceRule value) {
		Base.set(model, instanceResource, EXRULE, value);
	}
	
    /**
     * Sets a value of property Exrule from an instance of RecurrenceRule 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExrule(eu.dime.ps.semantic.model.ncal.RecurrenceRule value) {
		Base.set(this.model, this.getResource(), EXRULE, value);
	}
  


    /**
     * Removes a value of property Exrule as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExrule( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXRULE, value);
	}
	
    /**
     * Removes a value of property Exrule as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExrule( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXRULE, value);
	}
    /**
     * Removes a value of property Exrule given as an instance of RecurrenceRule 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExrule(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.RecurrenceRule value) {
		Base.remove(model, instanceResource, EXRULE, value);
	}
	
    /**
     * Removes a value of property Exrule given as an instance of RecurrenceRule 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExrule(eu.dime.ps.semantic.model.ncal.RecurrenceRule value) {
		Base.remove(this.model, this.getResource(), EXRULE, value);
	}
  
    /**
     * Removes all values of property Exrule     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExrule( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXRULE);
	}
	
    /**
     * Removes all values of property Exrule	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExrule() {
		Base.removeAll(this.model, this.getResource(), EXRULE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d2f893d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNcalCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NCALCREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d2f893d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNcalCreated() {
		return Base.has(this.model, this.getResource(), NCALCREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d2f893d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNcalCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NCALCREATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d2f893d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNcalCreated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NCALCREATED);
	}

    /**
     * Get single value of property NcalCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getNcalCreated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, NCALCREATED);
	}
	
    /**
     * Get single value of property NcalCreated as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getNcalCreated_asNode() {
		return Base.get_asNode(this.model, this.getResource(), NCALCREATED);
	}
     /**
     * Get single value of property NcalCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getNcalCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, NCALCREATED, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property NcalCreated  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getNcalCreated() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), NCALCREATED, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property NcalCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addNcalCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, NCALCREATED, value, 1);
	}
	
    /**
     * Adds a value to property NcalCreated as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addNcalCreated( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), NCALCREATED, value, 1);
	}
    /**
     * Adds a value to property NcalCreated from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addNcalCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, NCALCREATED, value, 1);
	}
	
    /**
     * Adds a value to property NcalCreated from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addNcalCreated(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), NCALCREATED, value, 1);
	}
 
 

    /**
     * Sets a value of property NcalCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNcalCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NCALCREATED, value);
	}
	
    /**
     * Sets a value of property NcalCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNcalCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NCALCREATED, value);
	}
    /**
     * Sets a value of property NcalCreated from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNcalCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, NCALCREATED, value);
	}
	
    /**
     * Sets a value of property NcalCreated from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNcalCreated(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), NCALCREATED, value);
	}
  


    /**
     * Removes a value of property NcalCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNcalCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NCALCREATED, value);
	}
	
    /**
     * Removes a value of property NcalCreated as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNcalCreated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NCALCREATED, value);
	}
    /**
     * Removes a value of property NcalCreated given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNcalCreated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, NCALCREATED, value);
	}
	
    /**
     * Removes a value of property NcalCreated given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNcalCreated(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), NCALCREATED, value);
	}
  
    /**
     * Removes all values of property NcalCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNcalCreated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NCALCREATED);
	}
	
    /**
     * Removes all values of property NcalCreated	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNcalCreated() {
		Base.removeAll(this.model, this.getResource(), NCALCREATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5da397e0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNcalRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NCALRELATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5da397e0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNcalRelation() {
		return Base.has(this.model, this.getResource(), NCALRELATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5da397e0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNcalRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NCALRELATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5da397e0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNcalRelation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NCALRELATION);
	}

     /**
     * Get all values of property NcalRelation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNcalRelation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NCALRELATION);
	}
	
    /**
     * Get all values of property NcalRelation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNcalRelation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NCALRELATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NcalRelation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNcalRelation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NCALRELATION);
	}

    /**
     * Get all values of property NcalRelation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNcalRelation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NCALRELATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NcalRelation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllNcalRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NCALRELATION, java.lang.String.class);
	}
	
    /**
     * Get all values of property NcalRelation as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllNcalRelation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NCALRELATION, java.lang.String.class);
	}

    /**
     * Get all values of property NcalRelation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllNcalRelation() {
		return Base.getAll(this.model, this.getResource(), NCALRELATION, java.lang.String.class);
	}

    /**
     * Get all values of property NcalRelation as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllNcalRelation_as() {
		return Base.getAll_as(this.model, this.getResource(), NCALRELATION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property NcalRelation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNcalRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NCALRELATION, value);
	}
	
    /**
     * Adds a value to property NcalRelation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNcalRelation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NCALRELATION, value);
	}
    /**
     * Adds a value to property NcalRelation from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNcalRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NCALRELATION, value);
	}
	
    /**
     * Adds a value to property NcalRelation from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNcalRelation(java.lang.String value) {
		Base.add(this.model, this.getResource(), NCALRELATION, value);
	}
  

    /**
     * Sets a value of property NcalRelation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNcalRelation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NCALRELATION, value);
	}
	
    /**
     * Sets a value of property NcalRelation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNcalRelation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NCALRELATION, value);
	}
    /**
     * Sets a value of property NcalRelation from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNcalRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NCALRELATION, value);
	}
	
    /**
     * Sets a value of property NcalRelation from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNcalRelation(java.lang.String value) {
		Base.set(this.model, this.getResource(), NCALRELATION, value);
	}
  


    /**
     * Removes a value of property NcalRelation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNcalRelation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NCALRELATION, value);
	}
	
    /**
     * Removes a value of property NcalRelation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNcalRelation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NCALRELATION, value);
	}
    /**
     * Removes a value of property NcalRelation given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNcalRelation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NCALRELATION, value);
	}
	
    /**
     * Removes a value of property NcalRelation given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNcalRelation(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NCALRELATION, value);
	}
  
    /**
     * Removes all values of property NcalRelation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNcalRelation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NCALRELATION);
	}
	
    /**
     * Removes all values of property NcalRelation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNcalRelation() {
		Base.removeAll(this.model, this.getResource(), NCALRELATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5204f71b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRelatedToChild(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELATEDTOCHILD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5204f71b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRelatedToChild() {
		return Base.has(this.model, this.getResource(), RELATEDTOCHILD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5204f71b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRelatedToChild(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELATEDTOCHILD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5204f71b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRelatedToChild( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATEDTOCHILD);
	}

     /**
     * Get all values of property RelatedToChild as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedToChild_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATEDTOCHILD);
	}
	
    /**
     * Get all values of property RelatedToChild as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedToChild_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDTOCHILD, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RelatedToChild as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedToChild_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATEDTOCHILD);
	}

    /**
     * Get all values of property RelatedToChild as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedToChild_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDTOCHILD, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RelatedToChild     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllRelatedToChild(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATEDTOCHILD, java.lang.String.class);
	}
	
    /**
     * Get all values of property RelatedToChild as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllRelatedToChild_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDTOCHILD, java.lang.String.class);
	}

    /**
     * Get all values of property RelatedToChild     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllRelatedToChild() {
		return Base.getAll(this.model, this.getResource(), RELATEDTOCHILD, java.lang.String.class);
	}

    /**
     * Get all values of property RelatedToChild as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllRelatedToChild_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDTOCHILD, java.lang.String.class);
	}
 
    /**
     * Adds a value to property RelatedToChild as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRelatedToChild(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RELATEDTOCHILD, value);
	}
	
    /**
     * Adds a value to property RelatedToChild as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRelatedToChild( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RELATEDTOCHILD, value);
	}
    /**
     * Adds a value to property RelatedToChild from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRelatedToChild(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, RELATEDTOCHILD, value);
	}
	
    /**
     * Adds a value to property RelatedToChild from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRelatedToChild(java.lang.String value) {
		Base.add(this.model, this.getResource(), RELATEDTOCHILD, value);
	}
  

    /**
     * Sets a value of property RelatedToChild from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRelatedToChild( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELATEDTOCHILD, value);
	}
	
    /**
     * Sets a value of property RelatedToChild from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRelatedToChild( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELATEDTOCHILD, value);
	}
    /**
     * Sets a value of property RelatedToChild from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRelatedToChild(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, RELATEDTOCHILD, value);
	}
	
    /**
     * Sets a value of property RelatedToChild from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRelatedToChild(java.lang.String value) {
		Base.set(this.model, this.getResource(), RELATEDTOCHILD, value);
	}
  


    /**
     * Removes a value of property RelatedToChild as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRelatedToChild( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELATEDTOCHILD, value);
	}
	
    /**
     * Removes a value of property RelatedToChild as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRelatedToChild( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELATEDTOCHILD, value);
	}
    /**
     * Removes a value of property RelatedToChild given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRelatedToChild(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, RELATEDTOCHILD, value);
	}
	
    /**
     * Removes a value of property RelatedToChild given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRelatedToChild(java.lang.String value) {
		Base.remove(this.model, this.getResource(), RELATEDTOCHILD, value);
	}
  
    /**
     * Removes all values of property RelatedToChild     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRelatedToChild( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATEDTOCHILD);
	}
	
    /**
     * Removes all values of property RelatedToChild	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRelatedToChild() {
		Base.removeAll(this.model, this.getResource(), RELATEDTOCHILD);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54a108d0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRelatedToParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELATEDTOPARENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54a108d0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRelatedToParent() {
		return Base.has(this.model, this.getResource(), RELATEDTOPARENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54a108d0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRelatedToParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELATEDTOPARENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54a108d0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRelatedToParent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATEDTOPARENT);
	}

     /**
     * Get all values of property RelatedToParent as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedToParent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATEDTOPARENT);
	}
	
    /**
     * Get all values of property RelatedToParent as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedToParent_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDTOPARENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RelatedToParent as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedToParent_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATEDTOPARENT);
	}

    /**
     * Get all values of property RelatedToParent as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedToParent_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDTOPARENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RelatedToParent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllRelatedToParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATEDTOPARENT, java.lang.String.class);
	}
	
    /**
     * Get all values of property RelatedToParent as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllRelatedToParent_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDTOPARENT, java.lang.String.class);
	}

    /**
     * Get all values of property RelatedToParent     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllRelatedToParent() {
		return Base.getAll(this.model, this.getResource(), RELATEDTOPARENT, java.lang.String.class);
	}

    /**
     * Get all values of property RelatedToParent as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllRelatedToParent_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDTOPARENT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property RelatedToParent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRelatedToParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RELATEDTOPARENT, value);
	}
	
    /**
     * Adds a value to property RelatedToParent as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRelatedToParent( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RELATEDTOPARENT, value);
	}
    /**
     * Adds a value to property RelatedToParent from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRelatedToParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, RELATEDTOPARENT, value);
	}
	
    /**
     * Adds a value to property RelatedToParent from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRelatedToParent(java.lang.String value) {
		Base.add(this.model, this.getResource(), RELATEDTOPARENT, value);
	}
  

    /**
     * Sets a value of property RelatedToParent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRelatedToParent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELATEDTOPARENT, value);
	}
	
    /**
     * Sets a value of property RelatedToParent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRelatedToParent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELATEDTOPARENT, value);
	}
    /**
     * Sets a value of property RelatedToParent from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRelatedToParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, RELATEDTOPARENT, value);
	}
	
    /**
     * Sets a value of property RelatedToParent from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRelatedToParent(java.lang.String value) {
		Base.set(this.model, this.getResource(), RELATEDTOPARENT, value);
	}
  


    /**
     * Removes a value of property RelatedToParent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRelatedToParent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELATEDTOPARENT, value);
	}
	
    /**
     * Removes a value of property RelatedToParent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRelatedToParent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELATEDTOPARENT, value);
	}
    /**
     * Removes a value of property RelatedToParent given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRelatedToParent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, RELATEDTOPARENT, value);
	}
	
    /**
     * Removes a value of property RelatedToParent given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRelatedToParent(java.lang.String value) {
		Base.remove(this.model, this.getResource(), RELATEDTOPARENT, value);
	}
  
    /**
     * Removes all values of property RelatedToParent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRelatedToParent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATEDTOPARENT);
	}
	
    /**
     * Removes all values of property RelatedToParent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRelatedToParent() {
		Base.removeAll(this.model, this.getResource(), RELATEDTOPARENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5322d6ce has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRelatedToSibling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELATEDTOSIBLING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5322d6ce has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRelatedToSibling() {
		return Base.has(this.model, this.getResource(), RELATEDTOSIBLING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5322d6ce has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRelatedToSibling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELATEDTOSIBLING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5322d6ce has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRelatedToSibling( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATEDTOSIBLING);
	}

     /**
     * Get all values of property RelatedToSibling as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedToSibling_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATEDTOSIBLING);
	}
	
    /**
     * Get all values of property RelatedToSibling as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedToSibling_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDTOSIBLING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RelatedToSibling as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedToSibling_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATEDTOSIBLING);
	}

    /**
     * Get all values of property RelatedToSibling as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedToSibling_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDTOSIBLING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RelatedToSibling     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllRelatedToSibling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATEDTOSIBLING, java.lang.String.class);
	}
	
    /**
     * Get all values of property RelatedToSibling as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllRelatedToSibling_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDTOSIBLING, java.lang.String.class);
	}

    /**
     * Get all values of property RelatedToSibling     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllRelatedToSibling() {
		return Base.getAll(this.model, this.getResource(), RELATEDTOSIBLING, java.lang.String.class);
	}

    /**
     * Get all values of property RelatedToSibling as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllRelatedToSibling_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDTOSIBLING, java.lang.String.class);
	}
 
    /**
     * Adds a value to property RelatedToSibling as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRelatedToSibling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RELATEDTOSIBLING, value);
	}
	
    /**
     * Adds a value to property RelatedToSibling as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRelatedToSibling( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RELATEDTOSIBLING, value);
	}
    /**
     * Adds a value to property RelatedToSibling from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRelatedToSibling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, RELATEDTOSIBLING, value);
	}
	
    /**
     * Adds a value to property RelatedToSibling from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRelatedToSibling(java.lang.String value) {
		Base.add(this.model, this.getResource(), RELATEDTOSIBLING, value);
	}
  

    /**
     * Sets a value of property RelatedToSibling from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRelatedToSibling( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELATEDTOSIBLING, value);
	}
	
    /**
     * Sets a value of property RelatedToSibling from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRelatedToSibling( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELATEDTOSIBLING, value);
	}
    /**
     * Sets a value of property RelatedToSibling from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRelatedToSibling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, RELATEDTOSIBLING, value);
	}
	
    /**
     * Sets a value of property RelatedToSibling from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRelatedToSibling(java.lang.String value) {
		Base.set(this.model, this.getResource(), RELATEDTOSIBLING, value);
	}
  


    /**
     * Removes a value of property RelatedToSibling as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRelatedToSibling( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELATEDTOSIBLING, value);
	}
	
    /**
     * Removes a value of property RelatedToSibling as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRelatedToSibling( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELATEDTOSIBLING, value);
	}
    /**
     * Removes a value of property RelatedToSibling given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRelatedToSibling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, RELATEDTOSIBLING, value);
	}
	
    /**
     * Removes a value of property RelatedToSibling given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRelatedToSibling(java.lang.String value) {
		Base.remove(this.model, this.getResource(), RELATEDTOSIBLING, value);
	}
  
    /**
     * Removes all values of property RelatedToSibling     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRelatedToSibling( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATEDTOSIBLING);
	}
	
    /**
     * Removes all values of property RelatedToSibling	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRelatedToSibling() {
		Base.removeAll(this.model, this.getResource(), RELATEDTOSIBLING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24909ce5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SEQUENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24909ce5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSequence() {
		return Base.has(this.model, this.getResource(), SEQUENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24909ce5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SEQUENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24909ce5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSequence( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SEQUENCE);
	}

    /**
     * Get single value of property Sequence as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getSequence_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, SEQUENCE);
	}
	
    /**
     * Get single value of property Sequence as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getSequence_asNode() {
		return Base.get_asNode(this.model, this.getResource(), SEQUENCE);
	}
     /**
     * Get single value of property Sequence     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, SEQUENCE, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property Sequence  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getSequence() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), SEQUENCE, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property Sequence as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, SEQUENCE, value, 1);
	}
	
    /**
     * Adds a value to property Sequence as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addSequence( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SEQUENCE, value, 1);
	}
    /**
     * Adds a value to property Sequence from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, SEQUENCE, value, 1);
	}
	
    /**
     * Adds a value to property Sequence from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addSequence(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SEQUENCE, value, 1);
	}
 
 

    /**
     * Sets a value of property Sequence from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSequence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SEQUENCE, value);
	}
	
    /**
     * Sets a value of property Sequence from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSequence( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SEQUENCE, value);
	}
    /**
     * Sets a value of property Sequence from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, SEQUENCE, value);
	}
	
    /**
     * Sets a value of property Sequence from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSequence(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), SEQUENCE, value);
	}
  


    /**
     * Removes a value of property Sequence as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSequence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SEQUENCE, value);
	}
	
    /**
     * Removes a value of property Sequence as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSequence( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SEQUENCE, value);
	}
    /**
     * Removes a value of property Sequence given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSequence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, SEQUENCE, value);
	}
	
    /**
     * Removes a value of property Sequence given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSequence(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), SEQUENCE, value);
	}
  
    /**
     * Removes all values of property Sequence     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSequence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SEQUENCE);
	}
	
    /**
     * Removes all values of property Sequence	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSequence() {
		Base.removeAll(this.model, this.getResource(), SEQUENCE);
	}
 }