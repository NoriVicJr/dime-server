package eu.dime.ps.semantic.model.tmo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> AbilityCarrierInvolvement </li>
 *   <li> ActualCompletion </li>
 *   <li> ActualEndTime </li>
 *   <li> ActualStartTime </li>
 *   <li> Attachment </li>
 *   <li> ContextThread </li>
 *   <li> Delegability </li>
 *   <li> Dependency </li>
 *   <li> DueDate </li>
 *   <li> Importance </li>
 *   <li> IndexPosition </li>
 *   <li> InvolvedPersons </li>
 *   <li> LastReviewDate </li>
 *   <li> LogEntry </li>
 *   <li> NextReviewIntervall </li>
 *   <li> Priority </li>
 *   <li> SubTask </li>
 *   <li> SubTaskOrdering </li>
 *   <li> SuperTask </li>
 *   <li> TargetCompletion </li>
 *   <li> TargetEndTime </li>
 *   <li> TargetStartTime </li>
 *   <li> TaskDescription </li>
 *   <li> TaskGoal </li>
 *   <li> TaskId </li>
 *   <li> TaskName </li>
 *   <li> TaskPrivacyState </li>
 *   <li> TaskReference </li>
 *   <li> TaskSource </li>
 *   <li> TaskState </li>
 *   <li> TaskTransmission </li>
 *   <li> Urgency </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Task extends eu.dime.ps.semantic.model.pimo.Task {

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#Task */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#Task", false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#abilityCarrierInvolvement */
    @SuppressWarnings("hiding")
	public static final URI ABILITYCARRIERINVOLVEMENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#abilityCarrierInvolvement",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#actualCompletion */
    @SuppressWarnings("hiding")
	public static final URI ACTUALCOMPLETION = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#actualCompletion",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#actualEndTime */
    @SuppressWarnings("hiding")
	public static final URI ACTUALENDTIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#actualEndTime",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#actualStartTime */
    @SuppressWarnings("hiding")
	public static final URI ACTUALSTARTTIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#actualStartTime",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#attachment */
    @SuppressWarnings("hiding")
	public static final URI ATTACHMENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#attachment",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#contextThread */
    @SuppressWarnings("hiding")
	public static final URI CONTEXTTHREAD = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#contextThread",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#delegability */
    @SuppressWarnings("hiding")
	public static final URI DELEGABILITY = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#delegability",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#dependency */
    @SuppressWarnings("hiding")
	public static final URI DEPENDENCY = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#dependency",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#dueDate */
    @SuppressWarnings("hiding")
	public static final URI DUEDATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#dueDate",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#importance */
    @SuppressWarnings("hiding")
	public static final URI IMPORTANCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#importance",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#indexPosition */
    @SuppressWarnings("hiding")
	public static final URI INDEXPOSITION = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#indexPosition",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#involvedPersons */
    @SuppressWarnings("hiding")
	public static final URI INVOLVEDPERSONS = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#involvedPersons",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#lastReviewDate */
    @SuppressWarnings("hiding")
	public static final URI LASTREVIEWDATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#lastReviewDate",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#logEntry */
    @SuppressWarnings("hiding")
	public static final URI LOGENTRY = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#logEntry",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#nextReviewIntervall */
    @SuppressWarnings("hiding")
	public static final URI NEXTREVIEWINTERVALL = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#nextReviewIntervall",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#priority */
    @SuppressWarnings("hiding")
	public static final URI PRIORITY = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#priority",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#subTask */
    @SuppressWarnings("hiding")
	public static final URI SUBTASK = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#subTask",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#subTaskOrdering */
    @SuppressWarnings("hiding")
	public static final URI SUBTASKORDERING = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#subTaskOrdering",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#superTask */
    @SuppressWarnings("hiding")
	public static final URI SUPERTASK = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#superTask",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#targetCompletion */
    @SuppressWarnings("hiding")
	public static final URI TARGETCOMPLETION = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#targetCompletion",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#targetEndTime */
    @SuppressWarnings("hiding")
	public static final URI TARGETENDTIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#targetEndTime",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#targetStartTime */
    @SuppressWarnings("hiding")
	public static final URI TARGETSTARTTIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#targetStartTime",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskDescription */
    @SuppressWarnings("hiding")
	public static final URI TASKDESCRIPTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskDescription",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskGoal */
    @SuppressWarnings("hiding")
	public static final URI TASKGOAL = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskGoal",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskId */
    @SuppressWarnings("hiding")
	public static final URI TASKID = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskId",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskName */
    @SuppressWarnings("hiding")
	public static final URI TASKNAME = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskName",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskPrivacyState */
    @SuppressWarnings("hiding")
	public static final URI TASKPRIVACYSTATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskPrivacyState",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskReference */
    @SuppressWarnings("hiding")
	public static final URI TASKREFERENCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskReference",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskSource */
    @SuppressWarnings("hiding")
	public static final URI TASKSOURCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskSource",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskState */
    @SuppressWarnings("hiding")
	public static final URI TASKSTATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskState",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskTransmission */
    @SuppressWarnings("hiding")
	public static final URI TASKTRANSMISSION = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskTransmission",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#urgency */
    @SuppressWarnings("hiding")
	public static final URI URGENCY = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#urgency",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#abilityCarrierInvolvement",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#actualCompletion",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#actualEndTime",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#actualStartTime",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#attachment",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#contextThread",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#delegability",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#dependency",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#dueDate",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#importance",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#indexPosition",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#involvedPersons",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#lastReviewDate",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#logEntry",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#nextReviewIntervall",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#priority",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#subTask",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#subTaskOrdering",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#superTask",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#targetCompletion",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#targetEndTime",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#targetStartTime",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskDescription",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskGoal",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskId",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskName",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskPrivacyState",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskReference",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskSource",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskState",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#taskTransmission",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#urgency",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Task (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Task (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Task (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Task (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Task (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Task  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Task  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Task.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#Task).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Task> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Task.class );
	}

    /**
	 * Remove rdf:type Task from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ContextTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContextTask_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.CONTEXTTASK, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ContextTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContextTask_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.CONTEXTTASK, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ContextTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllContextTask_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.CONTEXTTASK, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InvolvedPersonTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInvolvedPersonTask_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.tmo.PersonInvolvement.INVOLVEDPERSONTASK, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InvolvedPersonTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInvolvedPersonTask_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.tmo.PersonInvolvement.INVOLVEDPERSONTASK, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InvolvedPersonTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInvolvedPersonTask_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.tmo.PersonInvolvement.INVOLVEDPERSONTASK, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AbilityCarrierTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAbilityCarrierTask_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement.ABILITYCARRIERTASK, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AbilityCarrierTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAbilityCarrierTask_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement.ABILITYCARRIERTASK, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AbilityCarrierTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAbilityCarrierTask_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement.ABILITYCARRIERTASK, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TransmissionTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTransmissionTask_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.tmo.TaskTransmission.TRANSMISSIONTASK, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TransmissionTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTransmissionTask_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.tmo.TaskTransmission.TRANSMISSIONTASK, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TransmissionTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTransmissionTask_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.tmo.TaskTransmission.TRANSMISSIONTASK, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DependencyMemberA' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDependencyMemberA_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.tmo.TaskDependency.DEPENDENCYMEMBERA, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DependencyMemberA' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDependencyMemberA_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.tmo.TaskDependency.DEPENDENCYMEMBERA, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DependencyMemberA' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDependencyMemberA_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.tmo.TaskDependency.DEPENDENCYMEMBERA, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DependencyMemberB' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDependencyMemberB_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.tmo.TaskDependency.DEPENDENCYMEMBERB, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DependencyMemberB' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDependencyMemberB_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.tmo.TaskDependency.DEPENDENCYMEMBERB, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DependencyMemberB' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDependencyMemberB_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.tmo.TaskDependency.DEPENDENCYMEMBERB, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AttachmentTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAttachmentTask_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.tmo.Attachment.ATTACHMENTTASK, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AttachmentTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAttachmentTask_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.tmo.Attachment.ATTACHMENTTASK, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AttachmentTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAttachmentTask_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.tmo.Attachment.ATTACHMENTTASK, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ContainsTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContainsTask_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.tmo.TaskContainer.CONTAINSTASK, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ContainsTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContainsTask_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.tmo.TaskContainer.CONTAINSTASK, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ContainsTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllContainsTask_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.tmo.TaskContainer.CONTAINSTASK, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SubTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubTask_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.tmo.Task.SUBTASK, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SubTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubTask_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.tmo.Task.SUBTASK, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SubTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSubTask_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.tmo.Task.SUBTASK, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SuperTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSuperTask_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.tmo.Task.SUPERTASK, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SuperTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSuperTask_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.tmo.Task.SUPERTASK, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SuperTask' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSuperTask_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.tmo.Task.SUPERTASK, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TaskReference' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTaskReference_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.tmo.Task.TASKREFERENCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TaskReference' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTaskReference_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.tmo.Task.TASKREFERENCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TaskReference' to this Task instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTaskReference_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.tmo.Task.TASKREFERENCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27fbc52c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAbilityCarrierInvolvement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ABILITYCARRIERINVOLVEMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27fbc52c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAbilityCarrierInvolvement() {
		return Base.has(this.model, this.getResource(), ABILITYCARRIERINVOLVEMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27fbc52c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAbilityCarrierInvolvement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ABILITYCARRIERINVOLVEMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27fbc52c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAbilityCarrierInvolvement( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ABILITYCARRIERINVOLVEMENT);
	}

     /**
     * Get all values of property AbilityCarrierInvolvement as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAbilityCarrierInvolvement_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ABILITYCARRIERINVOLVEMENT);
	}
	
    /**
     * Get all values of property AbilityCarrierInvolvement as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAbilityCarrierInvolvement_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ABILITYCARRIERINVOLVEMENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AbilityCarrierInvolvement as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAbilityCarrierInvolvement_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ABILITYCARRIERINVOLVEMENT);
	}

    /**
     * Get all values of property AbilityCarrierInvolvement as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAbilityCarrierInvolvement_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ABILITYCARRIERINVOLVEMENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AbilityCarrierInvolvement     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement> getAllAbilityCarrierInvolvement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ABILITYCARRIERINVOLVEMENT, eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement.class);
	}
	
    /**
     * Get all values of property AbilityCarrierInvolvement as a ReactorResult of AbilityCarrierInvolvement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement> getAllAbilityCarrierInvolvement_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ABILITYCARRIERINVOLVEMENT, eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement.class);
	}

    /**
     * Get all values of property AbilityCarrierInvolvement     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement> getAllAbilityCarrierInvolvement() {
		return Base.getAll(this.model, this.getResource(), ABILITYCARRIERINVOLVEMENT, eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement.class);
	}

    /**
     * Get all values of property AbilityCarrierInvolvement as a ReactorResult of AbilityCarrierInvolvement 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement> getAllAbilityCarrierInvolvement_as() {
		return Base.getAll_as(this.model, this.getResource(), ABILITYCARRIERINVOLVEMENT, eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement.class);
	}
 
    /**
     * Adds a value to property AbilityCarrierInvolvement as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAbilityCarrierInvolvement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ABILITYCARRIERINVOLVEMENT, value);
	}
	
    /**
     * Adds a value to property AbilityCarrierInvolvement as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAbilityCarrierInvolvement( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ABILITYCARRIERINVOLVEMENT, value);
	}
    /**
     * Adds a value to property AbilityCarrierInvolvement from an instance of AbilityCarrierInvolvement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAbilityCarrierInvolvement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement value) {
		Base.add(model, instanceResource, ABILITYCARRIERINVOLVEMENT, value);
	}
	
    /**
     * Adds a value to property AbilityCarrierInvolvement from an instance of AbilityCarrierInvolvement 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAbilityCarrierInvolvement(eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement value) {
		Base.add(this.model, this.getResource(), ABILITYCARRIERINVOLVEMENT, value);
	}
  

    /**
     * Sets a value of property AbilityCarrierInvolvement from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAbilityCarrierInvolvement( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ABILITYCARRIERINVOLVEMENT, value);
	}
	
    /**
     * Sets a value of property AbilityCarrierInvolvement from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAbilityCarrierInvolvement( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ABILITYCARRIERINVOLVEMENT, value);
	}
    /**
     * Sets a value of property AbilityCarrierInvolvement from an instance of AbilityCarrierInvolvement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAbilityCarrierInvolvement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement value) {
		Base.set(model, instanceResource, ABILITYCARRIERINVOLVEMENT, value);
	}
	
    /**
     * Sets a value of property AbilityCarrierInvolvement from an instance of AbilityCarrierInvolvement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAbilityCarrierInvolvement(eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement value) {
		Base.set(this.model, this.getResource(), ABILITYCARRIERINVOLVEMENT, value);
	}
  


    /**
     * Removes a value of property AbilityCarrierInvolvement as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAbilityCarrierInvolvement( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ABILITYCARRIERINVOLVEMENT, value);
	}
	
    /**
     * Removes a value of property AbilityCarrierInvolvement as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAbilityCarrierInvolvement( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ABILITYCARRIERINVOLVEMENT, value);
	}
    /**
     * Removes a value of property AbilityCarrierInvolvement given as an instance of AbilityCarrierInvolvement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAbilityCarrierInvolvement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement value) {
		Base.remove(model, instanceResource, ABILITYCARRIERINVOLVEMENT, value);
	}
	
    /**
     * Removes a value of property AbilityCarrierInvolvement given as an instance of AbilityCarrierInvolvement 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAbilityCarrierInvolvement(eu.dime.ps.semantic.model.tmo.AbilityCarrierInvolvement value) {
		Base.remove(this.model, this.getResource(), ABILITYCARRIERINVOLVEMENT, value);
	}
  
    /**
     * Removes all values of property AbilityCarrierInvolvement     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAbilityCarrierInvolvement( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ABILITYCARRIERINVOLVEMENT);
	}
	
    /**
     * Removes all values of property AbilityCarrierInvolvement	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAbilityCarrierInvolvement() {
		Base.removeAll(this.model, this.getResource(), ABILITYCARRIERINVOLVEMENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e0e77c9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasActualCompletion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ACTUALCOMPLETION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e0e77c9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasActualCompletion() {
		return Base.has(this.model, this.getResource(), ACTUALCOMPLETION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e0e77c9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasActualCompletion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACTUALCOMPLETION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e0e77c9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasActualCompletion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACTUALCOMPLETION);
	}

    /**
     * Get single value of property ActualCompletion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getActualCompletion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, ACTUALCOMPLETION);
	}
	
    /**
     * Get single value of property ActualCompletion as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getActualCompletion_asNode() {
		return Base.get_asNode(this.model, this.getResource(), ACTUALCOMPLETION);
	}
     /**
     * Get single value of property ActualCompletion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getActualCompletion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, ACTUALCOMPLETION, java.lang.String.class);
	}
	
    /**
     * Get single value of property ActualCompletion  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getActualCompletion() {
		return (java.lang.String) Base.get(this.model, this.getResource(), ACTUALCOMPLETION, java.lang.String.class);
	}
  
    /**
     * Adds a value to property ActualCompletion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addActualCompletion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, ACTUALCOMPLETION, value, 1);
	}
	
    /**
     * Adds a value to property ActualCompletion as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addActualCompletion( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ACTUALCOMPLETION, value, 1);
	}
    /**
     * Adds a value to property ActualCompletion from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addActualCompletion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, ACTUALCOMPLETION, value, 1);
	}
	
    /**
     * Adds a value to property ActualCompletion from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addActualCompletion(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ACTUALCOMPLETION, value, 1);
	}
 
 

    /**
     * Sets a value of property ActualCompletion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setActualCompletion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ACTUALCOMPLETION, value);
	}
	
    /**
     * Sets a value of property ActualCompletion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setActualCompletion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ACTUALCOMPLETION, value);
	}
    /**
     * Sets a value of property ActualCompletion from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setActualCompletion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, ACTUALCOMPLETION, value);
	}
	
    /**
     * Sets a value of property ActualCompletion from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setActualCompletion(java.lang.String value) {
		Base.set(this.model, this.getResource(), ACTUALCOMPLETION, value);
	}
  


    /**
     * Removes a value of property ActualCompletion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeActualCompletion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ACTUALCOMPLETION, value);
	}
	
    /**
     * Removes a value of property ActualCompletion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeActualCompletion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ACTUALCOMPLETION, value);
	}
    /**
     * Removes a value of property ActualCompletion given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeActualCompletion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, ACTUALCOMPLETION, value);
	}
	
    /**
     * Removes a value of property ActualCompletion given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeActualCompletion(java.lang.String value) {
		Base.remove(this.model, this.getResource(), ACTUALCOMPLETION, value);
	}
  
    /**
     * Removes all values of property ActualCompletion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllActualCompletion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ACTUALCOMPLETION);
	}
	
    /**
     * Removes all values of property ActualCompletion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllActualCompletion() {
		Base.removeAll(this.model, this.getResource(), ACTUALCOMPLETION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@448d79ee has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasActualEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ACTUALENDTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@448d79ee has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasActualEndTime() {
		return Base.has(this.model, this.getResource(), ACTUALENDTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@448d79ee has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasActualEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACTUALENDTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@448d79ee has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasActualEndTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACTUALENDTIME);
	}

    /**
     * Get single value of property ActualEndTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getActualEndTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, ACTUALENDTIME);
	}
	
    /**
     * Get single value of property ActualEndTime as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getActualEndTime_asNode() {
		return Base.get_asNode(this.model, this.getResource(), ACTUALENDTIME);
	}
     /**
     * Get single value of property ActualEndTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getActualEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, ACTUALENDTIME, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property ActualEndTime  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getActualEndTime() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), ACTUALENDTIME, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property ActualEndTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addActualEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, ACTUALENDTIME, value, 1);
	}
	
    /**
     * Adds a value to property ActualEndTime as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addActualEndTime( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ACTUALENDTIME, value, 1);
	}
    /**
     * Adds a value to property ActualEndTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addActualEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, ACTUALENDTIME, value, 1);
	}
	
    /**
     * Adds a value to property ActualEndTime from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addActualEndTime(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ACTUALENDTIME, value, 1);
	}
 
 

    /**
     * Sets a value of property ActualEndTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setActualEndTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ACTUALENDTIME, value);
	}
	
    /**
     * Sets a value of property ActualEndTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setActualEndTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ACTUALENDTIME, value);
	}
    /**
     * Sets a value of property ActualEndTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setActualEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, ACTUALENDTIME, value);
	}
	
    /**
     * Sets a value of property ActualEndTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setActualEndTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), ACTUALENDTIME, value);
	}
  


    /**
     * Removes a value of property ActualEndTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeActualEndTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ACTUALENDTIME, value);
	}
	
    /**
     * Removes a value of property ActualEndTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeActualEndTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ACTUALENDTIME, value);
	}
    /**
     * Removes a value of property ActualEndTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeActualEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, ACTUALENDTIME, value);
	}
	
    /**
     * Removes a value of property ActualEndTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeActualEndTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), ACTUALENDTIME, value);
	}
  
    /**
     * Removes all values of property ActualEndTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllActualEndTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ACTUALENDTIME);
	}
	
    /**
     * Removes all values of property ActualEndTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllActualEndTime() {
		Base.removeAll(this.model, this.getResource(), ACTUALENDTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3526334e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasActualStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ACTUALSTARTTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3526334e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasActualStartTime() {
		return Base.has(this.model, this.getResource(), ACTUALSTARTTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3526334e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasActualStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACTUALSTARTTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3526334e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasActualStartTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACTUALSTARTTIME);
	}

    /**
     * Get single value of property ActualStartTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getActualStartTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, ACTUALSTARTTIME);
	}
	
    /**
     * Get single value of property ActualStartTime as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getActualStartTime_asNode() {
		return Base.get_asNode(this.model, this.getResource(), ACTUALSTARTTIME);
	}
     /**
     * Get single value of property ActualStartTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getActualStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, ACTUALSTARTTIME, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property ActualStartTime  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getActualStartTime() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), ACTUALSTARTTIME, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property ActualStartTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addActualStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, ACTUALSTARTTIME, value, 1);
	}
	
    /**
     * Adds a value to property ActualStartTime as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addActualStartTime( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ACTUALSTARTTIME, value, 1);
	}
    /**
     * Adds a value to property ActualStartTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addActualStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, ACTUALSTARTTIME, value, 1);
	}
	
    /**
     * Adds a value to property ActualStartTime from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addActualStartTime(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ACTUALSTARTTIME, value, 1);
	}
 
 

    /**
     * Sets a value of property ActualStartTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setActualStartTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ACTUALSTARTTIME, value);
	}
	
    /**
     * Sets a value of property ActualStartTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setActualStartTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ACTUALSTARTTIME, value);
	}
    /**
     * Sets a value of property ActualStartTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setActualStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, ACTUALSTARTTIME, value);
	}
	
    /**
     * Sets a value of property ActualStartTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setActualStartTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), ACTUALSTARTTIME, value);
	}
  


    /**
     * Removes a value of property ActualStartTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeActualStartTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ACTUALSTARTTIME, value);
	}
	
    /**
     * Removes a value of property ActualStartTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeActualStartTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ACTUALSTARTTIME, value);
	}
    /**
     * Removes a value of property ActualStartTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeActualStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, ACTUALSTARTTIME, value);
	}
	
    /**
     * Removes a value of property ActualStartTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeActualStartTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), ACTUALSTARTTIME, value);
	}
  
    /**
     * Removes all values of property ActualStartTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllActualStartTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ACTUALSTARTTIME);
	}
	
    /**
     * Removes all values of property ActualStartTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllActualStartTime() {
		Base.removeAll(this.model, this.getResource(), ACTUALSTARTTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d7135a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ATTACHMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d7135a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAttachment() {
		return Base.has(this.model, this.getResource(), ATTACHMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d7135a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ATTACHMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d7135a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAttachment( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ATTACHMENT);
	}

     /**
     * Get all values of property Attachment as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAttachment_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ATTACHMENT);
	}
	
    /**
     * Get all values of property Attachment as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAttachment_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATTACHMENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Attachment as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAttachment_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ATTACHMENT);
	}

    /**
     * Get all values of property Attachment as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAttachment_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ATTACHMENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Attachment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.tmo.Attachment> getAllAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ATTACHMENT, eu.dime.ps.semantic.model.tmo.Attachment.class);
	}
	
    /**
     * Get all values of property Attachment as a ReactorResult of Attachment 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.tmo.Attachment> getAllAttachment_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATTACHMENT, eu.dime.ps.semantic.model.tmo.Attachment.class);
	}

    /**
     * Get all values of property Attachment     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.tmo.Attachment> getAllAttachment() {
		return Base.getAll(this.model, this.getResource(), ATTACHMENT, eu.dime.ps.semantic.model.tmo.Attachment.class);
	}

    /**
     * Get all values of property Attachment as a ReactorResult of Attachment 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.tmo.Attachment> getAllAttachment_as() {
		return Base.getAll_as(this.model, this.getResource(), ATTACHMENT, eu.dime.ps.semantic.model.tmo.Attachment.class);
	}
 
    /**
     * Adds a value to property Attachment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Adds a value to property Attachment as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAttachment( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ATTACHMENT, value);
	}
    /**
     * Adds a value to property Attachment from an instance of Attachment 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Attachment value) {
		Base.add(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Adds a value to property Attachment from an instance of Attachment 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAttachment(eu.dime.ps.semantic.model.tmo.Attachment value) {
		Base.add(this.model, this.getResource(), ATTACHMENT, value);
	}
  

    /**
     * Sets a value of property Attachment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAttachment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Sets a value of property Attachment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAttachment( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ATTACHMENT, value);
	}
    /**
     * Sets a value of property Attachment from an instance of Attachment 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Attachment value) {
		Base.set(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Sets a value of property Attachment from an instance of Attachment 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAttachment(eu.dime.ps.semantic.model.tmo.Attachment value) {
		Base.set(this.model, this.getResource(), ATTACHMENT, value);
	}
  


    /**
     * Removes a value of property Attachment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAttachment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Removes a value of property Attachment as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAttachment( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ATTACHMENT, value);
	}
    /**
     * Removes a value of property Attachment given as an instance of Attachment 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Attachment value) {
		Base.remove(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Removes a value of property Attachment given as an instance of Attachment 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAttachment(eu.dime.ps.semantic.model.tmo.Attachment value) {
		Base.remove(this.model, this.getResource(), ATTACHMENT, value);
	}
  
    /**
     * Removes all values of property Attachment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAttachment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ATTACHMENT);
	}
	
    /**
     * Removes all values of property Attachment	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAttachment() {
		Base.removeAll(this.model, this.getResource(), ATTACHMENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ad299f8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContextThread(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTEXTTHREAD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ad299f8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContextThread() {
		return Base.has(this.model, this.getResource(), CONTEXTTHREAD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ad299f8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContextThread(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTEXTTHREAD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ad299f8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContextThread( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTEXTTHREAD);
	}

    /**
     * Get single value of property ContextThread as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getContextThread_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, CONTEXTTHREAD);
	}
	
    /**
     * Get single value of property ContextThread as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getContextThread_asNode() {
		return Base.get_asNode(this.model, this.getResource(), CONTEXTTHREAD);
	}
     /**
     * Get single value of property ContextThread     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.workcontext.MediumTermContextThread getContextThread(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.workcontext.MediumTermContextThread) Base.get(model, instanceResource, CONTEXTTHREAD, eu.dime.ps.semantic.model.workcontext.MediumTermContextThread.class);
	}
	
    /**
     * Get single value of property ContextThread  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.workcontext.MediumTermContextThread getContextThread() {
		return (eu.dime.ps.semantic.model.workcontext.MediumTermContextThread) Base.get(this.model, this.getResource(), CONTEXTTHREAD, eu.dime.ps.semantic.model.workcontext.MediumTermContextThread.class);
	}
  
    /**
     * Adds a value to property ContextThread as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addContextThread(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CONTEXTTHREAD, value, 1);
	}
	
    /**
     * Adds a value to property ContextThread as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addContextThread( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTEXTTHREAD, value, 1);
	}
    /**
     * Adds a value to property ContextThread from an instance of MediumTermContextThread 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addContextThread(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.workcontext.MediumTermContextThread value)
    throws CardinalityException {
		Base.add(model, instanceResource, CONTEXTTHREAD, value, 1);
	}
	
    /**
     * Adds a value to property ContextThread from an instance of MediumTermContextThread 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addContextThread(eu.dime.ps.semantic.model.workcontext.MediumTermContextThread value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTEXTTHREAD, value, 1);
	}
 
 

    /**
     * Sets a value of property ContextThread from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContextThread( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTEXTTHREAD, value);
	}
	
    /**
     * Sets a value of property ContextThread from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContextThread( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTEXTTHREAD, value);
	}
    /**
     * Sets a value of property ContextThread from an instance of MediumTermContextThread 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContextThread(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.workcontext.MediumTermContextThread value) {
		Base.set(model, instanceResource, CONTEXTTHREAD, value);
	}
	
    /**
     * Sets a value of property ContextThread from an instance of MediumTermContextThread 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContextThread(eu.dime.ps.semantic.model.workcontext.MediumTermContextThread value) {
		Base.set(this.model, this.getResource(), CONTEXTTHREAD, value);
	}
  


    /**
     * Removes a value of property ContextThread as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContextThread( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTEXTTHREAD, value);
	}
	
    /**
     * Removes a value of property ContextThread as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContextThread( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTEXTTHREAD, value);
	}
    /**
     * Removes a value of property ContextThread given as an instance of MediumTermContextThread 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContextThread(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.workcontext.MediumTermContextThread value) {
		Base.remove(model, instanceResource, CONTEXTTHREAD, value);
	}
	
    /**
     * Removes a value of property ContextThread given as an instance of MediumTermContextThread 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContextThread(eu.dime.ps.semantic.model.workcontext.MediumTermContextThread value) {
		Base.remove(this.model, this.getResource(), CONTEXTTHREAD, value);
	}
  
    /**
     * Removes all values of property ContextThread     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContextThread( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTEXTTHREAD);
	}
	
    /**
     * Removes all values of property ContextThread	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContextThread() {
		Base.removeAll(this.model, this.getResource(), CONTEXTTHREAD);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2026d195 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDelegability(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DELEGABILITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2026d195 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDelegability() {
		return Base.has(this.model, this.getResource(), DELEGABILITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2026d195 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDelegability(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DELEGABILITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2026d195 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDelegability( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DELEGABILITY);
	}

    /**
     * Get single value of property Delegability as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getDelegability_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, DELEGABILITY);
	}
	
    /**
     * Get single value of property Delegability as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getDelegability_asNode() {
		return Base.get_asNode(this.model, this.getResource(), DELEGABILITY);
	}
     /**
     * Get single value of property Delegability     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.tmo.Delegability getDelegability(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.tmo.Delegability) Base.get(model, instanceResource, DELEGABILITY, eu.dime.ps.semantic.model.tmo.Delegability.class);
	}
	
    /**
     * Get single value of property Delegability  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.tmo.Delegability getDelegability() {
		return (eu.dime.ps.semantic.model.tmo.Delegability) Base.get(this.model, this.getResource(), DELEGABILITY, eu.dime.ps.semantic.model.tmo.Delegability.class);
	}
  
    /**
     * Adds a value to property Delegability as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addDelegability(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, DELEGABILITY, value, 1);
	}
	
    /**
     * Adds a value to property Delegability as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addDelegability( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DELEGABILITY, value, 1);
	}
    /**
     * Adds a value to property Delegability from an instance of Delegability 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addDelegability(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Delegability value)
    throws CardinalityException {
		Base.add(model, instanceResource, DELEGABILITY, value, 1);
	}
	
    /**
     * Adds a value to property Delegability from an instance of Delegability 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addDelegability(eu.dime.ps.semantic.model.tmo.Delegability value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DELEGABILITY, value, 1);
	}
 
 

    /**
     * Sets a value of property Delegability from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDelegability( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DELEGABILITY, value);
	}
	
    /**
     * Sets a value of property Delegability from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDelegability( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DELEGABILITY, value);
	}
    /**
     * Sets a value of property Delegability from an instance of Delegability 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDelegability(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Delegability value) {
		Base.set(model, instanceResource, DELEGABILITY, value);
	}
	
    /**
     * Sets a value of property Delegability from an instance of Delegability 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDelegability(eu.dime.ps.semantic.model.tmo.Delegability value) {
		Base.set(this.model, this.getResource(), DELEGABILITY, value);
	}
  


    /**
     * Removes a value of property Delegability as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDelegability( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DELEGABILITY, value);
	}
	
    /**
     * Removes a value of property Delegability as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDelegability( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DELEGABILITY, value);
	}
    /**
     * Removes a value of property Delegability given as an instance of Delegability 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDelegability(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Delegability value) {
		Base.remove(model, instanceResource, DELEGABILITY, value);
	}
	
    /**
     * Removes a value of property Delegability given as an instance of Delegability 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDelegability(eu.dime.ps.semantic.model.tmo.Delegability value) {
		Base.remove(this.model, this.getResource(), DELEGABILITY, value);
	}
  
    /**
     * Removes all values of property Delegability     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDelegability( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DELEGABILITY);
	}
	
    /**
     * Removes all values of property Delegability	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDelegability() {
		Base.removeAll(this.model, this.getResource(), DELEGABILITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53d2ffb0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDependency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEPENDENCY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53d2ffb0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDependency() {
		return Base.has(this.model, this.getResource(), DEPENDENCY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53d2ffb0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDependency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEPENDENCY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53d2ffb0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDependency( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEPENDENCY);
	}

     /**
     * Get all values of property Dependency as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDependency_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DEPENDENCY);
	}
	
    /**
     * Get all values of property Dependency as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDependency_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEPENDENCY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Dependency as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDependency_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DEPENDENCY);
	}

    /**
     * Get all values of property Dependency as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDependency_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DEPENDENCY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Dependency     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.tmo.TaskDependency> getAllDependency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DEPENDENCY, eu.dime.ps.semantic.model.tmo.TaskDependency.class);
	}
	
    /**
     * Get all values of property Dependency as a ReactorResult of TaskDependency 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.tmo.TaskDependency> getAllDependency_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEPENDENCY, eu.dime.ps.semantic.model.tmo.TaskDependency.class);
	}

    /**
     * Get all values of property Dependency     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.tmo.TaskDependency> getAllDependency() {
		return Base.getAll(this.model, this.getResource(), DEPENDENCY, eu.dime.ps.semantic.model.tmo.TaskDependency.class);
	}

    /**
     * Get all values of property Dependency as a ReactorResult of TaskDependency 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.tmo.TaskDependency> getAllDependency_as() {
		return Base.getAll_as(this.model, this.getResource(), DEPENDENCY, eu.dime.ps.semantic.model.tmo.TaskDependency.class);
	}
 
    /**
     * Adds a value to property Dependency as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDependency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DEPENDENCY, value);
	}
	
    /**
     * Adds a value to property Dependency as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDependency( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DEPENDENCY, value);
	}
    /**
     * Adds a value to property Dependency from an instance of TaskDependency 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDependency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TaskDependency value) {
		Base.add(model, instanceResource, DEPENDENCY, value);
	}
	
    /**
     * Adds a value to property Dependency from an instance of TaskDependency 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDependency(eu.dime.ps.semantic.model.tmo.TaskDependency value) {
		Base.add(this.model, this.getResource(), DEPENDENCY, value);
	}
  

    /**
     * Sets a value of property Dependency from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDependency( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEPENDENCY, value);
	}
	
    /**
     * Sets a value of property Dependency from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDependency( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEPENDENCY, value);
	}
    /**
     * Sets a value of property Dependency from an instance of TaskDependency 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDependency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TaskDependency value) {
		Base.set(model, instanceResource, DEPENDENCY, value);
	}
	
    /**
     * Sets a value of property Dependency from an instance of TaskDependency 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDependency(eu.dime.ps.semantic.model.tmo.TaskDependency value) {
		Base.set(this.model, this.getResource(), DEPENDENCY, value);
	}
  


    /**
     * Removes a value of property Dependency as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDependency( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEPENDENCY, value);
	}
	
    /**
     * Removes a value of property Dependency as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDependency( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEPENDENCY, value);
	}
    /**
     * Removes a value of property Dependency given as an instance of TaskDependency 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDependency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TaskDependency value) {
		Base.remove(model, instanceResource, DEPENDENCY, value);
	}
	
    /**
     * Removes a value of property Dependency given as an instance of TaskDependency 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDependency(eu.dime.ps.semantic.model.tmo.TaskDependency value) {
		Base.remove(this.model, this.getResource(), DEPENDENCY, value);
	}
  
    /**
     * Removes all values of property Dependency     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDependency( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEPENDENCY);
	}
	
    /**
     * Removes all values of property Dependency	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDependency() {
		Base.removeAll(this.model, this.getResource(), DEPENDENCY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c15712b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDueDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DUEDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c15712b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDueDate() {
		return Base.has(this.model, this.getResource(), DUEDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c15712b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDueDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DUEDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c15712b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDueDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DUEDATE);
	}

    /**
     * Get single value of property DueDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getDueDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, DUEDATE);
	}
	
    /**
     * Get single value of property DueDate as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getDueDate_asNode() {
		return Base.get_asNode(this.model, this.getResource(), DUEDATE);
	}
     /**
     * Get single value of property DueDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getDueDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, DUEDATE, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property DueDate  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getDueDate() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), DUEDATE, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property DueDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addDueDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, DUEDATE, value, 1);
	}
	
    /**
     * Adds a value to property DueDate as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addDueDate( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DUEDATE, value, 1);
	}
    /**
     * Adds a value to property DueDate from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addDueDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, DUEDATE, value, 1);
	}
	
    /**
     * Adds a value to property DueDate from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addDueDate(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DUEDATE, value, 1);
	}
 
 

    /**
     * Sets a value of property DueDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDueDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DUEDATE, value);
	}
	
    /**
     * Sets a value of property DueDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDueDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DUEDATE, value);
	}
    /**
     * Sets a value of property DueDate from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDueDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, DUEDATE, value);
	}
	
    /**
     * Sets a value of property DueDate from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDueDate(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), DUEDATE, value);
	}
  


    /**
     * Removes a value of property DueDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDueDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DUEDATE, value);
	}
	
    /**
     * Removes a value of property DueDate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDueDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DUEDATE, value);
	}
    /**
     * Removes a value of property DueDate given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDueDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, DUEDATE, value);
	}
	
    /**
     * Removes a value of property DueDate given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDueDate(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), DUEDATE, value);
	}
  
    /**
     * Removes all values of property DueDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDueDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DUEDATE);
	}
	
    /**
     * Removes all values of property DueDate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDueDate() {
		Base.removeAll(this.model, this.getResource(), DUEDATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52a41200 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImportance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMPORTANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52a41200 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImportance() {
		return Base.has(this.model, this.getResource(), IMPORTANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52a41200 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImportance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMPORTANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52a41200 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImportance( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMPORTANCE);
	}

    /**
     * Get single value of property Importance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getImportance_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, IMPORTANCE);
	}
	
    /**
     * Get single value of property Importance as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getImportance_asNode() {
		return Base.get_asNode(this.model, this.getResource(), IMPORTANCE);
	}
     /**
     * Get single value of property Importance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.tmo.Importance getImportance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.tmo.Importance) Base.get(model, instanceResource, IMPORTANCE, eu.dime.ps.semantic.model.tmo.Importance.class);
	}
	
    /**
     * Get single value of property Importance  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.tmo.Importance getImportance() {
		return (eu.dime.ps.semantic.model.tmo.Importance) Base.get(this.model, this.getResource(), IMPORTANCE, eu.dime.ps.semantic.model.tmo.Importance.class);
	}
  
    /**
     * Adds a value to property Importance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addImportance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, IMPORTANCE, value, 1);
	}
	
    /**
     * Adds a value to property Importance as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addImportance( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), IMPORTANCE, value, 1);
	}
    /**
     * Adds a value to property Importance from an instance of Importance 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addImportance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Importance value)
    throws CardinalityException {
		Base.add(model, instanceResource, IMPORTANCE, value, 1);
	}
	
    /**
     * Adds a value to property Importance from an instance of Importance 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addImportance(eu.dime.ps.semantic.model.tmo.Importance value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), IMPORTANCE, value, 1);
	}
 
 

    /**
     * Sets a value of property Importance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImportance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMPORTANCE, value);
	}
	
    /**
     * Sets a value of property Importance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImportance( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMPORTANCE, value);
	}
    /**
     * Sets a value of property Importance from an instance of Importance 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImportance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Importance value) {
		Base.set(model, instanceResource, IMPORTANCE, value);
	}
	
    /**
     * Sets a value of property Importance from an instance of Importance 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImportance(eu.dime.ps.semantic.model.tmo.Importance value) {
		Base.set(this.model, this.getResource(), IMPORTANCE, value);
	}
  


    /**
     * Removes a value of property Importance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImportance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMPORTANCE, value);
	}
	
    /**
     * Removes a value of property Importance as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImportance( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMPORTANCE, value);
	}
    /**
     * Removes a value of property Importance given as an instance of Importance 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImportance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Importance value) {
		Base.remove(model, instanceResource, IMPORTANCE, value);
	}
	
    /**
     * Removes a value of property Importance given as an instance of Importance 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImportance(eu.dime.ps.semantic.model.tmo.Importance value) {
		Base.remove(this.model, this.getResource(), IMPORTANCE, value);
	}
  
    /**
     * Removes all values of property Importance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImportance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMPORTANCE);
	}
	
    /**
     * Removes all values of property Importance	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImportance() {
		Base.removeAll(this.model, this.getResource(), IMPORTANCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20f4dd16 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIndexPosition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INDEXPOSITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20f4dd16 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIndexPosition() {
		return Base.has(this.model, this.getResource(), INDEXPOSITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20f4dd16 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIndexPosition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INDEXPOSITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20f4dd16 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIndexPosition( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INDEXPOSITION);
	}

    /**
     * Get single value of property IndexPosition as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getIndexPosition_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, INDEXPOSITION);
	}
	
    /**
     * Get single value of property IndexPosition as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getIndexPosition_asNode() {
		return Base.get_asNode(this.model, this.getResource(), INDEXPOSITION);
	}
     /**
     * Get single value of property IndexPosition     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getIndexPosition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, INDEXPOSITION, java.lang.String.class);
	}
	
    /**
     * Get single value of property IndexPosition  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getIndexPosition() {
		return (java.lang.String) Base.get(this.model, this.getResource(), INDEXPOSITION, java.lang.String.class);
	}
  
    /**
     * Adds a value to property IndexPosition as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addIndexPosition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, INDEXPOSITION, value, 1);
	}
	
    /**
     * Adds a value to property IndexPosition as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addIndexPosition( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), INDEXPOSITION, value, 1);
	}
    /**
     * Adds a value to property IndexPosition from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addIndexPosition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, INDEXPOSITION, value, 1);
	}
	
    /**
     * Adds a value to property IndexPosition from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addIndexPosition(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), INDEXPOSITION, value, 1);
	}
 
 

    /**
     * Sets a value of property IndexPosition from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIndexPosition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INDEXPOSITION, value);
	}
	
    /**
     * Sets a value of property IndexPosition from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIndexPosition( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INDEXPOSITION, value);
	}
    /**
     * Sets a value of property IndexPosition from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIndexPosition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, INDEXPOSITION, value);
	}
	
    /**
     * Sets a value of property IndexPosition from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIndexPosition(java.lang.String value) {
		Base.set(this.model, this.getResource(), INDEXPOSITION, value);
	}
  


    /**
     * Removes a value of property IndexPosition as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIndexPosition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INDEXPOSITION, value);
	}
	
    /**
     * Removes a value of property IndexPosition as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIndexPosition( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INDEXPOSITION, value);
	}
    /**
     * Removes a value of property IndexPosition given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIndexPosition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, INDEXPOSITION, value);
	}
	
    /**
     * Removes a value of property IndexPosition given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIndexPosition(java.lang.String value) {
		Base.remove(this.model, this.getResource(), INDEXPOSITION, value);
	}
  
    /**
     * Removes all values of property IndexPosition     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIndexPosition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INDEXPOSITION);
	}
	
    /**
     * Removes all values of property IndexPosition	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIndexPosition() {
		Base.removeAll(this.model, this.getResource(), INDEXPOSITION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c869122 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInvolvedPersons(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INVOLVEDPERSONS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c869122 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInvolvedPersons() {
		return Base.has(this.model, this.getResource(), INVOLVEDPERSONS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c869122 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInvolvedPersons(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INVOLVEDPERSONS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c869122 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInvolvedPersons( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INVOLVEDPERSONS);
	}

     /**
     * Get all values of property InvolvedPersons as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInvolvedPersons_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INVOLVEDPERSONS);
	}
	
    /**
     * Get all values of property InvolvedPersons as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInvolvedPersons_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVOLVEDPERSONS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InvolvedPersons as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInvolvedPersons_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INVOLVEDPERSONS);
	}

    /**
     * Get all values of property InvolvedPersons as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInvolvedPersons_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INVOLVEDPERSONS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InvolvedPersons     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.tmo.PersonInvolvement> getAllInvolvedPersons(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INVOLVEDPERSONS, eu.dime.ps.semantic.model.tmo.PersonInvolvement.class);
	}
	
    /**
     * Get all values of property InvolvedPersons as a ReactorResult of PersonInvolvement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.tmo.PersonInvolvement> getAllInvolvedPersons_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVOLVEDPERSONS, eu.dime.ps.semantic.model.tmo.PersonInvolvement.class);
	}

    /**
     * Get all values of property InvolvedPersons     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.tmo.PersonInvolvement> getAllInvolvedPersons() {
		return Base.getAll(this.model, this.getResource(), INVOLVEDPERSONS, eu.dime.ps.semantic.model.tmo.PersonInvolvement.class);
	}

    /**
     * Get all values of property InvolvedPersons as a ReactorResult of PersonInvolvement 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.tmo.PersonInvolvement> getAllInvolvedPersons_as() {
		return Base.getAll_as(this.model, this.getResource(), INVOLVEDPERSONS, eu.dime.ps.semantic.model.tmo.PersonInvolvement.class);
	}
 
    /**
     * Adds a value to property InvolvedPersons as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInvolvedPersons(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INVOLVEDPERSONS, value);
	}
	
    /**
     * Adds a value to property InvolvedPersons as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInvolvedPersons( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INVOLVEDPERSONS, value);
	}
    /**
     * Adds a value to property InvolvedPersons from an instance of PersonInvolvement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInvolvedPersons(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.PersonInvolvement value) {
		Base.add(model, instanceResource, INVOLVEDPERSONS, value);
	}
	
    /**
     * Adds a value to property InvolvedPersons from an instance of PersonInvolvement 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInvolvedPersons(eu.dime.ps.semantic.model.tmo.PersonInvolvement value) {
		Base.add(this.model, this.getResource(), INVOLVEDPERSONS, value);
	}
  

    /**
     * Sets a value of property InvolvedPersons from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInvolvedPersons( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INVOLVEDPERSONS, value);
	}
	
    /**
     * Sets a value of property InvolvedPersons from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInvolvedPersons( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INVOLVEDPERSONS, value);
	}
    /**
     * Sets a value of property InvolvedPersons from an instance of PersonInvolvement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInvolvedPersons(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.PersonInvolvement value) {
		Base.set(model, instanceResource, INVOLVEDPERSONS, value);
	}
	
    /**
     * Sets a value of property InvolvedPersons from an instance of PersonInvolvement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInvolvedPersons(eu.dime.ps.semantic.model.tmo.PersonInvolvement value) {
		Base.set(this.model, this.getResource(), INVOLVEDPERSONS, value);
	}
  


    /**
     * Removes a value of property InvolvedPersons as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInvolvedPersons( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INVOLVEDPERSONS, value);
	}
	
    /**
     * Removes a value of property InvolvedPersons as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInvolvedPersons( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INVOLVEDPERSONS, value);
	}
    /**
     * Removes a value of property InvolvedPersons given as an instance of PersonInvolvement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInvolvedPersons(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.PersonInvolvement value) {
		Base.remove(model, instanceResource, INVOLVEDPERSONS, value);
	}
	
    /**
     * Removes a value of property InvolvedPersons given as an instance of PersonInvolvement 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInvolvedPersons(eu.dime.ps.semantic.model.tmo.PersonInvolvement value) {
		Base.remove(this.model, this.getResource(), INVOLVEDPERSONS, value);
	}
  
    /**
     * Removes all values of property InvolvedPersons     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInvolvedPersons( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INVOLVEDPERSONS);
	}
	
    /**
     * Removes all values of property InvolvedPersons	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInvolvedPersons() {
		Base.removeAll(this.model, this.getResource(), INVOLVEDPERSONS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@416d502b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLastReviewDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LASTREVIEWDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@416d502b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLastReviewDate() {
		return Base.has(this.model, this.getResource(), LASTREVIEWDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@416d502b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLastReviewDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LASTREVIEWDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@416d502b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLastReviewDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LASTREVIEWDATE);
	}

    /**
     * Get single value of property LastReviewDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getLastReviewDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, LASTREVIEWDATE);
	}
	
    /**
     * Get single value of property LastReviewDate as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getLastReviewDate_asNode() {
		return Base.get_asNode(this.model, this.getResource(), LASTREVIEWDATE);
	}
     /**
     * Get single value of property LastReviewDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getLastReviewDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, LASTREVIEWDATE, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property LastReviewDate  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getLastReviewDate() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), LASTREVIEWDATE, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property LastReviewDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addLastReviewDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, LASTREVIEWDATE, value, 1);
	}
	
    /**
     * Adds a value to property LastReviewDate as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addLastReviewDate( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LASTREVIEWDATE, value, 1);
	}
    /**
     * Adds a value to property LastReviewDate from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addLastReviewDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, LASTREVIEWDATE, value, 1);
	}
	
    /**
     * Adds a value to property LastReviewDate from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addLastReviewDate(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LASTREVIEWDATE, value, 1);
	}
 
 

    /**
     * Sets a value of property LastReviewDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLastReviewDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LASTREVIEWDATE, value);
	}
	
    /**
     * Sets a value of property LastReviewDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLastReviewDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LASTREVIEWDATE, value);
	}
    /**
     * Sets a value of property LastReviewDate from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLastReviewDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, LASTREVIEWDATE, value);
	}
	
    /**
     * Sets a value of property LastReviewDate from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLastReviewDate(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), LASTREVIEWDATE, value);
	}
  


    /**
     * Removes a value of property LastReviewDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLastReviewDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LASTREVIEWDATE, value);
	}
	
    /**
     * Removes a value of property LastReviewDate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLastReviewDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LASTREVIEWDATE, value);
	}
    /**
     * Removes a value of property LastReviewDate given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLastReviewDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, LASTREVIEWDATE, value);
	}
	
    /**
     * Removes a value of property LastReviewDate given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLastReviewDate(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), LASTREVIEWDATE, value);
	}
  
    /**
     * Removes all values of property LastReviewDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLastReviewDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LASTREVIEWDATE);
	}
	
    /**
     * Removes all values of property LastReviewDate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLastReviewDate() {
		Base.removeAll(this.model, this.getResource(), LASTREVIEWDATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c2e6bfa has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLogEntry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LOGENTRY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c2e6bfa has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLogEntry() {
		return Base.has(this.model, this.getResource(), LOGENTRY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c2e6bfa has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLogEntry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LOGENTRY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c2e6bfa has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLogEntry( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LOGENTRY);
	}

     /**
     * Get all values of property LogEntry as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLogEntry_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LOGENTRY);
	}
	
    /**
     * Get all values of property LogEntry as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLogEntry_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOGENTRY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property LogEntry as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLogEntry_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LOGENTRY);
	}

    /**
     * Get all values of property LogEntry as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLogEntry_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LOGENTRY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property LogEntry     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllLogEntry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LOGENTRY, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property LogEntry as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllLogEntry_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOGENTRY, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property LogEntry     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllLogEntry() {
		return Base.getAll(this.model, this.getResource(), LOGENTRY, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property LogEntry as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllLogEntry_as() {
		return Base.getAll_as(this.model, this.getResource(), LOGENTRY, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property LogEntry as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLogEntry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LOGENTRY, value);
	}
	
    /**
     * Adds a value to property LogEntry as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLogEntry( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LOGENTRY, value);
	}
    /**
     * Adds a value to property LogEntry from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLogEntry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, LOGENTRY, value);
	}
	
    /**
     * Adds a value to property LogEntry from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLogEntry(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), LOGENTRY, value);
	}
  

    /**
     * Sets a value of property LogEntry from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLogEntry( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LOGENTRY, value);
	}
	
    /**
     * Sets a value of property LogEntry from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLogEntry( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LOGENTRY, value);
	}
    /**
     * Sets a value of property LogEntry from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLogEntry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, LOGENTRY, value);
	}
	
    /**
     * Sets a value of property LogEntry from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLogEntry(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), LOGENTRY, value);
	}
  


    /**
     * Removes a value of property LogEntry as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLogEntry( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LOGENTRY, value);
	}
	
    /**
     * Removes a value of property LogEntry as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLogEntry( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LOGENTRY, value);
	}
    /**
     * Removes a value of property LogEntry given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLogEntry(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, LOGENTRY, value);
	}
	
    /**
     * Removes a value of property LogEntry given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLogEntry(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), LOGENTRY, value);
	}
  
    /**
     * Removes all values of property LogEntry     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLogEntry( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LOGENTRY);
	}
	
    /**
     * Removes all values of property LogEntry	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLogEntry() {
		Base.removeAll(this.model, this.getResource(), LOGENTRY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b4b3547 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNextReviewIntervall(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NEXTREVIEWINTERVALL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b4b3547 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNextReviewIntervall() {
		return Base.has(this.model, this.getResource(), NEXTREVIEWINTERVALL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b4b3547 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNextReviewIntervall(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NEXTREVIEWINTERVALL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3b4b3547 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNextReviewIntervall( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NEXTREVIEWINTERVALL);
	}

    /**
     * Get single value of property NextReviewIntervall as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getNextReviewIntervall_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, NEXTREVIEWINTERVALL);
	}
	
    /**
     * Get single value of property NextReviewIntervall as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getNextReviewIntervall_asNode() {
		return Base.get_asNode(this.model, this.getResource(), NEXTREVIEWINTERVALL);
	}
     /**
     * Get single value of property NextReviewIntervall     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getNextReviewIntervall(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, NEXTREVIEWINTERVALL, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property NextReviewIntervall  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getNextReviewIntervall() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), NEXTREVIEWINTERVALL, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property NextReviewIntervall as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addNextReviewIntervall(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, NEXTREVIEWINTERVALL, value, 1);
	}
	
    /**
     * Adds a value to property NextReviewIntervall as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addNextReviewIntervall( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), NEXTREVIEWINTERVALL, value, 1);
	}
    /**
     * Adds a value to property NextReviewIntervall from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addNextReviewIntervall(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, NEXTREVIEWINTERVALL, value, 1);
	}
	
    /**
     * Adds a value to property NextReviewIntervall from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addNextReviewIntervall(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), NEXTREVIEWINTERVALL, value, 1);
	}
 
 

    /**
     * Sets a value of property NextReviewIntervall from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNextReviewIntervall( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NEXTREVIEWINTERVALL, value);
	}
	
    /**
     * Sets a value of property NextReviewIntervall from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNextReviewIntervall( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NEXTREVIEWINTERVALL, value);
	}
    /**
     * Sets a value of property NextReviewIntervall from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNextReviewIntervall(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, NEXTREVIEWINTERVALL, value);
	}
	
    /**
     * Sets a value of property NextReviewIntervall from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNextReviewIntervall(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), NEXTREVIEWINTERVALL, value);
	}
  


    /**
     * Removes a value of property NextReviewIntervall as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNextReviewIntervall( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NEXTREVIEWINTERVALL, value);
	}
	
    /**
     * Removes a value of property NextReviewIntervall as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNextReviewIntervall( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NEXTREVIEWINTERVALL, value);
	}
    /**
     * Removes a value of property NextReviewIntervall given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNextReviewIntervall(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, NEXTREVIEWINTERVALL, value);
	}
	
    /**
     * Removes a value of property NextReviewIntervall given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNextReviewIntervall(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), NEXTREVIEWINTERVALL, value);
	}
  
    /**
     * Removes all values of property NextReviewIntervall     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNextReviewIntervall( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NEXTREVIEWINTERVALL);
	}
	
    /**
     * Removes all values of property NextReviewIntervall	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNextReviewIntervall() {
		Base.removeAll(this.model, this.getResource(), NEXTREVIEWINTERVALL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b13fc32 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPriority(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRIORITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b13fc32 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPriority() {
		return Base.has(this.model, this.getResource(), PRIORITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b13fc32 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPriority(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRIORITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b13fc32 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPriority( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRIORITY);
	}

    /**
     * Get single value of property Priority as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getPriority_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, PRIORITY);
	}
	
    /**
     * Get single value of property Priority as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getPriority_asNode() {
		return Base.get_asNode(this.model, this.getResource(), PRIORITY);
	}
     /**
     * Get single value of property Priority     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.tmo.Priority getPriority(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.tmo.Priority) Base.get(model, instanceResource, PRIORITY, eu.dime.ps.semantic.model.tmo.Priority.class);
	}
	
    /**
     * Get single value of property Priority  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.tmo.Priority getPriority() {
		return (eu.dime.ps.semantic.model.tmo.Priority) Base.get(this.model, this.getResource(), PRIORITY, eu.dime.ps.semantic.model.tmo.Priority.class);
	}
  
    /**
     * Adds a value to property Priority as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addPriority(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, PRIORITY, value, 1);
	}
	
    /**
     * Adds a value to property Priority as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addPriority( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PRIORITY, value, 1);
	}
    /**
     * Adds a value to property Priority from an instance of Priority 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addPriority(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Priority value)
    throws CardinalityException {
		Base.add(model, instanceResource, PRIORITY, value, 1);
	}
	
    /**
     * Adds a value to property Priority from an instance of Priority 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addPriority(eu.dime.ps.semantic.model.tmo.Priority value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PRIORITY, value, 1);
	}
 
 

    /**
     * Sets a value of property Priority from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPriority( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRIORITY, value);
	}
	
    /**
     * Sets a value of property Priority from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPriority( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRIORITY, value);
	}
    /**
     * Sets a value of property Priority from an instance of Priority 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPriority(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Priority value) {
		Base.set(model, instanceResource, PRIORITY, value);
	}
	
    /**
     * Sets a value of property Priority from an instance of Priority 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPriority(eu.dime.ps.semantic.model.tmo.Priority value) {
		Base.set(this.model, this.getResource(), PRIORITY, value);
	}
  


    /**
     * Removes a value of property Priority as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePriority( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRIORITY, value);
	}
	
    /**
     * Removes a value of property Priority as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePriority( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRIORITY, value);
	}
    /**
     * Removes a value of property Priority given as an instance of Priority 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePriority(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Priority value) {
		Base.remove(model, instanceResource, PRIORITY, value);
	}
	
    /**
     * Removes a value of property Priority given as an instance of Priority 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePriority(eu.dime.ps.semantic.model.tmo.Priority value) {
		Base.remove(this.model, this.getResource(), PRIORITY, value);
	}
  
    /**
     * Removes all values of property Priority     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPriority( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRIORITY);
	}
	
    /**
     * Removes all values of property Priority	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPriority() {
		Base.removeAll(this.model, this.getResource(), PRIORITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c4857df has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBTASK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c4857df has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubTask() {
		return Base.has(this.model, this.getResource(), SUBTASK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c4857df has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBTASK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c4857df has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubTask( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBTASK);
	}

     /**
     * Get all values of property SubTask as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubTask_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBTASK);
	}
	
    /**
     * Get all values of property SubTask as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubTask_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBTASK, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SubTask as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubTask_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBTASK);
	}

    /**
     * Get all values of property SubTask as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubTask_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBTASK, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SubTask     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.tmo.Task> getAllSubTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBTASK, eu.dime.ps.semantic.model.tmo.Task.class);
	}
	
    /**
     * Get all values of property SubTask as a ReactorResult of Task 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.tmo.Task> getAllSubTask_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBTASK, eu.dime.ps.semantic.model.tmo.Task.class);
	}

    /**
     * Get all values of property SubTask     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.tmo.Task> getAllSubTask() {
		return Base.getAll(this.model, this.getResource(), SUBTASK, eu.dime.ps.semantic.model.tmo.Task.class);
	}

    /**
     * Get all values of property SubTask as a ReactorResult of Task 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.tmo.Task> getAllSubTask_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBTASK, eu.dime.ps.semantic.model.tmo.Task.class);
	}
 
    /**
     * Adds a value to property SubTask as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBTASK, value);
	}
	
    /**
     * Adds a value to property SubTask as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubTask( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBTASK, value);
	}
    /**
     * Adds a value to property SubTask from an instance of Task 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Task value) {
		Base.add(model, instanceResource, SUBTASK, value);
	}
	
    /**
     * Adds a value to property SubTask from an instance of Task 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubTask(eu.dime.ps.semantic.model.tmo.Task value) {
		Base.add(this.model, this.getResource(), SUBTASK, value);
	}
  

    /**
     * Sets a value of property SubTask from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubTask( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBTASK, value);
	}
	
    /**
     * Sets a value of property SubTask from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubTask( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBTASK, value);
	}
    /**
     * Sets a value of property SubTask from an instance of Task 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Task value) {
		Base.set(model, instanceResource, SUBTASK, value);
	}
	
    /**
     * Sets a value of property SubTask from an instance of Task 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubTask(eu.dime.ps.semantic.model.tmo.Task value) {
		Base.set(this.model, this.getResource(), SUBTASK, value);
	}
  


    /**
     * Removes a value of property SubTask as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubTask( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBTASK, value);
	}
	
    /**
     * Removes a value of property SubTask as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubTask( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBTASK, value);
	}
    /**
     * Removes a value of property SubTask given as an instance of Task 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Task value) {
		Base.remove(model, instanceResource, SUBTASK, value);
	}
	
    /**
     * Removes a value of property SubTask given as an instance of Task 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubTask(eu.dime.ps.semantic.model.tmo.Task value) {
		Base.remove(this.model, this.getResource(), SUBTASK, value);
	}
  
    /**
     * Removes all values of property SubTask     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubTask( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBTASK);
	}
	
    /**
     * Removes all values of property SubTask	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubTask() {
		Base.removeAll(this.model, this.getResource(), SUBTASK);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2466d4bf has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubTaskOrdering(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBTASKORDERING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2466d4bf has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubTaskOrdering() {
		return Base.has(this.model, this.getResource(), SUBTASKORDERING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2466d4bf has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubTaskOrdering(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBTASKORDERING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2466d4bf has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubTaskOrdering( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBTASKORDERING);
	}

    /**
     * Get single value of property SubTaskOrdering as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getSubTaskOrdering_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, SUBTASKORDERING);
	}
	
    /**
     * Get single value of property SubTaskOrdering as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getSubTaskOrdering_asNode() {
		return Base.get_asNode(this.model, this.getResource(), SUBTASKORDERING);
	}
     /**
     * Get single value of property SubTaskOrdering     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static org.ontoware.rdfreactor.schema.rdfs.List getSubTaskOrdering(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdfreactor.schema.rdfs.List) Base.get(model, instanceResource, SUBTASKORDERING, org.ontoware.rdfreactor.schema.rdfs.List.class);
	}
	
    /**
     * Get single value of property SubTaskOrdering  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public org.ontoware.rdfreactor.schema.rdfs.List getSubTaskOrdering() {
		return (org.ontoware.rdfreactor.schema.rdfs.List) Base.get(this.model, this.getResource(), SUBTASKORDERING, org.ontoware.rdfreactor.schema.rdfs.List.class);
	}
  
    /**
     * Adds a value to property SubTaskOrdering as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addSubTaskOrdering(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, SUBTASKORDERING, value, 1);
	}
	
    /**
     * Adds a value to property SubTaskOrdering as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addSubTaskOrdering( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SUBTASKORDERING, value, 1);
	}
    /**
     * Adds a value to property SubTaskOrdering from an instance of org.ontoware.rdfreactor.schema.rdfs.List 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addSubTaskOrdering(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.List value)
    throws CardinalityException {
		Base.add(model, instanceResource, SUBTASKORDERING, value, 1);
	}
	
    /**
     * Adds a value to property SubTaskOrdering from an instance of org.ontoware.rdfreactor.schema.rdfs.List 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addSubTaskOrdering(org.ontoware.rdfreactor.schema.rdfs.List value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SUBTASKORDERING, value, 1);
	}
 
 

    /**
     * Sets a value of property SubTaskOrdering from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubTaskOrdering( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBTASKORDERING, value);
	}
	
    /**
     * Sets a value of property SubTaskOrdering from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubTaskOrdering( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBTASKORDERING, value);
	}
    /**
     * Sets a value of property SubTaskOrdering from an instance of org.ontoware.rdfreactor.schema.rdfs.List 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubTaskOrdering(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.set(model, instanceResource, SUBTASKORDERING, value);
	}
	
    /**
     * Sets a value of property SubTaskOrdering from an instance of org.ontoware.rdfreactor.schema.rdfs.List 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubTaskOrdering(org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.set(this.model, this.getResource(), SUBTASKORDERING, value);
	}
  


    /**
     * Removes a value of property SubTaskOrdering as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubTaskOrdering( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBTASKORDERING, value);
	}
	
    /**
     * Removes a value of property SubTaskOrdering as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubTaskOrdering( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBTASKORDERING, value);
	}
    /**
     * Removes a value of property SubTaskOrdering given as an instance of org.ontoware.rdfreactor.schema.rdfs.List 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubTaskOrdering(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.remove(model, instanceResource, SUBTASKORDERING, value);
	}
	
    /**
     * Removes a value of property SubTaskOrdering given as an instance of org.ontoware.rdfreactor.schema.rdfs.List 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubTaskOrdering(org.ontoware.rdfreactor.schema.rdfs.List value) {
		Base.remove(this.model, this.getResource(), SUBTASKORDERING, value);
	}
  
    /**
     * Removes all values of property SubTaskOrdering     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubTaskOrdering( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBTASKORDERING);
	}
	
    /**
     * Removes all values of property SubTaskOrdering	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubTaskOrdering() {
		Base.removeAll(this.model, this.getResource(), SUBTASKORDERING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f52470b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSuperTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUPERTASK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f52470b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSuperTask() {
		return Base.has(this.model, this.getResource(), SUPERTASK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f52470b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSuperTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUPERTASK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f52470b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSuperTask( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUPERTASK);
	}

    /**
     * Get single value of property SuperTask as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getSuperTask_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, SUPERTASK);
	}
	
    /**
     * Get single value of property SuperTask as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getSuperTask_asNode() {
		return Base.get_asNode(this.model, this.getResource(), SUPERTASK);
	}
     /**
     * Get single value of property SuperTask     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.tmo.Task getSuperTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.tmo.Task) Base.get(model, instanceResource, SUPERTASK, eu.dime.ps.semantic.model.tmo.Task.class);
	}
	
    /**
     * Get single value of property SuperTask  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.tmo.Task getSuperTask() {
		return (eu.dime.ps.semantic.model.tmo.Task) Base.get(this.model, this.getResource(), SUPERTASK, eu.dime.ps.semantic.model.tmo.Task.class);
	}
  
    /**
     * Adds a value to property SuperTask as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addSuperTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, SUPERTASK, value, 1);
	}
	
    /**
     * Adds a value to property SuperTask as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addSuperTask( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SUPERTASK, value, 1);
	}
    /**
     * Adds a value to property SuperTask from an instance of Task 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addSuperTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Task value)
    throws CardinalityException {
		Base.add(model, instanceResource, SUPERTASK, value, 1);
	}
	
    /**
     * Adds a value to property SuperTask from an instance of Task 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addSuperTask(eu.dime.ps.semantic.model.tmo.Task value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SUPERTASK, value, 1);
	}
 
 

    /**
     * Sets a value of property SuperTask from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSuperTask( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUPERTASK, value);
	}
	
    /**
     * Sets a value of property SuperTask from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSuperTask( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUPERTASK, value);
	}
    /**
     * Sets a value of property SuperTask from an instance of Task 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSuperTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Task value) {
		Base.set(model, instanceResource, SUPERTASK, value);
	}
	
    /**
     * Sets a value of property SuperTask from an instance of Task 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSuperTask(eu.dime.ps.semantic.model.tmo.Task value) {
		Base.set(this.model, this.getResource(), SUPERTASK, value);
	}
  


    /**
     * Removes a value of property SuperTask as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSuperTask( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUPERTASK, value);
	}
	
    /**
     * Removes a value of property SuperTask as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSuperTask( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUPERTASK, value);
	}
    /**
     * Removes a value of property SuperTask given as an instance of Task 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSuperTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Task value) {
		Base.remove(model, instanceResource, SUPERTASK, value);
	}
	
    /**
     * Removes a value of property SuperTask given as an instance of Task 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSuperTask(eu.dime.ps.semantic.model.tmo.Task value) {
		Base.remove(this.model, this.getResource(), SUPERTASK, value);
	}
  
    /**
     * Removes all values of property SuperTask     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSuperTask( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUPERTASK);
	}
	
    /**
     * Removes all values of property SuperTask	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSuperTask() {
		Base.removeAll(this.model, this.getResource(), SUPERTASK);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@322871ed has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTargetCompletion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETCOMPLETION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@322871ed has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTargetCompletion() {
		return Base.has(this.model, this.getResource(), TARGETCOMPLETION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@322871ed has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTargetCompletion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TARGETCOMPLETION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@322871ed has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTargetCompletion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETCOMPLETION);
	}

    /**
     * Get single value of property TargetCompletion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTargetCompletion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TARGETCOMPLETION);
	}
	
    /**
     * Get single value of property TargetCompletion as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTargetCompletion_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TARGETCOMPLETION);
	}
     /**
     * Get single value of property TargetCompletion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getTargetCompletion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, TARGETCOMPLETION, java.lang.String.class);
	}
	
    /**
     * Get single value of property TargetCompletion  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getTargetCompletion() {
		return (java.lang.String) Base.get(this.model, this.getResource(), TARGETCOMPLETION, java.lang.String.class);
	}
  
    /**
     * Adds a value to property TargetCompletion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTargetCompletion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TARGETCOMPLETION, value, 1);
	}
	
    /**
     * Adds a value to property TargetCompletion as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTargetCompletion( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TARGETCOMPLETION, value, 1);
	}
    /**
     * Adds a value to property TargetCompletion from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTargetCompletion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, TARGETCOMPLETION, value, 1);
	}
	
    /**
     * Adds a value to property TargetCompletion from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTargetCompletion(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TARGETCOMPLETION, value, 1);
	}
 
 

    /**
     * Sets a value of property TargetCompletion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTargetCompletion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TARGETCOMPLETION, value);
	}
	
    /**
     * Sets a value of property TargetCompletion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTargetCompletion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TARGETCOMPLETION, value);
	}
    /**
     * Sets a value of property TargetCompletion from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTargetCompletion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, TARGETCOMPLETION, value);
	}
	
    /**
     * Sets a value of property TargetCompletion from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTargetCompletion(java.lang.String value) {
		Base.set(this.model, this.getResource(), TARGETCOMPLETION, value);
	}
  


    /**
     * Removes a value of property TargetCompletion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTargetCompletion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TARGETCOMPLETION, value);
	}
	
    /**
     * Removes a value of property TargetCompletion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTargetCompletion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TARGETCOMPLETION, value);
	}
    /**
     * Removes a value of property TargetCompletion given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTargetCompletion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, TARGETCOMPLETION, value);
	}
	
    /**
     * Removes a value of property TargetCompletion given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTargetCompletion(java.lang.String value) {
		Base.remove(this.model, this.getResource(), TARGETCOMPLETION, value);
	}
  
    /**
     * Removes all values of property TargetCompletion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTargetCompletion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETCOMPLETION);
	}
	
    /**
     * Removes all values of property TargetCompletion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTargetCompletion() {
		Base.removeAll(this.model, this.getResource(), TARGETCOMPLETION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@262e28b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTargetEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETENDTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@262e28b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTargetEndTime() {
		return Base.has(this.model, this.getResource(), TARGETENDTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@262e28b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTargetEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TARGETENDTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@262e28b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTargetEndTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETENDTIME);
	}

    /**
     * Get single value of property TargetEndTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTargetEndTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TARGETENDTIME);
	}
	
    /**
     * Get single value of property TargetEndTime as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTargetEndTime_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TARGETENDTIME);
	}
     /**
     * Get single value of property TargetEndTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getTargetEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, TARGETENDTIME, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property TargetEndTime  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getTargetEndTime() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), TARGETENDTIME, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property TargetEndTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTargetEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TARGETENDTIME, value, 1);
	}
	
    /**
     * Adds a value to property TargetEndTime as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTargetEndTime( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TARGETENDTIME, value, 1);
	}
    /**
     * Adds a value to property TargetEndTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTargetEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, TARGETENDTIME, value, 1);
	}
	
    /**
     * Adds a value to property TargetEndTime from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTargetEndTime(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TARGETENDTIME, value, 1);
	}
 
 

    /**
     * Sets a value of property TargetEndTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTargetEndTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TARGETENDTIME, value);
	}
	
    /**
     * Sets a value of property TargetEndTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTargetEndTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TARGETENDTIME, value);
	}
    /**
     * Sets a value of property TargetEndTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTargetEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, TARGETENDTIME, value);
	}
	
    /**
     * Sets a value of property TargetEndTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTargetEndTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), TARGETENDTIME, value);
	}
  


    /**
     * Removes a value of property TargetEndTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTargetEndTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TARGETENDTIME, value);
	}
	
    /**
     * Removes a value of property TargetEndTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTargetEndTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TARGETENDTIME, value);
	}
    /**
     * Removes a value of property TargetEndTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTargetEndTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, TARGETENDTIME, value);
	}
	
    /**
     * Removes a value of property TargetEndTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTargetEndTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), TARGETENDTIME, value);
	}
  
    /**
     * Removes all values of property TargetEndTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTargetEndTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETENDTIME);
	}
	
    /**
     * Removes all values of property TargetEndTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTargetEndTime() {
		Base.removeAll(this.model, this.getResource(), TARGETENDTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b84a415 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTargetStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TARGETSTARTTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b84a415 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTargetStartTime() {
		return Base.has(this.model, this.getResource(), TARGETSTARTTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b84a415 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTargetStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TARGETSTARTTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b84a415 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTargetStartTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TARGETSTARTTIME);
	}

    /**
     * Get single value of property TargetStartTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTargetStartTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TARGETSTARTTIME);
	}
	
    /**
     * Get single value of property TargetStartTime as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTargetStartTime_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TARGETSTARTTIME);
	}
     /**
     * Get single value of property TargetStartTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getTargetStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, TARGETSTARTTIME, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property TargetStartTime  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getTargetStartTime() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), TARGETSTARTTIME, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property TargetStartTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTargetStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TARGETSTARTTIME, value, 1);
	}
	
    /**
     * Adds a value to property TargetStartTime as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTargetStartTime( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TARGETSTARTTIME, value, 1);
	}
    /**
     * Adds a value to property TargetStartTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTargetStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, TARGETSTARTTIME, value, 1);
	}
	
    /**
     * Adds a value to property TargetStartTime from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTargetStartTime(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TARGETSTARTTIME, value, 1);
	}
 
 

    /**
     * Sets a value of property TargetStartTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTargetStartTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TARGETSTARTTIME, value);
	}
	
    /**
     * Sets a value of property TargetStartTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTargetStartTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TARGETSTARTTIME, value);
	}
    /**
     * Sets a value of property TargetStartTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTargetStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, TARGETSTARTTIME, value);
	}
	
    /**
     * Sets a value of property TargetStartTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTargetStartTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), TARGETSTARTTIME, value);
	}
  


    /**
     * Removes a value of property TargetStartTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTargetStartTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TARGETSTARTTIME, value);
	}
	
    /**
     * Removes a value of property TargetStartTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTargetStartTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TARGETSTARTTIME, value);
	}
    /**
     * Removes a value of property TargetStartTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTargetStartTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, TARGETSTARTTIME, value);
	}
	
    /**
     * Removes a value of property TargetStartTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTargetStartTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), TARGETSTARTTIME, value);
	}
  
    /**
     * Removes all values of property TargetStartTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTargetStartTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TARGETSTARTTIME);
	}
	
    /**
     * Removes all values of property TargetStartTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTargetStartTime() {
		Base.removeAll(this.model, this.getResource(), TARGETSTARTTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e81f6c6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTaskDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TASKDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e81f6c6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTaskDescription() {
		return Base.has(this.model, this.getResource(), TASKDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e81f6c6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTaskDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TASKDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@e81f6c6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTaskDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TASKDESCRIPTION);
	}

    /**
     * Get single value of property TaskDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTaskDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TASKDESCRIPTION);
	}
	
    /**
     * Get single value of property TaskDescription as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTaskDescription_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TASKDESCRIPTION);
	}
     /**
     * Get single value of property TaskDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.RDFReactorThing getTaskDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.RDFReactorThing) Base.get(model, instanceResource, TASKDESCRIPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get single value of property TaskDescription  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.RDFReactorThing getTaskDescription() {
		return (eu.dime.ps.semantic.model.RDFReactorThing) Base.get(this.model, this.getResource(), TASKDESCRIPTION, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
  
    /**
     * Adds a value to property TaskDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTaskDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TASKDESCRIPTION, value, 1);
	}
	
    /**
     * Adds a value to property TaskDescription as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTaskDescription( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TASKDESCRIPTION, value, 1);
	}
    /**
     * Adds a value to property TaskDescription from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTaskDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value)
    throws CardinalityException {
		Base.add(model, instanceResource, TASKDESCRIPTION, value, 1);
	}
	
    /**
     * Adds a value to property TaskDescription from an instance of RDFReactorThing 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTaskDescription(eu.dime.ps.semantic.model.RDFReactorThing value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TASKDESCRIPTION, value, 1);
	}
 
 

    /**
     * Sets a value of property TaskDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTaskDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TASKDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property TaskDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTaskDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TASKDESCRIPTION, value);
	}
    /**
     * Sets a value of property TaskDescription from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTaskDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, TASKDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property TaskDescription from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTaskDescription(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), TASKDESCRIPTION, value);
	}
  


    /**
     * Removes a value of property TaskDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTaskDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TASKDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property TaskDescription as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTaskDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TASKDESCRIPTION, value);
	}
    /**
     * Removes a value of property TaskDescription given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTaskDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, TASKDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property TaskDescription given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTaskDescription(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), TASKDESCRIPTION, value);
	}
  
    /**
     * Removes all values of property TaskDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTaskDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TASKDESCRIPTION);
	}
	
    /**
     * Removes all values of property TaskDescription	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTaskDescription() {
		Base.removeAll(this.model, this.getResource(), TASKDESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27bc5bae has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTaskGoal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TASKGOAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27bc5bae has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTaskGoal() {
		return Base.has(this.model, this.getResource(), TASKGOAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27bc5bae has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTaskGoal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TASKGOAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27bc5bae has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTaskGoal( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TASKGOAL);
	}

     /**
     * Get all values of property TaskGoal as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTaskGoal_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TASKGOAL);
	}
	
    /**
     * Get all values of property TaskGoal as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTaskGoal_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TASKGOAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TaskGoal as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTaskGoal_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TASKGOAL);
	}

    /**
     * Get all values of property TaskGoal as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTaskGoal_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TASKGOAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TaskGoal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllTaskGoal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TASKGOAL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property TaskGoal as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllTaskGoal_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TASKGOAL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property TaskGoal     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllTaskGoal() {
		return Base.getAll(this.model, this.getResource(), TASKGOAL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property TaskGoal as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllTaskGoal_as() {
		return Base.getAll_as(this.model, this.getResource(), TASKGOAL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property TaskGoal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTaskGoal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TASKGOAL, value);
	}
	
    /**
     * Adds a value to property TaskGoal as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTaskGoal( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TASKGOAL, value);
	}
    /**
     * Adds a value to property TaskGoal from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTaskGoal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, TASKGOAL, value);
	}
	
    /**
     * Adds a value to property TaskGoal from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTaskGoal(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), TASKGOAL, value);
	}
  

    /**
     * Sets a value of property TaskGoal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTaskGoal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TASKGOAL, value);
	}
	
    /**
     * Sets a value of property TaskGoal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTaskGoal( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TASKGOAL, value);
	}
    /**
     * Sets a value of property TaskGoal from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTaskGoal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, TASKGOAL, value);
	}
	
    /**
     * Sets a value of property TaskGoal from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTaskGoal(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), TASKGOAL, value);
	}
  


    /**
     * Removes a value of property TaskGoal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTaskGoal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TASKGOAL, value);
	}
	
    /**
     * Removes a value of property TaskGoal as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTaskGoal( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TASKGOAL, value);
	}
    /**
     * Removes a value of property TaskGoal given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTaskGoal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, TASKGOAL, value);
	}
	
    /**
     * Removes a value of property TaskGoal given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTaskGoal(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), TASKGOAL, value);
	}
  
    /**
     * Removes all values of property TaskGoal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTaskGoal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TASKGOAL);
	}
	
    /**
     * Removes all values of property TaskGoal	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTaskGoal() {
		Base.removeAll(this.model, this.getResource(), TASKGOAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a9628d5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTaskId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TASKID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a9628d5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTaskId() {
		return Base.has(this.model, this.getResource(), TASKID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a9628d5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTaskId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TASKID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a9628d5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTaskId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TASKID);
	}

    /**
     * Get single value of property TaskId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTaskId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TASKID);
	}
	
    /**
     * Get single value of property TaskId as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTaskId_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TASKID);
	}
     /**
     * Get single value of property TaskId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getTaskId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, TASKID, java.lang.String.class);
	}
	
    /**
     * Get single value of property TaskId  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getTaskId() {
		return (java.lang.String) Base.get(this.model, this.getResource(), TASKID, java.lang.String.class);
	}
  
    /**
     * Adds a value to property TaskId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTaskId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TASKID, value, 1);
	}
	
    /**
     * Adds a value to property TaskId as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTaskId( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TASKID, value, 1);
	}
    /**
     * Adds a value to property TaskId from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTaskId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, TASKID, value, 1);
	}
	
    /**
     * Adds a value to property TaskId from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTaskId(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TASKID, value, 1);
	}
 
 

    /**
     * Sets a value of property TaskId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTaskId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TASKID, value);
	}
	
    /**
     * Sets a value of property TaskId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTaskId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TASKID, value);
	}
    /**
     * Sets a value of property TaskId from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTaskId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, TASKID, value);
	}
	
    /**
     * Sets a value of property TaskId from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTaskId(java.lang.String value) {
		Base.set(this.model, this.getResource(), TASKID, value);
	}
  


    /**
     * Removes a value of property TaskId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove5static] 
     */
	public static void removeTaskId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(model, instanceResource, TASKID, value, 1);
	}
	
    /**
     * Removes a value of property TaskId as an RDF2Go node 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove6dynamic] 
     */
	public void removeTaskId( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), TASKID, value, 1);
	}
    /**
     * Removes a value of property TaskId from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove7static] 
     */
	public static void removeTaskId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.remove(model, instanceResource, TASKID, value, 1);
	}
	
    /**
     * Removes a value of property TaskId from an instance of java.lang.String 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove8dynamic] 
     */
	public void removeTaskId(java.lang.String value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), TASKID, value, 1);
	}
 
      /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a18218 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTaskName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TASKNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a18218 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTaskName() {
		return Base.has(this.model, this.getResource(), TASKNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a18218 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTaskName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TASKNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a18218 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTaskName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TASKNAME);
	}

    /**
     * Get single value of property TaskName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTaskName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TASKNAME);
	}
	
    /**
     * Get single value of property TaskName as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTaskName_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TASKNAME);
	}
     /**
     * Get single value of property TaskName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getTaskName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, TASKNAME, java.lang.String.class);
	}
	
    /**
     * Get single value of property TaskName  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getTaskName() {
		return (java.lang.String) Base.get(this.model, this.getResource(), TASKNAME, java.lang.String.class);
	}
  
    /**
     * Adds a value to property TaskName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTaskName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TASKNAME, value, 1);
	}
	
    /**
     * Adds a value to property TaskName as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTaskName( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TASKNAME, value, 1);
	}
    /**
     * Adds a value to property TaskName from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTaskName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, TASKNAME, value, 1);
	}
	
    /**
     * Adds a value to property TaskName from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTaskName(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TASKNAME, value, 1);
	}
 
 

    /**
     * Sets a value of property TaskName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTaskName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TASKNAME, value);
	}
	
    /**
     * Sets a value of property TaskName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTaskName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TASKNAME, value);
	}
    /**
     * Sets a value of property TaskName from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTaskName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, TASKNAME, value);
	}
	
    /**
     * Sets a value of property TaskName from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTaskName(java.lang.String value) {
		Base.set(this.model, this.getResource(), TASKNAME, value);
	}
  


    /**
     * Removes a value of property TaskName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTaskName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TASKNAME, value);
	}
	
    /**
     * Removes a value of property TaskName as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTaskName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TASKNAME, value);
	}
    /**
     * Removes a value of property TaskName given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTaskName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, TASKNAME, value);
	}
	
    /**
     * Removes a value of property TaskName given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTaskName(java.lang.String value) {
		Base.remove(this.model, this.getResource(), TASKNAME, value);
	}
  
    /**
     * Removes all values of property TaskName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTaskName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TASKNAME);
	}
	
    /**
     * Removes all values of property TaskName	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTaskName() {
		Base.removeAll(this.model, this.getResource(), TASKNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22f26736 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTaskPrivacyState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TASKPRIVACYSTATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22f26736 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTaskPrivacyState() {
		return Base.has(this.model, this.getResource(), TASKPRIVACYSTATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22f26736 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTaskPrivacyState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TASKPRIVACYSTATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22f26736 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTaskPrivacyState( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TASKPRIVACYSTATE);
	}

    /**
     * Get single value of property TaskPrivacyState as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTaskPrivacyState_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TASKPRIVACYSTATE);
	}
	
    /**
     * Get single value of property TaskPrivacyState as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTaskPrivacyState_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TASKPRIVACYSTATE);
	}
     /**
     * Get single value of property TaskPrivacyState     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.tmo.TaskPrivacyState getTaskPrivacyState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.tmo.TaskPrivacyState) Base.get(model, instanceResource, TASKPRIVACYSTATE, eu.dime.ps.semantic.model.tmo.TaskPrivacyState.class);
	}
	
    /**
     * Get single value of property TaskPrivacyState  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.tmo.TaskPrivacyState getTaskPrivacyState() {
		return (eu.dime.ps.semantic.model.tmo.TaskPrivacyState) Base.get(this.model, this.getResource(), TASKPRIVACYSTATE, eu.dime.ps.semantic.model.tmo.TaskPrivacyState.class);
	}
  
    /**
     * Adds a value to property TaskPrivacyState as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTaskPrivacyState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TASKPRIVACYSTATE, value, 1);
	}
	
    /**
     * Adds a value to property TaskPrivacyState as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTaskPrivacyState( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TASKPRIVACYSTATE, value, 1);
	}
    /**
     * Adds a value to property TaskPrivacyState from an instance of TaskPrivacyState 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTaskPrivacyState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TaskPrivacyState value)
    throws CardinalityException {
		Base.add(model, instanceResource, TASKPRIVACYSTATE, value, 1);
	}
	
    /**
     * Adds a value to property TaskPrivacyState from an instance of TaskPrivacyState 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTaskPrivacyState(eu.dime.ps.semantic.model.tmo.TaskPrivacyState value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TASKPRIVACYSTATE, value, 1);
	}
 
 

    /**
     * Sets a value of property TaskPrivacyState from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTaskPrivacyState( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TASKPRIVACYSTATE, value);
	}
	
    /**
     * Sets a value of property TaskPrivacyState from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTaskPrivacyState( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TASKPRIVACYSTATE, value);
	}
    /**
     * Sets a value of property TaskPrivacyState from an instance of TaskPrivacyState 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTaskPrivacyState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TaskPrivacyState value) {
		Base.set(model, instanceResource, TASKPRIVACYSTATE, value);
	}
	
    /**
     * Sets a value of property TaskPrivacyState from an instance of TaskPrivacyState 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTaskPrivacyState(eu.dime.ps.semantic.model.tmo.TaskPrivacyState value) {
		Base.set(this.model, this.getResource(), TASKPRIVACYSTATE, value);
	}
  


    /**
     * Removes a value of property TaskPrivacyState as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTaskPrivacyState( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TASKPRIVACYSTATE, value);
	}
	
    /**
     * Removes a value of property TaskPrivacyState as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTaskPrivacyState( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TASKPRIVACYSTATE, value);
	}
    /**
     * Removes a value of property TaskPrivacyState given as an instance of TaskPrivacyState 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTaskPrivacyState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TaskPrivacyState value) {
		Base.remove(model, instanceResource, TASKPRIVACYSTATE, value);
	}
	
    /**
     * Removes a value of property TaskPrivacyState given as an instance of TaskPrivacyState 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTaskPrivacyState(eu.dime.ps.semantic.model.tmo.TaskPrivacyState value) {
		Base.remove(this.model, this.getResource(), TASKPRIVACYSTATE, value);
	}
  
    /**
     * Removes all values of property TaskPrivacyState     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTaskPrivacyState( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TASKPRIVACYSTATE);
	}
	
    /**
     * Removes all values of property TaskPrivacyState	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTaskPrivacyState() {
		Base.removeAll(this.model, this.getResource(), TASKPRIVACYSTATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c7890ee has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTaskReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TASKREFERENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c7890ee has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTaskReference() {
		return Base.has(this.model, this.getResource(), TASKREFERENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c7890ee has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTaskReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TASKREFERENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c7890ee has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTaskReference( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TASKREFERENCE);
	}

    /**
     * Get single value of property TaskReference as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTaskReference_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TASKREFERENCE);
	}
	
    /**
     * Get single value of property TaskReference as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTaskReference_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TASKREFERENCE);
	}
     /**
     * Get single value of property TaskReference     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.tmo.Task getTaskReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.tmo.Task) Base.get(model, instanceResource, TASKREFERENCE, eu.dime.ps.semantic.model.tmo.Task.class);
	}
	
    /**
     * Get single value of property TaskReference  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.tmo.Task getTaskReference() {
		return (eu.dime.ps.semantic.model.tmo.Task) Base.get(this.model, this.getResource(), TASKREFERENCE, eu.dime.ps.semantic.model.tmo.Task.class);
	}
  
    /**
     * Adds a value to property TaskReference as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTaskReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TASKREFERENCE, value, 1);
	}
	
    /**
     * Adds a value to property TaskReference as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTaskReference( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TASKREFERENCE, value, 1);
	}
    /**
     * Adds a value to property TaskReference from an instance of Task 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTaskReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Task value)
    throws CardinalityException {
		Base.add(model, instanceResource, TASKREFERENCE, value, 1);
	}
	
    /**
     * Adds a value to property TaskReference from an instance of Task 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTaskReference(eu.dime.ps.semantic.model.tmo.Task value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TASKREFERENCE, value, 1);
	}
 
 

    /**
     * Sets a value of property TaskReference from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTaskReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TASKREFERENCE, value);
	}
	
    /**
     * Sets a value of property TaskReference from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTaskReference( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TASKREFERENCE, value);
	}
    /**
     * Sets a value of property TaskReference from an instance of Task 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTaskReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Task value) {
		Base.set(model, instanceResource, TASKREFERENCE, value);
	}
	
    /**
     * Sets a value of property TaskReference from an instance of Task 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTaskReference(eu.dime.ps.semantic.model.tmo.Task value) {
		Base.set(this.model, this.getResource(), TASKREFERENCE, value);
	}
  


    /**
     * Removes a value of property TaskReference as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTaskReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TASKREFERENCE, value);
	}
	
    /**
     * Removes a value of property TaskReference as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTaskReference( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TASKREFERENCE, value);
	}
    /**
     * Removes a value of property TaskReference given as an instance of Task 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTaskReference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Task value) {
		Base.remove(model, instanceResource, TASKREFERENCE, value);
	}
	
    /**
     * Removes a value of property TaskReference given as an instance of Task 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTaskReference(eu.dime.ps.semantic.model.tmo.Task value) {
		Base.remove(this.model, this.getResource(), TASKREFERENCE, value);
	}
  
    /**
     * Removes all values of property TaskReference     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTaskReference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TASKREFERENCE);
	}
	
    /**
     * Removes all values of property TaskReference	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTaskReference() {
		Base.removeAll(this.model, this.getResource(), TASKREFERENCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24d9038d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTaskSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TASKSOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24d9038d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTaskSource() {
		return Base.has(this.model, this.getResource(), TASKSOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24d9038d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTaskSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TASKSOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24d9038d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTaskSource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TASKSOURCE);
	}

    /**
     * Get single value of property TaskSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTaskSource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TASKSOURCE);
	}
	
    /**
     * Get single value of property TaskSource as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTaskSource_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TASKSOURCE);
	}
     /**
     * Get single value of property TaskSource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static org.ontoware.rdfreactor.schema.rdfs.Resource getTaskSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (org.ontoware.rdfreactor.schema.rdfs.Resource) Base.get(model, instanceResource, TASKSOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get single value of property TaskSource  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public org.ontoware.rdfreactor.schema.rdfs.Resource getTaskSource() {
		return (org.ontoware.rdfreactor.schema.rdfs.Resource) Base.get(this.model, this.getResource(), TASKSOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
  
    /**
     * Adds a value to property TaskSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTaskSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TASKSOURCE, value, 1);
	}
	
    /**
     * Adds a value to property TaskSource as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTaskSource( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TASKSOURCE, value, 1);
	}
    /**
     * Adds a value to property TaskSource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTaskSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value)
    throws CardinalityException {
		Base.add(model, instanceResource, TASKSOURCE, value, 1);
	}
	
    /**
     * Adds a value to property TaskSource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTaskSource(org.ontoware.rdfreactor.schema.rdfs.Resource value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TASKSOURCE, value, 1);
	}
 
 

    /**
     * Sets a value of property TaskSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTaskSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TASKSOURCE, value);
	}
	
    /**
     * Sets a value of property TaskSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTaskSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TASKSOURCE, value);
	}
    /**
     * Sets a value of property TaskSource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTaskSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, TASKSOURCE, value);
	}
	
    /**
     * Sets a value of property TaskSource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTaskSource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), TASKSOURCE, value);
	}
  


    /**
     * Removes a value of property TaskSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTaskSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TASKSOURCE, value);
	}
	
    /**
     * Removes a value of property TaskSource as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTaskSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TASKSOURCE, value);
	}
    /**
     * Removes a value of property TaskSource given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTaskSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, TASKSOURCE, value);
	}
	
    /**
     * Removes a value of property TaskSource given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTaskSource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), TASKSOURCE, value);
	}
  
    /**
     * Removes all values of property TaskSource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTaskSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TASKSOURCE);
	}
	
    /**
     * Removes all values of property TaskSource	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTaskSource() {
		Base.removeAll(this.model, this.getResource(), TASKSOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@641fb58c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTaskState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TASKSTATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@641fb58c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTaskState() {
		return Base.has(this.model, this.getResource(), TASKSTATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@641fb58c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTaskState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TASKSTATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@641fb58c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTaskState( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TASKSTATE);
	}

    /**
     * Get single value of property TaskState as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTaskState_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TASKSTATE);
	}
	
    /**
     * Get single value of property TaskState as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTaskState_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TASKSTATE);
	}
     /**
     * Get single value of property TaskState     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.tmo.TaskState getTaskState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.tmo.TaskState) Base.get(model, instanceResource, TASKSTATE, eu.dime.ps.semantic.model.tmo.TaskState.class);
	}
	
    /**
     * Get single value of property TaskState  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.tmo.TaskState getTaskState() {
		return (eu.dime.ps.semantic.model.tmo.TaskState) Base.get(this.model, this.getResource(), TASKSTATE, eu.dime.ps.semantic.model.tmo.TaskState.class);
	}
  
    /**
     * Adds a value to property TaskState as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTaskState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TASKSTATE, value, 1);
	}
	
    /**
     * Adds a value to property TaskState as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTaskState( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TASKSTATE, value, 1);
	}
    /**
     * Adds a value to property TaskState from an instance of TaskState 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTaskState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TaskState value)
    throws CardinalityException {
		Base.add(model, instanceResource, TASKSTATE, value, 1);
	}
	
    /**
     * Adds a value to property TaskState from an instance of TaskState 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTaskState(eu.dime.ps.semantic.model.tmo.TaskState value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TASKSTATE, value, 1);
	}
 
 

    /**
     * Sets a value of property TaskState from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTaskState( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TASKSTATE, value);
	}
	
    /**
     * Sets a value of property TaskState from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTaskState( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TASKSTATE, value);
	}
    /**
     * Sets a value of property TaskState from an instance of TaskState 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTaskState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TaskState value) {
		Base.set(model, instanceResource, TASKSTATE, value);
	}
	
    /**
     * Sets a value of property TaskState from an instance of TaskState 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTaskState(eu.dime.ps.semantic.model.tmo.TaskState value) {
		Base.set(this.model, this.getResource(), TASKSTATE, value);
	}
  


    /**
     * Removes a value of property TaskState as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove5static] 
     */
	public static void removeTaskState( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(model, instanceResource, TASKSTATE, value, 1);
	}
	
    /**
     * Removes a value of property TaskState as an RDF2Go node 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove6dynamic] 
     */
	public void removeTaskState( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), TASKSTATE, value, 1);
	}
    /**
     * Removes a value of property TaskState from an instance of TaskState 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove7static] 
     */
	public static void removeTaskState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TaskState value)
    throws CardinalityException {
		Base.remove(model, instanceResource, TASKSTATE, value, 1);
	}
	
    /**
     * Removes a value of property TaskState from an instance of TaskState 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove8dynamic] 
     */
	public void removeTaskState(eu.dime.ps.semantic.model.tmo.TaskState value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), TASKSTATE, value, 1);
	}
 
      /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42744845 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTaskTransmission(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TASKTRANSMISSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42744845 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTaskTransmission() {
		return Base.has(this.model, this.getResource(), TASKTRANSMISSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42744845 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTaskTransmission(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TASKTRANSMISSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@42744845 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTaskTransmission( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TASKTRANSMISSION);
	}

     /**
     * Get all values of property TaskTransmission as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTaskTransmission_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TASKTRANSMISSION);
	}
	
    /**
     * Get all values of property TaskTransmission as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTaskTransmission_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TASKTRANSMISSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TaskTransmission as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTaskTransmission_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TASKTRANSMISSION);
	}

    /**
     * Get all values of property TaskTransmission as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTaskTransmission_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TASKTRANSMISSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TaskTransmission     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.tmo.TaskTransmission> getAllTaskTransmission(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TASKTRANSMISSION, eu.dime.ps.semantic.model.tmo.TaskTransmission.class);
	}
	
    /**
     * Get all values of property TaskTransmission as a ReactorResult of TaskTransmission 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.tmo.TaskTransmission> getAllTaskTransmission_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TASKTRANSMISSION, eu.dime.ps.semantic.model.tmo.TaskTransmission.class);
	}

    /**
     * Get all values of property TaskTransmission     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.tmo.TaskTransmission> getAllTaskTransmission() {
		return Base.getAll(this.model, this.getResource(), TASKTRANSMISSION, eu.dime.ps.semantic.model.tmo.TaskTransmission.class);
	}

    /**
     * Get all values of property TaskTransmission as a ReactorResult of TaskTransmission 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.tmo.TaskTransmission> getAllTaskTransmission_as() {
		return Base.getAll_as(this.model, this.getResource(), TASKTRANSMISSION, eu.dime.ps.semantic.model.tmo.TaskTransmission.class);
	}
 
    /**
     * Adds a value to property TaskTransmission as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTaskTransmission(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TASKTRANSMISSION, value);
	}
	
    /**
     * Adds a value to property TaskTransmission as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTaskTransmission( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TASKTRANSMISSION, value);
	}
    /**
     * Adds a value to property TaskTransmission from an instance of TaskTransmission 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTaskTransmission(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TaskTransmission value) {
		Base.add(model, instanceResource, TASKTRANSMISSION, value);
	}
	
    /**
     * Adds a value to property TaskTransmission from an instance of TaskTransmission 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTaskTransmission(eu.dime.ps.semantic.model.tmo.TaskTransmission value) {
		Base.add(this.model, this.getResource(), TASKTRANSMISSION, value);
	}
  

    /**
     * Sets a value of property TaskTransmission from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTaskTransmission( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TASKTRANSMISSION, value);
	}
	
    /**
     * Sets a value of property TaskTransmission from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTaskTransmission( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TASKTRANSMISSION, value);
	}
    /**
     * Sets a value of property TaskTransmission from an instance of TaskTransmission 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTaskTransmission(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TaskTransmission value) {
		Base.set(model, instanceResource, TASKTRANSMISSION, value);
	}
	
    /**
     * Sets a value of property TaskTransmission from an instance of TaskTransmission 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTaskTransmission(eu.dime.ps.semantic.model.tmo.TaskTransmission value) {
		Base.set(this.model, this.getResource(), TASKTRANSMISSION, value);
	}
  


    /**
     * Removes a value of property TaskTransmission as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTaskTransmission( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TASKTRANSMISSION, value);
	}
	
    /**
     * Removes a value of property TaskTransmission as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTaskTransmission( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TASKTRANSMISSION, value);
	}
    /**
     * Removes a value of property TaskTransmission given as an instance of TaskTransmission 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTaskTransmission(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TaskTransmission value) {
		Base.remove(model, instanceResource, TASKTRANSMISSION, value);
	}
	
    /**
     * Removes a value of property TaskTransmission given as an instance of TaskTransmission 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTaskTransmission(eu.dime.ps.semantic.model.tmo.TaskTransmission value) {
		Base.remove(this.model, this.getResource(), TASKTRANSMISSION, value);
	}
  
    /**
     * Removes all values of property TaskTransmission     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTaskTransmission( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TASKTRANSMISSION);
	}
	
    /**
     * Removes all values of property TaskTransmission	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTaskTransmission() {
		Base.removeAll(this.model, this.getResource(), TASKTRANSMISSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b62e24 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUrgency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, URGENCY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b62e24 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUrgency() {
		return Base.has(this.model, this.getResource(), URGENCY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b62e24 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUrgency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, URGENCY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b62e24 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUrgency( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), URGENCY);
	}

    /**
     * Get single value of property Urgency as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getUrgency_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, URGENCY);
	}
	
    /**
     * Get single value of property Urgency as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getUrgency_asNode() {
		return Base.get_asNode(this.model, this.getResource(), URGENCY);
	}
     /**
     * Get single value of property Urgency     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.tmo.Urgency getUrgency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.tmo.Urgency) Base.get(model, instanceResource, URGENCY, eu.dime.ps.semantic.model.tmo.Urgency.class);
	}
	
    /**
     * Get single value of property Urgency  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.tmo.Urgency getUrgency() {
		return (eu.dime.ps.semantic.model.tmo.Urgency) Base.get(this.model, this.getResource(), URGENCY, eu.dime.ps.semantic.model.tmo.Urgency.class);
	}
  
    /**
     * Adds a value to property Urgency as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addUrgency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, URGENCY, value, 1);
	}
	
    /**
     * Adds a value to property Urgency as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addUrgency( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), URGENCY, value, 1);
	}
    /**
     * Adds a value to property Urgency from an instance of Urgency 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addUrgency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Urgency value)
    throws CardinalityException {
		Base.add(model, instanceResource, URGENCY, value, 1);
	}
	
    /**
     * Adds a value to property Urgency from an instance of Urgency 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addUrgency(eu.dime.ps.semantic.model.tmo.Urgency value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), URGENCY, value, 1);
	}
 
 

    /**
     * Sets a value of property Urgency from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUrgency( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, URGENCY, value);
	}
	
    /**
     * Sets a value of property Urgency from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUrgency( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), URGENCY, value);
	}
    /**
     * Sets a value of property Urgency from an instance of Urgency 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUrgency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Urgency value) {
		Base.set(model, instanceResource, URGENCY, value);
	}
	
    /**
     * Sets a value of property Urgency from an instance of Urgency 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUrgency(eu.dime.ps.semantic.model.tmo.Urgency value) {
		Base.set(this.model, this.getResource(), URGENCY, value);
	}
  


    /**
     * Removes a value of property Urgency as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUrgency( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, URGENCY, value);
	}
	
    /**
     * Removes a value of property Urgency as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUrgency( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), URGENCY, value);
	}
    /**
     * Removes a value of property Urgency given as an instance of Urgency 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUrgency(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Urgency value) {
		Base.remove(model, instanceResource, URGENCY, value);
	}
	
    /**
     * Removes a value of property Urgency given as an instance of Urgency 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUrgency(eu.dime.ps.semantic.model.tmo.Urgency value) {
		Base.remove(this.model, this.getResource(), URGENCY, value);
	}
  
    /**
     * Removes all values of property Urgency     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUrgency( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, URGENCY);
	}
	
    /**
     * Removes all values of property Urgency	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUrgency() {
		Base.removeAll(this.model, this.getResource(), URGENCY);
	}
 }