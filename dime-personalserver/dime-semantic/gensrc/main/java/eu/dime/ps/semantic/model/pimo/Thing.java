/*
* Copyright 2013 by the digital.me project (http:\\www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.pimo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> DatatypeProperty </li>
 *   <li> DeprecatedRepresentation </li>
 *   <li> GroundingOccurrence </li>
 *   <li> ObjectProperty </li>
 *   <li> Occurrence </li>
 *   <li> OtherRepresentation </li>
 *   <li> Part </li>
 *   <li> PartOf </li>
 *   <li> PimoIsRelated </li>
 *   <li> PimoTag </li>
 *   <li> ReferencingOccurrence </li>
 *   <li> SharedBy </li>
 *   <li> SharedWith </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Thing extends eu.dime.ps.semantic.model.pimo.ClassOrThing {

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#Thing */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#Thing", false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#datatypeProperty */
    @SuppressWarnings("hiding")
	public static final URI DATATYPEPROPERTY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#datatypeProperty",false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasDeprecatedRepresentation */
    @SuppressWarnings("hiding")
	public static final URI DEPRECATEDREPRESENTATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasDeprecatedRepresentation",false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#groundingOccurrence */
    @SuppressWarnings("hiding")
	public static final URI GROUNDINGOCCURRENCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#groundingOccurrence",false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#objectProperty */
    @SuppressWarnings("hiding")
	public static final URI OBJECTPROPERTY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#objectProperty",false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#occurrence */
    @SuppressWarnings("hiding")
	public static final URI OCCURRENCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#occurrence",false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasOtherRepresentation */
    @SuppressWarnings("hiding")
	public static final URI OTHERREPRESENTATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasOtherRepresentation",false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasPart */
    @SuppressWarnings("hiding")
	public static final URI PART = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasPart",false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#partOf */
    @SuppressWarnings("hiding")
	public static final URI PARTOF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#partOf",false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#isRelated */
    @SuppressWarnings("hiding")
	public static final URI PIMOISRELATED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#isRelated",false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasTag */
    @SuppressWarnings("hiding")
	public static final URI PIMOTAG = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasTag",false);

    /** http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#referencingOccurrence */
    @SuppressWarnings("hiding")
	public static final URI REFERENCINGOCCURRENCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#referencingOccurrence",false);

    /** http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedBy */
    @SuppressWarnings("hiding")
	public static final URI SHAREDBY = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedBy",false);

    /** http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedWith */
    @SuppressWarnings("hiding")
	public static final URI SHAREDWITH = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedWith",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#datatypeProperty",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasDeprecatedRepresentation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#groundingOccurrence",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#objectProperty",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#occurrence",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasOtherRepresentation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasPart",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#partOf",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#isRelated",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#hasTag",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#referencingOccurrence",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedBy",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/11/08/nso#sharedWith",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Thing (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Thing (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Thing (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Thing (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Thing (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Thing  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/11/01/pimo#Thing).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Thing> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing.class );
	}

    /**
	 * Remove rdf:type Thing from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ObjectProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllObjectProperty_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.pimo.Thing.OBJECTPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ObjectProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllObjectProperty_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.pimo.Thing.OBJECTPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ObjectProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllObjectProperty_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.pimo.Thing.OBJECTPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Part' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPart_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.pimo.Thing.PART, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Part' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPart_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.pimo.Thing.PART, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Part' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPart_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.pimo.Thing.PART, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PartOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPartOf_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.pimo.Thing.PARTOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PartOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPartOf_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.pimo.Thing.PARTOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PartOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPartOf_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.pimo.Thing.PARTOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PimoIsRelated' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPimoIsRelated_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.pimo.Thing.PIMOISRELATED, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PimoIsRelated' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPimoIsRelated_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.pimo.Thing.PIMOISRELATED, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PimoIsRelated' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPimoIsRelated_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.pimo.Thing.PIMOISRELATED, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'IsLocationOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsLocationOf_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.pimo.Location.ISLOCATIONOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'IsLocationOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsLocationOf_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.pimo.Location.ISLOCATIONOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'IsLocationOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllIsLocationOf_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.pimo.Location.ISLOCATIONOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'RoleContext' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRoleContext_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.pimo.PersonRole.ROLECONTEXT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'RoleContext' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRoleContext_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.pimo.PersonRole.ROLECONTEXT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'RoleContext' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRoleContext_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.pimo.PersonRole.ROLECONTEXT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'IsTagFor' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsTagFor_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.pimo.Tag.ISTAGFOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'IsTagFor' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsTagFor_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.pimo.Tag.ISTAGFOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'IsTagFor' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllIsTagFor_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.pimo.Tag.ISTAGFOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AssociationMember' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAssociationMember_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.pimo.Association.ASSOCIATIONMEMBER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AssociationMember' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAssociationMember_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.pimo.Association.ASSOCIATIONMEMBER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AssociationMember' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAssociationMember_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.pimo.Association.ASSOCIATIONMEMBER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44d1cb41 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDatatypeProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DATATYPEPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44d1cb41 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDatatypeProperty() {
		return Base.has(this.model, this.getResource(), DATATYPEPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44d1cb41 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDatatypeProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DATATYPEPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44d1cb41 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDatatypeProperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DATATYPEPROPERTY);
	}

     /**
     * Get all values of property DatatypeProperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDatatypeProperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DATATYPEPROPERTY);
	}
	
    /**
     * Get all values of property DatatypeProperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDatatypeProperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATATYPEPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DatatypeProperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDatatypeProperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DATATYPEPROPERTY);
	}

    /**
     * Get all values of property DatatypeProperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDatatypeProperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DATATYPEPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DatatypeProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllDatatypeProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DATATYPEPROPERTY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property DatatypeProperty as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllDatatypeProperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATATYPEPROPERTY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property DatatypeProperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllDatatypeProperty() {
		return Base.getAll(this.model, this.getResource(), DATATYPEPROPERTY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property DatatypeProperty as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllDatatypeProperty_as() {
		return Base.getAll_as(this.model, this.getResource(), DATATYPEPROPERTY, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property DatatypeProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDatatypeProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DATATYPEPROPERTY, value);
	}
	
    /**
     * Adds a value to property DatatypeProperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDatatypeProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DATATYPEPROPERTY, value);
	}
    /**
     * Adds a value to property DatatypeProperty from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDatatypeProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, DATATYPEPROPERTY, value);
	}
	
    /**
     * Adds a value to property DatatypeProperty from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDatatypeProperty(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), DATATYPEPROPERTY, value);
	}
  

    /**
     * Sets a value of property DatatypeProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDatatypeProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DATATYPEPROPERTY, value);
	}
	
    /**
     * Sets a value of property DatatypeProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDatatypeProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DATATYPEPROPERTY, value);
	}
    /**
     * Sets a value of property DatatypeProperty from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDatatypeProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, DATATYPEPROPERTY, value);
	}
	
    /**
     * Sets a value of property DatatypeProperty from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDatatypeProperty(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), DATATYPEPROPERTY, value);
	}
  


    /**
     * Removes a value of property DatatypeProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDatatypeProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DATATYPEPROPERTY, value);
	}
	
    /**
     * Removes a value of property DatatypeProperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDatatypeProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DATATYPEPROPERTY, value);
	}
    /**
     * Removes a value of property DatatypeProperty given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDatatypeProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, DATATYPEPROPERTY, value);
	}
	
    /**
     * Removes a value of property DatatypeProperty given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDatatypeProperty(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), DATATYPEPROPERTY, value);
	}
  
    /**
     * Removes all values of property DatatypeProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDatatypeProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DATATYPEPROPERTY);
	}
	
    /**
     * Removes all values of property DatatypeProperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDatatypeProperty() {
		Base.removeAll(this.model, this.getResource(), DATATYPEPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2585d163 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDeprecatedRepresentation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEPRECATEDREPRESENTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2585d163 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDeprecatedRepresentation() {
		return Base.has(this.model, this.getResource(), DEPRECATEDREPRESENTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2585d163 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDeprecatedRepresentation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEPRECATEDREPRESENTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2585d163 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDeprecatedRepresentation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEPRECATEDREPRESENTATION);
	}

     /**
     * Get all values of property DeprecatedRepresentation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDeprecatedRepresentation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DEPRECATEDREPRESENTATION);
	}
	
    /**
     * Get all values of property DeprecatedRepresentation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDeprecatedRepresentation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEPRECATEDREPRESENTATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DeprecatedRepresentation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDeprecatedRepresentation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DEPRECATEDREPRESENTATION);
	}

    /**
     * Get all values of property DeprecatedRepresentation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDeprecatedRepresentation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DEPRECATEDREPRESENTATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DeprecatedRepresentation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllDeprecatedRepresentation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DEPRECATEDREPRESENTATION, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property DeprecatedRepresentation as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllDeprecatedRepresentation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEPRECATEDREPRESENTATION, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property DeprecatedRepresentation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllDeprecatedRepresentation() {
		return Base.getAll(this.model, this.getResource(), DEPRECATEDREPRESENTATION, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property DeprecatedRepresentation as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllDeprecatedRepresentation_as() {
		return Base.getAll_as(this.model, this.getResource(), DEPRECATEDREPRESENTATION, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property DeprecatedRepresentation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDeprecatedRepresentation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DEPRECATEDREPRESENTATION, value);
	}
	
    /**
     * Adds a value to property DeprecatedRepresentation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDeprecatedRepresentation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DEPRECATEDREPRESENTATION, value);
	}
    /**
     * Adds a value to property DeprecatedRepresentation from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDeprecatedRepresentation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, DEPRECATEDREPRESENTATION, value);
	}
	
    /**
     * Adds a value to property DeprecatedRepresentation from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDeprecatedRepresentation(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), DEPRECATEDREPRESENTATION, value);
	}
  

    /**
     * Sets a value of property DeprecatedRepresentation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDeprecatedRepresentation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEPRECATEDREPRESENTATION, value);
	}
	
    /**
     * Sets a value of property DeprecatedRepresentation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDeprecatedRepresentation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEPRECATEDREPRESENTATION, value);
	}
    /**
     * Sets a value of property DeprecatedRepresentation from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDeprecatedRepresentation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, DEPRECATEDREPRESENTATION, value);
	}
	
    /**
     * Sets a value of property DeprecatedRepresentation from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDeprecatedRepresentation(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), DEPRECATEDREPRESENTATION, value);
	}
  


    /**
     * Removes a value of property DeprecatedRepresentation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDeprecatedRepresentation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEPRECATEDREPRESENTATION, value);
	}
	
    /**
     * Removes a value of property DeprecatedRepresentation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDeprecatedRepresentation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEPRECATEDREPRESENTATION, value);
	}
    /**
     * Removes a value of property DeprecatedRepresentation given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDeprecatedRepresentation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, DEPRECATEDREPRESENTATION, value);
	}
	
    /**
     * Removes a value of property DeprecatedRepresentation given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDeprecatedRepresentation(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), DEPRECATEDREPRESENTATION, value);
	}
  
    /**
     * Removes all values of property DeprecatedRepresentation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDeprecatedRepresentation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEPRECATEDREPRESENTATION);
	}
	
    /**
     * Removes all values of property DeprecatedRepresentation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDeprecatedRepresentation() {
		Base.removeAll(this.model, this.getResource(), DEPRECATEDREPRESENTATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f109eca has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGroundingOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GROUNDINGOCCURRENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f109eca has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGroundingOccurrence() {
		return Base.has(this.model, this.getResource(), GROUNDINGOCCURRENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f109eca has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGroundingOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GROUNDINGOCCURRENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f109eca has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGroundingOccurrence( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GROUNDINGOCCURRENCE);
	}

     /**
     * Get all values of property GroundingOccurrence as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGroundingOccurrence_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GROUNDINGOCCURRENCE);
	}
	
    /**
     * Get all values of property GroundingOccurrence as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGroundingOccurrence_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GROUNDINGOCCURRENCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GroundingOccurrence as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGroundingOccurrence_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GROUNDINGOCCURRENCE);
	}

    /**
     * Get all values of property GroundingOccurrence as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGroundingOccurrence_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GROUNDINGOCCURRENCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GroundingOccurrence     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nie.InformationElement> getAllGroundingOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GROUNDINGOCCURRENCE, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}
	
    /**
     * Get all values of property GroundingOccurrence as a ReactorResult of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nie.InformationElement> getAllGroundingOccurrence_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GROUNDINGOCCURRENCE, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}

    /**
     * Get all values of property GroundingOccurrence     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nie.InformationElement> getAllGroundingOccurrence() {
		return Base.getAll(this.model, this.getResource(), GROUNDINGOCCURRENCE, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}

    /**
     * Get all values of property GroundingOccurrence as a ReactorResult of InformationElement 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nie.InformationElement> getAllGroundingOccurrence_as() {
		return Base.getAll_as(this.model, this.getResource(), GROUNDINGOCCURRENCE, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}
 
    /**
     * Adds a value to property GroundingOccurrence as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGroundingOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GROUNDINGOCCURRENCE, value);
	}
	
    /**
     * Adds a value to property GroundingOccurrence as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGroundingOccurrence( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GROUNDINGOCCURRENCE, value);
	}
    /**
     * Adds a value to property GroundingOccurrence from an instance of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGroundingOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.add(model, instanceResource, GROUNDINGOCCURRENCE, value);
	}
	
    /**
     * Adds a value to property GroundingOccurrence from an instance of InformationElement 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGroundingOccurrence(eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.add(this.model, this.getResource(), GROUNDINGOCCURRENCE, value);
	}
  

    /**
     * Sets a value of property GroundingOccurrence from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGroundingOccurrence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GROUNDINGOCCURRENCE, value);
	}
	
    /**
     * Sets a value of property GroundingOccurrence from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGroundingOccurrence( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GROUNDINGOCCURRENCE, value);
	}
    /**
     * Sets a value of property GroundingOccurrence from an instance of InformationElement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGroundingOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.set(model, instanceResource, GROUNDINGOCCURRENCE, value);
	}
	
    /**
     * Sets a value of property GroundingOccurrence from an instance of InformationElement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGroundingOccurrence(eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.set(this.model, this.getResource(), GROUNDINGOCCURRENCE, value);
	}
  


    /**
     * Removes a value of property GroundingOccurrence as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGroundingOccurrence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GROUNDINGOCCURRENCE, value);
	}
	
    /**
     * Removes a value of property GroundingOccurrence as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGroundingOccurrence( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GROUNDINGOCCURRENCE, value);
	}
    /**
     * Removes a value of property GroundingOccurrence given as an instance of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGroundingOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.remove(model, instanceResource, GROUNDINGOCCURRENCE, value);
	}
	
    /**
     * Removes a value of property GroundingOccurrence given as an instance of InformationElement 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGroundingOccurrence(eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.remove(this.model, this.getResource(), GROUNDINGOCCURRENCE, value);
	}
  
    /**
     * Removes all values of property GroundingOccurrence     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGroundingOccurrence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GROUNDINGOCCURRENCE);
	}
	
    /**
     * Removes all values of property GroundingOccurrence	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGroundingOccurrence() {
		Base.removeAll(this.model, this.getResource(), GROUNDINGOCCURRENCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5653df51 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasObjectProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, OBJECTPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5653df51 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasObjectProperty() {
		return Base.has(this.model, this.getResource(), OBJECTPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5653df51 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasObjectProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OBJECTPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5653df51 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasObjectProperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OBJECTPROPERTY);
	}

     /**
     * Get all values of property ObjectProperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllObjectProperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OBJECTPROPERTY);
	}
	
    /**
     * Get all values of property ObjectProperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllObjectProperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OBJECTPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ObjectProperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllObjectProperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OBJECTPROPERTY);
	}

    /**
     * Get all values of property ObjectProperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllObjectProperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OBJECTPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ObjectProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.pimo.Thing> getAllObjectProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, OBJECTPROPERTY, eu.dime.ps.semantic.model.pimo.Thing.class);
	}
	
    /**
     * Get all values of property ObjectProperty as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.pimo.Thing> getAllObjectProperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OBJECTPROPERTY, eu.dime.ps.semantic.model.pimo.Thing.class);
	}

    /**
     * Get all values of property ObjectProperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.pimo.Thing> getAllObjectProperty() {
		return Base.getAll(this.model, this.getResource(), OBJECTPROPERTY, eu.dime.ps.semantic.model.pimo.Thing.class);
	}

    /**
     * Get all values of property ObjectProperty as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.pimo.Thing> getAllObjectProperty_as() {
		return Base.getAll_as(this.model, this.getResource(), OBJECTPROPERTY, eu.dime.ps.semantic.model.pimo.Thing.class);
	}
 
    /**
     * Adds a value to property ObjectProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addObjectProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, OBJECTPROPERTY, value);
	}
	
    /**
     * Adds a value to property ObjectProperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addObjectProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), OBJECTPROPERTY, value);
	}
    /**
     * Adds a value to property ObjectProperty from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addObjectProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.add(model, instanceResource, OBJECTPROPERTY, value);
	}
	
    /**
     * Adds a value to property ObjectProperty from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addObjectProperty(eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.add(this.model, this.getResource(), OBJECTPROPERTY, value);
	}
  

    /**
     * Sets a value of property ObjectProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setObjectProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, OBJECTPROPERTY, value);
	}
	
    /**
     * Sets a value of property ObjectProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setObjectProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), OBJECTPROPERTY, value);
	}
    /**
     * Sets a value of property ObjectProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setObjectProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.set(model, instanceResource, OBJECTPROPERTY, value);
	}
	
    /**
     * Sets a value of property ObjectProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setObjectProperty(eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.set(this.model, this.getResource(), OBJECTPROPERTY, value);
	}
  


    /**
     * Removes a value of property ObjectProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeObjectProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, OBJECTPROPERTY, value);
	}
	
    /**
     * Removes a value of property ObjectProperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeObjectProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), OBJECTPROPERTY, value);
	}
    /**
     * Removes a value of property ObjectProperty given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeObjectProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.remove(model, instanceResource, OBJECTPROPERTY, value);
	}
	
    /**
     * Removes a value of property ObjectProperty given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeObjectProperty(eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.remove(this.model, this.getResource(), OBJECTPROPERTY, value);
	}
  
    /**
     * Removes all values of property ObjectProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllObjectProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, OBJECTPROPERTY);
	}
	
    /**
     * Removes all values of property ObjectProperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllObjectProperty() {
		Base.removeAll(this.model, this.getResource(), OBJECTPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@738fda67 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, OCCURRENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@738fda67 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOccurrence() {
		return Base.has(this.model, this.getResource(), OCCURRENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@738fda67 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OCCURRENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@738fda67 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOccurrence( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OCCURRENCE);
	}

     /**
     * Get all values of property Occurrence as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOccurrence_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OCCURRENCE);
	}
	
    /**
     * Get all values of property Occurrence as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOccurrence_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OCCURRENCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Occurrence as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOccurrence_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OCCURRENCE);
	}

    /**
     * Get all values of property Occurrence as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOccurrence_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OCCURRENCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Occurrence     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, OCCURRENCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property Occurrence as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOccurrence_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OCCURRENCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Occurrence     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOccurrence() {
		return Base.getAll(this.model, this.getResource(), OCCURRENCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Occurrence as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOccurrence_as() {
		return Base.getAll_as(this.model, this.getResource(), OCCURRENCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property Occurrence as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, OCCURRENCE, value);
	}
	
    /**
     * Adds a value to property Occurrence as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOccurrence( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), OCCURRENCE, value);
	}
    /**
     * Adds a value to property Occurrence from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, OCCURRENCE, value);
	}
	
    /**
     * Adds a value to property Occurrence from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOccurrence(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), OCCURRENCE, value);
	}
  

    /**
     * Sets a value of property Occurrence from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOccurrence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, OCCURRENCE, value);
	}
	
    /**
     * Sets a value of property Occurrence from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOccurrence( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), OCCURRENCE, value);
	}
    /**
     * Sets a value of property Occurrence from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, OCCURRENCE, value);
	}
	
    /**
     * Sets a value of property Occurrence from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOccurrence(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), OCCURRENCE, value);
	}
  


    /**
     * Removes a value of property Occurrence as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOccurrence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, OCCURRENCE, value);
	}
	
    /**
     * Removes a value of property Occurrence as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOccurrence( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), OCCURRENCE, value);
	}
    /**
     * Removes a value of property Occurrence given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, OCCURRENCE, value);
	}
	
    /**
     * Removes a value of property Occurrence given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOccurrence(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), OCCURRENCE, value);
	}
  
    /**
     * Removes all values of property Occurrence     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOccurrence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, OCCURRENCE);
	}
	
    /**
     * Removes all values of property Occurrence	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOccurrence() {
		Base.removeAll(this.model, this.getResource(), OCCURRENCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cb3ff7c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOtherRepresentation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, OTHERREPRESENTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cb3ff7c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOtherRepresentation() {
		return Base.has(this.model, this.getResource(), OTHERREPRESENTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cb3ff7c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOtherRepresentation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OTHERREPRESENTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cb3ff7c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOtherRepresentation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OTHERREPRESENTATION);
	}

     /**
     * Get all values of property OtherRepresentation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOtherRepresentation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OTHERREPRESENTATION);
	}
	
    /**
     * Get all values of property OtherRepresentation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOtherRepresentation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OTHERREPRESENTATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property OtherRepresentation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOtherRepresentation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OTHERREPRESENTATION);
	}

    /**
     * Get all values of property OtherRepresentation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOtherRepresentation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OTHERREPRESENTATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property OtherRepresentation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOtherRepresentation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, OTHERREPRESENTATION, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property OtherRepresentation as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOtherRepresentation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OTHERREPRESENTATION, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property OtherRepresentation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOtherRepresentation() {
		return Base.getAll(this.model, this.getResource(), OTHERREPRESENTATION, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property OtherRepresentation as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllOtherRepresentation_as() {
		return Base.getAll_as(this.model, this.getResource(), OTHERREPRESENTATION, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property OtherRepresentation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOtherRepresentation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, OTHERREPRESENTATION, value);
	}
	
    /**
     * Adds a value to property OtherRepresentation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOtherRepresentation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), OTHERREPRESENTATION, value);
	}
    /**
     * Adds a value to property OtherRepresentation from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOtherRepresentation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, OTHERREPRESENTATION, value);
	}
	
    /**
     * Adds a value to property OtherRepresentation from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOtherRepresentation(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), OTHERREPRESENTATION, value);
	}
  

    /**
     * Sets a value of property OtherRepresentation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOtherRepresentation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, OTHERREPRESENTATION, value);
	}
	
    /**
     * Sets a value of property OtherRepresentation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOtherRepresentation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), OTHERREPRESENTATION, value);
	}
    /**
     * Sets a value of property OtherRepresentation from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOtherRepresentation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, OTHERREPRESENTATION, value);
	}
	
    /**
     * Sets a value of property OtherRepresentation from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOtherRepresentation(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), OTHERREPRESENTATION, value);
	}
  


    /**
     * Removes a value of property OtherRepresentation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOtherRepresentation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, OTHERREPRESENTATION, value);
	}
	
    /**
     * Removes a value of property OtherRepresentation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOtherRepresentation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), OTHERREPRESENTATION, value);
	}
    /**
     * Removes a value of property OtherRepresentation given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOtherRepresentation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, OTHERREPRESENTATION, value);
	}
	
    /**
     * Removes a value of property OtherRepresentation given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOtherRepresentation(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), OTHERREPRESENTATION, value);
	}
  
    /**
     * Removes all values of property OtherRepresentation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOtherRepresentation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, OTHERREPRESENTATION);
	}
	
    /**
     * Removes all values of property OtherRepresentation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOtherRepresentation() {
		Base.removeAll(this.model, this.getResource(), OTHERREPRESENTATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6aa54069 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6aa54069 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPart() {
		return Base.has(this.model, this.getResource(), PART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6aa54069 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PART);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6aa54069 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPart( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PART);
	}

     /**
     * Get all values of property Part as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PART);
	}
	
    /**
     * Get all values of property Part as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PART, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Part as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PART);
	}

    /**
     * Get all values of property Part as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPart_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PART, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Part     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.pimo.Thing> getAllPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PART, eu.dime.ps.semantic.model.pimo.Thing.class);
	}
	
    /**
     * Get all values of property Part as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.pimo.Thing> getAllPart_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PART, eu.dime.ps.semantic.model.pimo.Thing.class);
	}

    /**
     * Get all values of property Part     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.pimo.Thing> getAllPart() {
		return Base.getAll(this.model, this.getResource(), PART, eu.dime.ps.semantic.model.pimo.Thing.class);
	}

    /**
     * Get all values of property Part as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.pimo.Thing> getAllPart_as() {
		return Base.getAll_as(this.model, this.getResource(), PART, eu.dime.ps.semantic.model.pimo.Thing.class);
	}
 
    /**
     * Adds a value to property Part as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PART, value);
	}
	
    /**
     * Adds a value to property Part as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PART, value);
	}
    /**
     * Adds a value to property Part from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.add(model, instanceResource, PART, value);
	}
	
    /**
     * Adds a value to property Part from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPart(eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.add(this.model, this.getResource(), PART, value);
	}
  

    /**
     * Sets a value of property Part from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PART, value);
	}
	
    /**
     * Sets a value of property Part from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPart( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PART, value);
	}
    /**
     * Sets a value of property Part from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.set(model, instanceResource, PART, value);
	}
	
    /**
     * Sets a value of property Part from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPart(eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.set(this.model, this.getResource(), PART, value);
	}
  


    /**
     * Removes a value of property Part as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PART, value);
	}
	
    /**
     * Removes a value of property Part as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePart( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PART, value);
	}
    /**
     * Removes a value of property Part given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.remove(model, instanceResource, PART, value);
	}
	
    /**
     * Removes a value of property Part given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePart(eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.remove(this.model, this.getResource(), PART, value);
	}
  
    /**
     * Removes all values of property Part     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PART);
	}
	
    /**
     * Removes all values of property Part	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPart() {
		Base.removeAll(this.model, this.getResource(), PART);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3fd2fb4d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3fd2fb4d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPartOf() {
		return Base.has(this.model, this.getResource(), PARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3fd2fb4d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PARTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3fd2fb4d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPartOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PARTOF);
	}

     /**
     * Get all values of property PartOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPartOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PARTOF);
	}
	
    /**
     * Get all values of property PartOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPartOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PARTOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PartOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPartOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PARTOF);
	}

    /**
     * Get all values of property PartOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPartOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PARTOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.pimo.Thing> getAllPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PARTOF, eu.dime.ps.semantic.model.pimo.Thing.class);
	}
	
    /**
     * Get all values of property PartOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.pimo.Thing> getAllPartOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PARTOF, eu.dime.ps.semantic.model.pimo.Thing.class);
	}

    /**
     * Get all values of property PartOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.pimo.Thing> getAllPartOf() {
		return Base.getAll(this.model, this.getResource(), PARTOF, eu.dime.ps.semantic.model.pimo.Thing.class);
	}

    /**
     * Get all values of property PartOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.pimo.Thing> getAllPartOf_as() {
		return Base.getAll_as(this.model, this.getResource(), PARTOF, eu.dime.ps.semantic.model.pimo.Thing.class);
	}
 
    /**
     * Adds a value to property PartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PARTOF, value);
	}
	
    /**
     * Adds a value to property PartOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PARTOF, value);
	}
    /**
     * Adds a value to property PartOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.add(model, instanceResource, PARTOF, value);
	}
	
    /**
     * Adds a value to property PartOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPartOf(eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.add(this.model, this.getResource(), PARTOF, value);
	}
  

    /**
     * Sets a value of property PartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PARTOF, value);
	}
	
    /**
     * Sets a value of property PartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PARTOF, value);
	}
    /**
     * Sets a value of property PartOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.set(model, instanceResource, PARTOF, value);
	}
	
    /**
     * Sets a value of property PartOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPartOf(eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.set(this.model, this.getResource(), PARTOF, value);
	}
  


    /**
     * Removes a value of property PartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PARTOF, value);
	}
	
    /**
     * Removes a value of property PartOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePartOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PARTOF, value);
	}
    /**
     * Removes a value of property PartOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.remove(model, instanceResource, PARTOF, value);
	}
	
    /**
     * Removes a value of property PartOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePartOf(eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.remove(this.model, this.getResource(), PARTOF, value);
	}
  
    /**
     * Removes all values of property PartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PARTOF);
	}
	
    /**
     * Removes all values of property PartOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPartOf() {
		Base.removeAll(this.model, this.getResource(), PARTOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2532e6ee has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPimoIsRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PIMOISRELATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2532e6ee has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPimoIsRelated() {
		return Base.has(this.model, this.getResource(), PIMOISRELATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2532e6ee has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPimoIsRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PIMOISRELATED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2532e6ee has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPimoIsRelated( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PIMOISRELATED);
	}

     /**
     * Get all values of property PimoIsRelated as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimoIsRelated_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PIMOISRELATED);
	}
	
    /**
     * Get all values of property PimoIsRelated as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimoIsRelated_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMOISRELATED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PimoIsRelated as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimoIsRelated_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PIMOISRELATED);
	}

    /**
     * Get all values of property PimoIsRelated as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimoIsRelated_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PIMOISRELATED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PimoIsRelated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.pimo.Thing> getAllPimoIsRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PIMOISRELATED, eu.dime.ps.semantic.model.pimo.Thing.class);
	}
	
    /**
     * Get all values of property PimoIsRelated as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.pimo.Thing> getAllPimoIsRelated_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMOISRELATED, eu.dime.ps.semantic.model.pimo.Thing.class);
	}

    /**
     * Get all values of property PimoIsRelated     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.pimo.Thing> getAllPimoIsRelated() {
		return Base.getAll(this.model, this.getResource(), PIMOISRELATED, eu.dime.ps.semantic.model.pimo.Thing.class);
	}

    /**
     * Get all values of property PimoIsRelated as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.pimo.Thing> getAllPimoIsRelated_as() {
		return Base.getAll_as(this.model, this.getResource(), PIMOISRELATED, eu.dime.ps.semantic.model.pimo.Thing.class);
	}
 
    /**
     * Adds a value to property PimoIsRelated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPimoIsRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PIMOISRELATED, value);
	}
	
    /**
     * Adds a value to property PimoIsRelated as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPimoIsRelated( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PIMOISRELATED, value);
	}
    /**
     * Adds a value to property PimoIsRelated from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPimoIsRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.add(model, instanceResource, PIMOISRELATED, value);
	}
	
    /**
     * Adds a value to property PimoIsRelated from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPimoIsRelated(eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.add(this.model, this.getResource(), PIMOISRELATED, value);
	}
  

    /**
     * Sets a value of property PimoIsRelated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPimoIsRelated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PIMOISRELATED, value);
	}
	
    /**
     * Sets a value of property PimoIsRelated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPimoIsRelated( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PIMOISRELATED, value);
	}
    /**
     * Sets a value of property PimoIsRelated from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPimoIsRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.set(model, instanceResource, PIMOISRELATED, value);
	}
	
    /**
     * Sets a value of property PimoIsRelated from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPimoIsRelated(eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.set(this.model, this.getResource(), PIMOISRELATED, value);
	}
  


    /**
     * Removes a value of property PimoIsRelated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePimoIsRelated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PIMOISRELATED, value);
	}
	
    /**
     * Removes a value of property PimoIsRelated as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePimoIsRelated( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PIMOISRELATED, value);
	}
    /**
     * Removes a value of property PimoIsRelated given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePimoIsRelated(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.remove(model, instanceResource, PIMOISRELATED, value);
	}
	
    /**
     * Removes a value of property PimoIsRelated given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePimoIsRelated(eu.dime.ps.semantic.model.pimo.Thing value) {
		Base.remove(this.model, this.getResource(), PIMOISRELATED, value);
	}
  
    /**
     * Removes all values of property PimoIsRelated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPimoIsRelated( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PIMOISRELATED);
	}
	
    /**
     * Removes all values of property PimoIsRelated	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPimoIsRelated() {
		Base.removeAll(this.model, this.getResource(), PIMOISRELATED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@157416aa has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPimoTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PIMOTAG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@157416aa has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPimoTag() {
		return Base.has(this.model, this.getResource(), PIMOTAG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@157416aa has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPimoTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PIMOTAG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@157416aa has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPimoTag( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PIMOTAG);
	}

     /**
     * Get all values of property PimoTag as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimoTag_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PIMOTAG);
	}
	
    /**
     * Get all values of property PimoTag as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimoTag_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMOTAG, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PimoTag as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimoTag_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PIMOTAG);
	}

    /**
     * Get all values of property PimoTag as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimoTag_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PIMOTAG, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PimoTag     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.pimo.Tag> getAllPimoTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PIMOTAG, eu.dime.ps.semantic.model.pimo.Tag.class);
	}
	
    /**
     * Get all values of property PimoTag as a ReactorResult of Tag 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.pimo.Tag> getAllPimoTag_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMOTAG, eu.dime.ps.semantic.model.pimo.Tag.class);
	}

    /**
     * Get all values of property PimoTag     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.pimo.Tag> getAllPimoTag() {
		return Base.getAll(this.model, this.getResource(), PIMOTAG, eu.dime.ps.semantic.model.pimo.Tag.class);
	}

    /**
     * Get all values of property PimoTag as a ReactorResult of Tag 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.pimo.Tag> getAllPimoTag_as() {
		return Base.getAll_as(this.model, this.getResource(), PIMOTAG, eu.dime.ps.semantic.model.pimo.Tag.class);
	}
 
    /**
     * Adds a value to property PimoTag as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPimoTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PIMOTAG, value);
	}
	
    /**
     * Adds a value to property PimoTag as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPimoTag( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PIMOTAG, value);
	}
    /**
     * Adds a value to property PimoTag from an instance of Tag 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPimoTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Tag value) {
		Base.add(model, instanceResource, PIMOTAG, value);
	}
	
    /**
     * Adds a value to property PimoTag from an instance of Tag 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPimoTag(eu.dime.ps.semantic.model.pimo.Tag value) {
		Base.add(this.model, this.getResource(), PIMOTAG, value);
	}
  

    /**
     * Sets a value of property PimoTag from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPimoTag( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PIMOTAG, value);
	}
	
    /**
     * Sets a value of property PimoTag from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPimoTag( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PIMOTAG, value);
	}
    /**
     * Sets a value of property PimoTag from an instance of Tag 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPimoTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Tag value) {
		Base.set(model, instanceResource, PIMOTAG, value);
	}
	
    /**
     * Sets a value of property PimoTag from an instance of Tag 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPimoTag(eu.dime.ps.semantic.model.pimo.Tag value) {
		Base.set(this.model, this.getResource(), PIMOTAG, value);
	}
  


    /**
     * Removes a value of property PimoTag as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePimoTag( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PIMOTAG, value);
	}
	
    /**
     * Removes a value of property PimoTag as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePimoTag( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PIMOTAG, value);
	}
    /**
     * Removes a value of property PimoTag given as an instance of Tag 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePimoTag(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Tag value) {
		Base.remove(model, instanceResource, PIMOTAG, value);
	}
	
    /**
     * Removes a value of property PimoTag given as an instance of Tag 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePimoTag(eu.dime.ps.semantic.model.pimo.Tag value) {
		Base.remove(this.model, this.getResource(), PIMOTAG, value);
	}
  
    /**
     * Removes all values of property PimoTag     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPimoTag( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PIMOTAG);
	}
	
    /**
     * Removes all values of property PimoTag	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPimoTag() {
		Base.removeAll(this.model, this.getResource(), PIMOTAG);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69273aea has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasReferencingOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REFERENCINGOCCURRENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69273aea has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasReferencingOccurrence() {
		return Base.has(this.model, this.getResource(), REFERENCINGOCCURRENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69273aea has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasReferencingOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REFERENCINGOCCURRENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69273aea has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasReferencingOccurrence( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REFERENCINGOCCURRENCE);
	}

     /**
     * Get all values of property ReferencingOccurrence as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReferencingOccurrence_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REFERENCINGOCCURRENCE);
	}
	
    /**
     * Get all values of property ReferencingOccurrence as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReferencingOccurrence_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REFERENCINGOCCURRENCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ReferencingOccurrence as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReferencingOccurrence_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REFERENCINGOCCURRENCE);
	}

    /**
     * Get all values of property ReferencingOccurrence as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReferencingOccurrence_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REFERENCINGOCCURRENCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ReferencingOccurrence     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nie.InformationElement> getAllReferencingOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REFERENCINGOCCURRENCE, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}
	
    /**
     * Get all values of property ReferencingOccurrence as a ReactorResult of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nie.InformationElement> getAllReferencingOccurrence_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REFERENCINGOCCURRENCE, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}

    /**
     * Get all values of property ReferencingOccurrence     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nie.InformationElement> getAllReferencingOccurrence() {
		return Base.getAll(this.model, this.getResource(), REFERENCINGOCCURRENCE, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}

    /**
     * Get all values of property ReferencingOccurrence as a ReactorResult of InformationElement 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nie.InformationElement> getAllReferencingOccurrence_as() {
		return Base.getAll_as(this.model, this.getResource(), REFERENCINGOCCURRENCE, eu.dime.ps.semantic.model.nie.InformationElement.class);
	}
 
    /**
     * Adds a value to property ReferencingOccurrence as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addReferencingOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REFERENCINGOCCURRENCE, value);
	}
	
    /**
     * Adds a value to property ReferencingOccurrence as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addReferencingOccurrence( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REFERENCINGOCCURRENCE, value);
	}
    /**
     * Adds a value to property ReferencingOccurrence from an instance of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addReferencingOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.add(model, instanceResource, REFERENCINGOCCURRENCE, value);
	}
	
    /**
     * Adds a value to property ReferencingOccurrence from an instance of InformationElement 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addReferencingOccurrence(eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.add(this.model, this.getResource(), REFERENCINGOCCURRENCE, value);
	}
  

    /**
     * Sets a value of property ReferencingOccurrence from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setReferencingOccurrence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REFERENCINGOCCURRENCE, value);
	}
	
    /**
     * Sets a value of property ReferencingOccurrence from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setReferencingOccurrence( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REFERENCINGOCCURRENCE, value);
	}
    /**
     * Sets a value of property ReferencingOccurrence from an instance of InformationElement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setReferencingOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.set(model, instanceResource, REFERENCINGOCCURRENCE, value);
	}
	
    /**
     * Sets a value of property ReferencingOccurrence from an instance of InformationElement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setReferencingOccurrence(eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.set(this.model, this.getResource(), REFERENCINGOCCURRENCE, value);
	}
  


    /**
     * Removes a value of property ReferencingOccurrence as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeReferencingOccurrence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REFERENCINGOCCURRENCE, value);
	}
	
    /**
     * Removes a value of property ReferencingOccurrence as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeReferencingOccurrence( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REFERENCINGOCCURRENCE, value);
	}
    /**
     * Removes a value of property ReferencingOccurrence given as an instance of InformationElement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeReferencingOccurrence(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.remove(model, instanceResource, REFERENCINGOCCURRENCE, value);
	}
	
    /**
     * Removes a value of property ReferencingOccurrence given as an instance of InformationElement 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeReferencingOccurrence(eu.dime.ps.semantic.model.nie.InformationElement value) {
		Base.remove(this.model, this.getResource(), REFERENCINGOCCURRENCE, value);
	}
  
    /**
     * Removes all values of property ReferencingOccurrence     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllReferencingOccurrence( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REFERENCINGOCCURRENCE);
	}
	
    /**
     * Removes all values of property ReferencingOccurrence	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllReferencingOccurrence() {
		Base.removeAll(this.model, this.getResource(), REFERENCINGOCCURRENCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49b5799a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSharedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SHAREDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49b5799a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSharedBy() {
		return Base.has(this.model, this.getResource(), SHAREDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49b5799a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSharedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SHAREDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49b5799a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSharedBy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SHAREDBY);
	}

     /**
     * Get all values of property SharedBy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharedBy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SHAREDBY);
	}
	
    /**
     * Get all values of property SharedBy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharedBy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHAREDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SharedBy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharedBy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SHAREDBY);
	}

    /**
     * Get all values of property SharedBy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharedBy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SHAREDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SharedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SHAREDBY, eu.dime.ps.semantic.model.pimo.Agent.class);
	}
	
    /**
     * Get all values of property SharedBy as a ReactorResult of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedBy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHAREDBY, eu.dime.ps.semantic.model.pimo.Agent.class);
	}

    /**
     * Get all values of property SharedBy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedBy() {
		return Base.getAll(this.model, this.getResource(), SHAREDBY, eu.dime.ps.semantic.model.pimo.Agent.class);
	}

    /**
     * Get all values of property SharedBy as a ReactorResult of Agent 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedBy_as() {
		return Base.getAll_as(this.model, this.getResource(), SHAREDBY, eu.dime.ps.semantic.model.pimo.Agent.class);
	}
 
    /**
     * Adds a value to property SharedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSharedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SHAREDBY, value);
	}
	
    /**
     * Adds a value to property SharedBy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSharedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SHAREDBY, value);
	}
    /**
     * Adds a value to property SharedBy from an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSharedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.add(model, instanceResource, SHAREDBY, value);
	}
	
    /**
     * Adds a value to property SharedBy from an instance of Agent 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSharedBy(eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.add(this.model, this.getResource(), SHAREDBY, value);
	}
  

    /**
     * Sets a value of property SharedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSharedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SHAREDBY, value);
	}
	
    /**
     * Sets a value of property SharedBy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSharedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SHAREDBY, value);
	}
    /**
     * Sets a value of property SharedBy from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSharedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.set(model, instanceResource, SHAREDBY, value);
	}
	
    /**
     * Sets a value of property SharedBy from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSharedBy(eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.set(this.model, this.getResource(), SHAREDBY, value);
	}
  


    /**
     * Removes a value of property SharedBy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSharedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SHAREDBY, value);
	}
	
    /**
     * Removes a value of property SharedBy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSharedBy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SHAREDBY, value);
	}
    /**
     * Removes a value of property SharedBy given as an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSharedBy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.remove(model, instanceResource, SHAREDBY, value);
	}
	
    /**
     * Removes a value of property SharedBy given as an instance of Agent 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSharedBy(eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.remove(this.model, this.getResource(), SHAREDBY, value);
	}
  
    /**
     * Removes all values of property SharedBy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSharedBy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SHAREDBY);
	}
	
    /**
     * Removes all values of property SharedBy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSharedBy() {
		Base.removeAll(this.model, this.getResource(), SHAREDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53e00e0f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSharedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SHAREDWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53e00e0f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSharedWith() {
		return Base.has(this.model, this.getResource(), SHAREDWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53e00e0f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSharedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SHAREDWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53e00e0f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSharedWith( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SHAREDWITH);
	}

     /**
     * Get all values of property SharedWith as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharedWith_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SHAREDWITH);
	}
	
    /**
     * Get all values of property SharedWith as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharedWith_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHAREDWITH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SharedWith as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharedWith_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SHAREDWITH);
	}

    /**
     * Get all values of property SharedWith as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharedWith_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SHAREDWITH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SharedWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SHAREDWITH, eu.dime.ps.semantic.model.pimo.Agent.class);
	}
	
    /**
     * Get all values of property SharedWith as a ReactorResult of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedWith_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHAREDWITH, eu.dime.ps.semantic.model.pimo.Agent.class);
	}

    /**
     * Get all values of property SharedWith     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedWith() {
		return Base.getAll(this.model, this.getResource(), SHAREDWITH, eu.dime.ps.semantic.model.pimo.Agent.class);
	}

    /**
     * Get all values of property SharedWith as a ReactorResult of Agent 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.pimo.Agent> getAllSharedWith_as() {
		return Base.getAll_as(this.model, this.getResource(), SHAREDWITH, eu.dime.ps.semantic.model.pimo.Agent.class);
	}
 
    /**
     * Adds a value to property SharedWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSharedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SHAREDWITH, value);
	}
	
    /**
     * Adds a value to property SharedWith as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSharedWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SHAREDWITH, value);
	}
    /**
     * Adds a value to property SharedWith from an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSharedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.add(model, instanceResource, SHAREDWITH, value);
	}
	
    /**
     * Adds a value to property SharedWith from an instance of Agent 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSharedWith(eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.add(this.model, this.getResource(), SHAREDWITH, value);
	}
  

    /**
     * Sets a value of property SharedWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSharedWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SHAREDWITH, value);
	}
	
    /**
     * Sets a value of property SharedWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSharedWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SHAREDWITH, value);
	}
    /**
     * Sets a value of property SharedWith from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSharedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.set(model, instanceResource, SHAREDWITH, value);
	}
	
    /**
     * Sets a value of property SharedWith from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSharedWith(eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.set(this.model, this.getResource(), SHAREDWITH, value);
	}
  


    /**
     * Removes a value of property SharedWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSharedWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SHAREDWITH, value);
	}
	
    /**
     * Removes a value of property SharedWith as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSharedWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SHAREDWITH, value);
	}
    /**
     * Removes a value of property SharedWith given as an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSharedWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.remove(model, instanceResource, SHAREDWITH, value);
	}
	
    /**
     * Removes a value of property SharedWith given as an instance of Agent 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSharedWith(eu.dime.ps.semantic.model.pimo.Agent value) {
		Base.remove(this.model, this.getResource(), SHAREDWITH, value);
	}
  
    /**
     * Removes all values of property SharedWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSharedWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SHAREDWITH);
	}
	
    /**
     * Removes all values of property SharedWith	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSharedWith() {
		Base.removeAll(this.model, this.getResource(), SHAREDWITH);
	}
 }