package eu.dime.ps.semantic.model.nfo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Actor </li>
 *   <li> AssistantDirector </li>
 *   <li> AudienceRating </li>
 *   <li> Cinematographer </li>
 *   <li> Director </li>
 *   <li> FrameCount </li>
 *   <li> FrameRate </li>
 *   <li> Producer </li>
 *   <li> Synopsis </li>
 *   <li> Writer </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Video extends eu.dime.ps.semantic.model.nfo.Visual {

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Video */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Video", false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#actor */
    @SuppressWarnings("hiding")
	public static final URI ACTOR = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#actor",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#assistantDirector */
    @SuppressWarnings("hiding")
	public static final URI ASSISTANTDIRECTOR = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#assistantDirector",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#audienceRating */
    @SuppressWarnings("hiding")
	public static final URI AUDIENCERATING = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#audienceRating",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#cinematographer */
    @SuppressWarnings("hiding")
	public static final URI CINEMATOGRAPHER = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#cinematographer",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#director */
    @SuppressWarnings("hiding")
	public static final URI DIRECTOR = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#director",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frameCount */
    @SuppressWarnings("hiding")
	public static final URI FRAMECOUNT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frameCount",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frameRate */
    @SuppressWarnings("hiding")
	public static final URI FRAMERATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frameRate",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#producer */
    @SuppressWarnings("hiding")
	public static final URI PRODUCER = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#producer",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#synopsis */
    @SuppressWarnings("hiding")
	public static final URI SYNOPSIS = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#synopsis",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#writer */
    @SuppressWarnings("hiding")
	public static final URI WRITER = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#writer",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#actor",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#assistantDirector",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#audienceRating",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#cinematographer",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#director",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frameCount",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#frameRate",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#producer",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#synopsis",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#writer",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Video (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Video (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Video (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Video (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Video (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Video  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Video  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Video.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Video).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Video> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Video.class );
	}

    /**
	 * Remove rdf:type Video from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19c0cb6d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasActor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ACTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19c0cb6d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasActor() {
		return Base.has(this.model, this.getResource(), ACTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19c0cb6d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasActor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19c0cb6d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasActor( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACTOR);
	}

     /**
     * Get all values of property Actor as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllActor_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ACTOR);
	}
	
    /**
     * Get all values of property Actor as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllActor_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACTOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Actor as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllActor_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ACTOR);
	}

    /**
     * Get all values of property Actor as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllActor_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ACTOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Actor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllActor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ACTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Actor as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllActor_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Actor     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllActor() {
		return Base.getAll(this.model, this.getResource(), ACTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Actor as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllActor_as() {
		return Base.getAll_as(this.model, this.getResource(), ACTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Actor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addActor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ACTOR, value);
	}
	
    /**
     * Adds a value to property Actor as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addActor( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ACTOR, value);
	}
    /**
     * Adds a value to property Actor from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addActor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, ACTOR, value);
	}
	
    /**
     * Adds a value to property Actor from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addActor(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), ACTOR, value);
	}
  

    /**
     * Sets a value of property Actor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setActor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ACTOR, value);
	}
	
    /**
     * Sets a value of property Actor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setActor( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ACTOR, value);
	}
    /**
     * Sets a value of property Actor from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setActor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, ACTOR, value);
	}
	
    /**
     * Sets a value of property Actor from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setActor(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), ACTOR, value);
	}
  


    /**
     * Removes a value of property Actor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeActor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ACTOR, value);
	}
	
    /**
     * Removes a value of property Actor as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeActor( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ACTOR, value);
	}
    /**
     * Removes a value of property Actor given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeActor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, ACTOR, value);
	}
	
    /**
     * Removes a value of property Actor given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeActor(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), ACTOR, value);
	}
  
    /**
     * Removes all values of property Actor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllActor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ACTOR);
	}
	
    /**
     * Removes all values of property Actor	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllActor() {
		Base.removeAll(this.model, this.getResource(), ACTOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@565270be has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAssistantDirector(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ASSISTANTDIRECTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@565270be has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAssistantDirector() {
		return Base.has(this.model, this.getResource(), ASSISTANTDIRECTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@565270be has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAssistantDirector(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ASSISTANTDIRECTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@565270be has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAssistantDirector( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ASSISTANTDIRECTOR);
	}

     /**
     * Get all values of property AssistantDirector as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAssistantDirector_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ASSISTANTDIRECTOR);
	}
	
    /**
     * Get all values of property AssistantDirector as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAssistantDirector_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ASSISTANTDIRECTOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AssistantDirector as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAssistantDirector_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ASSISTANTDIRECTOR);
	}

    /**
     * Get all values of property AssistantDirector as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAssistantDirector_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ASSISTANTDIRECTOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AssistantDirector     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllAssistantDirector(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ASSISTANTDIRECTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property AssistantDirector as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllAssistantDirector_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ASSISTANTDIRECTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property AssistantDirector     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllAssistantDirector() {
		return Base.getAll(this.model, this.getResource(), ASSISTANTDIRECTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property AssistantDirector as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllAssistantDirector_as() {
		return Base.getAll_as(this.model, this.getResource(), ASSISTANTDIRECTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property AssistantDirector as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAssistantDirector(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ASSISTANTDIRECTOR, value);
	}
	
    /**
     * Adds a value to property AssistantDirector as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAssistantDirector( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ASSISTANTDIRECTOR, value);
	}
    /**
     * Adds a value to property AssistantDirector from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAssistantDirector(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, ASSISTANTDIRECTOR, value);
	}
	
    /**
     * Adds a value to property AssistantDirector from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAssistantDirector(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), ASSISTANTDIRECTOR, value);
	}
  

    /**
     * Sets a value of property AssistantDirector from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAssistantDirector( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ASSISTANTDIRECTOR, value);
	}
	
    /**
     * Sets a value of property AssistantDirector from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAssistantDirector( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ASSISTANTDIRECTOR, value);
	}
    /**
     * Sets a value of property AssistantDirector from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAssistantDirector(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, ASSISTANTDIRECTOR, value);
	}
	
    /**
     * Sets a value of property AssistantDirector from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAssistantDirector(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), ASSISTANTDIRECTOR, value);
	}
  


    /**
     * Removes a value of property AssistantDirector as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAssistantDirector( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ASSISTANTDIRECTOR, value);
	}
	
    /**
     * Removes a value of property AssistantDirector as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAssistantDirector( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ASSISTANTDIRECTOR, value);
	}
    /**
     * Removes a value of property AssistantDirector given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAssistantDirector(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, ASSISTANTDIRECTOR, value);
	}
	
    /**
     * Removes a value of property AssistantDirector given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAssistantDirector(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), ASSISTANTDIRECTOR, value);
	}
  
    /**
     * Removes all values of property AssistantDirector     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAssistantDirector( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ASSISTANTDIRECTOR);
	}
	
    /**
     * Removes all values of property AssistantDirector	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAssistantDirector() {
		Base.removeAll(this.model, this.getResource(), ASSISTANTDIRECTOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2dc03a1b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAudienceRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, AUDIENCERATING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2dc03a1b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAudienceRating() {
		return Base.has(this.model, this.getResource(), AUDIENCERATING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2dc03a1b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAudienceRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, AUDIENCERATING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2dc03a1b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAudienceRating( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), AUDIENCERATING);
	}

     /**
     * Get all values of property AudienceRating as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAudienceRating_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, AUDIENCERATING);
	}
	
    /**
     * Get all values of property AudienceRating as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAudienceRating_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AUDIENCERATING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AudienceRating as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAudienceRating_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), AUDIENCERATING);
	}

    /**
     * Get all values of property AudienceRating as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAudienceRating_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), AUDIENCERATING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AudienceRating     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllAudienceRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, AUDIENCERATING, java.lang.String.class);
	}
	
    /**
     * Get all values of property AudienceRating as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllAudienceRating_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AUDIENCERATING, java.lang.String.class);
	}

    /**
     * Get all values of property AudienceRating     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllAudienceRating() {
		return Base.getAll(this.model, this.getResource(), AUDIENCERATING, java.lang.String.class);
	}

    /**
     * Get all values of property AudienceRating as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllAudienceRating_as() {
		return Base.getAll_as(this.model, this.getResource(), AUDIENCERATING, java.lang.String.class);
	}
 
    /**
     * Adds a value to property AudienceRating as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAudienceRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, AUDIENCERATING, value);
	}
	
    /**
     * Adds a value to property AudienceRating as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAudienceRating( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), AUDIENCERATING, value);
	}
    /**
     * Adds a value to property AudienceRating from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAudienceRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, AUDIENCERATING, value);
	}
	
    /**
     * Adds a value to property AudienceRating from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAudienceRating(java.lang.String value) {
		Base.add(this.model, this.getResource(), AUDIENCERATING, value);
	}
  

    /**
     * Sets a value of property AudienceRating from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAudienceRating( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, AUDIENCERATING, value);
	}
	
    /**
     * Sets a value of property AudienceRating from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAudienceRating( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), AUDIENCERATING, value);
	}
    /**
     * Sets a value of property AudienceRating from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAudienceRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, AUDIENCERATING, value);
	}
	
    /**
     * Sets a value of property AudienceRating from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAudienceRating(java.lang.String value) {
		Base.set(this.model, this.getResource(), AUDIENCERATING, value);
	}
  


    /**
     * Removes a value of property AudienceRating as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAudienceRating( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, AUDIENCERATING, value);
	}
	
    /**
     * Removes a value of property AudienceRating as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAudienceRating( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), AUDIENCERATING, value);
	}
    /**
     * Removes a value of property AudienceRating given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAudienceRating(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, AUDIENCERATING, value);
	}
	
    /**
     * Removes a value of property AudienceRating given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAudienceRating(java.lang.String value) {
		Base.remove(this.model, this.getResource(), AUDIENCERATING, value);
	}
  
    /**
     * Removes all values of property AudienceRating     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAudienceRating( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, AUDIENCERATING);
	}
	
    /**
     * Removes all values of property AudienceRating	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAudienceRating() {
		Base.removeAll(this.model, this.getResource(), AUDIENCERATING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a4a7d23 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCinematographer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CINEMATOGRAPHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a4a7d23 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCinematographer() {
		return Base.has(this.model, this.getResource(), CINEMATOGRAPHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a4a7d23 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCinematographer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CINEMATOGRAPHER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a4a7d23 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCinematographer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CINEMATOGRAPHER);
	}

     /**
     * Get all values of property Cinematographer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCinematographer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CINEMATOGRAPHER);
	}
	
    /**
     * Get all values of property Cinematographer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCinematographer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CINEMATOGRAPHER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Cinematographer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCinematographer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CINEMATOGRAPHER);
	}

    /**
     * Get all values of property Cinematographer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCinematographer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CINEMATOGRAPHER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Cinematographer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllCinematographer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CINEMATOGRAPHER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Cinematographer as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllCinematographer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CINEMATOGRAPHER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Cinematographer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllCinematographer() {
		return Base.getAll(this.model, this.getResource(), CINEMATOGRAPHER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Cinematographer as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllCinematographer_as() {
		return Base.getAll_as(this.model, this.getResource(), CINEMATOGRAPHER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Cinematographer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCinematographer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CINEMATOGRAPHER, value);
	}
	
    /**
     * Adds a value to property Cinematographer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCinematographer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CINEMATOGRAPHER, value);
	}
    /**
     * Adds a value to property Cinematographer from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCinematographer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, CINEMATOGRAPHER, value);
	}
	
    /**
     * Adds a value to property Cinematographer from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCinematographer(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), CINEMATOGRAPHER, value);
	}
  

    /**
     * Sets a value of property Cinematographer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCinematographer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CINEMATOGRAPHER, value);
	}
	
    /**
     * Sets a value of property Cinematographer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCinematographer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CINEMATOGRAPHER, value);
	}
    /**
     * Sets a value of property Cinematographer from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCinematographer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, CINEMATOGRAPHER, value);
	}
	
    /**
     * Sets a value of property Cinematographer from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCinematographer(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), CINEMATOGRAPHER, value);
	}
  


    /**
     * Removes a value of property Cinematographer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCinematographer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CINEMATOGRAPHER, value);
	}
	
    /**
     * Removes a value of property Cinematographer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCinematographer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CINEMATOGRAPHER, value);
	}
    /**
     * Removes a value of property Cinematographer given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCinematographer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, CINEMATOGRAPHER, value);
	}
	
    /**
     * Removes a value of property Cinematographer given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCinematographer(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), CINEMATOGRAPHER, value);
	}
  
    /**
     * Removes all values of property Cinematographer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCinematographer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CINEMATOGRAPHER);
	}
	
    /**
     * Removes all values of property Cinematographer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCinematographer() {
		Base.removeAll(this.model, this.getResource(), CINEMATOGRAPHER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@321e018 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDirector(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DIRECTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@321e018 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDirector() {
		return Base.has(this.model, this.getResource(), DIRECTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@321e018 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDirector(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DIRECTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@321e018 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDirector( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DIRECTOR);
	}

     /**
     * Get all values of property Director as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDirector_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DIRECTOR);
	}
	
    /**
     * Get all values of property Director as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDirector_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DIRECTOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Director as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDirector_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DIRECTOR);
	}

    /**
     * Get all values of property Director as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDirector_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DIRECTOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Director     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllDirector(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DIRECTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Director as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllDirector_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DIRECTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Director     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllDirector() {
		return Base.getAll(this.model, this.getResource(), DIRECTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Director as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllDirector_as() {
		return Base.getAll_as(this.model, this.getResource(), DIRECTOR, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Director as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDirector(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DIRECTOR, value);
	}
	
    /**
     * Adds a value to property Director as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDirector( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DIRECTOR, value);
	}
    /**
     * Adds a value to property Director from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDirector(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, DIRECTOR, value);
	}
	
    /**
     * Adds a value to property Director from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDirector(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), DIRECTOR, value);
	}
  

    /**
     * Sets a value of property Director from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDirector( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DIRECTOR, value);
	}
	
    /**
     * Sets a value of property Director from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDirector( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DIRECTOR, value);
	}
    /**
     * Sets a value of property Director from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDirector(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, DIRECTOR, value);
	}
	
    /**
     * Sets a value of property Director from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDirector(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), DIRECTOR, value);
	}
  


    /**
     * Removes a value of property Director as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDirector( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DIRECTOR, value);
	}
	
    /**
     * Removes a value of property Director as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDirector( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DIRECTOR, value);
	}
    /**
     * Removes a value of property Director given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDirector(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, DIRECTOR, value);
	}
	
    /**
     * Removes a value of property Director given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDirector(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), DIRECTOR, value);
	}
  
    /**
     * Removes all values of property Director     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDirector( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DIRECTOR);
	}
	
    /**
     * Removes all values of property Director	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDirector() {
		Base.removeAll(this.model, this.getResource(), DIRECTOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1eeb4477 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFrameCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FRAMECOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1eeb4477 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFrameCount() {
		return Base.has(this.model, this.getResource(), FRAMECOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1eeb4477 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFrameCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FRAMECOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1eeb4477 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFrameCount( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FRAMECOUNT);
	}

    /**
     * Get single value of property FrameCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getFrameCount_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, FRAMECOUNT);
	}
	
    /**
     * Get single value of property FrameCount as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getFrameCount_asNode() {
		return Base.get_asNode(this.model, this.getResource(), FRAMECOUNT);
	}
     /**
     * Get single value of property FrameCount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getFrameCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, FRAMECOUNT, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property FrameCount  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getFrameCount() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), FRAMECOUNT, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property FrameCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addFrameCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, FRAMECOUNT, value, 1);
	}
	
    /**
     * Adds a value to property FrameCount as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addFrameCount( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FRAMECOUNT, value, 1);
	}
    /**
     * Adds a value to property FrameCount from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addFrameCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, FRAMECOUNT, value, 1);
	}
	
    /**
     * Adds a value to property FrameCount from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addFrameCount(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FRAMECOUNT, value, 1);
	}
 
 

    /**
     * Sets a value of property FrameCount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFrameCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FRAMECOUNT, value);
	}
	
    /**
     * Sets a value of property FrameCount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFrameCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FRAMECOUNT, value);
	}
    /**
     * Sets a value of property FrameCount from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFrameCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, FRAMECOUNT, value);
	}
	
    /**
     * Sets a value of property FrameCount from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFrameCount(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), FRAMECOUNT, value);
	}
  


    /**
     * Removes a value of property FrameCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFrameCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FRAMECOUNT, value);
	}
	
    /**
     * Removes a value of property FrameCount as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFrameCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FRAMECOUNT, value);
	}
    /**
     * Removes a value of property FrameCount given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFrameCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, FRAMECOUNT, value);
	}
	
    /**
     * Removes a value of property FrameCount given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFrameCount(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), FRAMECOUNT, value);
	}
  
    /**
     * Removes all values of property FrameCount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFrameCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FRAMECOUNT);
	}
	
    /**
     * Removes all values of property FrameCount	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFrameCount() {
		Base.removeAll(this.model, this.getResource(), FRAMECOUNT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@402862b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFrameRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FRAMERATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@402862b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFrameRate() {
		return Base.has(this.model, this.getResource(), FRAMERATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@402862b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFrameRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FRAMERATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@402862b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFrameRate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FRAMERATE);
	}

    /**
     * Get single value of property FrameRate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getFrameRate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, FRAMERATE);
	}
	
    /**
     * Get single value of property FrameRate as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getFrameRate_asNode() {
		return Base.get_asNode(this.model, this.getResource(), FRAMERATE);
	}
     /**
     * Get single value of property FrameRate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Float getFrameRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Float) Base.get(model, instanceResource, FRAMERATE, java.lang.Float.class);
	}
	
    /**
     * Get single value of property FrameRate  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Float getFrameRate() {
		return (java.lang.Float) Base.get(this.model, this.getResource(), FRAMERATE, java.lang.Float.class);
	}
  
    /**
     * Adds a value to property FrameRate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addFrameRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, FRAMERATE, value, 1);
	}
	
    /**
     * Adds a value to property FrameRate as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addFrameRate( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FRAMERATE, value, 1);
	}
    /**
     * Adds a value to property FrameRate from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addFrameRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value)
    throws CardinalityException {
		Base.add(model, instanceResource, FRAMERATE, value, 1);
	}
	
    /**
     * Adds a value to property FrameRate from an instance of java.lang.Float 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addFrameRate(java.lang.Float value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FRAMERATE, value, 1);
	}
 
 

    /**
     * Sets a value of property FrameRate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFrameRate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FRAMERATE, value);
	}
	
    /**
     * Sets a value of property FrameRate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFrameRate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FRAMERATE, value);
	}
    /**
     * Sets a value of property FrameRate from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFrameRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, FRAMERATE, value);
	}
	
    /**
     * Sets a value of property FrameRate from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFrameRate(java.lang.Float value) {
		Base.set(this.model, this.getResource(), FRAMERATE, value);
	}
  


    /**
     * Removes a value of property FrameRate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFrameRate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FRAMERATE, value);
	}
	
    /**
     * Removes a value of property FrameRate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFrameRate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FRAMERATE, value);
	}
    /**
     * Removes a value of property FrameRate given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFrameRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, FRAMERATE, value);
	}
	
    /**
     * Removes a value of property FrameRate given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFrameRate(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), FRAMERATE, value);
	}
  
    /**
     * Removes all values of property FrameRate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFrameRate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FRAMERATE);
	}
	
    /**
     * Removes all values of property FrameRate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFrameRate() {
		Base.removeAll(this.model, this.getResource(), FRAMERATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@300d8719 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasProducer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRODUCER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@300d8719 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasProducer() {
		return Base.has(this.model, this.getResource(), PRODUCER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@300d8719 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasProducer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRODUCER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@300d8719 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasProducer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRODUCER);
	}

     /**
     * Get all values of property Producer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllProducer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRODUCER);
	}
	
    /**
     * Get all values of property Producer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllProducer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRODUCER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Producer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllProducer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRODUCER);
	}

    /**
     * Get all values of property Producer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllProducer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRODUCER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Producer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllProducer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRODUCER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Producer as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllProducer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRODUCER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Producer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllProducer() {
		return Base.getAll(this.model, this.getResource(), PRODUCER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Producer as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllProducer_as() {
		return Base.getAll_as(this.model, this.getResource(), PRODUCER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Producer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addProducer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRODUCER, value);
	}
	
    /**
     * Adds a value to property Producer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addProducer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRODUCER, value);
	}
    /**
     * Adds a value to property Producer from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addProducer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, PRODUCER, value);
	}
	
    /**
     * Adds a value to property Producer from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addProducer(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), PRODUCER, value);
	}
  

    /**
     * Sets a value of property Producer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setProducer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRODUCER, value);
	}
	
    /**
     * Sets a value of property Producer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setProducer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRODUCER, value);
	}
    /**
     * Sets a value of property Producer from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setProducer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, PRODUCER, value);
	}
	
    /**
     * Sets a value of property Producer from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setProducer(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), PRODUCER, value);
	}
  


    /**
     * Removes a value of property Producer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeProducer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRODUCER, value);
	}
	
    /**
     * Removes a value of property Producer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeProducer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRODUCER, value);
	}
    /**
     * Removes a value of property Producer given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeProducer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, PRODUCER, value);
	}
	
    /**
     * Removes a value of property Producer given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeProducer(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), PRODUCER, value);
	}
  
    /**
     * Removes all values of property Producer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllProducer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRODUCER);
	}
	
    /**
     * Removes all values of property Producer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllProducer() {
		Base.removeAll(this.model, this.getResource(), PRODUCER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a6783e3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSynopsis(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SYNOPSIS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a6783e3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSynopsis() {
		return Base.has(this.model, this.getResource(), SYNOPSIS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a6783e3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSynopsis(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SYNOPSIS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a6783e3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSynopsis( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SYNOPSIS);
	}

    /**
     * Get single value of property Synopsis as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getSynopsis_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, SYNOPSIS);
	}
	
    /**
     * Get single value of property Synopsis as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getSynopsis_asNode() {
		return Base.get_asNode(this.model, this.getResource(), SYNOPSIS);
	}
     /**
     * Get single value of property Synopsis     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getSynopsis(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, SYNOPSIS, java.lang.String.class);
	}
	
    /**
     * Get single value of property Synopsis  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getSynopsis() {
		return (java.lang.String) Base.get(this.model, this.getResource(), SYNOPSIS, java.lang.String.class);
	}
  
    /**
     * Adds a value to property Synopsis as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addSynopsis(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, SYNOPSIS, value, 1);
	}
	
    /**
     * Adds a value to property Synopsis as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addSynopsis( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SYNOPSIS, value, 1);
	}
    /**
     * Adds a value to property Synopsis from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addSynopsis(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, SYNOPSIS, value, 1);
	}
	
    /**
     * Adds a value to property Synopsis from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addSynopsis(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SYNOPSIS, value, 1);
	}
 
 

    /**
     * Sets a value of property Synopsis from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSynopsis( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SYNOPSIS, value);
	}
	
    /**
     * Sets a value of property Synopsis from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSynopsis( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SYNOPSIS, value);
	}
    /**
     * Sets a value of property Synopsis from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSynopsis(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SYNOPSIS, value);
	}
	
    /**
     * Sets a value of property Synopsis from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSynopsis(java.lang.String value) {
		Base.set(this.model, this.getResource(), SYNOPSIS, value);
	}
  


    /**
     * Removes a value of property Synopsis as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSynopsis( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SYNOPSIS, value);
	}
	
    /**
     * Removes a value of property Synopsis as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSynopsis( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SYNOPSIS, value);
	}
    /**
     * Removes a value of property Synopsis given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSynopsis(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SYNOPSIS, value);
	}
	
    /**
     * Removes a value of property Synopsis given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSynopsis(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SYNOPSIS, value);
	}
  
    /**
     * Removes all values of property Synopsis     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSynopsis( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SYNOPSIS);
	}
	
    /**
     * Removes all values of property Synopsis	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSynopsis() {
		Base.removeAll(this.model, this.getResource(), SYNOPSIS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ba274f9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WRITER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ba274f9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWriter() {
		return Base.has(this.model, this.getResource(), WRITER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ba274f9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WRITER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ba274f9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWriter( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WRITER);
	}

     /**
     * Get all values of property Writer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWriter_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WRITER);
	}
	
    /**
     * Get all values of property Writer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWriter_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WRITER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Writer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWriter_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WRITER);
	}

    /**
     * Get all values of property Writer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWriter_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WRITER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Writer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WRITER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Writer as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllWriter_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WRITER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Writer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllWriter() {
		return Base.getAll(this.model, this.getResource(), WRITER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Writer as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllWriter_as() {
		return Base.getAll_as(this.model, this.getResource(), WRITER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Writer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WRITER, value);
	}
	
    /**
     * Adds a value to property Writer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWriter( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WRITER, value);
	}
    /**
     * Adds a value to property Writer from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, WRITER, value);
	}
	
    /**
     * Adds a value to property Writer from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWriter(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), WRITER, value);
	}
  

    /**
     * Sets a value of property Writer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWriter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WRITER, value);
	}
	
    /**
     * Sets a value of property Writer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWriter( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WRITER, value);
	}
    /**
     * Sets a value of property Writer from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, WRITER, value);
	}
	
    /**
     * Sets a value of property Writer from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWriter(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), WRITER, value);
	}
  


    /**
     * Removes a value of property Writer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWriter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WRITER, value);
	}
	
    /**
     * Removes a value of property Writer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWriter( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WRITER, value);
	}
    /**
     * Removes a value of property Writer given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWriter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, WRITER, value);
	}
	
    /**
     * Removes a value of property Writer given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWriter(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), WRITER, value);
	}
  
    /**
     * Removes all values of property Writer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWriter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WRITER);
	}
	
    /**
     * Removes all values of property Writer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWriter() {
		Base.removeAll(this.model, this.getResource(), WRITER);
	}
 }