package eu.dime.ps.semantic.model.nrl;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> DefaultNamespace </li>
 *   <li> DefaultNamespaceAbbreviation </li>
 *   <li> EngineeringTool </li>
 *   <li> Imports </li>
 *   <li> Semantics </li>
 *   <li> Status </li>
 *   <li> Version </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Data extends eu.dime.ps.semantic.model.nrl.Graph {

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#Data */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#Data", false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasDefaultNamespace */
    @SuppressWarnings("hiding")
	public static final URI DEFAULTNAMESPACE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasDefaultNamespace",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasDefaultNamespaceAbbreviation */
    @SuppressWarnings("hiding")
	public static final URI DEFAULTNAMESPACEABBREVIATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasDefaultNamespaceAbbreviation",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#engineeringTool */
    @SuppressWarnings("hiding")
	public static final URI ENGINEERINGTOOL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#engineeringTool",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#imports */
    @SuppressWarnings("hiding")
	public static final URI IMPORTS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#imports",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#hasSemantics */
    @SuppressWarnings("hiding")
	public static final URI SEMANTICS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#hasSemantics",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#status */
    @SuppressWarnings("hiding")
	public static final URI STATUS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#status",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#version */
    @SuppressWarnings("hiding")
	public static final URI VERSION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#version",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasDefaultNamespace",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#hasDefaultNamespaceAbbreviation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#engineeringTool",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#imports",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#hasSemantics",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#status",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#version",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Data (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Data (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Data (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Data (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Data (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Data  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Data  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Data.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/08/15/nrl#Data).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Data> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Data.class );
	}

    /**
	 * Remove rdf:type Data from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Imports' to this Data instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllImports_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nrl.Data.IMPORTS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Imports' to this Data instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllImports_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nrl.Data.IMPORTS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Imports' to this Data instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllImports_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nrl.Data.IMPORTS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4765e109 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDefaultNamespace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEFAULTNAMESPACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4765e109 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDefaultNamespace() {
		return Base.has(this.model, this.getResource(), DEFAULTNAMESPACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4765e109 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDefaultNamespace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEFAULTNAMESPACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4765e109 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDefaultNamespace( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEFAULTNAMESPACE);
	}

    /**
     * Get single value of property DefaultNamespace as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getDefaultNamespace_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, DEFAULTNAMESPACE);
	}
	
    /**
     * Get single value of property DefaultNamespace as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getDefaultNamespace_asNode() {
		return Base.get_asNode(this.model, this.getResource(), DEFAULTNAMESPACE);
	}
     /**
     * Get single value of property DefaultNamespace     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getDefaultNamespace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, DEFAULTNAMESPACE, java.lang.String.class);
	}
	
    /**
     * Get single value of property DefaultNamespace  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getDefaultNamespace() {
		return (java.lang.String) Base.get(this.model, this.getResource(), DEFAULTNAMESPACE, java.lang.String.class);
	}
  
    /**
     * Adds a value to property DefaultNamespace as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addDefaultNamespace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, DEFAULTNAMESPACE, value, 1);
	}
	
    /**
     * Adds a value to property DefaultNamespace as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addDefaultNamespace( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DEFAULTNAMESPACE, value, 1);
	}
    /**
     * Adds a value to property DefaultNamespace from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addDefaultNamespace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, DEFAULTNAMESPACE, value, 1);
	}
	
    /**
     * Adds a value to property DefaultNamespace from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addDefaultNamespace(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DEFAULTNAMESPACE, value, 1);
	}
 
 

    /**
     * Sets a value of property DefaultNamespace from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDefaultNamespace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEFAULTNAMESPACE, value);
	}
	
    /**
     * Sets a value of property DefaultNamespace from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDefaultNamespace( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEFAULTNAMESPACE, value);
	}
    /**
     * Sets a value of property DefaultNamespace from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDefaultNamespace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, DEFAULTNAMESPACE, value);
	}
	
    /**
     * Sets a value of property DefaultNamespace from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDefaultNamespace(java.lang.String value) {
		Base.set(this.model, this.getResource(), DEFAULTNAMESPACE, value);
	}
  


    /**
     * Removes a value of property DefaultNamespace as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDefaultNamespace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEFAULTNAMESPACE, value);
	}
	
    /**
     * Removes a value of property DefaultNamespace as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDefaultNamespace( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEFAULTNAMESPACE, value);
	}
    /**
     * Removes a value of property DefaultNamespace given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDefaultNamespace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, DEFAULTNAMESPACE, value);
	}
	
    /**
     * Removes a value of property DefaultNamespace given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDefaultNamespace(java.lang.String value) {
		Base.remove(this.model, this.getResource(), DEFAULTNAMESPACE, value);
	}
  
    /**
     * Removes all values of property DefaultNamespace     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDefaultNamespace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEFAULTNAMESPACE);
	}
	
    /**
     * Removes all values of property DefaultNamespace	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDefaultNamespace() {
		Base.removeAll(this.model, this.getResource(), DEFAULTNAMESPACE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79851b1a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDefaultNamespaceAbbreviation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEFAULTNAMESPACEABBREVIATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79851b1a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDefaultNamespaceAbbreviation() {
		return Base.has(this.model, this.getResource(), DEFAULTNAMESPACEABBREVIATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79851b1a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDefaultNamespaceAbbreviation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEFAULTNAMESPACEABBREVIATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79851b1a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDefaultNamespaceAbbreviation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEFAULTNAMESPACEABBREVIATION);
	}

    /**
     * Get single value of property DefaultNamespaceAbbreviation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getDefaultNamespaceAbbreviation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, DEFAULTNAMESPACEABBREVIATION);
	}
	
    /**
     * Get single value of property DefaultNamespaceAbbreviation as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getDefaultNamespaceAbbreviation_asNode() {
		return Base.get_asNode(this.model, this.getResource(), DEFAULTNAMESPACEABBREVIATION);
	}
     /**
     * Get single value of property DefaultNamespaceAbbreviation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getDefaultNamespaceAbbreviation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, DEFAULTNAMESPACEABBREVIATION, java.lang.String.class);
	}
	
    /**
     * Get single value of property DefaultNamespaceAbbreviation  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getDefaultNamespaceAbbreviation() {
		return (java.lang.String) Base.get(this.model, this.getResource(), DEFAULTNAMESPACEABBREVIATION, java.lang.String.class);
	}
  
    /**
     * Adds a value to property DefaultNamespaceAbbreviation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addDefaultNamespaceAbbreviation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, DEFAULTNAMESPACEABBREVIATION, value, 1);
	}
	
    /**
     * Adds a value to property DefaultNamespaceAbbreviation as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addDefaultNamespaceAbbreviation( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DEFAULTNAMESPACEABBREVIATION, value, 1);
	}
    /**
     * Adds a value to property DefaultNamespaceAbbreviation from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addDefaultNamespaceAbbreviation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, DEFAULTNAMESPACEABBREVIATION, value, 1);
	}
	
    /**
     * Adds a value to property DefaultNamespaceAbbreviation from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addDefaultNamespaceAbbreviation(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DEFAULTNAMESPACEABBREVIATION, value, 1);
	}
 
 

    /**
     * Sets a value of property DefaultNamespaceAbbreviation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDefaultNamespaceAbbreviation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEFAULTNAMESPACEABBREVIATION, value);
	}
	
    /**
     * Sets a value of property DefaultNamespaceAbbreviation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDefaultNamespaceAbbreviation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEFAULTNAMESPACEABBREVIATION, value);
	}
    /**
     * Sets a value of property DefaultNamespaceAbbreviation from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDefaultNamespaceAbbreviation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, DEFAULTNAMESPACEABBREVIATION, value);
	}
	
    /**
     * Sets a value of property DefaultNamespaceAbbreviation from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDefaultNamespaceAbbreviation(java.lang.String value) {
		Base.set(this.model, this.getResource(), DEFAULTNAMESPACEABBREVIATION, value);
	}
  


    /**
     * Removes a value of property DefaultNamespaceAbbreviation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDefaultNamespaceAbbreviation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEFAULTNAMESPACEABBREVIATION, value);
	}
	
    /**
     * Removes a value of property DefaultNamespaceAbbreviation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDefaultNamespaceAbbreviation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEFAULTNAMESPACEABBREVIATION, value);
	}
    /**
     * Removes a value of property DefaultNamespaceAbbreviation given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDefaultNamespaceAbbreviation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, DEFAULTNAMESPACEABBREVIATION, value);
	}
	
    /**
     * Removes a value of property DefaultNamespaceAbbreviation given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDefaultNamespaceAbbreviation(java.lang.String value) {
		Base.remove(this.model, this.getResource(), DEFAULTNAMESPACEABBREVIATION, value);
	}
  
    /**
     * Removes all values of property DefaultNamespaceAbbreviation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDefaultNamespaceAbbreviation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEFAULTNAMESPACEABBREVIATION);
	}
	
    /**
     * Removes all values of property DefaultNamespaceAbbreviation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDefaultNamespaceAbbreviation() {
		Base.removeAll(this.model, this.getResource(), DEFAULTNAMESPACEABBREVIATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51a0a7ad has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEngineeringTool(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ENGINEERINGTOOL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51a0a7ad has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEngineeringTool() {
		return Base.has(this.model, this.getResource(), ENGINEERINGTOOL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51a0a7ad has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEngineeringTool(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ENGINEERINGTOOL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51a0a7ad has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEngineeringTool( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ENGINEERINGTOOL);
	}

     /**
     * Get all values of property EngineeringTool as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEngineeringTool_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ENGINEERINGTOOL);
	}
	
    /**
     * Get all values of property EngineeringTool as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEngineeringTool_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ENGINEERINGTOOL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EngineeringTool as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEngineeringTool_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ENGINEERINGTOOL);
	}

    /**
     * Get all values of property EngineeringTool as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEngineeringTool_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ENGINEERINGTOOL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EngineeringTool     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllEngineeringTool(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ENGINEERINGTOOL, java.lang.String.class);
	}
	
    /**
     * Get all values of property EngineeringTool as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllEngineeringTool_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ENGINEERINGTOOL, java.lang.String.class);
	}

    /**
     * Get all values of property EngineeringTool     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllEngineeringTool() {
		return Base.getAll(this.model, this.getResource(), ENGINEERINGTOOL, java.lang.String.class);
	}

    /**
     * Get all values of property EngineeringTool as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllEngineeringTool_as() {
		return Base.getAll_as(this.model, this.getResource(), ENGINEERINGTOOL, java.lang.String.class);
	}
 
    /**
     * Adds a value to property EngineeringTool as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEngineeringTool(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ENGINEERINGTOOL, value);
	}
	
    /**
     * Adds a value to property EngineeringTool as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEngineeringTool( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ENGINEERINGTOOL, value);
	}
    /**
     * Adds a value to property EngineeringTool from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEngineeringTool(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, ENGINEERINGTOOL, value);
	}
	
    /**
     * Adds a value to property EngineeringTool from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEngineeringTool(java.lang.String value) {
		Base.add(this.model, this.getResource(), ENGINEERINGTOOL, value);
	}
  

    /**
     * Sets a value of property EngineeringTool from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEngineeringTool( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ENGINEERINGTOOL, value);
	}
	
    /**
     * Sets a value of property EngineeringTool from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEngineeringTool( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ENGINEERINGTOOL, value);
	}
    /**
     * Sets a value of property EngineeringTool from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEngineeringTool(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, ENGINEERINGTOOL, value);
	}
	
    /**
     * Sets a value of property EngineeringTool from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEngineeringTool(java.lang.String value) {
		Base.set(this.model, this.getResource(), ENGINEERINGTOOL, value);
	}
  


    /**
     * Removes a value of property EngineeringTool as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEngineeringTool( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ENGINEERINGTOOL, value);
	}
	
    /**
     * Removes a value of property EngineeringTool as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEngineeringTool( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ENGINEERINGTOOL, value);
	}
    /**
     * Removes a value of property EngineeringTool given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEngineeringTool(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, ENGINEERINGTOOL, value);
	}
	
    /**
     * Removes a value of property EngineeringTool given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEngineeringTool(java.lang.String value) {
		Base.remove(this.model, this.getResource(), ENGINEERINGTOOL, value);
	}
  
    /**
     * Removes all values of property EngineeringTool     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEngineeringTool( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ENGINEERINGTOOL);
	}
	
    /**
     * Removes all values of property EngineeringTool	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEngineeringTool() {
		Base.removeAll(this.model, this.getResource(), ENGINEERINGTOOL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77889d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMPORTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77889d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImports() {
		return Base.has(this.model, this.getResource(), IMPORTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77889d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMPORTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77889d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImports( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMPORTS);
	}

     /**
     * Get all values of property Imports as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMPORTS);
	}
	
    /**
     * Get all values of property Imports as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMPORTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Imports as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMPORTS);
	}

    /**
     * Get all values of property Imports as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImports_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMPORTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Imports     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nrl.Data> getAllImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMPORTS, eu.dime.ps.semantic.model.nrl.Data.class);
	}
	
    /**
     * Get all values of property Imports as a ReactorResult of Data 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nrl.Data> getAllImports_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMPORTS, eu.dime.ps.semantic.model.nrl.Data.class);
	}

    /**
     * Get all values of property Imports     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nrl.Data> getAllImports() {
		return Base.getAll(this.model, this.getResource(), IMPORTS, eu.dime.ps.semantic.model.nrl.Data.class);
	}

    /**
     * Get all values of property Imports as a ReactorResult of Data 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nrl.Data> getAllImports_as() {
		return Base.getAll_as(this.model, this.getResource(), IMPORTS, eu.dime.ps.semantic.model.nrl.Data.class);
	}
 
    /**
     * Adds a value to property Imports as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Adds a value to property Imports as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImports( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Adds a value to property Imports from an instance of Data 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nrl.Data value) {
		Base.add(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Adds a value to property Imports from an instance of Data 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImports(eu.dime.ps.semantic.model.nrl.Data value) {
		Base.add(this.model, this.getResource(), IMPORTS, value);
	}
  

    /**
     * Sets a value of property Imports from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Sets a value of property Imports from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImports( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Sets a value of property Imports from an instance of Data 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nrl.Data value) {
		Base.set(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Sets a value of property Imports from an instance of Data 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImports(eu.dime.ps.semantic.model.nrl.Data value) {
		Base.set(this.model, this.getResource(), IMPORTS, value);
	}
  


    /**
     * Removes a value of property Imports as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Removes a value of property Imports as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImports( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMPORTS, value);
	}
    /**
     * Removes a value of property Imports given as an instance of Data 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImports(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nrl.Data value) {
		Base.remove(model, instanceResource, IMPORTS, value);
	}
	
    /**
     * Removes a value of property Imports given as an instance of Data 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImports(eu.dime.ps.semantic.model.nrl.Data value) {
		Base.remove(this.model, this.getResource(), IMPORTS, value);
	}
  
    /**
     * Removes all values of property Imports     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImports( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMPORTS);
	}
	
    /**
     * Removes all values of property Imports	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImports() {
		Base.removeAll(this.model, this.getResource(), IMPORTS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2921da1b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSemantics(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SEMANTICS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2921da1b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSemantics() {
		return Base.has(this.model, this.getResource(), SEMANTICS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2921da1b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSemantics(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SEMANTICS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2921da1b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSemantics( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SEMANTICS);
	}

     /**
     * Get all values of property Semantics as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSemantics_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SEMANTICS);
	}
	
    /**
     * Get all values of property Semantics as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSemantics_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SEMANTICS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Semantics as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSemantics_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SEMANTICS);
	}

    /**
     * Get all values of property Semantics as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSemantics_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SEMANTICS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Semantics     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nrl.Semantics> getAllSemantics(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SEMANTICS, eu.dime.ps.semantic.model.nrl.Semantics.class);
	}
	
    /**
     * Get all values of property Semantics as a ReactorResult of Semantics 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nrl.Semantics> getAllSemantics_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SEMANTICS, eu.dime.ps.semantic.model.nrl.Semantics.class);
	}

    /**
     * Get all values of property Semantics     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nrl.Semantics> getAllSemantics() {
		return Base.getAll(this.model, this.getResource(), SEMANTICS, eu.dime.ps.semantic.model.nrl.Semantics.class);
	}

    /**
     * Get all values of property Semantics as a ReactorResult of Semantics 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nrl.Semantics> getAllSemantics_as() {
		return Base.getAll_as(this.model, this.getResource(), SEMANTICS, eu.dime.ps.semantic.model.nrl.Semantics.class);
	}
 
    /**
     * Adds a value to property Semantics as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSemantics(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SEMANTICS, value);
	}
	
    /**
     * Adds a value to property Semantics as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSemantics( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SEMANTICS, value);
	}
    /**
     * Adds a value to property Semantics from an instance of Semantics 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSemantics(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nrl.Semantics value) {
		Base.add(model, instanceResource, SEMANTICS, value);
	}
	
    /**
     * Adds a value to property Semantics from an instance of Semantics 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSemantics(eu.dime.ps.semantic.model.nrl.Semantics value) {
		Base.add(this.model, this.getResource(), SEMANTICS, value);
	}
  

    /**
     * Sets a value of property Semantics from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSemantics( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SEMANTICS, value);
	}
	
    /**
     * Sets a value of property Semantics from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSemantics( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SEMANTICS, value);
	}
    /**
     * Sets a value of property Semantics from an instance of Semantics 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSemantics(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nrl.Semantics value) {
		Base.set(model, instanceResource, SEMANTICS, value);
	}
	
    /**
     * Sets a value of property Semantics from an instance of Semantics 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSemantics(eu.dime.ps.semantic.model.nrl.Semantics value) {
		Base.set(this.model, this.getResource(), SEMANTICS, value);
	}
  


    /**
     * Removes a value of property Semantics as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSemantics( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SEMANTICS, value);
	}
	
    /**
     * Removes a value of property Semantics as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSemantics( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SEMANTICS, value);
	}
    /**
     * Removes a value of property Semantics given as an instance of Semantics 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSemantics(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nrl.Semantics value) {
		Base.remove(model, instanceResource, SEMANTICS, value);
	}
	
    /**
     * Removes a value of property Semantics given as an instance of Semantics 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSemantics(eu.dime.ps.semantic.model.nrl.Semantics value) {
		Base.remove(this.model, this.getResource(), SEMANTICS, value);
	}
  
    /**
     * Removes all values of property Semantics     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSemantics( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SEMANTICS);
	}
	
    /**
     * Removes all values of property Semantics	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSemantics() {
		Base.removeAll(this.model, this.getResource(), SEMANTICS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4da79a2e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, STATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4da79a2e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasStatus() {
		return Base.has(this.model, this.getResource(), STATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4da79a2e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, STATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4da79a2e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasStatus( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), STATUS);
	}

    /**
     * Get single value of property Status as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getStatus_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, STATUS);
	}
	
    /**
     * Get single value of property Status as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getStatus_asNode() {
		return Base.get_asNode(this.model, this.getResource(), STATUS);
	}
     /**
     * Get single value of property Status     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, STATUS, java.lang.String.class);
	}
	
    /**
     * Get single value of property Status  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getStatus() {
		return (java.lang.String) Base.get(this.model, this.getResource(), STATUS, java.lang.String.class);
	}
  
    /**
     * Adds a value to property Status as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, STATUS, value, 1);
	}
	
    /**
     * Adds a value to property Status as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addStatus( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), STATUS, value, 1);
	}
    /**
     * Adds a value to property Status from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, STATUS, value, 1);
	}
	
    /**
     * Adds a value to property Status from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addStatus(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), STATUS, value, 1);
	}
 
 

    /**
     * Sets a value of property Status from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, STATUS, value);
	}
	
    /**
     * Sets a value of property Status from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), STATUS, value);
	}
    /**
     * Sets a value of property Status from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, STATUS, value);
	}
	
    /**
     * Sets a value of property Status from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setStatus(java.lang.String value) {
		Base.set(this.model, this.getResource(), STATUS, value);
	}
  


    /**
     * Removes a value of property Status as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, STATUS, value);
	}
	
    /**
     * Removes a value of property Status as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), STATUS, value);
	}
    /**
     * Removes a value of property Status given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, STATUS, value);
	}
	
    /**
     * Removes a value of property Status given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeStatus(java.lang.String value) {
		Base.remove(this.model, this.getResource(), STATUS, value);
	}
  
    /**
     * Removes all values of property Status     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, STATUS);
	}
	
    /**
     * Removes all values of property Status	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllStatus() {
		Base.removeAll(this.model, this.getResource(), STATUS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@442bcc96 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, VERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@442bcc96 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasVersion() {
		return Base.has(this.model, this.getResource(), VERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@442bcc96 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, VERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@442bcc96 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasVersion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), VERSION);
	}

    /**
     * Get single value of property Version as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getVersion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, VERSION);
	}
	
    /**
     * Get single value of property Version as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getVersion_asNode() {
		return Base.get_asNode(this.model, this.getResource(), VERSION);
	}
     /**
     * Get single value of property Version     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Float getVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Float) Base.get(model, instanceResource, VERSION, java.lang.Float.class);
	}
	
    /**
     * Get single value of property Version  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Float getVersion() {
		return (java.lang.Float) Base.get(this.model, this.getResource(), VERSION, java.lang.Float.class);
	}
  
    /**
     * Adds a value to property Version as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, VERSION, value, 1);
	}
	
    /**
     * Adds a value to property Version as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addVersion( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), VERSION, value, 1);
	}
    /**
     * Adds a value to property Version from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value)
    throws CardinalityException {
		Base.add(model, instanceResource, VERSION, value, 1);
	}
	
    /**
     * Adds a value to property Version from an instance of java.lang.Float 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addVersion(java.lang.Float value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), VERSION, value, 1);
	}
 
 

    /**
     * Sets a value of property Version from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, VERSION, value);
	}
	
    /**
     * Sets a value of property Version from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), VERSION, value);
	}
    /**
     * Sets a value of property Version from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, VERSION, value);
	}
	
    /**
     * Sets a value of property Version from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setVersion(java.lang.Float value) {
		Base.set(this.model, this.getResource(), VERSION, value);
	}
  


    /**
     * Removes a value of property Version as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, VERSION, value);
	}
	
    /**
     * Removes a value of property Version as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), VERSION, value);
	}
    /**
     * Removes a value of property Version given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, VERSION, value);
	}
	
    /**
     * Removes a value of property Version given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeVersion(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), VERSION, value);
	}
  
    /**
     * Removes all values of property Version     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, VERSION);
	}
	
    /**
     * Removes all values of property Version	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllVersion() {
		Base.removeAll(this.model, this.getResource(), VERSION);
	}
 }