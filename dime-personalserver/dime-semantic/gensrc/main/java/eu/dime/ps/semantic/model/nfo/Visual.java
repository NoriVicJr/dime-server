/*
* Copyright 2013 by the digital.me project (http://www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.nfo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> AspectRatio </li>
 *   <li> ColorDepth </li>
 *   <li> InterlaceMode </li>
 *   <li> NfoHeight </li>
 *   <li> NfoWidth </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Visual extends eu.dime.ps.semantic.model.nfo.Media {

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Visual */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Visual", false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#aspectRatio */
    @SuppressWarnings("hiding")
	public static final URI ASPECTRATIO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#aspectRatio",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorDepth */
    @SuppressWarnings("hiding")
	public static final URI COLORDEPTH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorDepth",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#interlaceMode */
    @SuppressWarnings("hiding")
	public static final URI INTERLACEMODE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#interlaceMode",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#height */
    @SuppressWarnings("hiding")
	public static final URI NFOHEIGHT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#height",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#width */
    @SuppressWarnings("hiding")
	public static final URI NFOWIDTH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#width",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#aspectRatio",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#colorDepth",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#interlaceMode",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#height",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#width",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Visual (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Visual (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Visual (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Visual (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Visual (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Visual  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Visual  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Visual.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Visual).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Visual> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Visual.class );
	}

    /**
	 * Remove rdf:type Visual from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@475f1db4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAspectRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ASPECTRATIO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@475f1db4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAspectRatio() {
		return Base.has(this.model, this.getResource(), ASPECTRATIO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@475f1db4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAspectRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ASPECTRATIO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@475f1db4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAspectRatio( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ASPECTRATIO);
	}

    /**
     * Get single value of property AspectRatio as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getAspectRatio_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, ASPECTRATIO);
	}
	
    /**
     * Get single value of property AspectRatio as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getAspectRatio_asNode() {
		return Base.get_asNode(this.model, this.getResource(), ASPECTRATIO);
	}
     /**
     * Get single value of property AspectRatio     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Float getAspectRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Float) Base.get(model, instanceResource, ASPECTRATIO, java.lang.Float.class);
	}
	
    /**
     * Get single value of property AspectRatio  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Float getAspectRatio() {
		return (java.lang.Float) Base.get(this.model, this.getResource(), ASPECTRATIO, java.lang.Float.class);
	}
  
    /**
     * Adds a value to property AspectRatio as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addAspectRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, ASPECTRATIO, value, 1);
	}
	
    /**
     * Adds a value to property AspectRatio as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addAspectRatio( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ASPECTRATIO, value, 1);
	}
    /**
     * Adds a value to property AspectRatio from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addAspectRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value)
    throws CardinalityException {
		Base.add(model, instanceResource, ASPECTRATIO, value, 1);
	}
	
    /**
     * Adds a value to property AspectRatio from an instance of java.lang.Float 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addAspectRatio(java.lang.Float value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ASPECTRATIO, value, 1);
	}
 
 

    /**
     * Sets a value of property AspectRatio from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAspectRatio( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ASPECTRATIO, value);
	}
	
    /**
     * Sets a value of property AspectRatio from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAspectRatio( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ASPECTRATIO, value);
	}
    /**
     * Sets a value of property AspectRatio from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAspectRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, ASPECTRATIO, value);
	}
	
    /**
     * Sets a value of property AspectRatio from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAspectRatio(java.lang.Float value) {
		Base.set(this.model, this.getResource(), ASPECTRATIO, value);
	}
  


    /**
     * Removes a value of property AspectRatio as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAspectRatio( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ASPECTRATIO, value);
	}
	
    /**
     * Removes a value of property AspectRatio as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAspectRatio( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ASPECTRATIO, value);
	}
    /**
     * Removes a value of property AspectRatio given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAspectRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, ASPECTRATIO, value);
	}
	
    /**
     * Removes a value of property AspectRatio given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAspectRatio(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), ASPECTRATIO, value);
	}
  
    /**
     * Removes all values of property AspectRatio     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAspectRatio( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ASPECTRATIO);
	}
	
    /**
     * Removes all values of property AspectRatio	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAspectRatio() {
		Base.removeAll(this.model, this.getResource(), ASPECTRATIO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6108fe21 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasColorDepth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COLORDEPTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6108fe21 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasColorDepth() {
		return Base.has(this.model, this.getResource(), COLORDEPTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6108fe21 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasColorDepth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COLORDEPTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6108fe21 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasColorDepth( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COLORDEPTH);
	}

    /**
     * Get single value of property ColorDepth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getColorDepth_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, COLORDEPTH);
	}
	
    /**
     * Get single value of property ColorDepth as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getColorDepth_asNode() {
		return Base.get_asNode(this.model, this.getResource(), COLORDEPTH);
	}
     /**
     * Get single value of property ColorDepth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getColorDepth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, COLORDEPTH, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property ColorDepth  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getColorDepth() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), COLORDEPTH, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property ColorDepth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addColorDepth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, COLORDEPTH, value, 1);
	}
	
    /**
     * Adds a value to property ColorDepth as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addColorDepth( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), COLORDEPTH, value, 1);
	}
    /**
     * Adds a value to property ColorDepth from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addColorDepth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, COLORDEPTH, value, 1);
	}
	
    /**
     * Adds a value to property ColorDepth from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addColorDepth(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), COLORDEPTH, value, 1);
	}
 
 

    /**
     * Sets a value of property ColorDepth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setColorDepth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COLORDEPTH, value);
	}
	
    /**
     * Sets a value of property ColorDepth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setColorDepth( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COLORDEPTH, value);
	}
    /**
     * Sets a value of property ColorDepth from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setColorDepth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, COLORDEPTH, value);
	}
	
    /**
     * Sets a value of property ColorDepth from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setColorDepth(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), COLORDEPTH, value);
	}
  


    /**
     * Removes a value of property ColorDepth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeColorDepth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COLORDEPTH, value);
	}
	
    /**
     * Removes a value of property ColorDepth as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeColorDepth( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COLORDEPTH, value);
	}
    /**
     * Removes a value of property ColorDepth given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeColorDepth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, COLORDEPTH, value);
	}
	
    /**
     * Removes a value of property ColorDepth given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeColorDepth(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), COLORDEPTH, value);
	}
  
    /**
     * Removes all values of property ColorDepth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllColorDepth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COLORDEPTH);
	}
	
    /**
     * Removes all values of property ColorDepth	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllColorDepth() {
		Base.removeAll(this.model, this.getResource(), COLORDEPTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20ab2912 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInterlaceMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INTERLACEMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20ab2912 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInterlaceMode() {
		return Base.has(this.model, this.getResource(), INTERLACEMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20ab2912 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInterlaceMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INTERLACEMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20ab2912 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInterlaceMode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INTERLACEMODE);
	}

    /**
     * Get single value of property InterlaceMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getInterlaceMode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, INTERLACEMODE);
	}
	
    /**
     * Get single value of property InterlaceMode as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getInterlaceMode_asNode() {
		return Base.get_asNode(this.model, this.getResource(), INTERLACEMODE);
	}
     /**
     * Get single value of property InterlaceMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Boolean getInterlaceMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Boolean) Base.get(model, instanceResource, INTERLACEMODE, java.lang.Boolean.class);
	}
	
    /**
     * Get single value of property InterlaceMode  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Boolean getInterlaceMode() {
		return (java.lang.Boolean) Base.get(this.model, this.getResource(), INTERLACEMODE, java.lang.Boolean.class);
	}
  
    /**
     * Adds a value to property InterlaceMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addInterlaceMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, INTERLACEMODE, value, 1);
	}
	
    /**
     * Adds a value to property InterlaceMode as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addInterlaceMode( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), INTERLACEMODE, value, 1);
	}
    /**
     * Adds a value to property InterlaceMode from an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addInterlaceMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value)
    throws CardinalityException {
		Base.add(model, instanceResource, INTERLACEMODE, value, 1);
	}
	
    /**
     * Adds a value to property InterlaceMode from an instance of java.lang.Boolean 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addInterlaceMode(java.lang.Boolean value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), INTERLACEMODE, value, 1);
	}
 
 

    /**
     * Sets a value of property InterlaceMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInterlaceMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTERLACEMODE, value);
	}
	
    /**
     * Sets a value of property InterlaceMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInterlaceMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTERLACEMODE, value);
	}
    /**
     * Sets a value of property InterlaceMode from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInterlaceMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.set(model, instanceResource, INTERLACEMODE, value);
	}
	
    /**
     * Sets a value of property InterlaceMode from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInterlaceMode(java.lang.Boolean value) {
		Base.set(this.model, this.getResource(), INTERLACEMODE, value);
	}
  


    /**
     * Removes a value of property InterlaceMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInterlaceMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTERLACEMODE, value);
	}
	
    /**
     * Removes a value of property InterlaceMode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInterlaceMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTERLACEMODE, value);
	}
    /**
     * Removes a value of property InterlaceMode given as an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInterlaceMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.remove(model, instanceResource, INTERLACEMODE, value);
	}
	
    /**
     * Removes a value of property InterlaceMode given as an instance of java.lang.Boolean 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInterlaceMode(java.lang.Boolean value) {
		Base.remove(this.model, this.getResource(), INTERLACEMODE, value);
	}
  
    /**
     * Removes all values of property InterlaceMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInterlaceMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTERLACEMODE);
	}
	
    /**
     * Removes all values of property InterlaceMode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInterlaceMode() {
		Base.removeAll(this.model, this.getResource(), INTERLACEMODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68d397bb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNfoHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NFOHEIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68d397bb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNfoHeight() {
		return Base.has(this.model, this.getResource(), NFOHEIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68d397bb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNfoHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NFOHEIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@68d397bb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNfoHeight( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NFOHEIGHT);
	}

    /**
     * Get single value of property NfoHeight as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getNfoHeight_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, NFOHEIGHT);
	}
	
    /**
     * Get single value of property NfoHeight as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getNfoHeight_asNode() {
		return Base.get_asNode(this.model, this.getResource(), NFOHEIGHT);
	}
     /**
     * Get single value of property NfoHeight     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getNfoHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, NFOHEIGHT, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property NfoHeight  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getNfoHeight() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), NFOHEIGHT, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property NfoHeight as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addNfoHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, NFOHEIGHT, value, 1);
	}
	
    /**
     * Adds a value to property NfoHeight as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addNfoHeight( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), NFOHEIGHT, value, 1);
	}
    /**
     * Adds a value to property NfoHeight from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addNfoHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, NFOHEIGHT, value, 1);
	}
	
    /**
     * Adds a value to property NfoHeight from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addNfoHeight(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), NFOHEIGHT, value, 1);
	}
 
 

    /**
     * Sets a value of property NfoHeight from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNfoHeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NFOHEIGHT, value);
	}
	
    /**
     * Sets a value of property NfoHeight from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNfoHeight( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NFOHEIGHT, value);
	}
    /**
     * Sets a value of property NfoHeight from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNfoHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, NFOHEIGHT, value);
	}
	
    /**
     * Sets a value of property NfoHeight from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNfoHeight(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), NFOHEIGHT, value);
	}
  


    /**
     * Removes a value of property NfoHeight as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNfoHeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NFOHEIGHT, value);
	}
	
    /**
     * Removes a value of property NfoHeight as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNfoHeight( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NFOHEIGHT, value);
	}
    /**
     * Removes a value of property NfoHeight given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNfoHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, NFOHEIGHT, value);
	}
	
    /**
     * Removes a value of property NfoHeight given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNfoHeight(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), NFOHEIGHT, value);
	}
  
    /**
     * Removes all values of property NfoHeight     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNfoHeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NFOHEIGHT);
	}
	
    /**
     * Removes all values of property NfoHeight	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNfoHeight() {
		Base.removeAll(this.model, this.getResource(), NFOHEIGHT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c18b1a7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNfoWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NFOWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c18b1a7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNfoWidth() {
		return Base.has(this.model, this.getResource(), NFOWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c18b1a7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNfoWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NFOWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c18b1a7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNfoWidth( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NFOWIDTH);
	}

    /**
     * Get single value of property NfoWidth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getNfoWidth_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, NFOWIDTH);
	}
	
    /**
     * Get single value of property NfoWidth as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getNfoWidth_asNode() {
		return Base.get_asNode(this.model, this.getResource(), NFOWIDTH);
	}
     /**
     * Get single value of property NfoWidth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getNfoWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, NFOWIDTH, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property NfoWidth  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getNfoWidth() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), NFOWIDTH, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property NfoWidth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addNfoWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, NFOWIDTH, value, 1);
	}
	
    /**
     * Adds a value to property NfoWidth as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addNfoWidth( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), NFOWIDTH, value, 1);
	}
    /**
     * Adds a value to property NfoWidth from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addNfoWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, NFOWIDTH, value, 1);
	}
	
    /**
     * Adds a value to property NfoWidth from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addNfoWidth(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), NFOWIDTH, value, 1);
	}
 
 

    /**
     * Sets a value of property NfoWidth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNfoWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NFOWIDTH, value);
	}
	
    /**
     * Sets a value of property NfoWidth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNfoWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NFOWIDTH, value);
	}
    /**
     * Sets a value of property NfoWidth from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNfoWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, NFOWIDTH, value);
	}
	
    /**
     * Sets a value of property NfoWidth from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNfoWidth(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), NFOWIDTH, value);
	}
  


    /**
     * Removes a value of property NfoWidth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNfoWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NFOWIDTH, value);
	}
	
    /**
     * Removes a value of property NfoWidth as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNfoWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NFOWIDTH, value);
	}
    /**
     * Removes a value of property NfoWidth given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNfoWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, NFOWIDTH, value);
	}
	
    /**
     * Removes a value of property NfoWidth given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNfoWidth(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), NFOWIDTH, value);
	}
  
    /**
     * Removes all values of property NfoWidth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNfoWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NFOWIDTH);
	}
	
    /**
     * Removes all values of property NfoWidth	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNfoWidth() {
		Base.removeAll(this.model, this.getResource(), NFOWIDTH);
	}
 }