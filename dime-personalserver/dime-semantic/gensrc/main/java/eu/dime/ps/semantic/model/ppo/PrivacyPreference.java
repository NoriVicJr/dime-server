package eu.dime.ps.semantic.model.ppo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Access </li>
 *   <li> AccessSpace </li>
 *   <li> AltLabel </li>
 *   <li> AppliesToNamedGraph </li>
 *   <li> AppliesToResource </li>
 *   <li> AppliesToStatement </li>
 *   <li> Condition </li>
 *   <li> PrefLabel </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class PrivacyPreference extends eu.dime.ps.semantic.model.RDFReactorThing {

    /** http://vocab.deri.ie/ppo#PrivacyPreference */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://vocab.deri.ie/ppo#PrivacyPreference", false);

    /** http://vocab.deri.ie/ppo#hasAccess */
    @SuppressWarnings("hiding")
	public static final URI ACCESS = new URIImpl("http://vocab.deri.ie/ppo#hasAccess",false);

    /** http://vocab.deri.ie/ppo#hasAccessSpace */
    @SuppressWarnings("hiding")
	public static final URI ACCESSSPACE = new URIImpl("http://vocab.deri.ie/ppo#hasAccessSpace",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#altLabel */
    @SuppressWarnings("hiding")
	public static final URI ALTLABEL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#altLabel",false);

    /** http://vocab.deri.ie/ppo#appliesToNamedGraph */
    @SuppressWarnings("hiding")
	public static final URI APPLIESTONAMEDGRAPH = new URIImpl("http://vocab.deri.ie/ppo#appliesToNamedGraph",false);

    /** http://vocab.deri.ie/ppo#appliesToResource */
    @SuppressWarnings("hiding")
	public static final URI APPLIESTORESOURCE = new URIImpl("http://vocab.deri.ie/ppo#appliesToResource",false);

    /** http://vocab.deri.ie/ppo#appliesToStatement */
    @SuppressWarnings("hiding")
	public static final URI APPLIESTOSTATEMENT = new URIImpl("http://vocab.deri.ie/ppo#appliesToStatement",false);

    /** http://vocab.deri.ie/ppo#hasCondition */
    @SuppressWarnings("hiding")
	public static final URI CONDITION = new URIImpl("http://vocab.deri.ie/ppo#hasCondition",false);

    /** http://www.semanticdesktop.org/ontologies/2007/08/15/nao#prefLabel */
    @SuppressWarnings("hiding")
	public static final URI PREFLABEL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#prefLabel",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://vocab.deri.ie/ppo#hasAccess",false),
      new URIImpl("http://vocab.deri.ie/ppo#hasAccessSpace",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#altLabel",false),
      new URIImpl("http://vocab.deri.ie/ppo#appliesToNamedGraph",false),
      new URIImpl("http://vocab.deri.ie/ppo#appliesToResource",false),
      new URIImpl("http://vocab.deri.ie/ppo#appliesToStatement",false),
      new URIImpl("http://vocab.deri.ie/ppo#hasCondition",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/08/15/nao#prefLabel",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected PrivacyPreference (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public PrivacyPreference (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public PrivacyPreference (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public PrivacyPreference (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public PrivacyPreference (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of PrivacyPreference  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static PrivacyPreference  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, PrivacyPreference.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://vocab.deri.ie/ppo#PrivacyPreference).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends PrivacyPreference> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, PrivacyPreference.class );
	}

    /**
	 * Remove rdf:type PrivacyPreference from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PrivacyPreference' to this PrivacyPreference instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrivacyPreference_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.duho.Log.PRIVACYPREFERENCE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PrivacyPreference' to this PrivacyPreference instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrivacyPreference_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.duho.Log.PRIVACYPREFERENCE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PrivacyPreference' to this PrivacyPreference instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPrivacyPreference_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.duho.Log.PRIVACYPREFERENCE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f2ecd91 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAccess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ACCESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f2ecd91 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAccess() {
		return Base.has(this.model, this.getResource(), ACCESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f2ecd91 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAccess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACCESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f2ecd91 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAccess( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACCESS);
	}

     /**
     * Get all values of property Access as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccess_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ACCESS);
	}
	
    /**
     * Get all values of property Access as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAccess_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Access as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccess_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ACCESS);
	}

    /**
     * Get all values of property Access as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAccess_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ACCESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Access     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.acl.Access> getAllAccess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ACCESS, eu.dime.ps.semantic.model.acl.Access.class);
	}
	
    /**
     * Get all values of property Access as a ReactorResult of Access 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.acl.Access> getAllAccess_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCESS, eu.dime.ps.semantic.model.acl.Access.class);
	}

    /**
     * Get all values of property Access     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.acl.Access> getAllAccess() {
		return Base.getAll(this.model, this.getResource(), ACCESS, eu.dime.ps.semantic.model.acl.Access.class);
	}

    /**
     * Get all values of property Access as a ReactorResult of Access 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.acl.Access> getAllAccess_as() {
		return Base.getAll_as(this.model, this.getResource(), ACCESS, eu.dime.ps.semantic.model.acl.Access.class);
	}
 
    /**
     * Adds a value to property Access as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAccess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ACCESS, value);
	}
	
    /**
     * Adds a value to property Access as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAccess( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ACCESS, value);
	}
    /**
     * Adds a value to property Access from an instance of Access 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAccess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.acl.Access value) {
		Base.add(model, instanceResource, ACCESS, value);
	}
	
    /**
     * Adds a value to property Access from an instance of Access 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAccess(eu.dime.ps.semantic.model.acl.Access value) {
		Base.add(this.model, this.getResource(), ACCESS, value);
	}
  

    /**
     * Sets a value of property Access from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAccess( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ACCESS, value);
	}
	
    /**
     * Sets a value of property Access from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAccess( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ACCESS, value);
	}
    /**
     * Sets a value of property Access from an instance of Access 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAccess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.acl.Access value) {
		Base.set(model, instanceResource, ACCESS, value);
	}
	
    /**
     * Sets a value of property Access from an instance of Access 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAccess(eu.dime.ps.semantic.model.acl.Access value) {
		Base.set(this.model, this.getResource(), ACCESS, value);
	}
  


    /**
     * Removes a value of property Access as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAccess( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ACCESS, value);
	}
	
    /**
     * Removes a value of property Access as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAccess( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ACCESS, value);
	}
    /**
     * Removes a value of property Access given as an instance of Access 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAccess(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.acl.Access value) {
		Base.remove(model, instanceResource, ACCESS, value);
	}
	
    /**
     * Removes a value of property Access given as an instance of Access 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAccess(eu.dime.ps.semantic.model.acl.Access value) {
		Base.remove(this.model, this.getResource(), ACCESS, value);
	}
  
    /**
     * Removes all values of property Access     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAccess( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ACCESS);
	}
	
    /**
     * Removes all values of property Access	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAccess() {
		Base.removeAll(this.model, this.getResource(), ACCESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a5b281a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAccessSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ACCESSSPACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a5b281a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAccessSpace() {
		return Base.has(this.model, this.getResource(), ACCESSSPACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a5b281a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAccessSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACCESSSPACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a5b281a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAccessSpace( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACCESSSPACE);
	}

     /**
     * Get all values of property AccessSpace as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccessSpace_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ACCESSSPACE);
	}
	
    /**
     * Get all values of property AccessSpace as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAccessSpace_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCESSSPACE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AccessSpace as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccessSpace_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ACCESSSPACE);
	}

    /**
     * Get all values of property AccessSpace as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAccessSpace_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ACCESSSPACE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AccessSpace     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.ppo.AccessSpace> getAllAccessSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ACCESSSPACE, eu.dime.ps.semantic.model.ppo.AccessSpace.class);
	}
	
    /**
     * Get all values of property AccessSpace as a ReactorResult of AccessSpace 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.ppo.AccessSpace> getAllAccessSpace_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCESSSPACE, eu.dime.ps.semantic.model.ppo.AccessSpace.class);
	}

    /**
     * Get all values of property AccessSpace     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.ppo.AccessSpace> getAllAccessSpace() {
		return Base.getAll(this.model, this.getResource(), ACCESSSPACE, eu.dime.ps.semantic.model.ppo.AccessSpace.class);
	}

    /**
     * Get all values of property AccessSpace as a ReactorResult of AccessSpace 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.ppo.AccessSpace> getAllAccessSpace_as() {
		return Base.getAll_as(this.model, this.getResource(), ACCESSSPACE, eu.dime.ps.semantic.model.ppo.AccessSpace.class);
	}
 
    /**
     * Adds a value to property AccessSpace as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAccessSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ACCESSSPACE, value);
	}
	
    /**
     * Adds a value to property AccessSpace as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAccessSpace( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ACCESSSPACE, value);
	}
    /**
     * Adds a value to property AccessSpace from an instance of AccessSpace 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAccessSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ppo.AccessSpace value) {
		Base.add(model, instanceResource, ACCESSSPACE, value);
	}
	
    /**
     * Adds a value to property AccessSpace from an instance of AccessSpace 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAccessSpace(eu.dime.ps.semantic.model.ppo.AccessSpace value) {
		Base.add(this.model, this.getResource(), ACCESSSPACE, value);
	}
  

    /**
     * Sets a value of property AccessSpace from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAccessSpace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ACCESSSPACE, value);
	}
	
    /**
     * Sets a value of property AccessSpace from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAccessSpace( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ACCESSSPACE, value);
	}
    /**
     * Sets a value of property AccessSpace from an instance of AccessSpace 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAccessSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ppo.AccessSpace value) {
		Base.set(model, instanceResource, ACCESSSPACE, value);
	}
	
    /**
     * Sets a value of property AccessSpace from an instance of AccessSpace 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAccessSpace(eu.dime.ps.semantic.model.ppo.AccessSpace value) {
		Base.set(this.model, this.getResource(), ACCESSSPACE, value);
	}
  


    /**
     * Removes a value of property AccessSpace as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAccessSpace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ACCESSSPACE, value);
	}
	
    /**
     * Removes a value of property AccessSpace as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAccessSpace( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ACCESSSPACE, value);
	}
    /**
     * Removes a value of property AccessSpace given as an instance of AccessSpace 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAccessSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ppo.AccessSpace value) {
		Base.remove(model, instanceResource, ACCESSSPACE, value);
	}
	
    /**
     * Removes a value of property AccessSpace given as an instance of AccessSpace 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAccessSpace(eu.dime.ps.semantic.model.ppo.AccessSpace value) {
		Base.remove(this.model, this.getResource(), ACCESSSPACE, value);
	}
  
    /**
     * Removes all values of property AccessSpace     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAccessSpace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ACCESSSPACE);
	}
	
    /**
     * Removes all values of property AccessSpace	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAccessSpace() {
		Base.removeAll(this.model, this.getResource(), ACCESSSPACE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19602e18 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAltLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ALTLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19602e18 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAltLabel() {
		return Base.has(this.model, this.getResource(), ALTLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19602e18 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAltLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ALTLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19602e18 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAltLabel( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ALTLABEL);
	}

     /**
     * Get all values of property AltLabel as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAltLabel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ALTLABEL);
	}
	
    /**
     * Get all values of property AltLabel as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAltLabel_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALTLABEL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AltLabel as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAltLabel_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ALTLABEL);
	}

    /**
     * Get all values of property AltLabel as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAltLabel_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ALTLABEL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AltLabel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllAltLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ALTLABEL, java.lang.String.class);
	}
	
    /**
     * Get all values of property AltLabel as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllAltLabel_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ALTLABEL, java.lang.String.class);
	}

    /**
     * Get all values of property AltLabel     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllAltLabel() {
		return Base.getAll(this.model, this.getResource(), ALTLABEL, java.lang.String.class);
	}

    /**
     * Get all values of property AltLabel as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllAltLabel_as() {
		return Base.getAll_as(this.model, this.getResource(), ALTLABEL, java.lang.String.class);
	}
 
    /**
     * Adds a value to property AltLabel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAltLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ALTLABEL, value);
	}
	
    /**
     * Adds a value to property AltLabel as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAltLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ALTLABEL, value);
	}
    /**
     * Adds a value to property AltLabel from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAltLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, ALTLABEL, value);
	}
	
    /**
     * Adds a value to property AltLabel from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAltLabel(java.lang.String value) {
		Base.add(this.model, this.getResource(), ALTLABEL, value);
	}
  

    /**
     * Sets a value of property AltLabel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAltLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ALTLABEL, value);
	}
	
    /**
     * Sets a value of property AltLabel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAltLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ALTLABEL, value);
	}
    /**
     * Sets a value of property AltLabel from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAltLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, ALTLABEL, value);
	}
	
    /**
     * Sets a value of property AltLabel from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAltLabel(java.lang.String value) {
		Base.set(this.model, this.getResource(), ALTLABEL, value);
	}
  


    /**
     * Removes a value of property AltLabel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAltLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ALTLABEL, value);
	}
	
    /**
     * Removes a value of property AltLabel as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAltLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ALTLABEL, value);
	}
    /**
     * Removes a value of property AltLabel given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAltLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, ALTLABEL, value);
	}
	
    /**
     * Removes a value of property AltLabel given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAltLabel(java.lang.String value) {
		Base.remove(this.model, this.getResource(), ALTLABEL, value);
	}
  
    /**
     * Removes all values of property AltLabel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAltLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ALTLABEL);
	}
	
    /**
     * Removes all values of property AltLabel	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAltLabel() {
		Base.removeAll(this.model, this.getResource(), ALTLABEL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c7f420 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAppliesToNamedGraph(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, APPLIESTONAMEDGRAPH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c7f420 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAppliesToNamedGraph() {
		return Base.has(this.model, this.getResource(), APPLIESTONAMEDGRAPH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c7f420 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAppliesToNamedGraph(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, APPLIESTONAMEDGRAPH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c7f420 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAppliesToNamedGraph( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), APPLIESTONAMEDGRAPH);
	}

     /**
     * Get all values of property AppliesToNamedGraph as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAppliesToNamedGraph_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, APPLIESTONAMEDGRAPH);
	}
	
    /**
     * Get all values of property AppliesToNamedGraph as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAppliesToNamedGraph_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, APPLIESTONAMEDGRAPH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AppliesToNamedGraph as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAppliesToNamedGraph_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), APPLIESTONAMEDGRAPH);
	}

    /**
     * Get all values of property AppliesToNamedGraph as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAppliesToNamedGraph_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), APPLIESTONAMEDGRAPH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AppliesToNamedGraph     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.rdfg1.Graph> getAllAppliesToNamedGraph(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, APPLIESTONAMEDGRAPH, eu.dime.ps.semantic.model.rdfg1.Graph.class);
	}
	
    /**
     * Get all values of property AppliesToNamedGraph as a ReactorResult of Graph 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.rdfg1.Graph> getAllAppliesToNamedGraph_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, APPLIESTONAMEDGRAPH, eu.dime.ps.semantic.model.rdfg1.Graph.class);
	}

    /**
     * Get all values of property AppliesToNamedGraph     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.rdfg1.Graph> getAllAppliesToNamedGraph() {
		return Base.getAll(this.model, this.getResource(), APPLIESTONAMEDGRAPH, eu.dime.ps.semantic.model.rdfg1.Graph.class);
	}

    /**
     * Get all values of property AppliesToNamedGraph as a ReactorResult of Graph 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.rdfg1.Graph> getAllAppliesToNamedGraph_as() {
		return Base.getAll_as(this.model, this.getResource(), APPLIESTONAMEDGRAPH, eu.dime.ps.semantic.model.rdfg1.Graph.class);
	}
 
    /**
     * Adds a value to property AppliesToNamedGraph as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAppliesToNamedGraph(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, APPLIESTONAMEDGRAPH, value);
	}
	
    /**
     * Adds a value to property AppliesToNamedGraph as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAppliesToNamedGraph( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), APPLIESTONAMEDGRAPH, value);
	}
    /**
     * Adds a value to property AppliesToNamedGraph from an instance of Graph 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAppliesToNamedGraph(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.rdfg1.Graph value) {
		Base.add(model, instanceResource, APPLIESTONAMEDGRAPH, value);
	}
	
    /**
     * Adds a value to property AppliesToNamedGraph from an instance of Graph 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAppliesToNamedGraph(eu.dime.ps.semantic.model.rdfg1.Graph value) {
		Base.add(this.model, this.getResource(), APPLIESTONAMEDGRAPH, value);
	}
  

    /**
     * Sets a value of property AppliesToNamedGraph from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAppliesToNamedGraph( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, APPLIESTONAMEDGRAPH, value);
	}
	
    /**
     * Sets a value of property AppliesToNamedGraph from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAppliesToNamedGraph( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), APPLIESTONAMEDGRAPH, value);
	}
    /**
     * Sets a value of property AppliesToNamedGraph from an instance of Graph 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAppliesToNamedGraph(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.rdfg1.Graph value) {
		Base.set(model, instanceResource, APPLIESTONAMEDGRAPH, value);
	}
	
    /**
     * Sets a value of property AppliesToNamedGraph from an instance of Graph 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAppliesToNamedGraph(eu.dime.ps.semantic.model.rdfg1.Graph value) {
		Base.set(this.model, this.getResource(), APPLIESTONAMEDGRAPH, value);
	}
  


    /**
     * Removes a value of property AppliesToNamedGraph as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAppliesToNamedGraph( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, APPLIESTONAMEDGRAPH, value);
	}
	
    /**
     * Removes a value of property AppliesToNamedGraph as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAppliesToNamedGraph( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), APPLIESTONAMEDGRAPH, value);
	}
    /**
     * Removes a value of property AppliesToNamedGraph given as an instance of Graph 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAppliesToNamedGraph(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.rdfg1.Graph value) {
		Base.remove(model, instanceResource, APPLIESTONAMEDGRAPH, value);
	}
	
    /**
     * Removes a value of property AppliesToNamedGraph given as an instance of Graph 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAppliesToNamedGraph(eu.dime.ps.semantic.model.rdfg1.Graph value) {
		Base.remove(this.model, this.getResource(), APPLIESTONAMEDGRAPH, value);
	}
  
    /**
     * Removes all values of property AppliesToNamedGraph     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAppliesToNamedGraph( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, APPLIESTONAMEDGRAPH);
	}
	
    /**
     * Removes all values of property AppliesToNamedGraph	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAppliesToNamedGraph() {
		Base.removeAll(this.model, this.getResource(), APPLIESTONAMEDGRAPH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58a8be48 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAppliesToResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, APPLIESTORESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58a8be48 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAppliesToResource() {
		return Base.has(this.model, this.getResource(), APPLIESTORESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58a8be48 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAppliesToResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, APPLIESTORESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58a8be48 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAppliesToResource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), APPLIESTORESOURCE);
	}

     /**
     * Get all values of property AppliesToResource as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAppliesToResource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, APPLIESTORESOURCE);
	}
	
    /**
     * Get all values of property AppliesToResource as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAppliesToResource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, APPLIESTORESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AppliesToResource as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAppliesToResource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), APPLIESTORESOURCE);
	}

    /**
     * Get all values of property AppliesToResource as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAppliesToResource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), APPLIESTORESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AppliesToResource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllAppliesToResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, APPLIESTORESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property AppliesToResource as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllAppliesToResource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, APPLIESTORESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property AppliesToResource     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllAppliesToResource() {
		return Base.getAll(this.model, this.getResource(), APPLIESTORESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property AppliesToResource as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllAppliesToResource_as() {
		return Base.getAll_as(this.model, this.getResource(), APPLIESTORESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property AppliesToResource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAppliesToResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, APPLIESTORESOURCE, value);
	}
	
    /**
     * Adds a value to property AppliesToResource as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAppliesToResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), APPLIESTORESOURCE, value);
	}
    /**
     * Adds a value to property AppliesToResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAppliesToResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, APPLIESTORESOURCE, value);
	}
	
    /**
     * Adds a value to property AppliesToResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAppliesToResource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), APPLIESTORESOURCE, value);
	}
  

    /**
     * Sets a value of property AppliesToResource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAppliesToResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, APPLIESTORESOURCE, value);
	}
	
    /**
     * Sets a value of property AppliesToResource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAppliesToResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), APPLIESTORESOURCE, value);
	}
    /**
     * Sets a value of property AppliesToResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAppliesToResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, APPLIESTORESOURCE, value);
	}
	
    /**
     * Sets a value of property AppliesToResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAppliesToResource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), APPLIESTORESOURCE, value);
	}
  


    /**
     * Removes a value of property AppliesToResource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAppliesToResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, APPLIESTORESOURCE, value);
	}
	
    /**
     * Removes a value of property AppliesToResource as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAppliesToResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), APPLIESTORESOURCE, value);
	}
    /**
     * Removes a value of property AppliesToResource given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAppliesToResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, APPLIESTORESOURCE, value);
	}
	
    /**
     * Removes a value of property AppliesToResource given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAppliesToResource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), APPLIESTORESOURCE, value);
	}
  
    /**
     * Removes all values of property AppliesToResource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAppliesToResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, APPLIESTORESOURCE);
	}
	
    /**
     * Removes all values of property AppliesToResource	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAppliesToResource() {
		Base.removeAll(this.model, this.getResource(), APPLIESTORESOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ee0b30 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAppliesToStatement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, APPLIESTOSTATEMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ee0b30 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAppliesToStatement() {
		return Base.has(this.model, this.getResource(), APPLIESTOSTATEMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ee0b30 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAppliesToStatement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, APPLIESTOSTATEMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ee0b30 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAppliesToStatement( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), APPLIESTOSTATEMENT);
	}

     /**
     * Get all values of property AppliesToStatement as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAppliesToStatement_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, APPLIESTOSTATEMENT);
	}
	
    /**
     * Get all values of property AppliesToStatement as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAppliesToStatement_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, APPLIESTOSTATEMENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property AppliesToStatement as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAppliesToStatement_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), APPLIESTOSTATEMENT);
	}

    /**
     * Get all values of property AppliesToStatement as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAppliesToStatement_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), APPLIESTOSTATEMENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property AppliesToStatement     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Statement> getAllAppliesToStatement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, APPLIESTOSTATEMENT, org.ontoware.rdfreactor.schema.rdfs.Statement.class);
	}
	
    /**
     * Get all values of property AppliesToStatement as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Statement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Statement> getAllAppliesToStatement_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, APPLIESTOSTATEMENT, org.ontoware.rdfreactor.schema.rdfs.Statement.class);
	}

    /**
     * Get all values of property AppliesToStatement     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Statement> getAllAppliesToStatement() {
		return Base.getAll(this.model, this.getResource(), APPLIESTOSTATEMENT, org.ontoware.rdfreactor.schema.rdfs.Statement.class);
	}

    /**
     * Get all values of property AppliesToStatement as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Statement 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Statement> getAllAppliesToStatement_as() {
		return Base.getAll_as(this.model, this.getResource(), APPLIESTOSTATEMENT, org.ontoware.rdfreactor.schema.rdfs.Statement.class);
	}
 
    /**
     * Adds a value to property AppliesToStatement as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAppliesToStatement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, APPLIESTOSTATEMENT, value);
	}
	
    /**
     * Adds a value to property AppliesToStatement as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAppliesToStatement( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), APPLIESTOSTATEMENT, value);
	}
    /**
     * Adds a value to property AppliesToStatement from an instance of org.ontoware.rdfreactor.schema.rdfs.Statement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAppliesToStatement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Statement value) {
		Base.add(model, instanceResource, APPLIESTOSTATEMENT, value);
	}
	
    /**
     * Adds a value to property AppliesToStatement from an instance of org.ontoware.rdfreactor.schema.rdfs.Statement 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAppliesToStatement(org.ontoware.rdfreactor.schema.rdfs.Statement value) {
		Base.add(this.model, this.getResource(), APPLIESTOSTATEMENT, value);
	}
  

    /**
     * Sets a value of property AppliesToStatement from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAppliesToStatement( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, APPLIESTOSTATEMENT, value);
	}
	
    /**
     * Sets a value of property AppliesToStatement from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAppliesToStatement( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), APPLIESTOSTATEMENT, value);
	}
    /**
     * Sets a value of property AppliesToStatement from an instance of org.ontoware.rdfreactor.schema.rdfs.Statement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAppliesToStatement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Statement value) {
		Base.set(model, instanceResource, APPLIESTOSTATEMENT, value);
	}
	
    /**
     * Sets a value of property AppliesToStatement from an instance of org.ontoware.rdfreactor.schema.rdfs.Statement 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAppliesToStatement(org.ontoware.rdfreactor.schema.rdfs.Statement value) {
		Base.set(this.model, this.getResource(), APPLIESTOSTATEMENT, value);
	}
  


    /**
     * Removes a value of property AppliesToStatement as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAppliesToStatement( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, APPLIESTOSTATEMENT, value);
	}
	
    /**
     * Removes a value of property AppliesToStatement as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAppliesToStatement( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), APPLIESTOSTATEMENT, value);
	}
    /**
     * Removes a value of property AppliesToStatement given as an instance of org.ontoware.rdfreactor.schema.rdfs.Statement 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAppliesToStatement(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Statement value) {
		Base.remove(model, instanceResource, APPLIESTOSTATEMENT, value);
	}
	
    /**
     * Removes a value of property AppliesToStatement given as an instance of org.ontoware.rdfreactor.schema.rdfs.Statement 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAppliesToStatement(org.ontoware.rdfreactor.schema.rdfs.Statement value) {
		Base.remove(this.model, this.getResource(), APPLIESTOSTATEMENT, value);
	}
  
    /**
     * Removes all values of property AppliesToStatement     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAppliesToStatement( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, APPLIESTOSTATEMENT);
	}
	
    /**
     * Removes all values of property AppliesToStatement	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAppliesToStatement() {
		Base.removeAll(this.model, this.getResource(), APPLIESTOSTATEMENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@395568d1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCondition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONDITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@395568d1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCondition() {
		return Base.has(this.model, this.getResource(), CONDITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@395568d1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCondition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONDITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@395568d1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCondition( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONDITION);
	}

     /**
     * Get all values of property Condition as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCondition_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONDITION);
	}
	
    /**
     * Get all values of property Condition as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCondition_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONDITION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Condition as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCondition_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONDITION);
	}

    /**
     * Get all values of property Condition as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCondition_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONDITION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Condition     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.ppo.Condition> getAllCondition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONDITION, eu.dime.ps.semantic.model.ppo.Condition.class);
	}
	
    /**
     * Get all values of property Condition as a ReactorResult of Condition 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.ppo.Condition> getAllCondition_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONDITION, eu.dime.ps.semantic.model.ppo.Condition.class);
	}

    /**
     * Get all values of property Condition     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.ppo.Condition> getAllCondition() {
		return Base.getAll(this.model, this.getResource(), CONDITION, eu.dime.ps.semantic.model.ppo.Condition.class);
	}

    /**
     * Get all values of property Condition as a ReactorResult of Condition 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.ppo.Condition> getAllCondition_as() {
		return Base.getAll_as(this.model, this.getResource(), CONDITION, eu.dime.ps.semantic.model.ppo.Condition.class);
	}
 
    /**
     * Adds a value to property Condition as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCondition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONDITION, value);
	}
	
    /**
     * Adds a value to property Condition as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCondition( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONDITION, value);
	}
    /**
     * Adds a value to property Condition from an instance of Condition 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCondition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ppo.Condition value) {
		Base.add(model, instanceResource, CONDITION, value);
	}
	
    /**
     * Adds a value to property Condition from an instance of Condition 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCondition(eu.dime.ps.semantic.model.ppo.Condition value) {
		Base.add(this.model, this.getResource(), CONDITION, value);
	}
  

    /**
     * Sets a value of property Condition from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCondition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONDITION, value);
	}
	
    /**
     * Sets a value of property Condition from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCondition( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONDITION, value);
	}
    /**
     * Sets a value of property Condition from an instance of Condition 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCondition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ppo.Condition value) {
		Base.set(model, instanceResource, CONDITION, value);
	}
	
    /**
     * Sets a value of property Condition from an instance of Condition 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCondition(eu.dime.ps.semantic.model.ppo.Condition value) {
		Base.set(this.model, this.getResource(), CONDITION, value);
	}
  


    /**
     * Removes a value of property Condition as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCondition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONDITION, value);
	}
	
    /**
     * Removes a value of property Condition as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCondition( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONDITION, value);
	}
    /**
     * Removes a value of property Condition given as an instance of Condition 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCondition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ppo.Condition value) {
		Base.remove(model, instanceResource, CONDITION, value);
	}
	
    /**
     * Removes a value of property Condition given as an instance of Condition 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCondition(eu.dime.ps.semantic.model.ppo.Condition value) {
		Base.remove(this.model, this.getResource(), CONDITION, value);
	}
  
    /**
     * Removes all values of property Condition     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCondition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONDITION);
	}
	
    /**
     * Removes all values of property Condition	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCondition() {
		Base.removeAll(this.model, this.getResource(), CONDITION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c428890 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PREFLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c428890 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPrefLabel() {
		return Base.has(this.model, this.getResource(), PREFLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c428890 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PREFLABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c428890 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPrefLabel( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PREFLABEL);
	}

    /**
     * Get single value of property PrefLabel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getPrefLabel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, PREFLABEL);
	}
	
    /**
     * Get single value of property PrefLabel as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getPrefLabel_asNode() {
		return Base.get_asNode(this.model, this.getResource(), PREFLABEL);
	}
     /**
     * Get single value of property PrefLabel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, PREFLABEL, java.lang.String.class);
	}
	
    /**
     * Get single value of property PrefLabel  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getPrefLabel() {
		return (java.lang.String) Base.get(this.model, this.getResource(), PREFLABEL, java.lang.String.class);
	}
  
    /**
     * Adds a value to property PrefLabel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, PREFLABEL, value, 1);
	}
	
    /**
     * Adds a value to property PrefLabel as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addPrefLabel( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PREFLABEL, value, 1);
	}
    /**
     * Adds a value to property PrefLabel from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, PREFLABEL, value, 1);
	}
	
    /**
     * Adds a value to property PrefLabel from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addPrefLabel(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), PREFLABEL, value, 1);
	}
 
 

    /**
     * Sets a value of property PrefLabel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPrefLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PREFLABEL, value);
	}
	
    /**
     * Sets a value of property PrefLabel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPrefLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PREFLABEL, value);
	}
    /**
     * Sets a value of property PrefLabel from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PREFLABEL, value);
	}
	
    /**
     * Sets a value of property PrefLabel from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPrefLabel(java.lang.String value) {
		Base.set(this.model, this.getResource(), PREFLABEL, value);
	}
  


    /**
     * Removes a value of property PrefLabel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePrefLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PREFLABEL, value);
	}
	
    /**
     * Removes a value of property PrefLabel as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePrefLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PREFLABEL, value);
	}
    /**
     * Removes a value of property PrefLabel given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePrefLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PREFLABEL, value);
	}
	
    /**
     * Removes a value of property PrefLabel given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePrefLabel(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PREFLABEL, value);
	}
  
    /**
     * Removes all values of property PrefLabel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPrefLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PREFLABEL);
	}
	
    /**
     * Removes all values of property PrefLabel	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPrefLabel() {
		Base.removeAll(this.model, this.getResource(), PREFLABEL);
	}
 }