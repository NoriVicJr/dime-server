package eu.dime.ps.semantic.model.nmo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Attachment </li>
 *   <li> From </li>
 *   <li> HtmlMessageContent </li>
 *   <li> InReplyTo </li>
 *   <li> IsRead </li>
 *   <li> MessageFrom </li>
 *   <li> MessageHeader </li>
 *   <li> MessageId </li>
 *   <li> MessageRecipient </li>
 *   <li> MessageReplyTo </li>
 *   <li> MessageSender </li>
 *   <li> MessageSubject </li>
 *   <li> PlainTextMessageContent </li>
 *   <li> PrimaryMessageRecipient </li>
 *   <li> PrimaryRecipient </li>
 *   <li> ReceivedDate </li>
 *   <li> Recipient </li>
 *   <li> References </li>
 *   <li> ReplyTo </li>
 *   <li> SecondaryMessageRecipient </li>
 *   <li> SecondaryRecipient </li>
 *   <li> Sender </li>
 *   <li> SentDate </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Message extends eu.dime.ps.semantic.model.nie.InformationElement {

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Message */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Message", false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#hasAttachment */
    @SuppressWarnings("hiding")
	public static final URI ATTACHMENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#hasAttachment",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#from */
    @SuppressWarnings("hiding")
	public static final URI FROM = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#from",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#htmlMessageContent */
    @SuppressWarnings("hiding")
	public static final URI HTMLMESSAGECONTENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#htmlMessageContent",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#inReplyTo */
    @SuppressWarnings("hiding")
	public static final URI INREPLYTO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#inReplyTo",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#isRead */
    @SuppressWarnings("hiding")
	public static final URI ISREAD = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#isRead",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageFrom */
    @SuppressWarnings("hiding")
	public static final URI MESSAGEFROM = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageFrom",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageHeader */
    @SuppressWarnings("hiding")
	public static final URI MESSAGEHEADER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageHeader",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageId */
    @SuppressWarnings("hiding")
	public static final URI MESSAGEID = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageId",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageRecipient */
    @SuppressWarnings("hiding")
	public static final URI MESSAGERECIPIENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageRecipient",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageReplyTo */
    @SuppressWarnings("hiding")
	public static final URI MESSAGEREPLYTO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageReplyTo",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageSender */
    @SuppressWarnings("hiding")
	public static final URI MESSAGESENDER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageSender",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageSubject */
    @SuppressWarnings("hiding")
	public static final URI MESSAGESUBJECT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageSubject",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#plainTextMessageContent */
    @SuppressWarnings("hiding")
	public static final URI PLAINTEXTMESSAGECONTENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#plainTextMessageContent",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#primaryMessageRecipient */
    @SuppressWarnings("hiding")
	public static final URI PRIMARYMESSAGERECIPIENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#primaryMessageRecipient",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#primaryRecipient */
    @SuppressWarnings("hiding")
	public static final URI PRIMARYRECIPIENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#primaryRecipient",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#receivedDate */
    @SuppressWarnings("hiding")
	public static final URI RECEIVEDDATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#receivedDate",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#recipient */
    @SuppressWarnings("hiding")
	public static final URI RECIPIENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#recipient",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#references */
    @SuppressWarnings("hiding")
	public static final URI REFERENCES = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#references",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#replyTo */
    @SuppressWarnings("hiding")
	public static final URI REPLYTO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#replyTo",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#secondaryMessageRecipient */
    @SuppressWarnings("hiding")
	public static final URI SECONDARYMESSAGERECIPIENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#secondaryMessageRecipient",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#secondaryRecipient */
    @SuppressWarnings("hiding")
	public static final URI SECONDARYRECIPIENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#secondaryRecipient",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sender */
    @SuppressWarnings("hiding")
	public static final URI SENDER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sender",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sentDate */
    @SuppressWarnings("hiding")
	public static final URI SENTDATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sentDate",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#hasAttachment",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#from",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#htmlMessageContent",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#inReplyTo",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#isRead",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageFrom",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageHeader",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageId",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageRecipient",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageReplyTo",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageSender",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#messageSubject",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#plainTextMessageContent",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#primaryMessageRecipient",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#primaryRecipient",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#receivedDate",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#recipient",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#references",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#replyTo",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#secondaryMessageRecipient",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#secondaryRecipient",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sender",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#sentDate",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Message (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Message (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Message (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Message (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Message (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Message  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Message  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Message.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Message).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Message> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Message.class );
	}

    /**
	 * Remove rdf:type Message from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InReplyTo' to this Message instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInReplyTo_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nmo.Message.INREPLYTO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InReplyTo' to this Message instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInReplyTo_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nmo.Message.INREPLYTO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InReplyTo' to this Message instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInReplyTo_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nmo.Message.INREPLYTO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'References' to this Message instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReferences_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nmo.Message.REFERENCES, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'References' to this Message instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReferences_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nmo.Message.REFERENCES, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'References' to this Message instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllReferences_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nmo.Message.REFERENCES, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c359f5e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ATTACHMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c359f5e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAttachment() {
		return Base.has(this.model, this.getResource(), ATTACHMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c359f5e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ATTACHMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c359f5e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAttachment( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ATTACHMENT);
	}

     /**
     * Get all values of property Attachment as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAttachment_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ATTACHMENT);
	}
	
    /**
     * Get all values of property Attachment as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAttachment_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATTACHMENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Attachment as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAttachment_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ATTACHMENT);
	}

    /**
     * Get all values of property Attachment as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAttachment_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ATTACHMENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Attachment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nfo.Attachment> getAllAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ATTACHMENT, eu.dime.ps.semantic.model.nfo.Attachment.class);
	}
	
    /**
     * Get all values of property Attachment as a ReactorResult of Attachment 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nfo.Attachment> getAllAttachment_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATTACHMENT, eu.dime.ps.semantic.model.nfo.Attachment.class);
	}

    /**
     * Get all values of property Attachment     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nfo.Attachment> getAllAttachment() {
		return Base.getAll(this.model, this.getResource(), ATTACHMENT, eu.dime.ps.semantic.model.nfo.Attachment.class);
	}

    /**
     * Get all values of property Attachment as a ReactorResult of Attachment 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nfo.Attachment> getAllAttachment_as() {
		return Base.getAll_as(this.model, this.getResource(), ATTACHMENT, eu.dime.ps.semantic.model.nfo.Attachment.class);
	}
 
    /**
     * Adds a value to property Attachment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Adds a value to property Attachment as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAttachment( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ATTACHMENT, value);
	}
    /**
     * Adds a value to property Attachment from an instance of Attachment 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nfo.Attachment value) {
		Base.add(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Adds a value to property Attachment from an instance of Attachment 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAttachment(eu.dime.ps.semantic.model.nfo.Attachment value) {
		Base.add(this.model, this.getResource(), ATTACHMENT, value);
	}
  

    /**
     * Sets a value of property Attachment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAttachment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Sets a value of property Attachment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAttachment( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ATTACHMENT, value);
	}
    /**
     * Sets a value of property Attachment from an instance of Attachment 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nfo.Attachment value) {
		Base.set(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Sets a value of property Attachment from an instance of Attachment 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAttachment(eu.dime.ps.semantic.model.nfo.Attachment value) {
		Base.set(this.model, this.getResource(), ATTACHMENT, value);
	}
  


    /**
     * Removes a value of property Attachment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAttachment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Removes a value of property Attachment as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAttachment( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ATTACHMENT, value);
	}
    /**
     * Removes a value of property Attachment given as an instance of Attachment 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nfo.Attachment value) {
		Base.remove(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Removes a value of property Attachment given as an instance of Attachment 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAttachment(eu.dime.ps.semantic.model.nfo.Attachment value) {
		Base.remove(this.model, this.getResource(), ATTACHMENT, value);
	}
  
    /**
     * Removes all values of property Attachment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAttachment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ATTACHMENT);
	}
	
    /**
     * Removes all values of property Attachment	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAttachment() {
		Base.removeAll(this.model, this.getResource(), ATTACHMENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@94cbf1c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@94cbf1c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFrom() {
		return Base.has(this.model, this.getResource(), FROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@94cbf1c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@94cbf1c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFrom( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FROM);
	}

     /**
     * Get all values of property From as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFrom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FROM);
	}
	
    /**
     * Get all values of property From as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFrom_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FROM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property From as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFrom_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FROM);
	}

    /**
     * Get all values of property From as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFrom_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FROM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property From     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FROM, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property From as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllFrom_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FROM, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property From     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllFrom() {
		return Base.getAll(this.model, this.getResource(), FROM, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property From as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllFrom_as() {
		return Base.getAll_as(this.model, this.getResource(), FROM, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property From as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FROM, value);
	}
	
    /**
     * Adds a value to property From as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FROM, value);
	}
    /**
     * Adds a value to property From from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, FROM, value);
	}
	
    /**
     * Adds a value to property From from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFrom(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), FROM, value);
	}
  

    /**
     * Sets a value of property From from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FROM, value);
	}
	
    /**
     * Sets a value of property From from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FROM, value);
	}
    /**
     * Sets a value of property From from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, FROM, value);
	}
	
    /**
     * Sets a value of property From from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFrom(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), FROM, value);
	}
  


    /**
     * Removes a value of property From as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FROM, value);
	}
	
    /**
     * Removes a value of property From as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FROM, value);
	}
    /**
     * Removes a value of property From given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, FROM, value);
	}
	
    /**
     * Removes a value of property From given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFrom(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), FROM, value);
	}
  
    /**
     * Removes all values of property From     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FROM);
	}
	
    /**
     * Removes all values of property From	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFrom() {
		Base.removeAll(this.model, this.getResource(), FROM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31d2eb50 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHtmlMessageContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HTMLMESSAGECONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31d2eb50 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHtmlMessageContent() {
		return Base.has(this.model, this.getResource(), HTMLMESSAGECONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31d2eb50 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHtmlMessageContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HTMLMESSAGECONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31d2eb50 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHtmlMessageContent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HTMLMESSAGECONTENT);
	}

     /**
     * Get all values of property HtmlMessageContent as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHtmlMessageContent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HTMLMESSAGECONTENT);
	}
	
    /**
     * Get all values of property HtmlMessageContent as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHtmlMessageContent_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HTMLMESSAGECONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HtmlMessageContent as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHtmlMessageContent_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HTMLMESSAGECONTENT);
	}

    /**
     * Get all values of property HtmlMessageContent as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHtmlMessageContent_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HTMLMESSAGECONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HtmlMessageContent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllHtmlMessageContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HTMLMESSAGECONTENT, java.lang.String.class);
	}
	
    /**
     * Get all values of property HtmlMessageContent as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllHtmlMessageContent_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HTMLMESSAGECONTENT, java.lang.String.class);
	}

    /**
     * Get all values of property HtmlMessageContent     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllHtmlMessageContent() {
		return Base.getAll(this.model, this.getResource(), HTMLMESSAGECONTENT, java.lang.String.class);
	}

    /**
     * Get all values of property HtmlMessageContent as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllHtmlMessageContent_as() {
		return Base.getAll_as(this.model, this.getResource(), HTMLMESSAGECONTENT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property HtmlMessageContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHtmlMessageContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HTMLMESSAGECONTENT, value);
	}
	
    /**
     * Adds a value to property HtmlMessageContent as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHtmlMessageContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HTMLMESSAGECONTENT, value);
	}
    /**
     * Adds a value to property HtmlMessageContent from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHtmlMessageContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, HTMLMESSAGECONTENT, value);
	}
	
    /**
     * Adds a value to property HtmlMessageContent from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHtmlMessageContent(java.lang.String value) {
		Base.add(this.model, this.getResource(), HTMLMESSAGECONTENT, value);
	}
  

    /**
     * Sets a value of property HtmlMessageContent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHtmlMessageContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HTMLMESSAGECONTENT, value);
	}
	
    /**
     * Sets a value of property HtmlMessageContent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHtmlMessageContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HTMLMESSAGECONTENT, value);
	}
    /**
     * Sets a value of property HtmlMessageContent from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHtmlMessageContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, HTMLMESSAGECONTENT, value);
	}
	
    /**
     * Sets a value of property HtmlMessageContent from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHtmlMessageContent(java.lang.String value) {
		Base.set(this.model, this.getResource(), HTMLMESSAGECONTENT, value);
	}
  


    /**
     * Removes a value of property HtmlMessageContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHtmlMessageContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HTMLMESSAGECONTENT, value);
	}
	
    /**
     * Removes a value of property HtmlMessageContent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHtmlMessageContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HTMLMESSAGECONTENT, value);
	}
    /**
     * Removes a value of property HtmlMessageContent given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHtmlMessageContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, HTMLMESSAGECONTENT, value);
	}
	
    /**
     * Removes a value of property HtmlMessageContent given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHtmlMessageContent(java.lang.String value) {
		Base.remove(this.model, this.getResource(), HTMLMESSAGECONTENT, value);
	}
  
    /**
     * Removes all values of property HtmlMessageContent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHtmlMessageContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HTMLMESSAGECONTENT);
	}
	
    /**
     * Removes all values of property HtmlMessageContent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHtmlMessageContent() {
		Base.removeAll(this.model, this.getResource(), HTMLMESSAGECONTENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@702da6bd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INREPLYTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@702da6bd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInReplyTo() {
		return Base.has(this.model, this.getResource(), INREPLYTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@702da6bd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INREPLYTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@702da6bd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInReplyTo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INREPLYTO);
	}

    /**
     * Get single value of property InReplyTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getInReplyTo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, INREPLYTO);
	}
	
    /**
     * Get single value of property InReplyTo as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getInReplyTo_asNode() {
		return Base.get_asNode(this.model, this.getResource(), INREPLYTO);
	}
     /**
     * Get single value of property InReplyTo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.nmo.Message getInReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.nmo.Message) Base.get(model, instanceResource, INREPLYTO, eu.dime.ps.semantic.model.nmo.Message.class);
	}
	
    /**
     * Get single value of property InReplyTo  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.nmo.Message getInReplyTo() {
		return (eu.dime.ps.semantic.model.nmo.Message) Base.get(this.model, this.getResource(), INREPLYTO, eu.dime.ps.semantic.model.nmo.Message.class);
	}
  
    /**
     * Adds a value to property InReplyTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addInReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, INREPLYTO, value, 1);
	}
	
    /**
     * Adds a value to property InReplyTo as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addInReplyTo( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), INREPLYTO, value, 1);
	}
    /**
     * Adds a value to property InReplyTo from an instance of Message 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addInReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nmo.Message value)
    throws CardinalityException {
		Base.add(model, instanceResource, INREPLYTO, value, 1);
	}
	
    /**
     * Adds a value to property InReplyTo from an instance of Message 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addInReplyTo(eu.dime.ps.semantic.model.nmo.Message value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), INREPLYTO, value, 1);
	}
 
 

    /**
     * Sets a value of property InReplyTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInReplyTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INREPLYTO, value);
	}
	
    /**
     * Sets a value of property InReplyTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInReplyTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INREPLYTO, value);
	}
    /**
     * Sets a value of property InReplyTo from an instance of Message 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nmo.Message value) {
		Base.set(model, instanceResource, INREPLYTO, value);
	}
	
    /**
     * Sets a value of property InReplyTo from an instance of Message 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInReplyTo(eu.dime.ps.semantic.model.nmo.Message value) {
		Base.set(this.model, this.getResource(), INREPLYTO, value);
	}
  


    /**
     * Removes a value of property InReplyTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInReplyTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INREPLYTO, value);
	}
	
    /**
     * Removes a value of property InReplyTo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInReplyTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INREPLYTO, value);
	}
    /**
     * Removes a value of property InReplyTo given as an instance of Message 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nmo.Message value) {
		Base.remove(model, instanceResource, INREPLYTO, value);
	}
	
    /**
     * Removes a value of property InReplyTo given as an instance of Message 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInReplyTo(eu.dime.ps.semantic.model.nmo.Message value) {
		Base.remove(this.model, this.getResource(), INREPLYTO, value);
	}
  
    /**
     * Removes all values of property InReplyTo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInReplyTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INREPLYTO);
	}
	
    /**
     * Removes all values of property InReplyTo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInReplyTo() {
		Base.removeAll(this.model, this.getResource(), INREPLYTO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@83fb0ed has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIsRead(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISREAD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@83fb0ed has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIsRead() {
		return Base.has(this.model, this.getResource(), ISREAD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@83fb0ed has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIsRead(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISREAD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@83fb0ed has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIsRead( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISREAD);
	}

    /**
     * Get single value of property IsRead as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getIsRead_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, ISREAD);
	}
	
    /**
     * Get single value of property IsRead as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getIsRead_asNode() {
		return Base.get_asNode(this.model, this.getResource(), ISREAD);
	}
     /**
     * Get single value of property IsRead     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Boolean getIsRead(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Boolean) Base.get(model, instanceResource, ISREAD, java.lang.Boolean.class);
	}
	
    /**
     * Get single value of property IsRead  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Boolean getIsRead() {
		return (java.lang.Boolean) Base.get(this.model, this.getResource(), ISREAD, java.lang.Boolean.class);
	}
  
    /**
     * Adds a value to property IsRead as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addIsRead(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, ISREAD, value, 1);
	}
	
    /**
     * Adds a value to property IsRead as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addIsRead( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ISREAD, value, 1);
	}
    /**
     * Adds a value to property IsRead from an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addIsRead(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value)
    throws CardinalityException {
		Base.add(model, instanceResource, ISREAD, value, 1);
	}
	
    /**
     * Adds a value to property IsRead from an instance of java.lang.Boolean 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addIsRead(java.lang.Boolean value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ISREAD, value, 1);
	}
 
 

    /**
     * Sets a value of property IsRead from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIsRead( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISREAD, value);
	}
	
    /**
     * Sets a value of property IsRead from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIsRead( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISREAD, value);
	}
    /**
     * Sets a value of property IsRead from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIsRead(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.set(model, instanceResource, ISREAD, value);
	}
	
    /**
     * Sets a value of property IsRead from an instance of java.lang.Boolean 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIsRead(java.lang.Boolean value) {
		Base.set(this.model, this.getResource(), ISREAD, value);
	}
  


    /**
     * Removes a value of property IsRead as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIsRead( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISREAD, value);
	}
	
    /**
     * Removes a value of property IsRead as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIsRead( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISREAD, value);
	}
    /**
     * Removes a value of property IsRead given as an instance of java.lang.Boolean 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIsRead(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Boolean value) {
		Base.remove(model, instanceResource, ISREAD, value);
	}
	
    /**
     * Removes a value of property IsRead given as an instance of java.lang.Boolean 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIsRead(java.lang.Boolean value) {
		Base.remove(this.model, this.getResource(), ISREAD, value);
	}
  
    /**
     * Removes all values of property IsRead     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIsRead( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISREAD);
	}
	
    /**
     * Removes all values of property IsRead	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIsRead() {
		Base.removeAll(this.model, this.getResource(), ISREAD);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47c3d89e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMessageFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MESSAGEFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47c3d89e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMessageFrom() {
		return Base.has(this.model, this.getResource(), MESSAGEFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47c3d89e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMessageFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MESSAGEFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47c3d89e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMessageFrom( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MESSAGEFROM);
	}

    /**
     * Get single value of property MessageFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getMessageFrom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, MESSAGEFROM);
	}
	
    /**
     * Get single value of property MessageFrom as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getMessageFrom_asNode() {
		return Base.get_asNode(this.model, this.getResource(), MESSAGEFROM);
	}
     /**
     * Get single value of property MessageFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.nco.ContactMedium getMessageFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.nco.ContactMedium) Base.get(model, instanceResource, MESSAGEFROM, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
	
    /**
     * Get single value of property MessageFrom  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.nco.ContactMedium getMessageFrom() {
		return (eu.dime.ps.semantic.model.nco.ContactMedium) Base.get(this.model, this.getResource(), MESSAGEFROM, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
  
    /**
     * Adds a value to property MessageFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addMessageFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, MESSAGEFROM, value, 1);
	}
	
    /**
     * Adds a value to property MessageFrom as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addMessageFrom( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MESSAGEFROM, value, 1);
	}
    /**
     * Adds a value to property MessageFrom from an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addMessageFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value)
    throws CardinalityException {
		Base.add(model, instanceResource, MESSAGEFROM, value, 1);
	}
	
    /**
     * Adds a value to property MessageFrom from an instance of ContactMedium 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addMessageFrom(eu.dime.ps.semantic.model.nco.ContactMedium value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MESSAGEFROM, value, 1);
	}
 
 

    /**
     * Sets a value of property MessageFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMessageFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MESSAGEFROM, value);
	}
	
    /**
     * Sets a value of property MessageFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMessageFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MESSAGEFROM, value);
	}
    /**
     * Sets a value of property MessageFrom from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMessageFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(model, instanceResource, MESSAGEFROM, value);
	}
	
    /**
     * Sets a value of property MessageFrom from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMessageFrom(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(this.model, this.getResource(), MESSAGEFROM, value);
	}
  


    /**
     * Removes a value of property MessageFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMessageFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MESSAGEFROM, value);
	}
	
    /**
     * Removes a value of property MessageFrom as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMessageFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MESSAGEFROM, value);
	}
    /**
     * Removes a value of property MessageFrom given as an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMessageFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(model, instanceResource, MESSAGEFROM, value);
	}
	
    /**
     * Removes a value of property MessageFrom given as an instance of ContactMedium 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMessageFrom(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(this.model, this.getResource(), MESSAGEFROM, value);
	}
  
    /**
     * Removes all values of property MessageFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMessageFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MESSAGEFROM);
	}
	
    /**
     * Removes all values of property MessageFrom	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMessageFrom() {
		Base.removeAll(this.model, this.getResource(), MESSAGEFROM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@746151d8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMessageHeader(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MESSAGEHEADER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@746151d8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMessageHeader() {
		return Base.has(this.model, this.getResource(), MESSAGEHEADER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@746151d8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMessageHeader(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MESSAGEHEADER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@746151d8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMessageHeader( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MESSAGEHEADER);
	}

    /**
     * Get single value of property MessageHeader as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getMessageHeader_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, MESSAGEHEADER);
	}
	
    /**
     * Get single value of property MessageHeader as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getMessageHeader_asNode() {
		return Base.get_asNode(this.model, this.getResource(), MESSAGEHEADER);
	}
     /**
     * Get single value of property MessageHeader     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.nmo.MessageHeader getMessageHeader(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.nmo.MessageHeader) Base.get(model, instanceResource, MESSAGEHEADER, eu.dime.ps.semantic.model.nmo.MessageHeader.class);
	}
	
    /**
     * Get single value of property MessageHeader  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.nmo.MessageHeader getMessageHeader() {
		return (eu.dime.ps.semantic.model.nmo.MessageHeader) Base.get(this.model, this.getResource(), MESSAGEHEADER, eu.dime.ps.semantic.model.nmo.MessageHeader.class);
	}
  
    /**
     * Adds a value to property MessageHeader as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addMessageHeader(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, MESSAGEHEADER, value, 1);
	}
	
    /**
     * Adds a value to property MessageHeader as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addMessageHeader( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MESSAGEHEADER, value, 1);
	}
    /**
     * Adds a value to property MessageHeader from an instance of MessageHeader 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addMessageHeader(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nmo.MessageHeader value)
    throws CardinalityException {
		Base.add(model, instanceResource, MESSAGEHEADER, value, 1);
	}
	
    /**
     * Adds a value to property MessageHeader from an instance of MessageHeader 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addMessageHeader(eu.dime.ps.semantic.model.nmo.MessageHeader value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MESSAGEHEADER, value, 1);
	}
 
 

    /**
     * Sets a value of property MessageHeader from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMessageHeader( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MESSAGEHEADER, value);
	}
	
    /**
     * Sets a value of property MessageHeader from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMessageHeader( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MESSAGEHEADER, value);
	}
    /**
     * Sets a value of property MessageHeader from an instance of MessageHeader 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMessageHeader(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nmo.MessageHeader value) {
		Base.set(model, instanceResource, MESSAGEHEADER, value);
	}
	
    /**
     * Sets a value of property MessageHeader from an instance of MessageHeader 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMessageHeader(eu.dime.ps.semantic.model.nmo.MessageHeader value) {
		Base.set(this.model, this.getResource(), MESSAGEHEADER, value);
	}
  


    /**
     * Removes a value of property MessageHeader as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMessageHeader( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MESSAGEHEADER, value);
	}
	
    /**
     * Removes a value of property MessageHeader as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMessageHeader( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MESSAGEHEADER, value);
	}
    /**
     * Removes a value of property MessageHeader given as an instance of MessageHeader 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMessageHeader(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nmo.MessageHeader value) {
		Base.remove(model, instanceResource, MESSAGEHEADER, value);
	}
	
    /**
     * Removes a value of property MessageHeader given as an instance of MessageHeader 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMessageHeader(eu.dime.ps.semantic.model.nmo.MessageHeader value) {
		Base.remove(this.model, this.getResource(), MESSAGEHEADER, value);
	}
  
    /**
     * Removes all values of property MessageHeader     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMessageHeader( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MESSAGEHEADER);
	}
	
    /**
     * Removes all values of property MessageHeader	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMessageHeader() {
		Base.removeAll(this.model, this.getResource(), MESSAGEHEADER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22c39268 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMessageId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MESSAGEID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22c39268 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMessageId() {
		return Base.has(this.model, this.getResource(), MESSAGEID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22c39268 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMessageId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MESSAGEID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22c39268 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMessageId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MESSAGEID);
	}

     /**
     * Get all values of property MessageId as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMessageId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MESSAGEID);
	}
	
    /**
     * Get all values of property MessageId as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMessageId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MESSAGEID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MessageId as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMessageId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MESSAGEID);
	}

    /**
     * Get all values of property MessageId as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMessageId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MESSAGEID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MessageId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllMessageId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MESSAGEID, java.lang.String.class);
	}
	
    /**
     * Get all values of property MessageId as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllMessageId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MESSAGEID, java.lang.String.class);
	}

    /**
     * Get all values of property MessageId     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllMessageId() {
		return Base.getAll(this.model, this.getResource(), MESSAGEID, java.lang.String.class);
	}

    /**
     * Get all values of property MessageId as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllMessageId_as() {
		return Base.getAll_as(this.model, this.getResource(), MESSAGEID, java.lang.String.class);
	}
 
    /**
     * Adds a value to property MessageId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMessageId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MESSAGEID, value);
	}
	
    /**
     * Adds a value to property MessageId as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMessageId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MESSAGEID, value);
	}
    /**
     * Adds a value to property MessageId from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMessageId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, MESSAGEID, value);
	}
	
    /**
     * Adds a value to property MessageId from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMessageId(java.lang.String value) {
		Base.add(this.model, this.getResource(), MESSAGEID, value);
	}
  

    /**
     * Sets a value of property MessageId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMessageId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MESSAGEID, value);
	}
	
    /**
     * Sets a value of property MessageId from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMessageId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MESSAGEID, value);
	}
    /**
     * Sets a value of property MessageId from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMessageId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, MESSAGEID, value);
	}
	
    /**
     * Sets a value of property MessageId from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMessageId(java.lang.String value) {
		Base.set(this.model, this.getResource(), MESSAGEID, value);
	}
  


    /**
     * Removes a value of property MessageId as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMessageId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MESSAGEID, value);
	}
	
    /**
     * Removes a value of property MessageId as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMessageId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MESSAGEID, value);
	}
    /**
     * Removes a value of property MessageId given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMessageId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, MESSAGEID, value);
	}
	
    /**
     * Removes a value of property MessageId given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMessageId(java.lang.String value) {
		Base.remove(this.model, this.getResource(), MESSAGEID, value);
	}
  
    /**
     * Removes all values of property MessageId     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMessageId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MESSAGEID);
	}
	
    /**
     * Removes all values of property MessageId	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMessageId() {
		Base.removeAll(this.model, this.getResource(), MESSAGEID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39dbf2b2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MESSAGERECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39dbf2b2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMessageRecipient() {
		return Base.has(this.model, this.getResource(), MESSAGERECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39dbf2b2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MESSAGERECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39dbf2b2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMessageRecipient( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MESSAGERECIPIENT);
	}

     /**
     * Get all values of property MessageRecipient as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMessageRecipient_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MESSAGERECIPIENT);
	}
	
    /**
     * Get all values of property MessageRecipient as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMessageRecipient_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MESSAGERECIPIENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MessageRecipient as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMessageRecipient_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MESSAGERECIPIENT);
	}

    /**
     * Get all values of property MessageRecipient as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMessageRecipient_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MESSAGERECIPIENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MessageRecipient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.ContactMedium> getAllMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MESSAGERECIPIENT, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
	
    /**
     * Get all values of property MessageRecipient as a ReactorResult of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.ContactMedium> getAllMessageRecipient_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MESSAGERECIPIENT, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}

    /**
     * Get all values of property MessageRecipient     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.ContactMedium> getAllMessageRecipient() {
		return Base.getAll(this.model, this.getResource(), MESSAGERECIPIENT, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}

    /**
     * Get all values of property MessageRecipient as a ReactorResult of ContactMedium 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.ContactMedium> getAllMessageRecipient_as() {
		return Base.getAll_as(this.model, this.getResource(), MESSAGERECIPIENT, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
 
    /**
     * Adds a value to property MessageRecipient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MESSAGERECIPIENT, value);
	}
	
    /**
     * Adds a value to property MessageRecipient as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMessageRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MESSAGERECIPIENT, value);
	}
    /**
     * Adds a value to property MessageRecipient from an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.add(model, instanceResource, MESSAGERECIPIENT, value);
	}
	
    /**
     * Adds a value to property MessageRecipient from an instance of ContactMedium 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMessageRecipient(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.add(this.model, this.getResource(), MESSAGERECIPIENT, value);
	}
  

    /**
     * Sets a value of property MessageRecipient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMessageRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MESSAGERECIPIENT, value);
	}
	
    /**
     * Sets a value of property MessageRecipient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMessageRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MESSAGERECIPIENT, value);
	}
    /**
     * Sets a value of property MessageRecipient from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(model, instanceResource, MESSAGERECIPIENT, value);
	}
	
    /**
     * Sets a value of property MessageRecipient from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMessageRecipient(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(this.model, this.getResource(), MESSAGERECIPIENT, value);
	}
  


    /**
     * Removes a value of property MessageRecipient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMessageRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MESSAGERECIPIENT, value);
	}
	
    /**
     * Removes a value of property MessageRecipient as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMessageRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MESSAGERECIPIENT, value);
	}
    /**
     * Removes a value of property MessageRecipient given as an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(model, instanceResource, MESSAGERECIPIENT, value);
	}
	
    /**
     * Removes a value of property MessageRecipient given as an instance of ContactMedium 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMessageRecipient(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(this.model, this.getResource(), MESSAGERECIPIENT, value);
	}
  
    /**
     * Removes all values of property MessageRecipient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMessageRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MESSAGERECIPIENT);
	}
	
    /**
     * Removes all values of property MessageRecipient	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMessageRecipient() {
		Base.removeAll(this.model, this.getResource(), MESSAGERECIPIENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75131259 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMessageReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MESSAGEREPLYTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75131259 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMessageReplyTo() {
		return Base.has(this.model, this.getResource(), MESSAGEREPLYTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75131259 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMessageReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MESSAGEREPLYTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75131259 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMessageReplyTo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MESSAGEREPLYTO);
	}

    /**
     * Get single value of property MessageReplyTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getMessageReplyTo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, MESSAGEREPLYTO);
	}
	
    /**
     * Get single value of property MessageReplyTo as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getMessageReplyTo_asNode() {
		return Base.get_asNode(this.model, this.getResource(), MESSAGEREPLYTO);
	}
     /**
     * Get single value of property MessageReplyTo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.nco.ContactMedium getMessageReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.nco.ContactMedium) Base.get(model, instanceResource, MESSAGEREPLYTO, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
	
    /**
     * Get single value of property MessageReplyTo  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.nco.ContactMedium getMessageReplyTo() {
		return (eu.dime.ps.semantic.model.nco.ContactMedium) Base.get(this.model, this.getResource(), MESSAGEREPLYTO, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
  
    /**
     * Adds a value to property MessageReplyTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addMessageReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, MESSAGEREPLYTO, value, 1);
	}
	
    /**
     * Adds a value to property MessageReplyTo as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addMessageReplyTo( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MESSAGEREPLYTO, value, 1);
	}
    /**
     * Adds a value to property MessageReplyTo from an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addMessageReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value)
    throws CardinalityException {
		Base.add(model, instanceResource, MESSAGEREPLYTO, value, 1);
	}
	
    /**
     * Adds a value to property MessageReplyTo from an instance of ContactMedium 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addMessageReplyTo(eu.dime.ps.semantic.model.nco.ContactMedium value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MESSAGEREPLYTO, value, 1);
	}
 
 

    /**
     * Sets a value of property MessageReplyTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMessageReplyTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MESSAGEREPLYTO, value);
	}
	
    /**
     * Sets a value of property MessageReplyTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMessageReplyTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MESSAGEREPLYTO, value);
	}
    /**
     * Sets a value of property MessageReplyTo from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMessageReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(model, instanceResource, MESSAGEREPLYTO, value);
	}
	
    /**
     * Sets a value of property MessageReplyTo from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMessageReplyTo(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(this.model, this.getResource(), MESSAGEREPLYTO, value);
	}
  


    /**
     * Removes a value of property MessageReplyTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMessageReplyTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MESSAGEREPLYTO, value);
	}
	
    /**
     * Removes a value of property MessageReplyTo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMessageReplyTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MESSAGEREPLYTO, value);
	}
    /**
     * Removes a value of property MessageReplyTo given as an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMessageReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(model, instanceResource, MESSAGEREPLYTO, value);
	}
	
    /**
     * Removes a value of property MessageReplyTo given as an instance of ContactMedium 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMessageReplyTo(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(this.model, this.getResource(), MESSAGEREPLYTO, value);
	}
  
    /**
     * Removes all values of property MessageReplyTo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMessageReplyTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MESSAGEREPLYTO);
	}
	
    /**
     * Removes all values of property MessageReplyTo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMessageReplyTo() {
		Base.removeAll(this.model, this.getResource(), MESSAGEREPLYTO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7278b963 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMessageSender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MESSAGESENDER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7278b963 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMessageSender() {
		return Base.has(this.model, this.getResource(), MESSAGESENDER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7278b963 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMessageSender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MESSAGESENDER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7278b963 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMessageSender( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MESSAGESENDER);
	}

    /**
     * Get single value of property MessageSender as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getMessageSender_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, MESSAGESENDER);
	}
	
    /**
     * Get single value of property MessageSender as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getMessageSender_asNode() {
		return Base.get_asNode(this.model, this.getResource(), MESSAGESENDER);
	}
     /**
     * Get single value of property MessageSender     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.nco.ContactMedium getMessageSender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.nco.ContactMedium) Base.get(model, instanceResource, MESSAGESENDER, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
	
    /**
     * Get single value of property MessageSender  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.nco.ContactMedium getMessageSender() {
		return (eu.dime.ps.semantic.model.nco.ContactMedium) Base.get(this.model, this.getResource(), MESSAGESENDER, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
  
    /**
     * Adds a value to property MessageSender as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addMessageSender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, MESSAGESENDER, value, 1);
	}
	
    /**
     * Adds a value to property MessageSender as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addMessageSender( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MESSAGESENDER, value, 1);
	}
    /**
     * Adds a value to property MessageSender from an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addMessageSender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value)
    throws CardinalityException {
		Base.add(model, instanceResource, MESSAGESENDER, value, 1);
	}
	
    /**
     * Adds a value to property MessageSender from an instance of ContactMedium 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addMessageSender(eu.dime.ps.semantic.model.nco.ContactMedium value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MESSAGESENDER, value, 1);
	}
 
 

    /**
     * Sets a value of property MessageSender from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMessageSender( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MESSAGESENDER, value);
	}
	
    /**
     * Sets a value of property MessageSender from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMessageSender( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MESSAGESENDER, value);
	}
    /**
     * Sets a value of property MessageSender from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMessageSender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(model, instanceResource, MESSAGESENDER, value);
	}
	
    /**
     * Sets a value of property MessageSender from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMessageSender(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(this.model, this.getResource(), MESSAGESENDER, value);
	}
  


    /**
     * Removes a value of property MessageSender as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMessageSender( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MESSAGESENDER, value);
	}
	
    /**
     * Removes a value of property MessageSender as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMessageSender( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MESSAGESENDER, value);
	}
    /**
     * Removes a value of property MessageSender given as an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMessageSender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(model, instanceResource, MESSAGESENDER, value);
	}
	
    /**
     * Removes a value of property MessageSender given as an instance of ContactMedium 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMessageSender(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(this.model, this.getResource(), MESSAGESENDER, value);
	}
  
    /**
     * Removes all values of property MessageSender     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMessageSender( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MESSAGESENDER);
	}
	
    /**
     * Removes all values of property MessageSender	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMessageSender() {
		Base.removeAll(this.model, this.getResource(), MESSAGESENDER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@586c95a9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMessageSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MESSAGESUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@586c95a9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMessageSubject() {
		return Base.has(this.model, this.getResource(), MESSAGESUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@586c95a9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMessageSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MESSAGESUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@586c95a9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMessageSubject( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MESSAGESUBJECT);
	}

    /**
     * Get single value of property MessageSubject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getMessageSubject_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, MESSAGESUBJECT);
	}
	
    /**
     * Get single value of property MessageSubject as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getMessageSubject_asNode() {
		return Base.get_asNode(this.model, this.getResource(), MESSAGESUBJECT);
	}
     /**
     * Get single value of property MessageSubject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getMessageSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, MESSAGESUBJECT, java.lang.String.class);
	}
	
    /**
     * Get single value of property MessageSubject  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getMessageSubject() {
		return (java.lang.String) Base.get(this.model, this.getResource(), MESSAGESUBJECT, java.lang.String.class);
	}
  
    /**
     * Adds a value to property MessageSubject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addMessageSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, MESSAGESUBJECT, value, 1);
	}
	
    /**
     * Adds a value to property MessageSubject as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addMessageSubject( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MESSAGESUBJECT, value, 1);
	}
    /**
     * Adds a value to property MessageSubject from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addMessageSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, MESSAGESUBJECT, value, 1);
	}
	
    /**
     * Adds a value to property MessageSubject from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addMessageSubject(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MESSAGESUBJECT, value, 1);
	}
 
 

    /**
     * Sets a value of property MessageSubject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMessageSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MESSAGESUBJECT, value);
	}
	
    /**
     * Sets a value of property MessageSubject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMessageSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MESSAGESUBJECT, value);
	}
    /**
     * Sets a value of property MessageSubject from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMessageSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, MESSAGESUBJECT, value);
	}
	
    /**
     * Sets a value of property MessageSubject from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMessageSubject(java.lang.String value) {
		Base.set(this.model, this.getResource(), MESSAGESUBJECT, value);
	}
  


    /**
     * Removes a value of property MessageSubject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMessageSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MESSAGESUBJECT, value);
	}
	
    /**
     * Removes a value of property MessageSubject as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMessageSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MESSAGESUBJECT, value);
	}
    /**
     * Removes a value of property MessageSubject given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMessageSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, MESSAGESUBJECT, value);
	}
	
    /**
     * Removes a value of property MessageSubject given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMessageSubject(java.lang.String value) {
		Base.remove(this.model, this.getResource(), MESSAGESUBJECT, value);
	}
  
    /**
     * Removes all values of property MessageSubject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMessageSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MESSAGESUBJECT);
	}
	
    /**
     * Removes all values of property MessageSubject	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMessageSubject() {
		Base.removeAll(this.model, this.getResource(), MESSAGESUBJECT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f624b64 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPlainTextMessageContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PLAINTEXTMESSAGECONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f624b64 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPlainTextMessageContent() {
		return Base.has(this.model, this.getResource(), PLAINTEXTMESSAGECONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f624b64 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPlainTextMessageContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PLAINTEXTMESSAGECONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f624b64 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPlainTextMessageContent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PLAINTEXTMESSAGECONTENT);
	}

     /**
     * Get all values of property PlainTextMessageContent as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPlainTextMessageContent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PLAINTEXTMESSAGECONTENT);
	}
	
    /**
     * Get all values of property PlainTextMessageContent as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPlainTextMessageContent_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PLAINTEXTMESSAGECONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PlainTextMessageContent as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPlainTextMessageContent_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PLAINTEXTMESSAGECONTENT);
	}

    /**
     * Get all values of property PlainTextMessageContent as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPlainTextMessageContent_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PLAINTEXTMESSAGECONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PlainTextMessageContent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPlainTextMessageContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PLAINTEXTMESSAGECONTENT, java.lang.String.class);
	}
	
    /**
     * Get all values of property PlainTextMessageContent as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPlainTextMessageContent_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PLAINTEXTMESSAGECONTENT, java.lang.String.class);
	}

    /**
     * Get all values of property PlainTextMessageContent     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPlainTextMessageContent() {
		return Base.getAll(this.model, this.getResource(), PLAINTEXTMESSAGECONTENT, java.lang.String.class);
	}

    /**
     * Get all values of property PlainTextMessageContent as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPlainTextMessageContent_as() {
		return Base.getAll_as(this.model, this.getResource(), PLAINTEXTMESSAGECONTENT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property PlainTextMessageContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPlainTextMessageContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PLAINTEXTMESSAGECONTENT, value);
	}
	
    /**
     * Adds a value to property PlainTextMessageContent as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPlainTextMessageContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PLAINTEXTMESSAGECONTENT, value);
	}
    /**
     * Adds a value to property PlainTextMessageContent from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPlainTextMessageContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PLAINTEXTMESSAGECONTENT, value);
	}
	
    /**
     * Adds a value to property PlainTextMessageContent from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPlainTextMessageContent(java.lang.String value) {
		Base.add(this.model, this.getResource(), PLAINTEXTMESSAGECONTENT, value);
	}
  

    /**
     * Sets a value of property PlainTextMessageContent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPlainTextMessageContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PLAINTEXTMESSAGECONTENT, value);
	}
	
    /**
     * Sets a value of property PlainTextMessageContent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPlainTextMessageContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PLAINTEXTMESSAGECONTENT, value);
	}
    /**
     * Sets a value of property PlainTextMessageContent from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPlainTextMessageContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PLAINTEXTMESSAGECONTENT, value);
	}
	
    /**
     * Sets a value of property PlainTextMessageContent from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPlainTextMessageContent(java.lang.String value) {
		Base.set(this.model, this.getResource(), PLAINTEXTMESSAGECONTENT, value);
	}
  


    /**
     * Removes a value of property PlainTextMessageContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePlainTextMessageContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PLAINTEXTMESSAGECONTENT, value);
	}
	
    /**
     * Removes a value of property PlainTextMessageContent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePlainTextMessageContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PLAINTEXTMESSAGECONTENT, value);
	}
    /**
     * Removes a value of property PlainTextMessageContent given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePlainTextMessageContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PLAINTEXTMESSAGECONTENT, value);
	}
	
    /**
     * Removes a value of property PlainTextMessageContent given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePlainTextMessageContent(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PLAINTEXTMESSAGECONTENT, value);
	}
  
    /**
     * Removes all values of property PlainTextMessageContent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPlainTextMessageContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PLAINTEXTMESSAGECONTENT);
	}
	
    /**
     * Removes all values of property PlainTextMessageContent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPlainTextMessageContent() {
		Base.removeAll(this.model, this.getResource(), PLAINTEXTMESSAGECONTENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c8f3299 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPrimaryMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRIMARYMESSAGERECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c8f3299 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPrimaryMessageRecipient() {
		return Base.has(this.model, this.getResource(), PRIMARYMESSAGERECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c8f3299 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPrimaryMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRIMARYMESSAGERECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c8f3299 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPrimaryMessageRecipient( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRIMARYMESSAGERECIPIENT);
	}

     /**
     * Get all values of property PrimaryMessageRecipient as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrimaryMessageRecipient_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRIMARYMESSAGERECIPIENT);
	}
	
    /**
     * Get all values of property PrimaryMessageRecipient as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrimaryMessageRecipient_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIMARYMESSAGERECIPIENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PrimaryMessageRecipient as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrimaryMessageRecipient_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRIMARYMESSAGERECIPIENT);
	}

    /**
     * Get all values of property PrimaryMessageRecipient as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrimaryMessageRecipient_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRIMARYMESSAGERECIPIENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PrimaryMessageRecipient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.ContactMedium> getAllPrimaryMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRIMARYMESSAGERECIPIENT, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
	
    /**
     * Get all values of property PrimaryMessageRecipient as a ReactorResult of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.ContactMedium> getAllPrimaryMessageRecipient_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIMARYMESSAGERECIPIENT, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}

    /**
     * Get all values of property PrimaryMessageRecipient     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.ContactMedium> getAllPrimaryMessageRecipient() {
		return Base.getAll(this.model, this.getResource(), PRIMARYMESSAGERECIPIENT, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}

    /**
     * Get all values of property PrimaryMessageRecipient as a ReactorResult of ContactMedium 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.ContactMedium> getAllPrimaryMessageRecipient_as() {
		return Base.getAll_as(this.model, this.getResource(), PRIMARYMESSAGERECIPIENT, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
 
    /**
     * Adds a value to property PrimaryMessageRecipient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPrimaryMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRIMARYMESSAGERECIPIENT, value);
	}
	
    /**
     * Adds a value to property PrimaryMessageRecipient as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPrimaryMessageRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRIMARYMESSAGERECIPIENT, value);
	}
    /**
     * Adds a value to property PrimaryMessageRecipient from an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPrimaryMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.add(model, instanceResource, PRIMARYMESSAGERECIPIENT, value);
	}
	
    /**
     * Adds a value to property PrimaryMessageRecipient from an instance of ContactMedium 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPrimaryMessageRecipient(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.add(this.model, this.getResource(), PRIMARYMESSAGERECIPIENT, value);
	}
  

    /**
     * Sets a value of property PrimaryMessageRecipient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPrimaryMessageRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRIMARYMESSAGERECIPIENT, value);
	}
	
    /**
     * Sets a value of property PrimaryMessageRecipient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPrimaryMessageRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRIMARYMESSAGERECIPIENT, value);
	}
    /**
     * Sets a value of property PrimaryMessageRecipient from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPrimaryMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(model, instanceResource, PRIMARYMESSAGERECIPIENT, value);
	}
	
    /**
     * Sets a value of property PrimaryMessageRecipient from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPrimaryMessageRecipient(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(this.model, this.getResource(), PRIMARYMESSAGERECIPIENT, value);
	}
  


    /**
     * Removes a value of property PrimaryMessageRecipient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePrimaryMessageRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRIMARYMESSAGERECIPIENT, value);
	}
	
    /**
     * Removes a value of property PrimaryMessageRecipient as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePrimaryMessageRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRIMARYMESSAGERECIPIENT, value);
	}
    /**
     * Removes a value of property PrimaryMessageRecipient given as an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePrimaryMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(model, instanceResource, PRIMARYMESSAGERECIPIENT, value);
	}
	
    /**
     * Removes a value of property PrimaryMessageRecipient given as an instance of ContactMedium 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePrimaryMessageRecipient(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(this.model, this.getResource(), PRIMARYMESSAGERECIPIENT, value);
	}
  
    /**
     * Removes all values of property PrimaryMessageRecipient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPrimaryMessageRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRIMARYMESSAGERECIPIENT);
	}
	
    /**
     * Removes all values of property PrimaryMessageRecipient	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPrimaryMessageRecipient() {
		Base.removeAll(this.model, this.getResource(), PRIMARYMESSAGERECIPIENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2411043e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPrimaryRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRIMARYRECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2411043e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPrimaryRecipient() {
		return Base.has(this.model, this.getResource(), PRIMARYRECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2411043e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPrimaryRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRIMARYRECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2411043e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPrimaryRecipient( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRIMARYRECIPIENT);
	}

     /**
     * Get all values of property PrimaryRecipient as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrimaryRecipient_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRIMARYRECIPIENT);
	}
	
    /**
     * Get all values of property PrimaryRecipient as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrimaryRecipient_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIMARYRECIPIENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PrimaryRecipient as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrimaryRecipient_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRIMARYRECIPIENT);
	}

    /**
     * Get all values of property PrimaryRecipient as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrimaryRecipient_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRIMARYRECIPIENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PrimaryRecipient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllPrimaryRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRIMARYRECIPIENT, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property PrimaryRecipient as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllPrimaryRecipient_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIMARYRECIPIENT, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property PrimaryRecipient     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllPrimaryRecipient() {
		return Base.getAll(this.model, this.getResource(), PRIMARYRECIPIENT, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property PrimaryRecipient as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllPrimaryRecipient_as() {
		return Base.getAll_as(this.model, this.getResource(), PRIMARYRECIPIENT, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property PrimaryRecipient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPrimaryRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRIMARYRECIPIENT, value);
	}
	
    /**
     * Adds a value to property PrimaryRecipient as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPrimaryRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRIMARYRECIPIENT, value);
	}
    /**
     * Adds a value to property PrimaryRecipient from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPrimaryRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, PRIMARYRECIPIENT, value);
	}
	
    /**
     * Adds a value to property PrimaryRecipient from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPrimaryRecipient(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), PRIMARYRECIPIENT, value);
	}
  

    /**
     * Sets a value of property PrimaryRecipient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPrimaryRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRIMARYRECIPIENT, value);
	}
	
    /**
     * Sets a value of property PrimaryRecipient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPrimaryRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRIMARYRECIPIENT, value);
	}
    /**
     * Sets a value of property PrimaryRecipient from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPrimaryRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, PRIMARYRECIPIENT, value);
	}
	
    /**
     * Sets a value of property PrimaryRecipient from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPrimaryRecipient(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), PRIMARYRECIPIENT, value);
	}
  


    /**
     * Removes a value of property PrimaryRecipient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePrimaryRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRIMARYRECIPIENT, value);
	}
	
    /**
     * Removes a value of property PrimaryRecipient as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePrimaryRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRIMARYRECIPIENT, value);
	}
    /**
     * Removes a value of property PrimaryRecipient given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePrimaryRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, PRIMARYRECIPIENT, value);
	}
	
    /**
     * Removes a value of property PrimaryRecipient given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePrimaryRecipient(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), PRIMARYRECIPIENT, value);
	}
  
    /**
     * Removes all values of property PrimaryRecipient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPrimaryRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRIMARYRECIPIENT);
	}
	
    /**
     * Removes all values of property PrimaryRecipient	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPrimaryRecipient() {
		Base.removeAll(this.model, this.getResource(), PRIMARYRECIPIENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e328bcc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasReceivedDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RECEIVEDDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e328bcc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasReceivedDate() {
		return Base.has(this.model, this.getResource(), RECEIVEDDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e328bcc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasReceivedDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RECEIVEDDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e328bcc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasReceivedDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RECEIVEDDATE);
	}

    /**
     * Get single value of property ReceivedDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getReceivedDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, RECEIVEDDATE);
	}
	
    /**
     * Get single value of property ReceivedDate as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getReceivedDate_asNode() {
		return Base.get_asNode(this.model, this.getResource(), RECEIVEDDATE);
	}
     /**
     * Get single value of property ReceivedDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getReceivedDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, RECEIVEDDATE, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property ReceivedDate  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getReceivedDate() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), RECEIVEDDATE, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property ReceivedDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addReceivedDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, RECEIVEDDATE, value, 1);
	}
	
    /**
     * Adds a value to property ReceivedDate as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addReceivedDate( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), RECEIVEDDATE, value, 1);
	}
    /**
     * Adds a value to property ReceivedDate from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addReceivedDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, RECEIVEDDATE, value, 1);
	}
	
    /**
     * Adds a value to property ReceivedDate from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addReceivedDate(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), RECEIVEDDATE, value, 1);
	}
 
 

    /**
     * Sets a value of property ReceivedDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setReceivedDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RECEIVEDDATE, value);
	}
	
    /**
     * Sets a value of property ReceivedDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setReceivedDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RECEIVEDDATE, value);
	}
    /**
     * Sets a value of property ReceivedDate from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setReceivedDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, RECEIVEDDATE, value);
	}
	
    /**
     * Sets a value of property ReceivedDate from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setReceivedDate(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), RECEIVEDDATE, value);
	}
  


    /**
     * Removes a value of property ReceivedDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeReceivedDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RECEIVEDDATE, value);
	}
	
    /**
     * Removes a value of property ReceivedDate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeReceivedDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RECEIVEDDATE, value);
	}
    /**
     * Removes a value of property ReceivedDate given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeReceivedDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, RECEIVEDDATE, value);
	}
	
    /**
     * Removes a value of property ReceivedDate given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeReceivedDate(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), RECEIVEDDATE, value);
	}
  
    /**
     * Removes all values of property ReceivedDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllReceivedDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RECEIVEDDATE);
	}
	
    /**
     * Removes all values of property ReceivedDate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllReceivedDate() {
		Base.removeAll(this.model, this.getResource(), RECEIVEDDATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17fbdd0d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17fbdd0d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRecipient() {
		return Base.has(this.model, this.getResource(), RECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17fbdd0d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17fbdd0d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRecipient( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RECIPIENT);
	}

     /**
     * Get all values of property Recipient as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRecipient_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RECIPIENT);
	}
	
    /**
     * Get all values of property Recipient as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRecipient_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RECIPIENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Recipient as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRecipient_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RECIPIENT);
	}

    /**
     * Get all values of property Recipient as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRecipient_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RECIPIENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Recipient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RECIPIENT, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Recipient as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllRecipient_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RECIPIENT, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Recipient     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllRecipient() {
		return Base.getAll(this.model, this.getResource(), RECIPIENT, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Recipient as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllRecipient_as() {
		return Base.getAll_as(this.model, this.getResource(), RECIPIENT, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Recipient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RECIPIENT, value);
	}
	
    /**
     * Adds a value to property Recipient as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RECIPIENT, value);
	}
    /**
     * Adds a value to property Recipient from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, RECIPIENT, value);
	}
	
    /**
     * Adds a value to property Recipient from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRecipient(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), RECIPIENT, value);
	}
  

    /**
     * Sets a value of property Recipient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RECIPIENT, value);
	}
	
    /**
     * Sets a value of property Recipient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RECIPIENT, value);
	}
    /**
     * Sets a value of property Recipient from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, RECIPIENT, value);
	}
	
    /**
     * Sets a value of property Recipient from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRecipient(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), RECIPIENT, value);
	}
  


    /**
     * Removes a value of property Recipient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RECIPIENT, value);
	}
	
    /**
     * Removes a value of property Recipient as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RECIPIENT, value);
	}
    /**
     * Removes a value of property Recipient given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, RECIPIENT, value);
	}
	
    /**
     * Removes a value of property Recipient given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRecipient(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), RECIPIENT, value);
	}
  
    /**
     * Removes all values of property Recipient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RECIPIENT);
	}
	
    /**
     * Removes all values of property Recipient	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRecipient() {
		Base.removeAll(this.model, this.getResource(), RECIPIENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35094a95 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasReferences(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REFERENCES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35094a95 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasReferences() {
		return Base.has(this.model, this.getResource(), REFERENCES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35094a95 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasReferences(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REFERENCES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@35094a95 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasReferences( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REFERENCES);
	}

     /**
     * Get all values of property References as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReferences_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REFERENCES);
	}
	
    /**
     * Get all values of property References as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReferences_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REFERENCES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property References as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReferences_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REFERENCES);
	}

    /**
     * Get all values of property References as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReferences_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REFERENCES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property References     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nmo.Message> getAllReferences(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REFERENCES, eu.dime.ps.semantic.model.nmo.Message.class);
	}
	
    /**
     * Get all values of property References as a ReactorResult of Message 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nmo.Message> getAllReferences_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REFERENCES, eu.dime.ps.semantic.model.nmo.Message.class);
	}

    /**
     * Get all values of property References     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nmo.Message> getAllReferences() {
		return Base.getAll(this.model, this.getResource(), REFERENCES, eu.dime.ps.semantic.model.nmo.Message.class);
	}

    /**
     * Get all values of property References as a ReactorResult of Message 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nmo.Message> getAllReferences_as() {
		return Base.getAll_as(this.model, this.getResource(), REFERENCES, eu.dime.ps.semantic.model.nmo.Message.class);
	}
 
    /**
     * Adds a value to property References as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addReferences(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REFERENCES, value);
	}
	
    /**
     * Adds a value to property References as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addReferences( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REFERENCES, value);
	}
    /**
     * Adds a value to property References from an instance of Message 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addReferences(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nmo.Message value) {
		Base.add(model, instanceResource, REFERENCES, value);
	}
	
    /**
     * Adds a value to property References from an instance of Message 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addReferences(eu.dime.ps.semantic.model.nmo.Message value) {
		Base.add(this.model, this.getResource(), REFERENCES, value);
	}
  

    /**
     * Sets a value of property References from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setReferences( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REFERENCES, value);
	}
	
    /**
     * Sets a value of property References from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setReferences( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REFERENCES, value);
	}
    /**
     * Sets a value of property References from an instance of Message 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setReferences(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nmo.Message value) {
		Base.set(model, instanceResource, REFERENCES, value);
	}
	
    /**
     * Sets a value of property References from an instance of Message 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setReferences(eu.dime.ps.semantic.model.nmo.Message value) {
		Base.set(this.model, this.getResource(), REFERENCES, value);
	}
  


    /**
     * Removes a value of property References as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeReferences( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REFERENCES, value);
	}
	
    /**
     * Removes a value of property References as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeReferences( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REFERENCES, value);
	}
    /**
     * Removes a value of property References given as an instance of Message 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeReferences(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nmo.Message value) {
		Base.remove(model, instanceResource, REFERENCES, value);
	}
	
    /**
     * Removes a value of property References given as an instance of Message 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeReferences(eu.dime.ps.semantic.model.nmo.Message value) {
		Base.remove(this.model, this.getResource(), REFERENCES, value);
	}
  
    /**
     * Removes all values of property References     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllReferences( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REFERENCES);
	}
	
    /**
     * Removes all values of property References	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllReferences() {
		Base.removeAll(this.model, this.getResource(), REFERENCES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6680cf59 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REPLYTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6680cf59 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasReplyTo() {
		return Base.has(this.model, this.getResource(), REPLYTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6680cf59 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REPLYTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6680cf59 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasReplyTo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REPLYTO);
	}

     /**
     * Get all values of property ReplyTo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReplyTo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REPLYTO);
	}
	
    /**
     * Get all values of property ReplyTo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReplyTo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPLYTO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ReplyTo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReplyTo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REPLYTO);
	}

    /**
     * Get all values of property ReplyTo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReplyTo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REPLYTO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ReplyTo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REPLYTO, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property ReplyTo as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllReplyTo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPLYTO, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property ReplyTo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllReplyTo() {
		return Base.getAll(this.model, this.getResource(), REPLYTO, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property ReplyTo as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllReplyTo_as() {
		return Base.getAll_as(this.model, this.getResource(), REPLYTO, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property ReplyTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REPLYTO, value);
	}
	
    /**
     * Adds a value to property ReplyTo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addReplyTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REPLYTO, value);
	}
    /**
     * Adds a value to property ReplyTo from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, REPLYTO, value);
	}
	
    /**
     * Adds a value to property ReplyTo from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addReplyTo(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), REPLYTO, value);
	}
  

    /**
     * Sets a value of property ReplyTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setReplyTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REPLYTO, value);
	}
	
    /**
     * Sets a value of property ReplyTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setReplyTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REPLYTO, value);
	}
    /**
     * Sets a value of property ReplyTo from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, REPLYTO, value);
	}
	
    /**
     * Sets a value of property ReplyTo from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setReplyTo(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), REPLYTO, value);
	}
  


    /**
     * Removes a value of property ReplyTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeReplyTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REPLYTO, value);
	}
	
    /**
     * Removes a value of property ReplyTo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeReplyTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REPLYTO, value);
	}
    /**
     * Removes a value of property ReplyTo given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeReplyTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, REPLYTO, value);
	}
	
    /**
     * Removes a value of property ReplyTo given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeReplyTo(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), REPLYTO, value);
	}
  
    /**
     * Removes all values of property ReplyTo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllReplyTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REPLYTO);
	}
	
    /**
     * Removes all values of property ReplyTo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllReplyTo() {
		Base.removeAll(this.model, this.getResource(), REPLYTO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16175c73 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSecondaryMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SECONDARYMESSAGERECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16175c73 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSecondaryMessageRecipient() {
		return Base.has(this.model, this.getResource(), SECONDARYMESSAGERECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16175c73 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSecondaryMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SECONDARYMESSAGERECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@16175c73 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSecondaryMessageRecipient( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SECONDARYMESSAGERECIPIENT);
	}

     /**
     * Get all values of property SecondaryMessageRecipient as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSecondaryMessageRecipient_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SECONDARYMESSAGERECIPIENT);
	}
	
    /**
     * Get all values of property SecondaryMessageRecipient as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSecondaryMessageRecipient_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SECONDARYMESSAGERECIPIENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SecondaryMessageRecipient as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSecondaryMessageRecipient_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SECONDARYMESSAGERECIPIENT);
	}

    /**
     * Get all values of property SecondaryMessageRecipient as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSecondaryMessageRecipient_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SECONDARYMESSAGERECIPIENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SecondaryMessageRecipient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.ContactMedium> getAllSecondaryMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SECONDARYMESSAGERECIPIENT, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
	
    /**
     * Get all values of property SecondaryMessageRecipient as a ReactorResult of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.ContactMedium> getAllSecondaryMessageRecipient_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SECONDARYMESSAGERECIPIENT, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}

    /**
     * Get all values of property SecondaryMessageRecipient     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.ContactMedium> getAllSecondaryMessageRecipient() {
		return Base.getAll(this.model, this.getResource(), SECONDARYMESSAGERECIPIENT, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}

    /**
     * Get all values of property SecondaryMessageRecipient as a ReactorResult of ContactMedium 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.ContactMedium> getAllSecondaryMessageRecipient_as() {
		return Base.getAll_as(this.model, this.getResource(), SECONDARYMESSAGERECIPIENT, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
 
    /**
     * Adds a value to property SecondaryMessageRecipient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSecondaryMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SECONDARYMESSAGERECIPIENT, value);
	}
	
    /**
     * Adds a value to property SecondaryMessageRecipient as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSecondaryMessageRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SECONDARYMESSAGERECIPIENT, value);
	}
    /**
     * Adds a value to property SecondaryMessageRecipient from an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSecondaryMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.add(model, instanceResource, SECONDARYMESSAGERECIPIENT, value);
	}
	
    /**
     * Adds a value to property SecondaryMessageRecipient from an instance of ContactMedium 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSecondaryMessageRecipient(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.add(this.model, this.getResource(), SECONDARYMESSAGERECIPIENT, value);
	}
  

    /**
     * Sets a value of property SecondaryMessageRecipient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSecondaryMessageRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SECONDARYMESSAGERECIPIENT, value);
	}
	
    /**
     * Sets a value of property SecondaryMessageRecipient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSecondaryMessageRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SECONDARYMESSAGERECIPIENT, value);
	}
    /**
     * Sets a value of property SecondaryMessageRecipient from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSecondaryMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(model, instanceResource, SECONDARYMESSAGERECIPIENT, value);
	}
	
    /**
     * Sets a value of property SecondaryMessageRecipient from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSecondaryMessageRecipient(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(this.model, this.getResource(), SECONDARYMESSAGERECIPIENT, value);
	}
  


    /**
     * Removes a value of property SecondaryMessageRecipient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSecondaryMessageRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SECONDARYMESSAGERECIPIENT, value);
	}
	
    /**
     * Removes a value of property SecondaryMessageRecipient as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSecondaryMessageRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SECONDARYMESSAGERECIPIENT, value);
	}
    /**
     * Removes a value of property SecondaryMessageRecipient given as an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSecondaryMessageRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(model, instanceResource, SECONDARYMESSAGERECIPIENT, value);
	}
	
    /**
     * Removes a value of property SecondaryMessageRecipient given as an instance of ContactMedium 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSecondaryMessageRecipient(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(this.model, this.getResource(), SECONDARYMESSAGERECIPIENT, value);
	}
  
    /**
     * Removes all values of property SecondaryMessageRecipient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSecondaryMessageRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SECONDARYMESSAGERECIPIENT);
	}
	
    /**
     * Removes all values of property SecondaryMessageRecipient	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSecondaryMessageRecipient() {
		Base.removeAll(this.model, this.getResource(), SECONDARYMESSAGERECIPIENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26026440 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSecondaryRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SECONDARYRECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26026440 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSecondaryRecipient() {
		return Base.has(this.model, this.getResource(), SECONDARYRECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26026440 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSecondaryRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SECONDARYRECIPIENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26026440 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSecondaryRecipient( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SECONDARYRECIPIENT);
	}

     /**
     * Get all values of property SecondaryRecipient as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSecondaryRecipient_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SECONDARYRECIPIENT);
	}
	
    /**
     * Get all values of property SecondaryRecipient as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSecondaryRecipient_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SECONDARYRECIPIENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SecondaryRecipient as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSecondaryRecipient_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SECONDARYRECIPIENT);
	}

    /**
     * Get all values of property SecondaryRecipient as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSecondaryRecipient_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SECONDARYRECIPIENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SecondaryRecipient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllSecondaryRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SECONDARYRECIPIENT, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property SecondaryRecipient as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllSecondaryRecipient_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SECONDARYRECIPIENT, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property SecondaryRecipient     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllSecondaryRecipient() {
		return Base.getAll(this.model, this.getResource(), SECONDARYRECIPIENT, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property SecondaryRecipient as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllSecondaryRecipient_as() {
		return Base.getAll_as(this.model, this.getResource(), SECONDARYRECIPIENT, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property SecondaryRecipient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSecondaryRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SECONDARYRECIPIENT, value);
	}
	
    /**
     * Adds a value to property SecondaryRecipient as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSecondaryRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SECONDARYRECIPIENT, value);
	}
    /**
     * Adds a value to property SecondaryRecipient from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSecondaryRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, SECONDARYRECIPIENT, value);
	}
	
    /**
     * Adds a value to property SecondaryRecipient from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSecondaryRecipient(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), SECONDARYRECIPIENT, value);
	}
  

    /**
     * Sets a value of property SecondaryRecipient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSecondaryRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SECONDARYRECIPIENT, value);
	}
	
    /**
     * Sets a value of property SecondaryRecipient from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSecondaryRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SECONDARYRECIPIENT, value);
	}
    /**
     * Sets a value of property SecondaryRecipient from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSecondaryRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, SECONDARYRECIPIENT, value);
	}
	
    /**
     * Sets a value of property SecondaryRecipient from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSecondaryRecipient(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), SECONDARYRECIPIENT, value);
	}
  


    /**
     * Removes a value of property SecondaryRecipient as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSecondaryRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SECONDARYRECIPIENT, value);
	}
	
    /**
     * Removes a value of property SecondaryRecipient as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSecondaryRecipient( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SECONDARYRECIPIENT, value);
	}
    /**
     * Removes a value of property SecondaryRecipient given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSecondaryRecipient(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, SECONDARYRECIPIENT, value);
	}
	
    /**
     * Removes a value of property SecondaryRecipient given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSecondaryRecipient(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), SECONDARYRECIPIENT, value);
	}
  
    /**
     * Removes all values of property SecondaryRecipient     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSecondaryRecipient( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SECONDARYRECIPIENT);
	}
	
    /**
     * Removes all values of property SecondaryRecipient	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSecondaryRecipient() {
		Base.removeAll(this.model, this.getResource(), SECONDARYRECIPIENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76b9a2ef has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SENDER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76b9a2ef has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSender() {
		return Base.has(this.model, this.getResource(), SENDER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76b9a2ef has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SENDER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@76b9a2ef has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSender( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SENDER);
	}

     /**
     * Get all values of property Sender as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSender_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SENDER);
	}
	
    /**
     * Get all values of property Sender as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSender_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SENDER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sender as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSender_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SENDER);
	}

    /**
     * Get all values of property Sender as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSender_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SENDER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sender     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllSender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SENDER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Sender as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllSender_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SENDER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Sender     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllSender() {
		return Base.getAll(this.model, this.getResource(), SENDER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Sender as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllSender_as() {
		return Base.getAll_as(this.model, this.getResource(), SENDER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Sender as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SENDER, value);
	}
	
    /**
     * Adds a value to property Sender as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSender( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SENDER, value);
	}
    /**
     * Adds a value to property Sender from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, SENDER, value);
	}
	
    /**
     * Adds a value to property Sender from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSender(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), SENDER, value);
	}
  

    /**
     * Sets a value of property Sender from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSender( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SENDER, value);
	}
	
    /**
     * Sets a value of property Sender from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSender( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SENDER, value);
	}
    /**
     * Sets a value of property Sender from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, SENDER, value);
	}
	
    /**
     * Sets a value of property Sender from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSender(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), SENDER, value);
	}
  


    /**
     * Removes a value of property Sender as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSender( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SENDER, value);
	}
	
    /**
     * Removes a value of property Sender as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSender( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SENDER, value);
	}
    /**
     * Removes a value of property Sender given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, SENDER, value);
	}
	
    /**
     * Removes a value of property Sender given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSender(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), SENDER, value);
	}
  
    /**
     * Removes all values of property Sender     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSender( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SENDER);
	}
	
    /**
     * Removes all values of property Sender	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSender() {
		Base.removeAll(this.model, this.getResource(), SENDER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ae8d30d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSentDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SENTDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ae8d30d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSentDate() {
		return Base.has(this.model, this.getResource(), SENTDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ae8d30d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSentDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SENTDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ae8d30d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSentDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SENTDATE);
	}

    /**
     * Get single value of property SentDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getSentDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, SENTDATE);
	}
	
    /**
     * Get single value of property SentDate as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getSentDate_asNode() {
		return Base.get_asNode(this.model, this.getResource(), SENTDATE);
	}
     /**
     * Get single value of property SentDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getSentDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, SENTDATE, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property SentDate  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getSentDate() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), SENTDATE, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property SentDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addSentDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, SENTDATE, value, 1);
	}
	
    /**
     * Adds a value to property SentDate as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addSentDate( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SENTDATE, value, 1);
	}
    /**
     * Adds a value to property SentDate from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addSentDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, SENTDATE, value, 1);
	}
	
    /**
     * Adds a value to property SentDate from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addSentDate(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SENTDATE, value, 1);
	}
 
 

    /**
     * Sets a value of property SentDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSentDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SENTDATE, value);
	}
	
    /**
     * Sets a value of property SentDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSentDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SENTDATE, value);
	}
    /**
     * Sets a value of property SentDate from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSentDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, SENTDATE, value);
	}
	
    /**
     * Sets a value of property SentDate from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSentDate(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), SENTDATE, value);
	}
  


    /**
     * Removes a value of property SentDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSentDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SENTDATE, value);
	}
	
    /**
     * Removes a value of property SentDate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSentDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SENTDATE, value);
	}
    /**
     * Removes a value of property SentDate given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSentDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, SENTDATE, value);
	}
	
    /**
     * Removes a value of property SentDate given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSentDate(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), SENTDATE, value);
	}
  
    /**
     * Removes all values of property SentDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSentDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SENTDATE);
	}
	
    /**
     * Removes all values of property SentDate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSentDate() {
		Base.removeAll(this.model, this.getResource(), SENTDATE);
	}
 }