package eu.dime.ps.semantic.model.nmo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Bcc </li>
 *   <li> Cc </li>
 *   <li> ContentMimeType </li>
 *   <li> EmailBcc </li>
 *   <li> EmailCc </li>
 *   <li> EmailTo </li>
 *   <li> To </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Email extends eu.dime.ps.semantic.model.nmo.Message {

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Email */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Email", false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#bcc */
    @SuppressWarnings("hiding")
	public static final URI BCC = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#bcc",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#cc */
    @SuppressWarnings("hiding")
	public static final URI CC = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#cc",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#contentMimeType */
    @SuppressWarnings("hiding")
	public static final URI CONTENTMIMETYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#contentMimeType",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#emailBcc */
    @SuppressWarnings("hiding")
	public static final URI EMAILBCC = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#emailBcc",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#emailCc */
    @SuppressWarnings("hiding")
	public static final URI EMAILCC = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#emailCc",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#emailTo */
    @SuppressWarnings("hiding")
	public static final URI EMAILTO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#emailTo",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#to */
    @SuppressWarnings("hiding")
	public static final URI TO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#to",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#bcc",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#cc",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#contentMimeType",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#emailBcc",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#emailCc",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#emailTo",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#to",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Email (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Email (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Email (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Email (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Email (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Email  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Email  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Email.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Email).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Email> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Email.class );
	}

    /**
	 * Remove rdf:type Email from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b275945 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBcc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BCC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b275945 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBcc() {
		return Base.has(this.model, this.getResource(), BCC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b275945 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBcc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BCC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b275945 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBcc( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BCC);
	}

     /**
     * Get all values of property Bcc as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBcc_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BCC);
	}
	
    /**
     * Get all values of property Bcc as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBcc_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BCC, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Bcc as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBcc_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BCC);
	}

    /**
     * Get all values of property Bcc as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBcc_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BCC, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Bcc     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllBcc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BCC, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Bcc as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllBcc_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BCC, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Bcc     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllBcc() {
		return Base.getAll(this.model, this.getResource(), BCC, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Bcc as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllBcc_as() {
		return Base.getAll_as(this.model, this.getResource(), BCC, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Bcc as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBcc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BCC, value);
	}
	
    /**
     * Adds a value to property Bcc as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBcc( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BCC, value);
	}
    /**
     * Adds a value to property Bcc from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBcc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, BCC, value);
	}
	
    /**
     * Adds a value to property Bcc from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBcc(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), BCC, value);
	}
  

    /**
     * Sets a value of property Bcc from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBcc( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BCC, value);
	}
	
    /**
     * Sets a value of property Bcc from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBcc( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BCC, value);
	}
    /**
     * Sets a value of property Bcc from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBcc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, BCC, value);
	}
	
    /**
     * Sets a value of property Bcc from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBcc(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), BCC, value);
	}
  


    /**
     * Removes a value of property Bcc as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBcc( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BCC, value);
	}
	
    /**
     * Removes a value of property Bcc as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBcc( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BCC, value);
	}
    /**
     * Removes a value of property Bcc given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBcc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, BCC, value);
	}
	
    /**
     * Removes a value of property Bcc given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBcc(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), BCC, value);
	}
  
    /**
     * Removes all values of property Bcc     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBcc( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BCC);
	}
	
    /**
     * Removes all values of property Bcc	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBcc() {
		Base.removeAll(this.model, this.getResource(), BCC);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5330759 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5330759 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCc() {
		return Base.has(this.model, this.getResource(), CC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5330759 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5330759 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCc( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CC);
	}

     /**
     * Get all values of property Cc as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCc_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CC);
	}
	
    /**
     * Get all values of property Cc as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCc_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CC, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Cc as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCc_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CC);
	}

    /**
     * Get all values of property Cc as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCc_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CC, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Cc     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllCc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CC, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Cc as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllCc_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CC, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Cc     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllCc() {
		return Base.getAll(this.model, this.getResource(), CC, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Cc as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllCc_as() {
		return Base.getAll_as(this.model, this.getResource(), CC, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Cc as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CC, value);
	}
	
    /**
     * Adds a value to property Cc as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCc( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CC, value);
	}
    /**
     * Adds a value to property Cc from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, CC, value);
	}
	
    /**
     * Adds a value to property Cc from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCc(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), CC, value);
	}
  

    /**
     * Sets a value of property Cc from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCc( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CC, value);
	}
	
    /**
     * Sets a value of property Cc from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCc( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CC, value);
	}
    /**
     * Sets a value of property Cc from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, CC, value);
	}
	
    /**
     * Sets a value of property Cc from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCc(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), CC, value);
	}
  


    /**
     * Removes a value of property Cc as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCc( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CC, value);
	}
	
    /**
     * Removes a value of property Cc as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCc( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CC, value);
	}
    /**
     * Removes a value of property Cc given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, CC, value);
	}
	
    /**
     * Removes a value of property Cc given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCc(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), CC, value);
	}
  
    /**
     * Removes all values of property Cc     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCc( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CC);
	}
	
    /**
     * Removes all values of property Cc	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCc() {
		Base.removeAll(this.model, this.getResource(), CC);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40e83e52 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContentMimeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTENTMIMETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40e83e52 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContentMimeType() {
		return Base.has(this.model, this.getResource(), CONTENTMIMETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40e83e52 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContentMimeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTENTMIMETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40e83e52 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContentMimeType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTENTMIMETYPE);
	}

    /**
     * Get single value of property ContentMimeType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getContentMimeType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, CONTENTMIMETYPE);
	}
	
    /**
     * Get single value of property ContentMimeType as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getContentMimeType_asNode() {
		return Base.get_asNode(this.model, this.getResource(), CONTENTMIMETYPE);
	}
     /**
     * Get single value of property ContentMimeType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getContentMimeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, CONTENTMIMETYPE, java.lang.String.class);
	}
	
    /**
     * Get single value of property ContentMimeType  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getContentMimeType() {
		return (java.lang.String) Base.get(this.model, this.getResource(), CONTENTMIMETYPE, java.lang.String.class);
	}
  
    /**
     * Adds a value to property ContentMimeType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addContentMimeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CONTENTMIMETYPE, value, 1);
	}
	
    /**
     * Adds a value to property ContentMimeType as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addContentMimeType( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTENTMIMETYPE, value, 1);
	}
    /**
     * Adds a value to property ContentMimeType from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addContentMimeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, CONTENTMIMETYPE, value, 1);
	}
	
    /**
     * Adds a value to property ContentMimeType from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addContentMimeType(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTENTMIMETYPE, value, 1);
	}
 
 

    /**
     * Sets a value of property ContentMimeType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContentMimeType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTENTMIMETYPE, value);
	}
	
    /**
     * Sets a value of property ContentMimeType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContentMimeType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTENTMIMETYPE, value);
	}
    /**
     * Sets a value of property ContentMimeType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContentMimeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, CONTENTMIMETYPE, value);
	}
	
    /**
     * Sets a value of property ContentMimeType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContentMimeType(java.lang.String value) {
		Base.set(this.model, this.getResource(), CONTENTMIMETYPE, value);
	}
  


    /**
     * Removes a value of property ContentMimeType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContentMimeType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTENTMIMETYPE, value);
	}
	
    /**
     * Removes a value of property ContentMimeType as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContentMimeType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTENTMIMETYPE, value);
	}
    /**
     * Removes a value of property ContentMimeType given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContentMimeType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, CONTENTMIMETYPE, value);
	}
	
    /**
     * Removes a value of property ContentMimeType given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContentMimeType(java.lang.String value) {
		Base.remove(this.model, this.getResource(), CONTENTMIMETYPE, value);
	}
  
    /**
     * Removes all values of property ContentMimeType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContentMimeType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTENTMIMETYPE);
	}
	
    /**
     * Removes all values of property ContentMimeType	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContentMimeType() {
		Base.removeAll(this.model, this.getResource(), CONTENTMIMETYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fd086b4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEmailBcc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EMAILBCC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fd086b4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEmailBcc() {
		return Base.has(this.model, this.getResource(), EMAILBCC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fd086b4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEmailBcc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EMAILBCC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fd086b4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEmailBcc( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EMAILBCC);
	}

     /**
     * Get all values of property EmailBcc as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEmailBcc_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EMAILBCC);
	}
	
    /**
     * Get all values of property EmailBcc as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEmailBcc_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EMAILBCC, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EmailBcc as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEmailBcc_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EMAILBCC);
	}

    /**
     * Get all values of property EmailBcc as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEmailBcc_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EMAILBCC, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EmailBcc     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.ContactMedium> getAllEmailBcc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EMAILBCC, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
	
    /**
     * Get all values of property EmailBcc as a ReactorResult of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.ContactMedium> getAllEmailBcc_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EMAILBCC, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}

    /**
     * Get all values of property EmailBcc     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.ContactMedium> getAllEmailBcc() {
		return Base.getAll(this.model, this.getResource(), EMAILBCC, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}

    /**
     * Get all values of property EmailBcc as a ReactorResult of ContactMedium 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.ContactMedium> getAllEmailBcc_as() {
		return Base.getAll_as(this.model, this.getResource(), EMAILBCC, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
 
    /**
     * Adds a value to property EmailBcc as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEmailBcc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EMAILBCC, value);
	}
	
    /**
     * Adds a value to property EmailBcc as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEmailBcc( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EMAILBCC, value);
	}
    /**
     * Adds a value to property EmailBcc from an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEmailBcc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.add(model, instanceResource, EMAILBCC, value);
	}
	
    /**
     * Adds a value to property EmailBcc from an instance of ContactMedium 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEmailBcc(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.add(this.model, this.getResource(), EMAILBCC, value);
	}
  

    /**
     * Sets a value of property EmailBcc from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEmailBcc( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EMAILBCC, value);
	}
	
    /**
     * Sets a value of property EmailBcc from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEmailBcc( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EMAILBCC, value);
	}
    /**
     * Sets a value of property EmailBcc from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEmailBcc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(model, instanceResource, EMAILBCC, value);
	}
	
    /**
     * Sets a value of property EmailBcc from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEmailBcc(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(this.model, this.getResource(), EMAILBCC, value);
	}
  


    /**
     * Removes a value of property EmailBcc as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEmailBcc( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EMAILBCC, value);
	}
	
    /**
     * Removes a value of property EmailBcc as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEmailBcc( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EMAILBCC, value);
	}
    /**
     * Removes a value of property EmailBcc given as an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEmailBcc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(model, instanceResource, EMAILBCC, value);
	}
	
    /**
     * Removes a value of property EmailBcc given as an instance of ContactMedium 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEmailBcc(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(this.model, this.getResource(), EMAILBCC, value);
	}
  
    /**
     * Removes all values of property EmailBcc     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEmailBcc( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EMAILBCC);
	}
	
    /**
     * Removes all values of property EmailBcc	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEmailBcc() {
		Base.removeAll(this.model, this.getResource(), EMAILBCC);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4081bf8b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEmailCc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EMAILCC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4081bf8b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEmailCc() {
		return Base.has(this.model, this.getResource(), EMAILCC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4081bf8b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEmailCc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EMAILCC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4081bf8b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEmailCc( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EMAILCC);
	}

     /**
     * Get all values of property EmailCc as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEmailCc_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EMAILCC);
	}
	
    /**
     * Get all values of property EmailCc as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEmailCc_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EMAILCC, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EmailCc as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEmailCc_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EMAILCC);
	}

    /**
     * Get all values of property EmailCc as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEmailCc_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EMAILCC, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EmailCc     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.ContactMedium> getAllEmailCc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EMAILCC, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
	
    /**
     * Get all values of property EmailCc as a ReactorResult of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.ContactMedium> getAllEmailCc_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EMAILCC, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}

    /**
     * Get all values of property EmailCc     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.ContactMedium> getAllEmailCc() {
		return Base.getAll(this.model, this.getResource(), EMAILCC, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}

    /**
     * Get all values of property EmailCc as a ReactorResult of ContactMedium 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.ContactMedium> getAllEmailCc_as() {
		return Base.getAll_as(this.model, this.getResource(), EMAILCC, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
 
    /**
     * Adds a value to property EmailCc as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEmailCc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EMAILCC, value);
	}
	
    /**
     * Adds a value to property EmailCc as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEmailCc( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EMAILCC, value);
	}
    /**
     * Adds a value to property EmailCc from an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEmailCc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.add(model, instanceResource, EMAILCC, value);
	}
	
    /**
     * Adds a value to property EmailCc from an instance of ContactMedium 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEmailCc(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.add(this.model, this.getResource(), EMAILCC, value);
	}
  

    /**
     * Sets a value of property EmailCc from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEmailCc( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EMAILCC, value);
	}
	
    /**
     * Sets a value of property EmailCc from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEmailCc( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EMAILCC, value);
	}
    /**
     * Sets a value of property EmailCc from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEmailCc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(model, instanceResource, EMAILCC, value);
	}
	
    /**
     * Sets a value of property EmailCc from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEmailCc(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(this.model, this.getResource(), EMAILCC, value);
	}
  


    /**
     * Removes a value of property EmailCc as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEmailCc( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EMAILCC, value);
	}
	
    /**
     * Removes a value of property EmailCc as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEmailCc( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EMAILCC, value);
	}
    /**
     * Removes a value of property EmailCc given as an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEmailCc(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(model, instanceResource, EMAILCC, value);
	}
	
    /**
     * Removes a value of property EmailCc given as an instance of ContactMedium 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEmailCc(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(this.model, this.getResource(), EMAILCC, value);
	}
  
    /**
     * Removes all values of property EmailCc     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEmailCc( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EMAILCC);
	}
	
    /**
     * Removes all values of property EmailCc	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEmailCc() {
		Base.removeAll(this.model, this.getResource(), EMAILCC);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@87d877f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEmailTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EMAILTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@87d877f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEmailTo() {
		return Base.has(this.model, this.getResource(), EMAILTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@87d877f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEmailTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EMAILTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@87d877f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEmailTo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EMAILTO);
	}

     /**
     * Get all values of property EmailTo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEmailTo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EMAILTO);
	}
	
    /**
     * Get all values of property EmailTo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEmailTo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EMAILTO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EmailTo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEmailTo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EMAILTO);
	}

    /**
     * Get all values of property EmailTo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEmailTo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EMAILTO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EmailTo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.ContactMedium> getAllEmailTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EMAILTO, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
	
    /**
     * Get all values of property EmailTo as a ReactorResult of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.ContactMedium> getAllEmailTo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EMAILTO, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}

    /**
     * Get all values of property EmailTo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.ContactMedium> getAllEmailTo() {
		return Base.getAll(this.model, this.getResource(), EMAILTO, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}

    /**
     * Get all values of property EmailTo as a ReactorResult of ContactMedium 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.ContactMedium> getAllEmailTo_as() {
		return Base.getAll_as(this.model, this.getResource(), EMAILTO, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
 
    /**
     * Adds a value to property EmailTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEmailTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EMAILTO, value);
	}
	
    /**
     * Adds a value to property EmailTo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEmailTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EMAILTO, value);
	}
    /**
     * Adds a value to property EmailTo from an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEmailTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.add(model, instanceResource, EMAILTO, value);
	}
	
    /**
     * Adds a value to property EmailTo from an instance of ContactMedium 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEmailTo(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.add(this.model, this.getResource(), EMAILTO, value);
	}
  

    /**
     * Sets a value of property EmailTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEmailTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EMAILTO, value);
	}
	
    /**
     * Sets a value of property EmailTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEmailTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EMAILTO, value);
	}
    /**
     * Sets a value of property EmailTo from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEmailTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(model, instanceResource, EMAILTO, value);
	}
	
    /**
     * Sets a value of property EmailTo from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEmailTo(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(this.model, this.getResource(), EMAILTO, value);
	}
  


    /**
     * Removes a value of property EmailTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEmailTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EMAILTO, value);
	}
	
    /**
     * Removes a value of property EmailTo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEmailTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EMAILTO, value);
	}
    /**
     * Removes a value of property EmailTo given as an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEmailTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(model, instanceResource, EMAILTO, value);
	}
	
    /**
     * Removes a value of property EmailTo given as an instance of ContactMedium 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEmailTo(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(this.model, this.getResource(), EMAILTO, value);
	}
  
    /**
     * Removes all values of property EmailTo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEmailTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EMAILTO);
	}
	
    /**
     * Removes all values of property EmailTo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEmailTo() {
		Base.removeAll(this.model, this.getResource(), EMAILTO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192dc149 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192dc149 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTo() {
		return Base.has(this.model, this.getResource(), TO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192dc149 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192dc149 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TO);
	}

     /**
     * Get all values of property To as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TO);
	}
	
    /**
     * Get all values of property To as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property To as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TO);
	}

    /**
     * Get all values of property To as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property To     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TO, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property To as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllTo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TO, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property To     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllTo() {
		return Base.getAll(this.model, this.getResource(), TO, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property To as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllTo_as() {
		return Base.getAll_as(this.model, this.getResource(), TO, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property To as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TO, value);
	}
	
    /**
     * Adds a value to property To as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TO, value);
	}
    /**
     * Adds a value to property To from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, TO, value);
	}
	
    /**
     * Adds a value to property To from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTo(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), TO, value);
	}
  

    /**
     * Sets a value of property To from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TO, value);
	}
	
    /**
     * Sets a value of property To from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TO, value);
	}
    /**
     * Sets a value of property To from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, TO, value);
	}
	
    /**
     * Sets a value of property To from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTo(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), TO, value);
	}
  


    /**
     * Removes a value of property To as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TO, value);
	}
	
    /**
     * Removes a value of property To as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TO, value);
	}
    /**
     * Removes a value of property To given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, TO, value);
	}
	
    /**
     * Removes a value of property To given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTo(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), TO, value);
	}
  
    /**
     * Removes all values of property To     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TO);
	}
	
    /**
     * Removes all values of property To	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTo() {
		Base.removeAll(this.model, this.getResource(), TO);
	}
 }