/*
* Copyright 2013 by the digital.me project (http://www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.ncal;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Byday </li>
 *   <li> Byhour </li>
 *   <li> Byminute </li>
 *   <li> Bymonth </li>
 *   <li> Bymonthday </li>
 *   <li> Bysecond </li>
 *   <li> Bysetpos </li>
 *   <li> Byweekno </li>
 *   <li> Byyearday </li>
 *   <li> Count </li>
 *   <li> Freq </li>
 *   <li> Interval </li>
 *   <li> Until </li>
 *   <li> Wkst </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class RecurrenceRule extends eu.dime.ps.semantic.model.RDFReactorThing {

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#RecurrenceRule */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#RecurrenceRule", false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byday */
    @SuppressWarnings("hiding")
	public static final URI BYDAY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byday",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byhour */
    @SuppressWarnings("hiding")
	public static final URI BYHOUR = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byhour",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byminute */
    @SuppressWarnings("hiding")
	public static final URI BYMINUTE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byminute",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bymonth */
    @SuppressWarnings("hiding")
	public static final URI BYMONTH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bymonth",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bymonthday */
    @SuppressWarnings("hiding")
	public static final URI BYMONTHDAY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bymonthday",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bysecond */
    @SuppressWarnings("hiding")
	public static final URI BYSECOND = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bysecond",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bysetpos */
    @SuppressWarnings("hiding")
	public static final URI BYSETPOS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bysetpos",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byweekno */
    @SuppressWarnings("hiding")
	public static final URI BYWEEKNO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byweekno",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byyearday */
    @SuppressWarnings("hiding")
	public static final URI BYYEARDAY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byyearday",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#count */
    @SuppressWarnings("hiding")
	public static final URI COUNT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#count",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#freq */
    @SuppressWarnings("hiding")
	public static final URI FREQ = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#freq",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#interval */
    @SuppressWarnings("hiding")
	public static final URI INTERVAL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#interval",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#until */
    @SuppressWarnings("hiding")
	public static final URI UNTIL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#until",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#wkst */
    @SuppressWarnings("hiding")
	public static final URI WKST = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#wkst",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byday",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byhour",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byminute",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bymonth",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bymonthday",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bysecond",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#bysetpos",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byweekno",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#byyearday",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#count",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#freq",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#interval",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#until",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#wkst",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected RecurrenceRule (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public RecurrenceRule (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public RecurrenceRule (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public RecurrenceRule (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public RecurrenceRule (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of RecurrenceRule  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static RecurrenceRule  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, RecurrenceRule.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#RecurrenceRule).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends RecurrenceRule> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, RecurrenceRule.class );
	}

    /**
	 * Remove rdf:type RecurrenceRule from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Rrule' to this RecurrenceRule instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRrule_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.ncal.UnionOfTimezoneObservanceEventJournalTimezoneTodo.RRULE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Rrule' to this RecurrenceRule instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRrule_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.ncal.UnionOfTimezoneObservanceEventJournalTimezoneTodo.RRULE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Rrule' to this RecurrenceRule instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRrule_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.ncal.UnionOfTimezoneObservanceEventJournalTimezoneTodo.RRULE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Exrule' to this RecurrenceRule instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExrule_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.ncal.UnionOfEventJournalTodo.EXRULE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Exrule' to this RecurrenceRule instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExrule_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.ncal.UnionOfEventJournalTodo.EXRULE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Exrule' to this RecurrenceRule instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExrule_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.ncal.UnionOfEventJournalTodo.EXRULE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@378d0ff8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasByday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BYDAY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@378d0ff8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasByday() {
		return Base.has(this.model, this.getResource(), BYDAY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@378d0ff8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasByday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BYDAY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@378d0ff8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasByday( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BYDAY);
	}

     /**
     * Get all values of property Byday as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllByday_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BYDAY);
	}
	
    /**
     * Get all values of property Byday as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllByday_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYDAY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Byday as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllByday_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BYDAY);
	}

    /**
     * Get all values of property Byday as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllByday_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BYDAY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Byday     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.ncal.BydayRulePart> getAllByday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BYDAY, eu.dime.ps.semantic.model.ncal.BydayRulePart.class);
	}
	
    /**
     * Get all values of property Byday as a ReactorResult of BydayRulePart 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.ncal.BydayRulePart> getAllByday_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYDAY, eu.dime.ps.semantic.model.ncal.BydayRulePart.class);
	}

    /**
     * Get all values of property Byday     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.ncal.BydayRulePart> getAllByday() {
		return Base.getAll(this.model, this.getResource(), BYDAY, eu.dime.ps.semantic.model.ncal.BydayRulePart.class);
	}

    /**
     * Get all values of property Byday as a ReactorResult of BydayRulePart 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.ncal.BydayRulePart> getAllByday_as() {
		return Base.getAll_as(this.model, this.getResource(), BYDAY, eu.dime.ps.semantic.model.ncal.BydayRulePart.class);
	}
 
    /**
     * Adds a value to property Byday as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addByday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BYDAY, value);
	}
	
    /**
     * Adds a value to property Byday as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addByday( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BYDAY, value);
	}
    /**
     * Adds a value to property Byday from an instance of BydayRulePart 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addByday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.BydayRulePart value) {
		Base.add(model, instanceResource, BYDAY, value);
	}
	
    /**
     * Adds a value to property Byday from an instance of BydayRulePart 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addByday(eu.dime.ps.semantic.model.ncal.BydayRulePart value) {
		Base.add(this.model, this.getResource(), BYDAY, value);
	}
  

    /**
     * Sets a value of property Byday from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setByday( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BYDAY, value);
	}
	
    /**
     * Sets a value of property Byday from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setByday( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BYDAY, value);
	}
    /**
     * Sets a value of property Byday from an instance of BydayRulePart 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setByday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.BydayRulePart value) {
		Base.set(model, instanceResource, BYDAY, value);
	}
	
    /**
     * Sets a value of property Byday from an instance of BydayRulePart 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setByday(eu.dime.ps.semantic.model.ncal.BydayRulePart value) {
		Base.set(this.model, this.getResource(), BYDAY, value);
	}
  


    /**
     * Removes a value of property Byday as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeByday( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BYDAY, value);
	}
	
    /**
     * Removes a value of property Byday as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeByday( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BYDAY, value);
	}
    /**
     * Removes a value of property Byday given as an instance of BydayRulePart 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeByday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.BydayRulePart value) {
		Base.remove(model, instanceResource, BYDAY, value);
	}
	
    /**
     * Removes a value of property Byday given as an instance of BydayRulePart 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeByday(eu.dime.ps.semantic.model.ncal.BydayRulePart value) {
		Base.remove(this.model, this.getResource(), BYDAY, value);
	}
  
    /**
     * Removes all values of property Byday     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllByday( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BYDAY);
	}
	
    /**
     * Removes all values of property Byday	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllByday() {
		Base.removeAll(this.model, this.getResource(), BYDAY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58f52e04 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasByhour(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BYHOUR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58f52e04 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasByhour() {
		return Base.has(this.model, this.getResource(), BYHOUR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58f52e04 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasByhour(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BYHOUR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58f52e04 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasByhour( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BYHOUR);
	}

     /**
     * Get all values of property Byhour as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllByhour_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BYHOUR);
	}
	
    /**
     * Get all values of property Byhour as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllByhour_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYHOUR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Byhour as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllByhour_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BYHOUR);
	}

    /**
     * Get all values of property Byhour as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllByhour_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BYHOUR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Byhour     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllByhour(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BYHOUR, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Byhour as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllByhour_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYHOUR, java.lang.Integer.class);
	}

    /**
     * Get all values of property Byhour     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllByhour() {
		return Base.getAll(this.model, this.getResource(), BYHOUR, java.lang.Integer.class);
	}

    /**
     * Get all values of property Byhour as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllByhour_as() {
		return Base.getAll_as(this.model, this.getResource(), BYHOUR, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Byhour as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addByhour(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BYHOUR, value);
	}
	
    /**
     * Adds a value to property Byhour as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addByhour( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BYHOUR, value);
	}
    /**
     * Adds a value to property Byhour from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addByhour(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, BYHOUR, value);
	}
	
    /**
     * Adds a value to property Byhour from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addByhour(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), BYHOUR, value);
	}
  

    /**
     * Sets a value of property Byhour from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setByhour( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BYHOUR, value);
	}
	
    /**
     * Sets a value of property Byhour from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setByhour( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BYHOUR, value);
	}
    /**
     * Sets a value of property Byhour from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setByhour(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, BYHOUR, value);
	}
	
    /**
     * Sets a value of property Byhour from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setByhour(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), BYHOUR, value);
	}
  


    /**
     * Removes a value of property Byhour as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeByhour( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BYHOUR, value);
	}
	
    /**
     * Removes a value of property Byhour as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeByhour( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BYHOUR, value);
	}
    /**
     * Removes a value of property Byhour given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeByhour(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, BYHOUR, value);
	}
	
    /**
     * Removes a value of property Byhour given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeByhour(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), BYHOUR, value);
	}
  
    /**
     * Removes all values of property Byhour     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllByhour( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BYHOUR);
	}
	
    /**
     * Removes all values of property Byhour	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllByhour() {
		Base.removeAll(this.model, this.getResource(), BYHOUR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61f16561 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasByminute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BYMINUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61f16561 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasByminute() {
		return Base.has(this.model, this.getResource(), BYMINUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61f16561 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasByminute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BYMINUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61f16561 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasByminute( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BYMINUTE);
	}

     /**
     * Get all values of property Byminute as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllByminute_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BYMINUTE);
	}
	
    /**
     * Get all values of property Byminute as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllByminute_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYMINUTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Byminute as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllByminute_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BYMINUTE);
	}

    /**
     * Get all values of property Byminute as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllByminute_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BYMINUTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Byminute     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllByminute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BYMINUTE, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Byminute as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllByminute_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYMINUTE, java.lang.Integer.class);
	}

    /**
     * Get all values of property Byminute     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllByminute() {
		return Base.getAll(this.model, this.getResource(), BYMINUTE, java.lang.Integer.class);
	}

    /**
     * Get all values of property Byminute as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllByminute_as() {
		return Base.getAll_as(this.model, this.getResource(), BYMINUTE, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Byminute as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addByminute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BYMINUTE, value);
	}
	
    /**
     * Adds a value to property Byminute as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addByminute( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BYMINUTE, value);
	}
    /**
     * Adds a value to property Byminute from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addByminute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, BYMINUTE, value);
	}
	
    /**
     * Adds a value to property Byminute from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addByminute(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), BYMINUTE, value);
	}
  

    /**
     * Sets a value of property Byminute from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setByminute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BYMINUTE, value);
	}
	
    /**
     * Sets a value of property Byminute from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setByminute( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BYMINUTE, value);
	}
    /**
     * Sets a value of property Byminute from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setByminute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, BYMINUTE, value);
	}
	
    /**
     * Sets a value of property Byminute from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setByminute(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), BYMINUTE, value);
	}
  


    /**
     * Removes a value of property Byminute as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeByminute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BYMINUTE, value);
	}
	
    /**
     * Removes a value of property Byminute as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeByminute( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BYMINUTE, value);
	}
    /**
     * Removes a value of property Byminute given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeByminute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, BYMINUTE, value);
	}
	
    /**
     * Removes a value of property Byminute given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeByminute(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), BYMINUTE, value);
	}
  
    /**
     * Removes all values of property Byminute     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllByminute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BYMINUTE);
	}
	
    /**
     * Removes all values of property Byminute	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllByminute() {
		Base.removeAll(this.model, this.getResource(), BYMINUTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17c7a8f3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBymonth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BYMONTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17c7a8f3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBymonth() {
		return Base.has(this.model, this.getResource(), BYMONTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17c7a8f3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBymonth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BYMONTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@17c7a8f3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBymonth( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BYMONTH);
	}

     /**
     * Get all values of property Bymonth as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBymonth_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BYMONTH);
	}
	
    /**
     * Get all values of property Bymonth as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBymonth_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYMONTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Bymonth as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBymonth_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BYMONTH);
	}

    /**
     * Get all values of property Bymonth as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBymonth_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BYMONTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Bymonth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllBymonth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BYMONTH, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Bymonth as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllBymonth_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYMONTH, java.lang.Integer.class);
	}

    /**
     * Get all values of property Bymonth     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllBymonth() {
		return Base.getAll(this.model, this.getResource(), BYMONTH, java.lang.Integer.class);
	}

    /**
     * Get all values of property Bymonth as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllBymonth_as() {
		return Base.getAll_as(this.model, this.getResource(), BYMONTH, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Bymonth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBymonth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BYMONTH, value);
	}
	
    /**
     * Adds a value to property Bymonth as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBymonth( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BYMONTH, value);
	}
    /**
     * Adds a value to property Bymonth from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBymonth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, BYMONTH, value);
	}
	
    /**
     * Adds a value to property Bymonth from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBymonth(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), BYMONTH, value);
	}
  

    /**
     * Sets a value of property Bymonth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBymonth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BYMONTH, value);
	}
	
    /**
     * Sets a value of property Bymonth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBymonth( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BYMONTH, value);
	}
    /**
     * Sets a value of property Bymonth from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBymonth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, BYMONTH, value);
	}
	
    /**
     * Sets a value of property Bymonth from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBymonth(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), BYMONTH, value);
	}
  


    /**
     * Removes a value of property Bymonth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBymonth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BYMONTH, value);
	}
	
    /**
     * Removes a value of property Bymonth as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBymonth( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BYMONTH, value);
	}
    /**
     * Removes a value of property Bymonth given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBymonth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, BYMONTH, value);
	}
	
    /**
     * Removes a value of property Bymonth given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBymonth(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), BYMONTH, value);
	}
  
    /**
     * Removes all values of property Bymonth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBymonth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BYMONTH);
	}
	
    /**
     * Removes all values of property Bymonth	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBymonth() {
		Base.removeAll(this.model, this.getResource(), BYMONTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9301b9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBymonthday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BYMONTHDAY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9301b9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBymonthday() {
		return Base.has(this.model, this.getResource(), BYMONTHDAY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9301b9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBymonthday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BYMONTHDAY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9301b9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBymonthday( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BYMONTHDAY);
	}

     /**
     * Get all values of property Bymonthday as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBymonthday_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BYMONTHDAY);
	}
	
    /**
     * Get all values of property Bymonthday as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBymonthday_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYMONTHDAY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Bymonthday as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBymonthday_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BYMONTHDAY);
	}

    /**
     * Get all values of property Bymonthday as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBymonthday_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BYMONTHDAY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Bymonthday     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllBymonthday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BYMONTHDAY, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Bymonthday as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllBymonthday_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYMONTHDAY, java.lang.Integer.class);
	}

    /**
     * Get all values of property Bymonthday     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllBymonthday() {
		return Base.getAll(this.model, this.getResource(), BYMONTHDAY, java.lang.Integer.class);
	}

    /**
     * Get all values of property Bymonthday as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllBymonthday_as() {
		return Base.getAll_as(this.model, this.getResource(), BYMONTHDAY, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Bymonthday as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBymonthday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BYMONTHDAY, value);
	}
	
    /**
     * Adds a value to property Bymonthday as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBymonthday( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BYMONTHDAY, value);
	}
    /**
     * Adds a value to property Bymonthday from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBymonthday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, BYMONTHDAY, value);
	}
	
    /**
     * Adds a value to property Bymonthday from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBymonthday(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), BYMONTHDAY, value);
	}
  

    /**
     * Sets a value of property Bymonthday from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBymonthday( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BYMONTHDAY, value);
	}
	
    /**
     * Sets a value of property Bymonthday from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBymonthday( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BYMONTHDAY, value);
	}
    /**
     * Sets a value of property Bymonthday from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBymonthday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, BYMONTHDAY, value);
	}
	
    /**
     * Sets a value of property Bymonthday from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBymonthday(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), BYMONTHDAY, value);
	}
  


    /**
     * Removes a value of property Bymonthday as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBymonthday( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BYMONTHDAY, value);
	}
	
    /**
     * Removes a value of property Bymonthday as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBymonthday( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BYMONTHDAY, value);
	}
    /**
     * Removes a value of property Bymonthday given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBymonthday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, BYMONTHDAY, value);
	}
	
    /**
     * Removes a value of property Bymonthday given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBymonthday(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), BYMONTHDAY, value);
	}
  
    /**
     * Removes all values of property Bymonthday     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBymonthday( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BYMONTHDAY);
	}
	
    /**
     * Removes all values of property Bymonthday	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBymonthday() {
		Base.removeAll(this.model, this.getResource(), BYMONTHDAY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@df44c8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBysecond(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BYSECOND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@df44c8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBysecond() {
		return Base.has(this.model, this.getResource(), BYSECOND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@df44c8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBysecond(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BYSECOND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@df44c8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBysecond( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BYSECOND);
	}

     /**
     * Get all values of property Bysecond as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBysecond_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BYSECOND);
	}
	
    /**
     * Get all values of property Bysecond as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBysecond_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYSECOND, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Bysecond as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBysecond_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BYSECOND);
	}

    /**
     * Get all values of property Bysecond as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBysecond_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BYSECOND, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Bysecond     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllBysecond(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BYSECOND, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Bysecond as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllBysecond_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYSECOND, java.lang.Integer.class);
	}

    /**
     * Get all values of property Bysecond     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllBysecond() {
		return Base.getAll(this.model, this.getResource(), BYSECOND, java.lang.Integer.class);
	}

    /**
     * Get all values of property Bysecond as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllBysecond_as() {
		return Base.getAll_as(this.model, this.getResource(), BYSECOND, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Bysecond as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBysecond(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BYSECOND, value);
	}
	
    /**
     * Adds a value to property Bysecond as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBysecond( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BYSECOND, value);
	}
    /**
     * Adds a value to property Bysecond from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBysecond(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, BYSECOND, value);
	}
	
    /**
     * Adds a value to property Bysecond from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBysecond(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), BYSECOND, value);
	}
  

    /**
     * Sets a value of property Bysecond from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBysecond( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BYSECOND, value);
	}
	
    /**
     * Sets a value of property Bysecond from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBysecond( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BYSECOND, value);
	}
    /**
     * Sets a value of property Bysecond from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBysecond(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, BYSECOND, value);
	}
	
    /**
     * Sets a value of property Bysecond from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBysecond(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), BYSECOND, value);
	}
  


    /**
     * Removes a value of property Bysecond as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBysecond( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BYSECOND, value);
	}
	
    /**
     * Removes a value of property Bysecond as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBysecond( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BYSECOND, value);
	}
    /**
     * Removes a value of property Bysecond given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBysecond(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, BYSECOND, value);
	}
	
    /**
     * Removes a value of property Bysecond given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBysecond(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), BYSECOND, value);
	}
  
    /**
     * Removes all values of property Bysecond     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBysecond( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BYSECOND);
	}
	
    /**
     * Removes all values of property Bysecond	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBysecond() {
		Base.removeAll(this.model, this.getResource(), BYSECOND);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4514c8dd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBysetpos(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BYSETPOS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4514c8dd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBysetpos() {
		return Base.has(this.model, this.getResource(), BYSETPOS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4514c8dd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBysetpos(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BYSETPOS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4514c8dd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBysetpos( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BYSETPOS);
	}

     /**
     * Get all values of property Bysetpos as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBysetpos_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BYSETPOS);
	}
	
    /**
     * Get all values of property Bysetpos as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBysetpos_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYSETPOS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Bysetpos as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBysetpos_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BYSETPOS);
	}

    /**
     * Get all values of property Bysetpos as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBysetpos_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BYSETPOS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Bysetpos     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllBysetpos(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BYSETPOS, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Bysetpos as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllBysetpos_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYSETPOS, java.lang.Integer.class);
	}

    /**
     * Get all values of property Bysetpos     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllBysetpos() {
		return Base.getAll(this.model, this.getResource(), BYSETPOS, java.lang.Integer.class);
	}

    /**
     * Get all values of property Bysetpos as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllBysetpos_as() {
		return Base.getAll_as(this.model, this.getResource(), BYSETPOS, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Bysetpos as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBysetpos(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BYSETPOS, value);
	}
	
    /**
     * Adds a value to property Bysetpos as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBysetpos( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BYSETPOS, value);
	}
    /**
     * Adds a value to property Bysetpos from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBysetpos(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, BYSETPOS, value);
	}
	
    /**
     * Adds a value to property Bysetpos from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBysetpos(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), BYSETPOS, value);
	}
  

    /**
     * Sets a value of property Bysetpos from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBysetpos( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BYSETPOS, value);
	}
	
    /**
     * Sets a value of property Bysetpos from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBysetpos( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BYSETPOS, value);
	}
    /**
     * Sets a value of property Bysetpos from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBysetpos(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, BYSETPOS, value);
	}
	
    /**
     * Sets a value of property Bysetpos from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBysetpos(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), BYSETPOS, value);
	}
  


    /**
     * Removes a value of property Bysetpos as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBysetpos( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BYSETPOS, value);
	}
	
    /**
     * Removes a value of property Bysetpos as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBysetpos( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BYSETPOS, value);
	}
    /**
     * Removes a value of property Bysetpos given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBysetpos(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, BYSETPOS, value);
	}
	
    /**
     * Removes a value of property Bysetpos given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBysetpos(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), BYSETPOS, value);
	}
  
    /**
     * Removes all values of property Bysetpos     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBysetpos( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BYSETPOS);
	}
	
    /**
     * Removes all values of property Bysetpos	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBysetpos() {
		Base.removeAll(this.model, this.getResource(), BYSETPOS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@701a0f8f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasByweekno(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BYWEEKNO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@701a0f8f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasByweekno() {
		return Base.has(this.model, this.getResource(), BYWEEKNO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@701a0f8f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasByweekno(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BYWEEKNO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@701a0f8f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasByweekno( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BYWEEKNO);
	}

     /**
     * Get all values of property Byweekno as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllByweekno_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BYWEEKNO);
	}
	
    /**
     * Get all values of property Byweekno as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllByweekno_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYWEEKNO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Byweekno as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllByweekno_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BYWEEKNO);
	}

    /**
     * Get all values of property Byweekno as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllByweekno_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BYWEEKNO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Byweekno     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllByweekno(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BYWEEKNO, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Byweekno as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllByweekno_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYWEEKNO, java.lang.Integer.class);
	}

    /**
     * Get all values of property Byweekno     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllByweekno() {
		return Base.getAll(this.model, this.getResource(), BYWEEKNO, java.lang.Integer.class);
	}

    /**
     * Get all values of property Byweekno as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllByweekno_as() {
		return Base.getAll_as(this.model, this.getResource(), BYWEEKNO, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Byweekno as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addByweekno(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BYWEEKNO, value);
	}
	
    /**
     * Adds a value to property Byweekno as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addByweekno( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BYWEEKNO, value);
	}
    /**
     * Adds a value to property Byweekno from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addByweekno(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, BYWEEKNO, value);
	}
	
    /**
     * Adds a value to property Byweekno from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addByweekno(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), BYWEEKNO, value);
	}
  

    /**
     * Sets a value of property Byweekno from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setByweekno( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BYWEEKNO, value);
	}
	
    /**
     * Sets a value of property Byweekno from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setByweekno( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BYWEEKNO, value);
	}
    /**
     * Sets a value of property Byweekno from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setByweekno(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, BYWEEKNO, value);
	}
	
    /**
     * Sets a value of property Byweekno from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setByweekno(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), BYWEEKNO, value);
	}
  


    /**
     * Removes a value of property Byweekno as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeByweekno( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BYWEEKNO, value);
	}
	
    /**
     * Removes a value of property Byweekno as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeByweekno( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BYWEEKNO, value);
	}
    /**
     * Removes a value of property Byweekno given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeByweekno(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, BYWEEKNO, value);
	}
	
    /**
     * Removes a value of property Byweekno given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeByweekno(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), BYWEEKNO, value);
	}
  
    /**
     * Removes all values of property Byweekno     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllByweekno( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BYWEEKNO);
	}
	
    /**
     * Removes all values of property Byweekno	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllByweekno() {
		Base.removeAll(this.model, this.getResource(), BYWEEKNO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69fed553 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasByyearday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BYYEARDAY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69fed553 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasByyearday() {
		return Base.has(this.model, this.getResource(), BYYEARDAY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69fed553 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasByyearday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BYYEARDAY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69fed553 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasByyearday( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BYYEARDAY);
	}

     /**
     * Get all values of property Byyearday as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllByyearday_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BYYEARDAY);
	}
	
    /**
     * Get all values of property Byyearday as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllByyearday_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYYEARDAY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Byyearday as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllByyearday_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BYYEARDAY);
	}

    /**
     * Get all values of property Byyearday as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllByyearday_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BYYEARDAY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Byyearday     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllByyearday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BYYEARDAY, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Byyearday as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllByyearday_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BYYEARDAY, java.lang.Integer.class);
	}

    /**
     * Get all values of property Byyearday     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllByyearday() {
		return Base.getAll(this.model, this.getResource(), BYYEARDAY, java.lang.Integer.class);
	}

    /**
     * Get all values of property Byyearday as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllByyearday_as() {
		return Base.getAll_as(this.model, this.getResource(), BYYEARDAY, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Byyearday as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addByyearday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BYYEARDAY, value);
	}
	
    /**
     * Adds a value to property Byyearday as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addByyearday( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BYYEARDAY, value);
	}
    /**
     * Adds a value to property Byyearday from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addByyearday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, BYYEARDAY, value);
	}
	
    /**
     * Adds a value to property Byyearday from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addByyearday(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), BYYEARDAY, value);
	}
  

    /**
     * Sets a value of property Byyearday from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setByyearday( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BYYEARDAY, value);
	}
	
    /**
     * Sets a value of property Byyearday from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setByyearday( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BYYEARDAY, value);
	}
    /**
     * Sets a value of property Byyearday from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setByyearday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, BYYEARDAY, value);
	}
	
    /**
     * Sets a value of property Byyearday from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setByyearday(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), BYYEARDAY, value);
	}
  


    /**
     * Removes a value of property Byyearday as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeByyearday( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BYYEARDAY, value);
	}
	
    /**
     * Removes a value of property Byyearday as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeByyearday( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BYYEARDAY, value);
	}
    /**
     * Removes a value of property Byyearday given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeByyearday(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, BYYEARDAY, value);
	}
	
    /**
     * Removes a value of property Byyearday given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeByyearday(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), BYYEARDAY, value);
	}
  
    /**
     * Removes all values of property Byyearday     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllByyearday( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BYYEARDAY);
	}
	
    /**
     * Removes all values of property Byyearday	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllByyearday() {
		Base.removeAll(this.model, this.getResource(), BYYEARDAY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ee9fc96 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ee9fc96 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCount() {
		return Base.has(this.model, this.getResource(), COUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ee9fc96 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ee9fc96 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCount( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COUNT);
	}

    /**
     * Get single value of property Count as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getCount_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, COUNT);
	}
	
    /**
     * Get single value of property Count as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getCount_asNode() {
		return Base.get_asNode(this.model, this.getResource(), COUNT);
	}
     /**
     * Get single value of property Count     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, COUNT, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property Count  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getCount() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), COUNT, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property Count as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, COUNT, value, 1);
	}
	
    /**
     * Adds a value to property Count as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addCount( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), COUNT, value, 1);
	}
    /**
     * Adds a value to property Count from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, COUNT, value, 1);
	}
	
    /**
     * Adds a value to property Count from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addCount(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), COUNT, value, 1);
	}
 
 

    /**
     * Sets a value of property Count from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COUNT, value);
	}
	
    /**
     * Sets a value of property Count from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COUNT, value);
	}
    /**
     * Sets a value of property Count from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, COUNT, value);
	}
	
    /**
     * Sets a value of property Count from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCount(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), COUNT, value);
	}
  


    /**
     * Removes a value of property Count as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COUNT, value);
	}
	
    /**
     * Removes a value of property Count as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COUNT, value);
	}
    /**
     * Removes a value of property Count given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, COUNT, value);
	}
	
    /**
     * Removes a value of property Count given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCount(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), COUNT, value);
	}
  
    /**
     * Removes all values of property Count     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COUNT);
	}
	
    /**
     * Removes all values of property Count	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCount() {
		Base.removeAll(this.model, this.getResource(), COUNT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@793f31e5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFreq(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FREQ);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@793f31e5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFreq() {
		return Base.has(this.model, this.getResource(), FREQ);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@793f31e5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFreq(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FREQ);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@793f31e5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFreq( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FREQ);
	}

    /**
     * Get single value of property Freq as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getFreq_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, FREQ);
	}
	
    /**
     * Get single value of property Freq as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getFreq_asNode() {
		return Base.get_asNode(this.model, this.getResource(), FREQ);
	}
     /**
     * Get single value of property Freq     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.ncal.RecurrenceFrequency getFreq(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.ncal.RecurrenceFrequency) Base.get(model, instanceResource, FREQ, eu.dime.ps.semantic.model.ncal.RecurrenceFrequency.class);
	}
	
    /**
     * Get single value of property Freq  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.ncal.RecurrenceFrequency getFreq() {
		return (eu.dime.ps.semantic.model.ncal.RecurrenceFrequency) Base.get(this.model, this.getResource(), FREQ, eu.dime.ps.semantic.model.ncal.RecurrenceFrequency.class);
	}
  
    /**
     * Adds a value to property Freq as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addFreq(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, FREQ, value, 1);
	}
	
    /**
     * Adds a value to property Freq as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addFreq( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FREQ, value, 1);
	}
    /**
     * Adds a value to property Freq from an instance of RecurrenceFrequency 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addFreq(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.RecurrenceFrequency value)
    throws CardinalityException {
		Base.add(model, instanceResource, FREQ, value, 1);
	}
	
    /**
     * Adds a value to property Freq from an instance of RecurrenceFrequency 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addFreq(eu.dime.ps.semantic.model.ncal.RecurrenceFrequency value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), FREQ, value, 1);
	}
 
 

    /**
     * Sets a value of property Freq from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFreq( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FREQ, value);
	}
	
    /**
     * Sets a value of property Freq from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFreq( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FREQ, value);
	}
    /**
     * Sets a value of property Freq from an instance of RecurrenceFrequency 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFreq(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.RecurrenceFrequency value) {
		Base.set(model, instanceResource, FREQ, value);
	}
	
    /**
     * Sets a value of property Freq from an instance of RecurrenceFrequency 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFreq(eu.dime.ps.semantic.model.ncal.RecurrenceFrequency value) {
		Base.set(this.model, this.getResource(), FREQ, value);
	}
  


    /**
     * Removes a value of property Freq as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFreq( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FREQ, value);
	}
	
    /**
     * Removes a value of property Freq as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFreq( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FREQ, value);
	}
    /**
     * Removes a value of property Freq given as an instance of RecurrenceFrequency 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFreq(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.RecurrenceFrequency value) {
		Base.remove(model, instanceResource, FREQ, value);
	}
	
    /**
     * Removes a value of property Freq given as an instance of RecurrenceFrequency 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFreq(eu.dime.ps.semantic.model.ncal.RecurrenceFrequency value) {
		Base.remove(this.model, this.getResource(), FREQ, value);
	}
  
    /**
     * Removes all values of property Freq     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFreq( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FREQ);
	}
	
    /**
     * Removes all values of property Freq	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFreq() {
		Base.removeAll(this.model, this.getResource(), FREQ);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@46597a6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INTERVAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@46597a6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInterval() {
		return Base.has(this.model, this.getResource(), INTERVAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@46597a6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INTERVAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@46597a6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInterval( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INTERVAL);
	}

    /**
     * Get single value of property Interval as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getInterval_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, INTERVAL);
	}
	
    /**
     * Get single value of property Interval as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getInterval_asNode() {
		return Base.get_asNode(this.model, this.getResource(), INTERVAL);
	}
     /**
     * Get single value of property Interval     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getInterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, INTERVAL, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property Interval  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getInterval() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), INTERVAL, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property Interval as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addInterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, INTERVAL, value, 1);
	}
	
    /**
     * Adds a value to property Interval as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addInterval( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), INTERVAL, value, 1);
	}
    /**
     * Adds a value to property Interval from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addInterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, INTERVAL, value, 1);
	}
	
    /**
     * Adds a value to property Interval from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addInterval(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), INTERVAL, value, 1);
	}
 
 

    /**
     * Sets a value of property Interval from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInterval( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTERVAL, value);
	}
	
    /**
     * Sets a value of property Interval from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInterval( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTERVAL, value);
	}
    /**
     * Sets a value of property Interval from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, INTERVAL, value);
	}
	
    /**
     * Sets a value of property Interval from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInterval(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), INTERVAL, value);
	}
  


    /**
     * Removes a value of property Interval as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInterval( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTERVAL, value);
	}
	
    /**
     * Removes a value of property Interval as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInterval( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTERVAL, value);
	}
    /**
     * Removes a value of property Interval given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInterval(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, INTERVAL, value);
	}
	
    /**
     * Removes a value of property Interval given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInterval(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), INTERVAL, value);
	}
  
    /**
     * Removes all values of property Interval     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInterval( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTERVAL);
	}
	
    /**
     * Removes all values of property Interval	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInterval() {
		Base.removeAll(this.model, this.getResource(), INTERVAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@644d1b6c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUntil(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, UNTIL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@644d1b6c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUntil() {
		return Base.has(this.model, this.getResource(), UNTIL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@644d1b6c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUntil(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, UNTIL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@644d1b6c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUntil( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), UNTIL);
	}

     /**
     * Get all values of property Until as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUntil_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, UNTIL);
	}
	
    /**
     * Get all values of property Until as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUntil_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNTIL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Until as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUntil_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), UNTIL);
	}

    /**
     * Get all values of property Until as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUntil_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), UNTIL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Until     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllUntil(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, UNTIL, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property Until as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllUntil_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNTIL, java.util.Calendar.class);
	}

    /**
     * Get all values of property Until     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllUntil() {
		return Base.getAll(this.model, this.getResource(), UNTIL, java.util.Calendar.class);
	}

    /**
     * Get all values of property Until as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllUntil_as() {
		return Base.getAll_as(this.model, this.getResource(), UNTIL, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property Until as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUntil(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, UNTIL, value);
	}
	
    /**
     * Adds a value to property Until as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUntil( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), UNTIL, value);
	}
    /**
     * Adds a value to property Until from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUntil(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, UNTIL, value);
	}
	
    /**
     * Adds a value to property Until from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUntil(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), UNTIL, value);
	}
  

    /**
     * Sets a value of property Until from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUntil( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, UNTIL, value);
	}
	
    /**
     * Sets a value of property Until from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUntil( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), UNTIL, value);
	}
    /**
     * Sets a value of property Until from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUntil(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, UNTIL, value);
	}
	
    /**
     * Sets a value of property Until from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUntil(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), UNTIL, value);
	}
  


    /**
     * Removes a value of property Until as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUntil( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, UNTIL, value);
	}
	
    /**
     * Removes a value of property Until as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUntil( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), UNTIL, value);
	}
    /**
     * Removes a value of property Until given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUntil(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, UNTIL, value);
	}
	
    /**
     * Removes a value of property Until given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUntil(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), UNTIL, value);
	}
  
    /**
     * Removes all values of property Until     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUntil( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, UNTIL);
	}
	
    /**
     * Removes all values of property Until	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUntil() {
		Base.removeAll(this.model, this.getResource(), UNTIL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5cc056dc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWkst(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WKST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5cc056dc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWkst() {
		return Base.has(this.model, this.getResource(), WKST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5cc056dc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWkst(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WKST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5cc056dc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWkst( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WKST);
	}

    /**
     * Get single value of property Wkst as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getWkst_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, WKST);
	}
	
    /**
     * Get single value of property Wkst as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getWkst_asNode() {
		return Base.get_asNode(this.model, this.getResource(), WKST);
	}
     /**
     * Get single value of property Wkst     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.ncal.Weekday getWkst(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.ncal.Weekday) Base.get(model, instanceResource, WKST, eu.dime.ps.semantic.model.ncal.Weekday.class);
	}
	
    /**
     * Get single value of property Wkst  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.ncal.Weekday getWkst() {
		return (eu.dime.ps.semantic.model.ncal.Weekday) Base.get(this.model, this.getResource(), WKST, eu.dime.ps.semantic.model.ncal.Weekday.class);
	}
  
    /**
     * Adds a value to property Wkst as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addWkst(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, WKST, value, 1);
	}
	
    /**
     * Adds a value to property Wkst as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addWkst( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), WKST, value, 1);
	}
    /**
     * Adds a value to property Wkst from an instance of Weekday 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addWkst(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.Weekday value)
    throws CardinalityException {
		Base.add(model, instanceResource, WKST, value, 1);
	}
	
    /**
     * Adds a value to property Wkst from an instance of Weekday 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addWkst(eu.dime.ps.semantic.model.ncal.Weekday value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), WKST, value, 1);
	}
 
 

    /**
     * Sets a value of property Wkst from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWkst( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WKST, value);
	}
	
    /**
     * Sets a value of property Wkst from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWkst( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WKST, value);
	}
    /**
     * Sets a value of property Wkst from an instance of Weekday 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWkst(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.Weekday value) {
		Base.set(model, instanceResource, WKST, value);
	}
	
    /**
     * Sets a value of property Wkst from an instance of Weekday 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWkst(eu.dime.ps.semantic.model.ncal.Weekday value) {
		Base.set(this.model, this.getResource(), WKST, value);
	}
  


    /**
     * Removes a value of property Wkst as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWkst( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WKST, value);
	}
	
    /**
     * Removes a value of property Wkst as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWkst( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WKST, value);
	}
    /**
     * Removes a value of property Wkst given as an instance of Weekday 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWkst(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.Weekday value) {
		Base.remove(model, instanceResource, WKST, value);
	}
	
    /**
     * Removes a value of property Wkst given as an instance of Weekday 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWkst(eu.dime.ps.semantic.model.ncal.Weekday value) {
		Base.remove(this.model, this.getResource(), WKST, value);
	}
  
    /**
     * Removes all values of property Wkst     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWkst( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WKST);
	}
	
    /**
     * Removes all values of property Wkst	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWkst() {
		Base.removeAll(this.model, this.getResource(), WKST);
	}
 }