/*
* Copyright 2013 by the digital.me project (http:\\www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.nfo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Artwork </li>
 *   <li> AverageBitrate </li>
 *   <li> BitDepth </li>
 *   <li> BitrateType </li>
 *   <li> Codec </li>
 *   <li> CompressionType </li>
 *   <li> Count </li>
 *   <li> Duration </li>
 *   <li> Genre </li>
 *   <li> MediaStream </li>
 *   <li> Rate </li>
 *   <li> ReleaseDate </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Media extends eu.dime.ps.semantic.model.nie.InformationElement {

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Media */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Media", false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#artwork */
    @SuppressWarnings("hiding")
	public static final URI ARTWORK = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#artwork",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#averageBitrate */
    @SuppressWarnings("hiding")
	public static final URI AVERAGEBITRATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#averageBitrate",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitDepth */
    @SuppressWarnings("hiding")
	public static final URI BITDEPTH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitDepth",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitrateType */
    @SuppressWarnings("hiding")
	public static final URI BITRATETYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitrateType",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#codec */
    @SuppressWarnings("hiding")
	public static final URI CODEC = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#codec",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#compressionType */
    @SuppressWarnings("hiding")
	public static final URI COMPRESSIONTYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#compressionType",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#count */
    @SuppressWarnings("hiding")
	public static final URI COUNT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#count",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#duration */
    @SuppressWarnings("hiding")
	public static final URI DURATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#duration",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#genre */
    @SuppressWarnings("hiding")
	public static final URI GENRE = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#genre",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hasMediaStream */
    @SuppressWarnings("hiding")
	public static final URI MEDIASTREAM = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hasMediaStream",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#rate */
    @SuppressWarnings("hiding")
	public static final URI RATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#rate",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#releaseDate */
    @SuppressWarnings("hiding")
	public static final URI RELEASEDATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#releaseDate",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#artwork",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#averageBitrate",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitDepth",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#bitrateType",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#codec",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#compressionType",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#count",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#duration",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#genre",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#hasMediaStream",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#rate",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#releaseDate",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Media (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Media (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Media (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Media (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Media (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Media  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Media  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Media.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Media).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Media> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Media.class );
	}

    /**
	 * Remove rdf:type Media from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c9a8680 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasArtwork(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ARTWORK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c9a8680 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasArtwork() {
		return Base.has(this.model, this.getResource(), ARTWORK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c9a8680 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasArtwork(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ARTWORK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c9a8680 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasArtwork( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ARTWORK);
	}

     /**
     * Get all values of property Artwork as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllArtwork_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ARTWORK);
	}
	
    /**
     * Get all values of property Artwork as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllArtwork_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ARTWORK, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Artwork as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllArtwork_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ARTWORK);
	}

    /**
     * Get all values of property Artwork as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllArtwork_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ARTWORK, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Artwork     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nfo.Image> getAllArtwork(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ARTWORK, eu.dime.ps.semantic.model.nfo.Image.class);
	}
	
    /**
     * Get all values of property Artwork as a ReactorResult of Image 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nfo.Image> getAllArtwork_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ARTWORK, eu.dime.ps.semantic.model.nfo.Image.class);
	}

    /**
     * Get all values of property Artwork     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nfo.Image> getAllArtwork() {
		return Base.getAll(this.model, this.getResource(), ARTWORK, eu.dime.ps.semantic.model.nfo.Image.class);
	}

    /**
     * Get all values of property Artwork as a ReactorResult of Image 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nfo.Image> getAllArtwork_as() {
		return Base.getAll_as(this.model, this.getResource(), ARTWORK, eu.dime.ps.semantic.model.nfo.Image.class);
	}
 
    /**
     * Adds a value to property Artwork as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addArtwork(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ARTWORK, value);
	}
	
    /**
     * Adds a value to property Artwork as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addArtwork( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ARTWORK, value);
	}
    /**
     * Adds a value to property Artwork from an instance of Image 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addArtwork(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nfo.Image value) {
		Base.add(model, instanceResource, ARTWORK, value);
	}
	
    /**
     * Adds a value to property Artwork from an instance of Image 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addArtwork(eu.dime.ps.semantic.model.nfo.Image value) {
		Base.add(this.model, this.getResource(), ARTWORK, value);
	}
  

    /**
     * Sets a value of property Artwork from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setArtwork( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ARTWORK, value);
	}
	
    /**
     * Sets a value of property Artwork from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setArtwork( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ARTWORK, value);
	}
    /**
     * Sets a value of property Artwork from an instance of Image 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setArtwork(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nfo.Image value) {
		Base.set(model, instanceResource, ARTWORK, value);
	}
	
    /**
     * Sets a value of property Artwork from an instance of Image 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setArtwork(eu.dime.ps.semantic.model.nfo.Image value) {
		Base.set(this.model, this.getResource(), ARTWORK, value);
	}
  


    /**
     * Removes a value of property Artwork as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeArtwork( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ARTWORK, value);
	}
	
    /**
     * Removes a value of property Artwork as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeArtwork( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ARTWORK, value);
	}
    /**
     * Removes a value of property Artwork given as an instance of Image 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeArtwork(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nfo.Image value) {
		Base.remove(model, instanceResource, ARTWORK, value);
	}
	
    /**
     * Removes a value of property Artwork given as an instance of Image 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeArtwork(eu.dime.ps.semantic.model.nfo.Image value) {
		Base.remove(this.model, this.getResource(), ARTWORK, value);
	}
  
    /**
     * Removes all values of property Artwork     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllArtwork( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ARTWORK);
	}
	
    /**
     * Removes all values of property Artwork	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllArtwork() {
		Base.removeAll(this.model, this.getResource(), ARTWORK);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73c94c46 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAverageBitrate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, AVERAGEBITRATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73c94c46 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAverageBitrate() {
		return Base.has(this.model, this.getResource(), AVERAGEBITRATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73c94c46 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAverageBitrate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, AVERAGEBITRATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73c94c46 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAverageBitrate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), AVERAGEBITRATE);
	}

    /**
     * Get single value of property AverageBitrate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getAverageBitrate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, AVERAGEBITRATE);
	}
	
    /**
     * Get single value of property AverageBitrate as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getAverageBitrate_asNode() {
		return Base.get_asNode(this.model, this.getResource(), AVERAGEBITRATE);
	}
     /**
     * Get single value of property AverageBitrate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Float getAverageBitrate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Float) Base.get(model, instanceResource, AVERAGEBITRATE, java.lang.Float.class);
	}
	
    /**
     * Get single value of property AverageBitrate  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Float getAverageBitrate() {
		return (java.lang.Float) Base.get(this.model, this.getResource(), AVERAGEBITRATE, java.lang.Float.class);
	}
  
    /**
     * Adds a value to property AverageBitrate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addAverageBitrate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, AVERAGEBITRATE, value, 1);
	}
	
    /**
     * Adds a value to property AverageBitrate as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addAverageBitrate( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), AVERAGEBITRATE, value, 1);
	}
    /**
     * Adds a value to property AverageBitrate from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addAverageBitrate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value)
    throws CardinalityException {
		Base.add(model, instanceResource, AVERAGEBITRATE, value, 1);
	}
	
    /**
     * Adds a value to property AverageBitrate from an instance of java.lang.Float 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addAverageBitrate(java.lang.Float value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), AVERAGEBITRATE, value, 1);
	}
 
 

    /**
     * Sets a value of property AverageBitrate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAverageBitrate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, AVERAGEBITRATE, value);
	}
	
    /**
     * Sets a value of property AverageBitrate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAverageBitrate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), AVERAGEBITRATE, value);
	}
    /**
     * Sets a value of property AverageBitrate from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAverageBitrate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, AVERAGEBITRATE, value);
	}
	
    /**
     * Sets a value of property AverageBitrate from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAverageBitrate(java.lang.Float value) {
		Base.set(this.model, this.getResource(), AVERAGEBITRATE, value);
	}
  


    /**
     * Removes a value of property AverageBitrate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAverageBitrate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, AVERAGEBITRATE, value);
	}
	
    /**
     * Removes a value of property AverageBitrate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAverageBitrate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), AVERAGEBITRATE, value);
	}
    /**
     * Removes a value of property AverageBitrate given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAverageBitrate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, AVERAGEBITRATE, value);
	}
	
    /**
     * Removes a value of property AverageBitrate given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAverageBitrate(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), AVERAGEBITRATE, value);
	}
  
    /**
     * Removes all values of property AverageBitrate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAverageBitrate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, AVERAGEBITRATE);
	}
	
    /**
     * Removes all values of property AverageBitrate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAverageBitrate() {
		Base.removeAll(this.model, this.getResource(), AVERAGEBITRATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b644cae has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBitDepth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BITDEPTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b644cae has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBitDepth() {
		return Base.has(this.model, this.getResource(), BITDEPTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b644cae has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBitDepth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BITDEPTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b644cae has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBitDepth( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BITDEPTH);
	}

    /**
     * Get single value of property BitDepth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getBitDepth_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, BITDEPTH);
	}
	
    /**
     * Get single value of property BitDepth as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getBitDepth_asNode() {
		return Base.get_asNode(this.model, this.getResource(), BITDEPTH);
	}
     /**
     * Get single value of property BitDepth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getBitDepth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, BITDEPTH, java.lang.String.class);
	}
	
    /**
     * Get single value of property BitDepth  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getBitDepth() {
		return (java.lang.String) Base.get(this.model, this.getResource(), BITDEPTH, java.lang.String.class);
	}
  
    /**
     * Adds a value to property BitDepth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addBitDepth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, BITDEPTH, value, 1);
	}
	
    /**
     * Adds a value to property BitDepth as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addBitDepth( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), BITDEPTH, value, 1);
	}
    /**
     * Adds a value to property BitDepth from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addBitDepth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, BITDEPTH, value, 1);
	}
	
    /**
     * Adds a value to property BitDepth from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addBitDepth(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), BITDEPTH, value, 1);
	}
 
 

    /**
     * Sets a value of property BitDepth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBitDepth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BITDEPTH, value);
	}
	
    /**
     * Sets a value of property BitDepth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBitDepth( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BITDEPTH, value);
	}
    /**
     * Sets a value of property BitDepth from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBitDepth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, BITDEPTH, value);
	}
	
    /**
     * Sets a value of property BitDepth from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBitDepth(java.lang.String value) {
		Base.set(this.model, this.getResource(), BITDEPTH, value);
	}
  


    /**
     * Removes a value of property BitDepth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBitDepth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BITDEPTH, value);
	}
	
    /**
     * Removes a value of property BitDepth as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBitDepth( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BITDEPTH, value);
	}
    /**
     * Removes a value of property BitDepth given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBitDepth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, BITDEPTH, value);
	}
	
    /**
     * Removes a value of property BitDepth given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBitDepth(java.lang.String value) {
		Base.remove(this.model, this.getResource(), BITDEPTH, value);
	}
  
    /**
     * Removes all values of property BitDepth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBitDepth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BITDEPTH);
	}
	
    /**
     * Removes all values of property BitDepth	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBitDepth() {
		Base.removeAll(this.model, this.getResource(), BITDEPTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a7dd01d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBitrateType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BITRATETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a7dd01d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBitrateType() {
		return Base.has(this.model, this.getResource(), BITRATETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a7dd01d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBitrateType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BITRATETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@a7dd01d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBitrateType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BITRATETYPE);
	}

    /**
     * Get single value of property BitrateType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getBitrateType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, BITRATETYPE);
	}
	
    /**
     * Get single value of property BitrateType as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getBitrateType_asNode() {
		return Base.get_asNode(this.model, this.getResource(), BITRATETYPE);
	}
     /**
     * Get single value of property BitrateType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getBitrateType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, BITRATETYPE, java.lang.String.class);
	}
	
    /**
     * Get single value of property BitrateType  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getBitrateType() {
		return (java.lang.String) Base.get(this.model, this.getResource(), BITRATETYPE, java.lang.String.class);
	}
  
    /**
     * Adds a value to property BitrateType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addBitrateType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, BITRATETYPE, value, 1);
	}
	
    /**
     * Adds a value to property BitrateType as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addBitrateType( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), BITRATETYPE, value, 1);
	}
    /**
     * Adds a value to property BitrateType from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addBitrateType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, BITRATETYPE, value, 1);
	}
	
    /**
     * Adds a value to property BitrateType from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addBitrateType(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), BITRATETYPE, value, 1);
	}
 
 

    /**
     * Sets a value of property BitrateType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBitrateType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BITRATETYPE, value);
	}
	
    /**
     * Sets a value of property BitrateType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBitrateType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BITRATETYPE, value);
	}
    /**
     * Sets a value of property BitrateType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBitrateType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, BITRATETYPE, value);
	}
	
    /**
     * Sets a value of property BitrateType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBitrateType(java.lang.String value) {
		Base.set(this.model, this.getResource(), BITRATETYPE, value);
	}
  


    /**
     * Removes a value of property BitrateType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBitrateType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BITRATETYPE, value);
	}
	
    /**
     * Removes a value of property BitrateType as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBitrateType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BITRATETYPE, value);
	}
    /**
     * Removes a value of property BitrateType given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBitrateType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, BITRATETYPE, value);
	}
	
    /**
     * Removes a value of property BitrateType given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBitrateType(java.lang.String value) {
		Base.remove(this.model, this.getResource(), BITRATETYPE, value);
	}
  
    /**
     * Removes all values of property BitrateType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBitrateType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BITRATETYPE);
	}
	
    /**
     * Removes all values of property BitrateType	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBitrateType() {
		Base.removeAll(this.model, this.getResource(), BITRATETYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b9b802e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCodec(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CODEC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b9b802e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCodec() {
		return Base.has(this.model, this.getResource(), CODEC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b9b802e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCodec(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CODEC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b9b802e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCodec( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CODEC);
	}

     /**
     * Get all values of property Codec as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCodec_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CODEC);
	}
	
    /**
     * Get all values of property Codec as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCodec_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CODEC, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Codec as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCodec_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CODEC);
	}

    /**
     * Get all values of property Codec as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCodec_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CODEC, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Codec     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllCodec(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CODEC, java.lang.String.class);
	}
	
    /**
     * Get all values of property Codec as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllCodec_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CODEC, java.lang.String.class);
	}

    /**
     * Get all values of property Codec     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllCodec() {
		return Base.getAll(this.model, this.getResource(), CODEC, java.lang.String.class);
	}

    /**
     * Get all values of property Codec as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllCodec_as() {
		return Base.getAll_as(this.model, this.getResource(), CODEC, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Codec as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCodec(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CODEC, value);
	}
	
    /**
     * Adds a value to property Codec as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCodec( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CODEC, value);
	}
    /**
     * Adds a value to property Codec from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCodec(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, CODEC, value);
	}
	
    /**
     * Adds a value to property Codec from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCodec(java.lang.String value) {
		Base.add(this.model, this.getResource(), CODEC, value);
	}
  

    /**
     * Sets a value of property Codec from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCodec( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CODEC, value);
	}
	
    /**
     * Sets a value of property Codec from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCodec( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CODEC, value);
	}
    /**
     * Sets a value of property Codec from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCodec(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, CODEC, value);
	}
	
    /**
     * Sets a value of property Codec from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCodec(java.lang.String value) {
		Base.set(this.model, this.getResource(), CODEC, value);
	}
  


    /**
     * Removes a value of property Codec as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCodec( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CODEC, value);
	}
	
    /**
     * Removes a value of property Codec as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCodec( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CODEC, value);
	}
    /**
     * Removes a value of property Codec given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCodec(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, CODEC, value);
	}
	
    /**
     * Removes a value of property Codec given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCodec(java.lang.String value) {
		Base.remove(this.model, this.getResource(), CODEC, value);
	}
  
    /**
     * Removes all values of property Codec     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCodec( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CODEC);
	}
	
    /**
     * Removes all values of property Codec	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCodec() {
		Base.removeAll(this.model, this.getResource(), CODEC);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@72194aa8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCompressionType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COMPRESSIONTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@72194aa8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCompressionType() {
		return Base.has(this.model, this.getResource(), COMPRESSIONTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@72194aa8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCompressionType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COMPRESSIONTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@72194aa8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCompressionType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COMPRESSIONTYPE);
	}

    /**
     * Get single value of property CompressionType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getCompressionType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, COMPRESSIONTYPE);
	}
	
    /**
     * Get single value of property CompressionType as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getCompressionType_asNode() {
		return Base.get_asNode(this.model, this.getResource(), COMPRESSIONTYPE);
	}
     /**
     * Get single value of property CompressionType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.nfo.CompressionType getCompressionType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.nfo.CompressionType) Base.get(model, instanceResource, COMPRESSIONTYPE, eu.dime.ps.semantic.model.nfo.CompressionType.class);
	}
	
    /**
     * Get single value of property CompressionType  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.nfo.CompressionType getCompressionType() {
		return (eu.dime.ps.semantic.model.nfo.CompressionType) Base.get(this.model, this.getResource(), COMPRESSIONTYPE, eu.dime.ps.semantic.model.nfo.CompressionType.class);
	}
  
    /**
     * Adds a value to property CompressionType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addCompressionType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, COMPRESSIONTYPE, value, 1);
	}
	
    /**
     * Adds a value to property CompressionType as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addCompressionType( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), COMPRESSIONTYPE, value, 1);
	}
    /**
     * Adds a value to property CompressionType from an instance of CompressionType 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addCompressionType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nfo.CompressionType value)
    throws CardinalityException {
		Base.add(model, instanceResource, COMPRESSIONTYPE, value, 1);
	}
	
    /**
     * Adds a value to property CompressionType from an instance of CompressionType 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addCompressionType(eu.dime.ps.semantic.model.nfo.CompressionType value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), COMPRESSIONTYPE, value, 1);
	}
 
 

    /**
     * Sets a value of property CompressionType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCompressionType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COMPRESSIONTYPE, value);
	}
	
    /**
     * Sets a value of property CompressionType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCompressionType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COMPRESSIONTYPE, value);
	}
    /**
     * Sets a value of property CompressionType from an instance of CompressionType 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCompressionType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nfo.CompressionType value) {
		Base.set(model, instanceResource, COMPRESSIONTYPE, value);
	}
	
    /**
     * Sets a value of property CompressionType from an instance of CompressionType 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCompressionType(eu.dime.ps.semantic.model.nfo.CompressionType value) {
		Base.set(this.model, this.getResource(), COMPRESSIONTYPE, value);
	}
  


    /**
     * Removes a value of property CompressionType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCompressionType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COMPRESSIONTYPE, value);
	}
	
    /**
     * Removes a value of property CompressionType as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCompressionType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COMPRESSIONTYPE, value);
	}
    /**
     * Removes a value of property CompressionType given as an instance of CompressionType 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCompressionType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nfo.CompressionType value) {
		Base.remove(model, instanceResource, COMPRESSIONTYPE, value);
	}
	
    /**
     * Removes a value of property CompressionType given as an instance of CompressionType 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCompressionType(eu.dime.ps.semantic.model.nfo.CompressionType value) {
		Base.remove(this.model, this.getResource(), COMPRESSIONTYPE, value);
	}
  
    /**
     * Removes all values of property CompressionType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCompressionType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COMPRESSIONTYPE);
	}
	
    /**
     * Removes all values of property CompressionType	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCompressionType() {
		Base.removeAll(this.model, this.getResource(), COMPRESSIONTYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a4a9e8b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a4a9e8b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCount() {
		return Base.has(this.model, this.getResource(), COUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a4a9e8b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a4a9e8b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCount( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COUNT);
	}

     /**
     * Get all values of property Count as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCount_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COUNT);
	}
	
    /**
     * Get all values of property Count as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCount_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COUNT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Count as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCount_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COUNT);
	}

    /**
     * Get all values of property Count as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCount_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COUNT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Count     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COUNT, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Count as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllCount_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COUNT, java.lang.Integer.class);
	}

    /**
     * Get all values of property Count     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllCount() {
		return Base.getAll(this.model, this.getResource(), COUNT, java.lang.Integer.class);
	}

    /**
     * Get all values of property Count as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllCount_as() {
		return Base.getAll_as(this.model, this.getResource(), COUNT, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Count as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COUNT, value);
	}
	
    /**
     * Adds a value to property Count as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COUNT, value);
	}
    /**
     * Adds a value to property Count from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, COUNT, value);
	}
	
    /**
     * Adds a value to property Count from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCount(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), COUNT, value);
	}
  

    /**
     * Sets a value of property Count from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COUNT, value);
	}
	
    /**
     * Sets a value of property Count from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COUNT, value);
	}
    /**
     * Sets a value of property Count from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, COUNT, value);
	}
	
    /**
     * Sets a value of property Count from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCount(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), COUNT, value);
	}
  


    /**
     * Removes a value of property Count as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COUNT, value);
	}
	
    /**
     * Removes a value of property Count as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COUNT, value);
	}
    /**
     * Removes a value of property Count given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, COUNT, value);
	}
	
    /**
     * Removes a value of property Count given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCount(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), COUNT, value);
	}
  
    /**
     * Removes all values of property Count     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COUNT);
	}
	
    /**
     * Removes all values of property Count	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCount() {
		Base.removeAll(this.model, this.getResource(), COUNT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fabbb4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fabbb4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDuration() {
		return Base.has(this.model, this.getResource(), DURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fabbb4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fabbb4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDuration( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DURATION);
	}

    /**
     * Get single value of property Duration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getDuration_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, DURATION);
	}
	
    /**
     * Get single value of property Duration as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getDuration_asNode() {
		return Base.get_asNode(this.model, this.getResource(), DURATION);
	}
     /**
     * Get single value of property Duration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.xmlschema.Duration getDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.xmlschema.Duration) Base.get(model, instanceResource, DURATION, eu.dime.ps.semantic.model.xmlschema.Duration.class);
	}
	
    /**
     * Get single value of property Duration  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.xmlschema.Duration getDuration() {
		return (eu.dime.ps.semantic.model.xmlschema.Duration) Base.get(this.model, this.getResource(), DURATION, eu.dime.ps.semantic.model.xmlschema.Duration.class);
	}
  
    /**
     * Adds a value to property Duration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, DURATION, value, 1);
	}
	
    /**
     * Adds a value to property Duration as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addDuration( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DURATION, value, 1);
	}
    /**
     * Adds a value to property Duration from an instance of Duration 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.xmlschema.Duration value)
    throws CardinalityException {
		Base.add(model, instanceResource, DURATION, value, 1);
	}
	
    /**
     * Adds a value to property Duration from an instance of Duration 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addDuration(eu.dime.ps.semantic.model.xmlschema.Duration value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), DURATION, value, 1);
	}
 
 

    /**
     * Sets a value of property Duration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDuration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DURATION, value);
	}
	
    /**
     * Sets a value of property Duration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDuration( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DURATION, value);
	}
    /**
     * Sets a value of property Duration from an instance of Duration 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.set(model, instanceResource, DURATION, value);
	}
	
    /**
     * Sets a value of property Duration from an instance of Duration 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDuration(eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.set(this.model, this.getResource(), DURATION, value);
	}
  


    /**
     * Removes a value of property Duration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDuration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DURATION, value);
	}
	
    /**
     * Removes a value of property Duration as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDuration( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DURATION, value);
	}
    /**
     * Removes a value of property Duration given as an instance of Duration 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDuration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.remove(model, instanceResource, DURATION, value);
	}
	
    /**
     * Removes a value of property Duration given as an instance of Duration 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDuration(eu.dime.ps.semantic.model.xmlschema.Duration value) {
		Base.remove(this.model, this.getResource(), DURATION, value);
	}
  
    /**
     * Removes all values of property Duration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDuration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DURATION);
	}
	
    /**
     * Removes all values of property Duration	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDuration() {
		Base.removeAll(this.model, this.getResource(), DURATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52a34c8c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGenre(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENRE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52a34c8c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGenre() {
		return Base.has(this.model, this.getResource(), GENRE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52a34c8c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGenre(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENRE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@52a34c8c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGenre( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENRE);
	}

     /**
     * Get all values of property Genre as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenre_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GENRE);
	}
	
    /**
     * Get all values of property Genre as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenre_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENRE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Genre as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenre_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GENRE);
	}

    /**
     * Get all values of property Genre as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGenre_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GENRE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Genre     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGenre(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GENRE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Genre as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGenre_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GENRE, java.lang.String.class);
	}

    /**
     * Get all values of property Genre     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGenre() {
		return Base.getAll(this.model, this.getResource(), GENRE, java.lang.String.class);
	}

    /**
     * Get all values of property Genre as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGenre_as() {
		return Base.getAll_as(this.model, this.getResource(), GENRE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Genre as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGenre(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GENRE, value);
	}
	
    /**
     * Adds a value to property Genre as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGenre( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GENRE, value);
	}
    /**
     * Adds a value to property Genre from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGenre(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GENRE, value);
	}
	
    /**
     * Adds a value to property Genre from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGenre(java.lang.String value) {
		Base.add(this.model, this.getResource(), GENRE, value);
	}
  

    /**
     * Sets a value of property Genre from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGenre( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENRE, value);
	}
	
    /**
     * Sets a value of property Genre from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGenre( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENRE, value);
	}
    /**
     * Sets a value of property Genre from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGenre(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GENRE, value);
	}
	
    /**
     * Sets a value of property Genre from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGenre(java.lang.String value) {
		Base.set(this.model, this.getResource(), GENRE, value);
	}
  


    /**
     * Removes a value of property Genre as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGenre( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENRE, value);
	}
	
    /**
     * Removes a value of property Genre as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGenre( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENRE, value);
	}
    /**
     * Removes a value of property Genre given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGenre(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GENRE, value);
	}
	
    /**
     * Removes a value of property Genre given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGenre(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GENRE, value);
	}
  
    /**
     * Removes all values of property Genre     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGenre( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENRE);
	}
	
    /**
     * Removes all values of property Genre	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGenre() {
		Base.removeAll(this.model, this.getResource(), GENRE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@717ec345 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMediaStream(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MEDIASTREAM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@717ec345 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMediaStream() {
		return Base.has(this.model, this.getResource(), MEDIASTREAM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@717ec345 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMediaStream(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MEDIASTREAM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@717ec345 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMediaStream( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MEDIASTREAM);
	}

     /**
     * Get all values of property MediaStream as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMediaStream_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MEDIASTREAM);
	}
	
    /**
     * Get all values of property MediaStream as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMediaStream_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MEDIASTREAM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MediaStream as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMediaStream_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MEDIASTREAM);
	}

    /**
     * Get all values of property MediaStream as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMediaStream_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MEDIASTREAM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MediaStream     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllMediaStream(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MEDIASTREAM, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
	
    /**
     * Get all values of property MediaStream as a ReactorResult of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllMediaStream_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MEDIASTREAM, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property MediaStream     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllMediaStream() {
		return Base.getAll(this.model, this.getResource(), MEDIASTREAM, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property MediaStream as a ReactorResult of DataObject 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllMediaStream_as() {
		return Base.getAll_as(this.model, this.getResource(), MEDIASTREAM, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
 
    /**
     * Adds a value to property MediaStream as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMediaStream(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MEDIASTREAM, value);
	}
	
    /**
     * Adds a value to property MediaStream as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMediaStream( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MEDIASTREAM, value);
	}
    /**
     * Adds a value to property MediaStream from an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMediaStream(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(model, instanceResource, MEDIASTREAM, value);
	}
	
    /**
     * Adds a value to property MediaStream from an instance of DataObject 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMediaStream(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(this.model, this.getResource(), MEDIASTREAM, value);
	}
  

    /**
     * Sets a value of property MediaStream from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMediaStream( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MEDIASTREAM, value);
	}
	
    /**
     * Sets a value of property MediaStream from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMediaStream( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MEDIASTREAM, value);
	}
    /**
     * Sets a value of property MediaStream from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMediaStream(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(model, instanceResource, MEDIASTREAM, value);
	}
	
    /**
     * Sets a value of property MediaStream from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMediaStream(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(this.model, this.getResource(), MEDIASTREAM, value);
	}
  


    /**
     * Removes a value of property MediaStream as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMediaStream( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MEDIASTREAM, value);
	}
	
    /**
     * Removes a value of property MediaStream as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMediaStream( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MEDIASTREAM, value);
	}
    /**
     * Removes a value of property MediaStream given as an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMediaStream(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(model, instanceResource, MEDIASTREAM, value);
	}
	
    /**
     * Removes a value of property MediaStream given as an instance of DataObject 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMediaStream(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(this.model, this.getResource(), MEDIASTREAM, value);
	}
  
    /**
     * Removes all values of property MediaStream     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMediaStream( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MEDIASTREAM);
	}
	
    /**
     * Removes all values of property MediaStream	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMediaStream() {
		Base.removeAll(this.model, this.getResource(), MEDIASTREAM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@580b0f1e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@580b0f1e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRate() {
		return Base.has(this.model, this.getResource(), RATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@580b0f1e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@580b0f1e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RATE);
	}

     /**
     * Get all values of property Rate as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RATE);
	}
	
    /**
     * Get all values of property Rate as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Rate as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RATE);
	}

    /**
     * Get all values of property Rate as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Rate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RATE, java.lang.Float.class);
	}
	
    /**
     * Get all values of property Rate as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllRate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RATE, java.lang.Float.class);
	}

    /**
     * Get all values of property Rate     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllRate() {
		return Base.getAll(this.model, this.getResource(), RATE, java.lang.Float.class);
	}

    /**
     * Get all values of property Rate as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllRate_as() {
		return Base.getAll_as(this.model, this.getResource(), RATE, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property Rate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RATE, value);
	}
	
    /**
     * Adds a value to property Rate as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RATE, value);
	}
    /**
     * Adds a value to property Rate from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, RATE, value);
	}
	
    /**
     * Adds a value to property Rate from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRate(java.lang.Float value) {
		Base.add(this.model, this.getResource(), RATE, value);
	}
  

    /**
     * Sets a value of property Rate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RATE, value);
	}
	
    /**
     * Sets a value of property Rate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RATE, value);
	}
    /**
     * Sets a value of property Rate from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, RATE, value);
	}
	
    /**
     * Sets a value of property Rate from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRate(java.lang.Float value) {
		Base.set(this.model, this.getResource(), RATE, value);
	}
  


    /**
     * Removes a value of property Rate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RATE, value);
	}
	
    /**
     * Removes a value of property Rate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RATE, value);
	}
    /**
     * Removes a value of property Rate given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, RATE, value);
	}
	
    /**
     * Removes a value of property Rate given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRate(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), RATE, value);
	}
  
    /**
     * Removes all values of property Rate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RATE);
	}
	
    /**
     * Removes all values of property Rate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRate() {
		Base.removeAll(this.model, this.getResource(), RATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66cba1fa has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasReleaseDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELEASEDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66cba1fa has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasReleaseDate() {
		return Base.has(this.model, this.getResource(), RELEASEDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66cba1fa has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasReleaseDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELEASEDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66cba1fa has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasReleaseDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELEASEDATE);
	}

    /**
     * Get single value of property ReleaseDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getReleaseDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, RELEASEDATE);
	}
	
    /**
     * Get single value of property ReleaseDate as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getReleaseDate_asNode() {
		return Base.get_asNode(this.model, this.getResource(), RELEASEDATE);
	}
     /**
     * Get single value of property ReleaseDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getReleaseDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, RELEASEDATE, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property ReleaseDate  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getReleaseDate() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), RELEASEDATE, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property ReleaseDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addReleaseDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, RELEASEDATE, value, 1);
	}
	
    /**
     * Adds a value to property ReleaseDate as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addReleaseDate( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), RELEASEDATE, value, 1);
	}
    /**
     * Adds a value to property ReleaseDate from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addReleaseDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, RELEASEDATE, value, 1);
	}
	
    /**
     * Adds a value to property ReleaseDate from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addReleaseDate(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), RELEASEDATE, value, 1);
	}
 
 

    /**
     * Sets a value of property ReleaseDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setReleaseDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELEASEDATE, value);
	}
	
    /**
     * Sets a value of property ReleaseDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setReleaseDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELEASEDATE, value);
	}
    /**
     * Sets a value of property ReleaseDate from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setReleaseDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, RELEASEDATE, value);
	}
	
    /**
     * Sets a value of property ReleaseDate from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setReleaseDate(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), RELEASEDATE, value);
	}
  


    /**
     * Removes a value of property ReleaseDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeReleaseDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELEASEDATE, value);
	}
	
    /**
     * Removes a value of property ReleaseDate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeReleaseDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELEASEDATE, value);
	}
    /**
     * Removes a value of property ReleaseDate given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeReleaseDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, RELEASEDATE, value);
	}
	
    /**
     * Removes a value of property ReleaseDate given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeReleaseDate(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), RELEASEDATE, value);
	}
  
    /**
     * Removes all values of property ReleaseDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllReleaseDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELEASEDATE);
	}
	
    /**
     * Removes all values of property ReleaseDate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllReleaseDate() {
		Base.removeAll(this.model, this.getResource(), RELEASEDATE);
	}
 }