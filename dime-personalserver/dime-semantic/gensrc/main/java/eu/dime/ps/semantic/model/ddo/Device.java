/*
* Copyright 2013 by the digital.me project (http://www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.ddo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> DeviceMode </li>
 *   <li> DeviceName </li>
 *   <li> KnownNetwork </li>
 *   <li> LiveContext </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Device extends eu.dime.ps.semantic.model.nie.DataSource {

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#Device */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#Device", false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#deviceMode */
    @SuppressWarnings("hiding")
	public static final URI DEVICEMODE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#deviceMode",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#deviceName */
    @SuppressWarnings("hiding")
	public static final URI DEVICENAME = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#deviceName",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#knownNetwork */
    @SuppressWarnings("hiding")
	public static final URI KNOWNNETWORK = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#knownNetwork",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasLiveContext */
    @SuppressWarnings("hiding")
	public static final URI LIVECONTEXT = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasLiveContext",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#deviceMode",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#deviceName",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#knownNetwork",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasLiveContext",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Device (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Device (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Device (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Device (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Device (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Device  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Device  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Device.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2011/10/05/ddo#Device).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Device> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Device.class );
	}

    /**
	 * Remove rdf:type Device from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'RecordedBy' to this Device instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRecordedBy_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.dcon.Element.RECORDEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'RecordedBy' to this Device instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRecordedBy_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.dcon.Element.RECORDEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'RecordedBy' to this Device instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRecordedBy_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.dcon.Element.RECORDEDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SourceDevice' to this Device instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSourceDevice_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.ddo.Bluetooth.SOURCEDEVICE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SourceDevice' to this Device instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSourceDevice_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.ddo.Bluetooth.SOURCEDEVICE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SourceDevice' to this Device instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSourceDevice_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.ddo.Bluetooth.SOURCEDEVICE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Owns' to this Device instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOwns_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.pimo.Person.OWNS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Owns' to this Device instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOwns_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.pimo.Person.OWNS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Owns' to this Device instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllOwns_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.pimo.Person.OWNS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddaf92 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDeviceMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEVICEMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddaf92 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDeviceMode() {
		return Base.has(this.model, this.getResource(), DEVICEMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddaf92 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDeviceMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEVICEMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ddaf92 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDeviceMode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEVICEMODE);
	}

     /**
     * Get all values of property DeviceMode as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDeviceMode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DEVICEMODE);
	}
	
    /**
     * Get all values of property DeviceMode as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDeviceMode_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEVICEMODE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DeviceMode as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDeviceMode_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DEVICEMODE);
	}

    /**
     * Get all values of property DeviceMode as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDeviceMode_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DEVICEMODE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DeviceMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.ddo.Mode> getAllDeviceMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DEVICEMODE, eu.dime.ps.semantic.model.ddo.Mode.class);
	}
	
    /**
     * Get all values of property DeviceMode as a ReactorResult of Mode 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.ddo.Mode> getAllDeviceMode_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEVICEMODE, eu.dime.ps.semantic.model.ddo.Mode.class);
	}

    /**
     * Get all values of property DeviceMode     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.ddo.Mode> getAllDeviceMode() {
		return Base.getAll(this.model, this.getResource(), DEVICEMODE, eu.dime.ps.semantic.model.ddo.Mode.class);
	}

    /**
     * Get all values of property DeviceMode as a ReactorResult of Mode 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.ddo.Mode> getAllDeviceMode_as() {
		return Base.getAll_as(this.model, this.getResource(), DEVICEMODE, eu.dime.ps.semantic.model.ddo.Mode.class);
	}
 
    /**
     * Adds a value to property DeviceMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDeviceMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DEVICEMODE, value);
	}
	
    /**
     * Adds a value to property DeviceMode as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDeviceMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DEVICEMODE, value);
	}
    /**
     * Adds a value to property DeviceMode from an instance of Mode 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDeviceMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ddo.Mode value) {
		Base.add(model, instanceResource, DEVICEMODE, value);
	}
	
    /**
     * Adds a value to property DeviceMode from an instance of Mode 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDeviceMode(eu.dime.ps.semantic.model.ddo.Mode value) {
		Base.add(this.model, this.getResource(), DEVICEMODE, value);
	}
  

    /**
     * Sets a value of property DeviceMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDeviceMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEVICEMODE, value);
	}
	
    /**
     * Sets a value of property DeviceMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDeviceMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEVICEMODE, value);
	}
    /**
     * Sets a value of property DeviceMode from an instance of Mode 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDeviceMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ddo.Mode value) {
		Base.set(model, instanceResource, DEVICEMODE, value);
	}
	
    /**
     * Sets a value of property DeviceMode from an instance of Mode 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDeviceMode(eu.dime.ps.semantic.model.ddo.Mode value) {
		Base.set(this.model, this.getResource(), DEVICEMODE, value);
	}
  


    /**
     * Removes a value of property DeviceMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDeviceMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEVICEMODE, value);
	}
	
    /**
     * Removes a value of property DeviceMode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDeviceMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEVICEMODE, value);
	}
    /**
     * Removes a value of property DeviceMode given as an instance of Mode 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDeviceMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ddo.Mode value) {
		Base.remove(model, instanceResource, DEVICEMODE, value);
	}
	
    /**
     * Removes a value of property DeviceMode given as an instance of Mode 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDeviceMode(eu.dime.ps.semantic.model.ddo.Mode value) {
		Base.remove(this.model, this.getResource(), DEVICEMODE, value);
	}
  
    /**
     * Removes all values of property DeviceMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDeviceMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEVICEMODE);
	}
	
    /**
     * Removes all values of property DeviceMode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDeviceMode() {
		Base.removeAll(this.model, this.getResource(), DEVICEMODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a4c5149 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDeviceName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEVICENAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a4c5149 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDeviceName() {
		return Base.has(this.model, this.getResource(), DEVICENAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a4c5149 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDeviceName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEVICENAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a4c5149 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDeviceName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEVICENAME);
	}

     /**
     * Get all values of property DeviceName as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDeviceName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DEVICENAME);
	}
	
    /**
     * Get all values of property DeviceName as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDeviceName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEVICENAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DeviceName as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDeviceName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DEVICENAME);
	}

    /**
     * Get all values of property DeviceName as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDeviceName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DEVICENAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DeviceName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllDeviceName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DEVICENAME, java.lang.String.class);
	}
	
    /**
     * Get all values of property DeviceName as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllDeviceName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEVICENAME, java.lang.String.class);
	}

    /**
     * Get all values of property DeviceName     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllDeviceName() {
		return Base.getAll(this.model, this.getResource(), DEVICENAME, java.lang.String.class);
	}

    /**
     * Get all values of property DeviceName as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllDeviceName_as() {
		return Base.getAll_as(this.model, this.getResource(), DEVICENAME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property DeviceName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDeviceName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DEVICENAME, value);
	}
	
    /**
     * Adds a value to property DeviceName as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDeviceName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DEVICENAME, value);
	}
    /**
     * Adds a value to property DeviceName from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDeviceName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, DEVICENAME, value);
	}
	
    /**
     * Adds a value to property DeviceName from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDeviceName(java.lang.String value) {
		Base.add(this.model, this.getResource(), DEVICENAME, value);
	}
  

    /**
     * Sets a value of property DeviceName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDeviceName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEVICENAME, value);
	}
	
    /**
     * Sets a value of property DeviceName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDeviceName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEVICENAME, value);
	}
    /**
     * Sets a value of property DeviceName from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDeviceName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, DEVICENAME, value);
	}
	
    /**
     * Sets a value of property DeviceName from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDeviceName(java.lang.String value) {
		Base.set(this.model, this.getResource(), DEVICENAME, value);
	}
  


    /**
     * Removes a value of property DeviceName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDeviceName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEVICENAME, value);
	}
	
    /**
     * Removes a value of property DeviceName as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDeviceName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEVICENAME, value);
	}
    /**
     * Removes a value of property DeviceName given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDeviceName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, DEVICENAME, value);
	}
	
    /**
     * Removes a value of property DeviceName given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDeviceName(java.lang.String value) {
		Base.remove(this.model, this.getResource(), DEVICENAME, value);
	}
  
    /**
     * Removes all values of property DeviceName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDeviceName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEVICENAME);
	}
	
    /**
     * Removes all values of property DeviceName	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDeviceName() {
		Base.removeAll(this.model, this.getResource(), DEVICENAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36fe468f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasKnownNetwork(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, KNOWNNETWORK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36fe468f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasKnownNetwork() {
		return Base.has(this.model, this.getResource(), KNOWNNETWORK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36fe468f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasKnownNetwork(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, KNOWNNETWORK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@36fe468f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasKnownNetwork( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), KNOWNNETWORK);
	}

     /**
     * Get all values of property KnownNetwork as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllKnownNetwork_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, KNOWNNETWORK);
	}
	
    /**
     * Get all values of property KnownNetwork as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllKnownNetwork_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, KNOWNNETWORK, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property KnownNetwork as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllKnownNetwork_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), KNOWNNETWORK);
	}

    /**
     * Get all values of property KnownNetwork as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllKnownNetwork_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), KNOWNNETWORK, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property KnownNetwork     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.ddo.Network> getAllKnownNetwork(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, KNOWNNETWORK, eu.dime.ps.semantic.model.ddo.Network.class);
	}
	
    /**
     * Get all values of property KnownNetwork as a ReactorResult of Network 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.ddo.Network> getAllKnownNetwork_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, KNOWNNETWORK, eu.dime.ps.semantic.model.ddo.Network.class);
	}

    /**
     * Get all values of property KnownNetwork     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.ddo.Network> getAllKnownNetwork() {
		return Base.getAll(this.model, this.getResource(), KNOWNNETWORK, eu.dime.ps.semantic.model.ddo.Network.class);
	}

    /**
     * Get all values of property KnownNetwork as a ReactorResult of Network 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.ddo.Network> getAllKnownNetwork_as() {
		return Base.getAll_as(this.model, this.getResource(), KNOWNNETWORK, eu.dime.ps.semantic.model.ddo.Network.class);
	}
 
    /**
     * Adds a value to property KnownNetwork as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addKnownNetwork(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, KNOWNNETWORK, value);
	}
	
    /**
     * Adds a value to property KnownNetwork as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addKnownNetwork( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), KNOWNNETWORK, value);
	}
    /**
     * Adds a value to property KnownNetwork from an instance of Network 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addKnownNetwork(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ddo.Network value) {
		Base.add(model, instanceResource, KNOWNNETWORK, value);
	}
	
    /**
     * Adds a value to property KnownNetwork from an instance of Network 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addKnownNetwork(eu.dime.ps.semantic.model.ddo.Network value) {
		Base.add(this.model, this.getResource(), KNOWNNETWORK, value);
	}
  

    /**
     * Sets a value of property KnownNetwork from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setKnownNetwork( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, KNOWNNETWORK, value);
	}
	
    /**
     * Sets a value of property KnownNetwork from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setKnownNetwork( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), KNOWNNETWORK, value);
	}
    /**
     * Sets a value of property KnownNetwork from an instance of Network 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setKnownNetwork(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ddo.Network value) {
		Base.set(model, instanceResource, KNOWNNETWORK, value);
	}
	
    /**
     * Sets a value of property KnownNetwork from an instance of Network 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setKnownNetwork(eu.dime.ps.semantic.model.ddo.Network value) {
		Base.set(this.model, this.getResource(), KNOWNNETWORK, value);
	}
  


    /**
     * Removes a value of property KnownNetwork as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeKnownNetwork( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, KNOWNNETWORK, value);
	}
	
    /**
     * Removes a value of property KnownNetwork as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeKnownNetwork( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), KNOWNNETWORK, value);
	}
    /**
     * Removes a value of property KnownNetwork given as an instance of Network 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeKnownNetwork(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ddo.Network value) {
		Base.remove(model, instanceResource, KNOWNNETWORK, value);
	}
	
    /**
     * Removes a value of property KnownNetwork given as an instance of Network 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeKnownNetwork(eu.dime.ps.semantic.model.ddo.Network value) {
		Base.remove(this.model, this.getResource(), KNOWNNETWORK, value);
	}
  
    /**
     * Removes all values of property KnownNetwork     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllKnownNetwork( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, KNOWNNETWORK);
	}
	
    /**
     * Removes all values of property KnownNetwork	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllKnownNetwork() {
		Base.removeAll(this.model, this.getResource(), KNOWNNETWORK);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@599cf3f6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLiveContext(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LIVECONTEXT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@599cf3f6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLiveContext() {
		return Base.has(this.model, this.getResource(), LIVECONTEXT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@599cf3f6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLiveContext(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LIVECONTEXT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@599cf3f6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLiveContext( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LIVECONTEXT);
	}

     /**
     * Get all values of property LiveContext as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLiveContext_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LIVECONTEXT);
	}
	
    /**
     * Get all values of property LiveContext as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLiveContext_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LIVECONTEXT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property LiveContext as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLiveContext_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LIVECONTEXT);
	}

    /**
     * Get all values of property LiveContext as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLiveContext_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LIVECONTEXT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property LiveContext     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dcon.LiveContext> getAllLiveContext(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LIVECONTEXT, eu.dime.ps.semantic.model.dcon.LiveContext.class);
	}
	
    /**
     * Get all values of property LiveContext as a ReactorResult of LiveContext 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dcon.LiveContext> getAllLiveContext_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LIVECONTEXT, eu.dime.ps.semantic.model.dcon.LiveContext.class);
	}

    /**
     * Get all values of property LiveContext     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dcon.LiveContext> getAllLiveContext() {
		return Base.getAll(this.model, this.getResource(), LIVECONTEXT, eu.dime.ps.semantic.model.dcon.LiveContext.class);
	}

    /**
     * Get all values of property LiveContext as a ReactorResult of LiveContext 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dcon.LiveContext> getAllLiveContext_as() {
		return Base.getAll_as(this.model, this.getResource(), LIVECONTEXT, eu.dime.ps.semantic.model.dcon.LiveContext.class);
	}
 
    /**
     * Adds a value to property LiveContext as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLiveContext(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LIVECONTEXT, value);
	}
	
    /**
     * Adds a value to property LiveContext as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLiveContext( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LIVECONTEXT, value);
	}
    /**
     * Adds a value to property LiveContext from an instance of LiveContext 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLiveContext(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.LiveContext value) {
		Base.add(model, instanceResource, LIVECONTEXT, value);
	}
	
    /**
     * Adds a value to property LiveContext from an instance of LiveContext 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLiveContext(eu.dime.ps.semantic.model.dcon.LiveContext value) {
		Base.add(this.model, this.getResource(), LIVECONTEXT, value);
	}
  

    /**
     * Sets a value of property LiveContext from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLiveContext( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LIVECONTEXT, value);
	}
	
    /**
     * Sets a value of property LiveContext from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLiveContext( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LIVECONTEXT, value);
	}
    /**
     * Sets a value of property LiveContext from an instance of LiveContext 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLiveContext(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.LiveContext value) {
		Base.set(model, instanceResource, LIVECONTEXT, value);
	}
	
    /**
     * Sets a value of property LiveContext from an instance of LiveContext 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLiveContext(eu.dime.ps.semantic.model.dcon.LiveContext value) {
		Base.set(this.model, this.getResource(), LIVECONTEXT, value);
	}
  


    /**
     * Removes a value of property LiveContext as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLiveContext( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LIVECONTEXT, value);
	}
	
    /**
     * Removes a value of property LiveContext as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLiveContext( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LIVECONTEXT, value);
	}
    /**
     * Removes a value of property LiveContext given as an instance of LiveContext 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLiveContext(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.LiveContext value) {
		Base.remove(model, instanceResource, LIVECONTEXT, value);
	}
	
    /**
     * Removes a value of property LiveContext given as an instance of LiveContext 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLiveContext(eu.dime.ps.semantic.model.dcon.LiveContext value) {
		Base.remove(this.model, this.getResource(), LIVECONTEXT, value);
	}
  
    /**
     * Removes all values of property LiveContext     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLiveContext( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LIVECONTEXT);
	}
	
    /**
     * Removes all values of property LiveContext	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLiveContext() {
		Base.removeAll(this.model, this.getResource(), LIVECONTEXT);
	}
 }