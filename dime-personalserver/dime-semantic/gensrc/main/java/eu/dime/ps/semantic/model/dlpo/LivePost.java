package eu.dime.ps.semantic.model.dlpo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.CardinalityException;
import org.ontoware.rdfreactor.runtime.ReactorResult;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> DefiningResource </li>
 *   <li> IsComposedOf </li>
 *   <li> RelatedResource </li>
 *   <li> Reply </li>
 *   <li> ReplyOf </li>
 *   <li> Repost </li>
 *   <li> RepostOf </li>
 *   <li> TextualContent </li>
 *   <li> Timestamp </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class LivePost extends eu.dime.ps.semantic.model.nie.InformationElement {

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#LivePost */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#LivePost", false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#definingResource */
    @SuppressWarnings("hiding")
	public static final URI DEFININGRESOURCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#definingResource",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#isComposedOf */
    @SuppressWarnings("hiding")
	public static final URI ISCOMPOSEDOF = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#isComposedOf",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#relatedResource */
    @SuppressWarnings("hiding")
	public static final URI RELATEDRESOURCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#relatedResource",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#hasReply */
    @SuppressWarnings("hiding")
	public static final URI REPLY = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#hasReply",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#replyOf */
    @SuppressWarnings("hiding")
	public static final URI REPLYOF = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#replyOf",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#hasRepost */
    @SuppressWarnings("hiding")
	public static final URI REPOST = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#hasRepost",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#repostOf */
    @SuppressWarnings("hiding")
	public static final URI REPOSTOF = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#repostOf",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#textualContent */
    @SuppressWarnings("hiding")
	public static final URI TEXTUALCONTENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#textualContent",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#timestamp */
    @SuppressWarnings("hiding")
	public static final URI TIMESTAMP = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#timestamp",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#definingResource",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#isComposedOf",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#relatedResource",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#hasReply",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#replyOf",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#hasRepost",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#repostOf",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#textualContent",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#timestamp",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected LivePost (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public LivePost (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public LivePost (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public LivePost (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public LivePost (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of LivePost  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static LivePost  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, LivePost.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2011/10/05/dlpo#LivePost).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends LivePost> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, LivePost.class );
	}

    /**
	 * Remove rdf:type LivePost from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'IsComposedOf' to this LivePost instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsComposedOf_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.dlpo.LivePost.ISCOMPOSEDOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'IsComposedOf' to this LivePost instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsComposedOf_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.dlpo.LivePost.ISCOMPOSEDOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'IsComposedOf' to this LivePost instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllIsComposedOf_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.dlpo.LivePost.ISCOMPOSEDOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Reply' to this LivePost instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReply_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.dlpo.LivePost.REPLY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Reply' to this LivePost instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReply_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.dlpo.LivePost.REPLY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Reply' to this LivePost instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllReply_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.dlpo.LivePost.REPLY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ReplyOf' to this LivePost instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReplyOf_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.dlpo.LivePost.REPLYOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ReplyOf' to this LivePost instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReplyOf_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.dlpo.LivePost.REPLYOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ReplyOf' to this LivePost instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllReplyOf_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.dlpo.LivePost.REPLYOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Repost' to this LivePost instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRepost_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.dlpo.LivePost.REPOST, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Repost' to this LivePost instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRepost_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.dlpo.LivePost.REPOST, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Repost' to this LivePost instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRepost_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.dlpo.LivePost.REPOST, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'RepostOf' to this LivePost instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRepostOf_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.dlpo.LivePost.REPOSTOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'RepostOf' to this LivePost instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRepostOf_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.dlpo.LivePost.REPOSTOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'RepostOf' to this LivePost instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRepostOf_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.dlpo.LivePost.REPOSTOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b8e78be has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDefiningResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEFININGRESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b8e78be has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDefiningResource() {
		return Base.has(this.model, this.getResource(), DEFININGRESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b8e78be has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDefiningResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEFININGRESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b8e78be has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDefiningResource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEFININGRESOURCE);
	}

     /**
     * Get all values of property DefiningResource as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDefiningResource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DEFININGRESOURCE);
	}
	
    /**
     * Get all values of property DefiningResource as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDefiningResource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEFININGRESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DefiningResource as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDefiningResource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DEFININGRESOURCE);
	}

    /**
     * Get all values of property DefiningResource as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDefiningResource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DEFININGRESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DefiningResource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllDefiningResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DEFININGRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property DefiningResource as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllDefiningResource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEFININGRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property DefiningResource     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllDefiningResource() {
		return Base.getAll(this.model, this.getResource(), DEFININGRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property DefiningResource as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllDefiningResource_as() {
		return Base.getAll_as(this.model, this.getResource(), DEFININGRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property DefiningResource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDefiningResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DEFININGRESOURCE, value);
	}
	
    /**
     * Adds a value to property DefiningResource as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDefiningResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DEFININGRESOURCE, value);
	}
    /**
     * Adds a value to property DefiningResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDefiningResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, DEFININGRESOURCE, value);
	}
	
    /**
     * Adds a value to property DefiningResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDefiningResource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), DEFININGRESOURCE, value);
	}
  

    /**
     * Sets a value of property DefiningResource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDefiningResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEFININGRESOURCE, value);
	}
	
    /**
     * Sets a value of property DefiningResource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDefiningResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEFININGRESOURCE, value);
	}
    /**
     * Sets a value of property DefiningResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDefiningResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, DEFININGRESOURCE, value);
	}
	
    /**
     * Sets a value of property DefiningResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDefiningResource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), DEFININGRESOURCE, value);
	}
  


    /**
     * Removes a value of property DefiningResource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDefiningResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEFININGRESOURCE, value);
	}
	
    /**
     * Removes a value of property DefiningResource as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDefiningResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEFININGRESOURCE, value);
	}
    /**
     * Removes a value of property DefiningResource given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDefiningResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, DEFININGRESOURCE, value);
	}
	
    /**
     * Removes a value of property DefiningResource given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDefiningResource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), DEFININGRESOURCE, value);
	}
  
    /**
     * Removes all values of property DefiningResource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDefiningResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEFININGRESOURCE);
	}
	
    /**
     * Removes all values of property DefiningResource	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDefiningResource() {
		Base.removeAll(this.model, this.getResource(), DEFININGRESOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e821502 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIsComposedOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISCOMPOSEDOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e821502 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIsComposedOf() {
		return Base.has(this.model, this.getResource(), ISCOMPOSEDOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e821502 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIsComposedOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISCOMPOSEDOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e821502 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIsComposedOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISCOMPOSEDOF);
	}

     /**
     * Get all values of property IsComposedOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsComposedOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISCOMPOSEDOF);
	}
	
    /**
     * Get all values of property IsComposedOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsComposedOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISCOMPOSEDOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IsComposedOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsComposedOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISCOMPOSEDOF);
	}

    /**
     * Get all values of property IsComposedOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsComposedOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISCOMPOSEDOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IsComposedOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dlpo.LivePost> getAllIsComposedOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISCOMPOSEDOF, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}
	
    /**
     * Get all values of property IsComposedOf as a ReactorResult of LivePost 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dlpo.LivePost> getAllIsComposedOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISCOMPOSEDOF, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}

    /**
     * Get all values of property IsComposedOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dlpo.LivePost> getAllIsComposedOf() {
		return Base.getAll(this.model, this.getResource(), ISCOMPOSEDOF, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}

    /**
     * Get all values of property IsComposedOf as a ReactorResult of LivePost 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dlpo.LivePost> getAllIsComposedOf_as() {
		return Base.getAll_as(this.model, this.getResource(), ISCOMPOSEDOF, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}
 
    /**
     * Adds a value to property IsComposedOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIsComposedOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISCOMPOSEDOF, value);
	}
	
    /**
     * Adds a value to property IsComposedOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIsComposedOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISCOMPOSEDOF, value);
	}
    /**
     * Adds a value to property IsComposedOf from an instance of LivePost 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIsComposedOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.add(model, instanceResource, ISCOMPOSEDOF, value);
	}
	
    /**
     * Adds a value to property IsComposedOf from an instance of LivePost 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIsComposedOf(eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.add(this.model, this.getResource(), ISCOMPOSEDOF, value);
	}
  

    /**
     * Sets a value of property IsComposedOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIsComposedOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISCOMPOSEDOF, value);
	}
	
    /**
     * Sets a value of property IsComposedOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIsComposedOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISCOMPOSEDOF, value);
	}
    /**
     * Sets a value of property IsComposedOf from an instance of LivePost 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIsComposedOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.set(model, instanceResource, ISCOMPOSEDOF, value);
	}
	
    /**
     * Sets a value of property IsComposedOf from an instance of LivePost 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIsComposedOf(eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.set(this.model, this.getResource(), ISCOMPOSEDOF, value);
	}
  


    /**
     * Removes a value of property IsComposedOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIsComposedOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISCOMPOSEDOF, value);
	}
	
    /**
     * Removes a value of property IsComposedOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIsComposedOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISCOMPOSEDOF, value);
	}
    /**
     * Removes a value of property IsComposedOf given as an instance of LivePost 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIsComposedOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.remove(model, instanceResource, ISCOMPOSEDOF, value);
	}
	
    /**
     * Removes a value of property IsComposedOf given as an instance of LivePost 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIsComposedOf(eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.remove(this.model, this.getResource(), ISCOMPOSEDOF, value);
	}
  
    /**
     * Removes all values of property IsComposedOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIsComposedOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISCOMPOSEDOF);
	}
	
    /**
     * Removes all values of property IsComposedOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIsComposedOf() {
		Base.removeAll(this.model, this.getResource(), ISCOMPOSEDOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@560eb78f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRelatedResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELATEDRESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@560eb78f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRelatedResource() {
		return Base.has(this.model, this.getResource(), RELATEDRESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@560eb78f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRelatedResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELATEDRESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@560eb78f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRelatedResource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATEDRESOURCE);
	}

     /**
     * Get all values of property RelatedResource as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedResource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATEDRESOURCE);
	}
	
    /**
     * Get all values of property RelatedResource as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedResource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDRESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RelatedResource as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedResource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATEDRESOURCE);
	}

    /**
     * Get all values of property RelatedResource as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedResource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDRESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RelatedResource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllRelatedResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATEDRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property RelatedResource as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllRelatedResource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property RelatedResource     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllRelatedResource() {
		return Base.getAll(this.model, this.getResource(), RELATEDRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property RelatedResource as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllRelatedResource_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDRESOURCE, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property RelatedResource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRelatedResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RELATEDRESOURCE, value);
	}
	
    /**
     * Adds a value to property RelatedResource as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRelatedResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RELATEDRESOURCE, value);
	}
    /**
     * Adds a value to property RelatedResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRelatedResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, RELATEDRESOURCE, value);
	}
	
    /**
     * Adds a value to property RelatedResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRelatedResource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), RELATEDRESOURCE, value);
	}
  

    /**
     * Sets a value of property RelatedResource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRelatedResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELATEDRESOURCE, value);
	}
	
    /**
     * Sets a value of property RelatedResource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRelatedResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELATEDRESOURCE, value);
	}
    /**
     * Sets a value of property RelatedResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRelatedResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, RELATEDRESOURCE, value);
	}
	
    /**
     * Sets a value of property RelatedResource from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRelatedResource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), RELATEDRESOURCE, value);
	}
  


    /**
     * Removes a value of property RelatedResource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRelatedResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELATEDRESOURCE, value);
	}
	
    /**
     * Removes a value of property RelatedResource as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRelatedResource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELATEDRESOURCE, value);
	}
    /**
     * Removes a value of property RelatedResource given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRelatedResource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, RELATEDRESOURCE, value);
	}
	
    /**
     * Removes a value of property RelatedResource given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRelatedResource(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), RELATEDRESOURCE, value);
	}
  
    /**
     * Removes all values of property RelatedResource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRelatedResource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATEDRESOURCE);
	}
	
    /**
     * Removes all values of property RelatedResource	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRelatedResource() {
		Base.removeAll(this.model, this.getResource(), RELATEDRESOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c97e511 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REPLY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c97e511 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasReply() {
		return Base.has(this.model, this.getResource(), REPLY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c97e511 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REPLY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3c97e511 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasReply( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REPLY);
	}

     /**
     * Get all values of property Reply as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReply_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REPLY);
	}
	
    /**
     * Get all values of property Reply as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReply_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPLY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Reply as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReply_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REPLY);
	}

    /**
     * Get all values of property Reply as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReply_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REPLY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Reply     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dlpo.LivePost> getAllReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REPLY, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}
	
    /**
     * Get all values of property Reply as a ReactorResult of LivePost 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dlpo.LivePost> getAllReply_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPLY, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}

    /**
     * Get all values of property Reply     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dlpo.LivePost> getAllReply() {
		return Base.getAll(this.model, this.getResource(), REPLY, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}

    /**
     * Get all values of property Reply as a ReactorResult of LivePost 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dlpo.LivePost> getAllReply_as() {
		return Base.getAll_as(this.model, this.getResource(), REPLY, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}
 
    /**
     * Adds a value to property Reply as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REPLY, value);
	}
	
    /**
     * Adds a value to property Reply as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addReply( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REPLY, value);
	}
    /**
     * Adds a value to property Reply from an instance of LivePost 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.add(model, instanceResource, REPLY, value);
	}
	
    /**
     * Adds a value to property Reply from an instance of LivePost 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addReply(eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.add(this.model, this.getResource(), REPLY, value);
	}
  

    /**
     * Sets a value of property Reply from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setReply( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REPLY, value);
	}
	
    /**
     * Sets a value of property Reply from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setReply( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REPLY, value);
	}
    /**
     * Sets a value of property Reply from an instance of LivePost 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.set(model, instanceResource, REPLY, value);
	}
	
    /**
     * Sets a value of property Reply from an instance of LivePost 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setReply(eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.set(this.model, this.getResource(), REPLY, value);
	}
  


    /**
     * Removes a value of property Reply as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeReply( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REPLY, value);
	}
	
    /**
     * Removes a value of property Reply as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeReply( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REPLY, value);
	}
    /**
     * Removes a value of property Reply given as an instance of LivePost 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.remove(model, instanceResource, REPLY, value);
	}
	
    /**
     * Removes a value of property Reply given as an instance of LivePost 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeReply(eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.remove(this.model, this.getResource(), REPLY, value);
	}
  
    /**
     * Removes all values of property Reply     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllReply( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REPLY);
	}
	
    /**
     * Removes all values of property Reply	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllReply() {
		Base.removeAll(this.model, this.getResource(), REPLY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c357f98 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasReplyOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REPLYOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c357f98 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasReplyOf() {
		return Base.has(this.model, this.getResource(), REPLYOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c357f98 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasReplyOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REPLYOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c357f98 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasReplyOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REPLYOF);
	}

     /**
     * Get all values of property ReplyOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReplyOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REPLYOF);
	}
	
    /**
     * Get all values of property ReplyOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReplyOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPLYOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ReplyOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReplyOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REPLYOF);
	}

    /**
     * Get all values of property ReplyOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReplyOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REPLYOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ReplyOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dlpo.LivePost> getAllReplyOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REPLYOF, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}
	
    /**
     * Get all values of property ReplyOf as a ReactorResult of LivePost 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dlpo.LivePost> getAllReplyOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPLYOF, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}

    /**
     * Get all values of property ReplyOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dlpo.LivePost> getAllReplyOf() {
		return Base.getAll(this.model, this.getResource(), REPLYOF, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}

    /**
     * Get all values of property ReplyOf as a ReactorResult of LivePost 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dlpo.LivePost> getAllReplyOf_as() {
		return Base.getAll_as(this.model, this.getResource(), REPLYOF, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}
 
    /**
     * Adds a value to property ReplyOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addReplyOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Adds a value to property ReplyOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addReplyOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REPLYOF, value);
	}
    /**
     * Adds a value to property ReplyOf from an instance of LivePost 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addReplyOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.add(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Adds a value to property ReplyOf from an instance of LivePost 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addReplyOf(eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.add(this.model, this.getResource(), REPLYOF, value);
	}
  

    /**
     * Sets a value of property ReplyOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setReplyOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Sets a value of property ReplyOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setReplyOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REPLYOF, value);
	}
    /**
     * Sets a value of property ReplyOf from an instance of LivePost 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setReplyOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.set(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Sets a value of property ReplyOf from an instance of LivePost 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setReplyOf(eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.set(this.model, this.getResource(), REPLYOF, value);
	}
  


    /**
     * Removes a value of property ReplyOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeReplyOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Removes a value of property ReplyOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeReplyOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REPLYOF, value);
	}
    /**
     * Removes a value of property ReplyOf given as an instance of LivePost 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeReplyOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.remove(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Removes a value of property ReplyOf given as an instance of LivePost 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeReplyOf(eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.remove(this.model, this.getResource(), REPLYOF, value);
	}
  
    /**
     * Removes all values of property ReplyOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllReplyOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REPLYOF);
	}
	
    /**
     * Removes all values of property ReplyOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllReplyOf() {
		Base.removeAll(this.model, this.getResource(), REPLYOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7dd26a3e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRepost(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REPOST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7dd26a3e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRepost() {
		return Base.has(this.model, this.getResource(), REPOST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7dd26a3e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRepost(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REPOST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7dd26a3e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRepost( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REPOST);
	}

     /**
     * Get all values of property Repost as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRepost_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REPOST);
	}
	
    /**
     * Get all values of property Repost as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRepost_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPOST, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Repost as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRepost_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REPOST);
	}

    /**
     * Get all values of property Repost as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRepost_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REPOST, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Repost     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dlpo.LivePost> getAllRepost(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REPOST, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}
	
    /**
     * Get all values of property Repost as a ReactorResult of LivePost 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dlpo.LivePost> getAllRepost_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPOST, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}

    /**
     * Get all values of property Repost     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dlpo.LivePost> getAllRepost() {
		return Base.getAll(this.model, this.getResource(), REPOST, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}

    /**
     * Get all values of property Repost as a ReactorResult of LivePost 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dlpo.LivePost> getAllRepost_as() {
		return Base.getAll_as(this.model, this.getResource(), REPOST, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}
 
    /**
     * Adds a value to property Repost as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRepost(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REPOST, value);
	}
	
    /**
     * Adds a value to property Repost as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRepost( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REPOST, value);
	}
    /**
     * Adds a value to property Repost from an instance of LivePost 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRepost(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.add(model, instanceResource, REPOST, value);
	}
	
    /**
     * Adds a value to property Repost from an instance of LivePost 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRepost(eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.add(this.model, this.getResource(), REPOST, value);
	}
  

    /**
     * Sets a value of property Repost from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRepost( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REPOST, value);
	}
	
    /**
     * Sets a value of property Repost from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRepost( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REPOST, value);
	}
    /**
     * Sets a value of property Repost from an instance of LivePost 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRepost(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.set(model, instanceResource, REPOST, value);
	}
	
    /**
     * Sets a value of property Repost from an instance of LivePost 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRepost(eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.set(this.model, this.getResource(), REPOST, value);
	}
  


    /**
     * Removes a value of property Repost as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRepost( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REPOST, value);
	}
	
    /**
     * Removes a value of property Repost as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRepost( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REPOST, value);
	}
    /**
     * Removes a value of property Repost given as an instance of LivePost 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRepost(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.remove(model, instanceResource, REPOST, value);
	}
	
    /**
     * Removes a value of property Repost given as an instance of LivePost 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRepost(eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.remove(this.model, this.getResource(), REPOST, value);
	}
  
    /**
     * Removes all values of property Repost     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRepost( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REPOST);
	}
	
    /**
     * Removes all values of property Repost	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRepost() {
		Base.removeAll(this.model, this.getResource(), REPOST);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77d59e27 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRepostOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REPOSTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77d59e27 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRepostOf() {
		return Base.has(this.model, this.getResource(), REPOSTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77d59e27 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRepostOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REPOSTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77d59e27 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRepostOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REPOSTOF);
	}

     /**
     * Get all values of property RepostOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRepostOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REPOSTOF);
	}
	
    /**
     * Get all values of property RepostOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRepostOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPOSTOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RepostOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRepostOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REPOSTOF);
	}

    /**
     * Get all values of property RepostOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRepostOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REPOSTOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RepostOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dlpo.LivePost> getAllRepostOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REPOSTOF, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}
	
    /**
     * Get all values of property RepostOf as a ReactorResult of LivePost 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dlpo.LivePost> getAllRepostOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPOSTOF, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}

    /**
     * Get all values of property RepostOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dlpo.LivePost> getAllRepostOf() {
		return Base.getAll(this.model, this.getResource(), REPOSTOF, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}

    /**
     * Get all values of property RepostOf as a ReactorResult of LivePost 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dlpo.LivePost> getAllRepostOf_as() {
		return Base.getAll_as(this.model, this.getResource(), REPOSTOF, eu.dime.ps.semantic.model.dlpo.LivePost.class);
	}
 
    /**
     * Adds a value to property RepostOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRepostOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REPOSTOF, value);
	}
	
    /**
     * Adds a value to property RepostOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRepostOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REPOSTOF, value);
	}
    /**
     * Adds a value to property RepostOf from an instance of LivePost 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRepostOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.add(model, instanceResource, REPOSTOF, value);
	}
	
    /**
     * Adds a value to property RepostOf from an instance of LivePost 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRepostOf(eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.add(this.model, this.getResource(), REPOSTOF, value);
	}
  

    /**
     * Sets a value of property RepostOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRepostOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REPOSTOF, value);
	}
	
    /**
     * Sets a value of property RepostOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRepostOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REPOSTOF, value);
	}
    /**
     * Sets a value of property RepostOf from an instance of LivePost 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRepostOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.set(model, instanceResource, REPOSTOF, value);
	}
	
    /**
     * Sets a value of property RepostOf from an instance of LivePost 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRepostOf(eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.set(this.model, this.getResource(), REPOSTOF, value);
	}
  


    /**
     * Removes a value of property RepostOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRepostOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REPOSTOF, value);
	}
	
    /**
     * Removes a value of property RepostOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRepostOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REPOSTOF, value);
	}
    /**
     * Removes a value of property RepostOf given as an instance of LivePost 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRepostOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.remove(model, instanceResource, REPOSTOF, value);
	}
	
    /**
     * Removes a value of property RepostOf given as an instance of LivePost 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRepostOf(eu.dime.ps.semantic.model.dlpo.LivePost value) {
		Base.remove(this.model, this.getResource(), REPOSTOF, value);
	}
  
    /**
     * Removes all values of property RepostOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRepostOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REPOSTOF);
	}
	
    /**
     * Removes all values of property RepostOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRepostOf() {
		Base.removeAll(this.model, this.getResource(), REPOSTOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78ae3ab6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTextualContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TEXTUALCONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78ae3ab6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTextualContent() {
		return Base.has(this.model, this.getResource(), TEXTUALCONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78ae3ab6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTextualContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TEXTUALCONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78ae3ab6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTextualContent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TEXTUALCONTENT);
	}

     /**
     * Get all values of property TextualContent as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTextualContent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TEXTUALCONTENT);
	}
	
    /**
     * Get all values of property TextualContent as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTextualContent_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TEXTUALCONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TextualContent as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTextualContent_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TEXTUALCONTENT);
	}

    /**
     * Get all values of property TextualContent as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTextualContent_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TEXTUALCONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TextualContent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllTextualContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TEXTUALCONTENT, java.lang.String.class);
	}
	
    /**
     * Get all values of property TextualContent as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllTextualContent_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TEXTUALCONTENT, java.lang.String.class);
	}

    /**
     * Get all values of property TextualContent     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllTextualContent() {
		return Base.getAll(this.model, this.getResource(), TEXTUALCONTENT, java.lang.String.class);
	}

    /**
     * Get all values of property TextualContent as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllTextualContent_as() {
		return Base.getAll_as(this.model, this.getResource(), TEXTUALCONTENT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property TextualContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTextualContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TEXTUALCONTENT, value);
	}
	
    /**
     * Adds a value to property TextualContent as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTextualContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TEXTUALCONTENT, value);
	}
    /**
     * Adds a value to property TextualContent from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTextualContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, TEXTUALCONTENT, value);
	}
	
    /**
     * Adds a value to property TextualContent from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTextualContent(java.lang.String value) {
		Base.add(this.model, this.getResource(), TEXTUALCONTENT, value);
	}
  

    /**
     * Sets a value of property TextualContent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTextualContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TEXTUALCONTENT, value);
	}
	
    /**
     * Sets a value of property TextualContent from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTextualContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TEXTUALCONTENT, value);
	}
    /**
     * Sets a value of property TextualContent from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTextualContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, TEXTUALCONTENT, value);
	}
	
    /**
     * Sets a value of property TextualContent from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTextualContent(java.lang.String value) {
		Base.set(this.model, this.getResource(), TEXTUALCONTENT, value);
	}
  


    /**
     * Removes a value of property TextualContent as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTextualContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TEXTUALCONTENT, value);
	}
	
    /**
     * Removes a value of property TextualContent as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTextualContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TEXTUALCONTENT, value);
	}
    /**
     * Removes a value of property TextualContent given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTextualContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, TEXTUALCONTENT, value);
	}
	
    /**
     * Removes a value of property TextualContent given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTextualContent(java.lang.String value) {
		Base.remove(this.model, this.getResource(), TEXTUALCONTENT, value);
	}
  
    /**
     * Removes all values of property TextualContent     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTextualContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TEXTUALCONTENT);
	}
	
    /**
     * Removes all values of property TextualContent	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTextualContent() {
		Base.removeAll(this.model, this.getResource(), TEXTUALCONTENT);
	}
    /**
    * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ada5bd7 has at least one value set 
    * @param model an RDF2Go model
    * @param resource an RDF2Go resource
    * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
    */
	public static boolean hasTimestamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TIMESTAMP);
	}

   /**
    * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ada5bd7 has at least one value set 
    * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
    */
	public boolean hasTimestamp() {
		return Base.has(this.model, this.getResource(), TIMESTAMP);
	}

   /**
    * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ada5bd7 has the given value (maybe among other values).  
    * @param model an RDF2Go model
    * @param resource an RDF2Go resource
	 * @param value the value to be checked
    * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
    */
	public static boolean hasTimestamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TIMESTAMP);
	}

   /**
    * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ada5bd7 has the given value (maybe among other values).  
	 * @param value the value to be checked
    * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
    */
	public boolean hasTimestamp( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TIMESTAMP);
	}

   /**
    * Get single value of property Timestamp as an RDF2Go node 
    * @param model an RDF2Go model
    * @param resource an RDF2Go resource
    * @return the single value or null if no value is found
    * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
    */
	public static org.ontoware.rdf2go.model.node.Node getTimestamp_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TIMESTAMP);
	}
	
   /**
    * Get single value of property Timestamp as an RDF2Go node 
    * @return the single value or null if no value is found
    * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
    */
	public org.ontoware.rdf2go.model.node.Node getTimestamp_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TIMESTAMP);
	}
    /**
    * Get single value of property Timestamp     * @param model an RDF2Go model
    * @param resource an RDF2Go resource
    * @return the single value or null if no value is found
    * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
    */
	public static java.util.Calendar getTimestamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, TIMESTAMP, java.util.Calendar.class);
	}
	
   /**
    * Get single value of property Timestamp  .
    * This property has maxCardinality=1, that means the property takes only
    * a single value.
    * @return the single value or null if no value is found
    * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
    */
	public java.util.Calendar getTimestamp() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), TIMESTAMP, java.util.Calendar.class);
	}
 
   /**
    * Adds a value to property Timestamp as an RDF2Go node 
    * @param model an RDF2Go model
    * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
    */
	public static void addTimestamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
   throws CardinalityException {
		Base.add(model, instanceResource, TIMESTAMP, value, 1);
	}
	
   /**
    * Adds a value to property Timestamp as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
    */
	public void addTimestamp( org.ontoware.rdf2go.model.node.Node value) 
   throws CardinalityException {
		Base.add(this.model, this.getResource(), TIMESTAMP, value, 1);
	}
   /**
    * Adds a value to property Timestamp from an instance of java.util.Calendar 
    * @param model an RDF2Go model
    * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
    */
	public static void addTimestamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
   throws CardinalityException {
		Base.add(model, instanceResource, TIMESTAMP, value, 1);
	}
	
   /**
    * Adds a value to property Timestamp from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
    */
	public void addTimestamp(java.util.Calendar value) 
   throws CardinalityException {
		Base.add(this.model, this.getResource(), TIMESTAMP, value, 1);
	}



   /**
    * Sets a value of property Timestamp from an RDF2Go node.
    * First, all existing values are removed, then this value is added.
    * Cardinality constraints are not checked, but this method exists only for properties with
    * no minCardinality or minCardinality == 1.
    * @param model an RDF2Go model
    * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
    */
	public static void setTimestamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TIMESTAMP, value);
	}
	
   /**
    * Sets a value of property Timestamp from an RDF2Go node.
    * First, all existing values are removed, then this value is added.
    * Cardinality constraints are not checked, but this method exists only for properties with
    * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
    */
	public void setTimestamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TIMESTAMP, value);
	}
   /**
    * Sets a value of property Timestamp from an instance of java.util.Calendar 
    * First, all existing values are removed, then this value is added.
    * Cardinality constraints are not checked, but this method exists only for properties with
    * no minCardinality or minCardinality == 1.
    * @param model an RDF2Go model
    * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
    */
	public static void setTimestamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, TIMESTAMP, value);
	}
	
   /**
    * Sets a value of property Timestamp from an instance of java.util.Calendar 
    * First, all existing values are removed, then this value is added.
    * Cardinality constraints are not checked, but this method exists only for properties with
    * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
    */
	public void setTimestamp(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), TIMESTAMP, value);
	}
 


   /**
    * Removes a value of property Timestamp as an RDF2Go node 
    * @param model an RDF2Go model
    * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
    */
	public static void removeTimestamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TIMESTAMP, value);
	}
	
   /**
    * Removes a value of property Timestamp as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
    */
	public void removeTimestamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TIMESTAMP, value);
	}
   /**
    * Removes a value of property Timestamp given as an instance of java.util.Calendar 
    * @param model an RDF2Go model
    * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
    */
	public static void removeTimestamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, TIMESTAMP, value);
	}
	
   /**
    * Removes a value of property Timestamp given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
    */
	public void removeTimestamp(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), TIMESTAMP, value);
	}
 
   /**
    * Removes all values of property Timestamp     * @param model an RDF2Go model
    * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
    */
	public static void removeAllTimestamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TIMESTAMP);
	}
	
   /**
    * Removes all values of property Timestamp	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
    */
	public void removeAllTimestamp() {
		Base.removeAll(this.model, this.getResource(), TIMESTAMP);
	}
 }