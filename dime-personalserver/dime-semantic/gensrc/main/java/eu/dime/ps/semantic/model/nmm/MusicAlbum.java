package eu.dime.ps.semantic.model.nmm;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> AlbumGain </li>
 *   <li> AlbumPeakGain </li>
 *   <li> AlbumTrackCount </li>
 *   <li> InternationalStandardRecordingCode </li>
 *   <li> MusicBrainzAlbumID </li>
 *   <li> MusicCDIdentifier </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class MusicAlbum extends eu.dime.ps.semantic.model.nfo.MediaList {

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#MusicAlbum */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#MusicAlbum", false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#albumGain */
    @SuppressWarnings("hiding")
	public static final URI ALBUMGAIN = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#albumGain",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#albumPeakGain */
    @SuppressWarnings("hiding")
	public static final URI ALBUMPEAKGAIN = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#albumPeakGain",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#albumTrackCount */
    @SuppressWarnings("hiding")
	public static final URI ALBUMTRACKCOUNT = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#albumTrackCount",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#internationalStandardRecordingCode */
    @SuppressWarnings("hiding")
	public static final URI INTERNATIONALSTANDARDRECORDINGCODE = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#internationalStandardRecordingCode",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#musicBrainzAlbumID */
    @SuppressWarnings("hiding")
	public static final URI MUSICBRAINZALBUMID = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#musicBrainzAlbumID",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#musicCDIdentifier */
    @SuppressWarnings("hiding")
	public static final URI MUSICCDIDENTIFIER = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#musicCDIdentifier",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#albumGain",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#albumPeakGain",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#albumTrackCount",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#internationalStandardRecordingCode",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#musicBrainzAlbumID",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#musicCDIdentifier",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected MusicAlbum (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public MusicAlbum (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public MusicAlbum (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public MusicAlbum (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public MusicAlbum (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of MusicAlbum  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static MusicAlbum  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, MusicAlbum.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#MusicAlbum).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends MusicAlbum> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, MusicAlbum.class );
	}

    /**
	 * Remove rdf:type MusicAlbum from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'MusicAlbum' to this MusicAlbum instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMusicAlbum_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nmm.MusicPiece.MUSICALBUM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'MusicAlbum' to this MusicAlbum instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMusicAlbum_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nmm.MusicPiece.MUSICALBUM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'MusicAlbum' to this MusicAlbum instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllMusicAlbum_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nmm.MusicPiece.MUSICALBUM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@741f9fee has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAlbumGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ALBUMGAIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@741f9fee has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAlbumGain() {
		return Base.has(this.model, this.getResource(), ALBUMGAIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@741f9fee has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAlbumGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ALBUMGAIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@741f9fee has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAlbumGain( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ALBUMGAIN);
	}

    /**
     * Get single value of property AlbumGain as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getAlbumGain_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, ALBUMGAIN);
	}
	
    /**
     * Get single value of property AlbumGain as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getAlbumGain_asNode() {
		return Base.get_asNode(this.model, this.getResource(), ALBUMGAIN);
	}
     /**
     * Get single value of property AlbumGain     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Float getAlbumGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Float) Base.get(model, instanceResource, ALBUMGAIN, java.lang.Float.class);
	}
	
    /**
     * Get single value of property AlbumGain  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Float getAlbumGain() {
		return (java.lang.Float) Base.get(this.model, this.getResource(), ALBUMGAIN, java.lang.Float.class);
	}
  
    /**
     * Adds a value to property AlbumGain as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addAlbumGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, ALBUMGAIN, value, 1);
	}
	
    /**
     * Adds a value to property AlbumGain as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addAlbumGain( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ALBUMGAIN, value, 1);
	}
    /**
     * Adds a value to property AlbumGain from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addAlbumGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value)
    throws CardinalityException {
		Base.add(model, instanceResource, ALBUMGAIN, value, 1);
	}
	
    /**
     * Adds a value to property AlbumGain from an instance of java.lang.Float 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addAlbumGain(java.lang.Float value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ALBUMGAIN, value, 1);
	}
 
 

    /**
     * Sets a value of property AlbumGain from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAlbumGain( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ALBUMGAIN, value);
	}
	
    /**
     * Sets a value of property AlbumGain from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAlbumGain( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ALBUMGAIN, value);
	}
    /**
     * Sets a value of property AlbumGain from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAlbumGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, ALBUMGAIN, value);
	}
	
    /**
     * Sets a value of property AlbumGain from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAlbumGain(java.lang.Float value) {
		Base.set(this.model, this.getResource(), ALBUMGAIN, value);
	}
  


    /**
     * Removes a value of property AlbumGain as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAlbumGain( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ALBUMGAIN, value);
	}
	
    /**
     * Removes a value of property AlbumGain as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAlbumGain( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ALBUMGAIN, value);
	}
    /**
     * Removes a value of property AlbumGain given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAlbumGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, ALBUMGAIN, value);
	}
	
    /**
     * Removes a value of property AlbumGain given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAlbumGain(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), ALBUMGAIN, value);
	}
  
    /**
     * Removes all values of property AlbumGain     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAlbumGain( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ALBUMGAIN);
	}
	
    /**
     * Removes all values of property AlbumGain	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAlbumGain() {
		Base.removeAll(this.model, this.getResource(), ALBUMGAIN);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70e191b5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAlbumPeakGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ALBUMPEAKGAIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70e191b5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAlbumPeakGain() {
		return Base.has(this.model, this.getResource(), ALBUMPEAKGAIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70e191b5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAlbumPeakGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ALBUMPEAKGAIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70e191b5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAlbumPeakGain( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ALBUMPEAKGAIN);
	}

    /**
     * Get single value of property AlbumPeakGain as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getAlbumPeakGain_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, ALBUMPEAKGAIN);
	}
	
    /**
     * Get single value of property AlbumPeakGain as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getAlbumPeakGain_asNode() {
		return Base.get_asNode(this.model, this.getResource(), ALBUMPEAKGAIN);
	}
     /**
     * Get single value of property AlbumPeakGain     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Float getAlbumPeakGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Float) Base.get(model, instanceResource, ALBUMPEAKGAIN, java.lang.Float.class);
	}
	
    /**
     * Get single value of property AlbumPeakGain  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Float getAlbumPeakGain() {
		return (java.lang.Float) Base.get(this.model, this.getResource(), ALBUMPEAKGAIN, java.lang.Float.class);
	}
  
    /**
     * Adds a value to property AlbumPeakGain as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addAlbumPeakGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, ALBUMPEAKGAIN, value, 1);
	}
	
    /**
     * Adds a value to property AlbumPeakGain as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addAlbumPeakGain( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ALBUMPEAKGAIN, value, 1);
	}
    /**
     * Adds a value to property AlbumPeakGain from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addAlbumPeakGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value)
    throws CardinalityException {
		Base.add(model, instanceResource, ALBUMPEAKGAIN, value, 1);
	}
	
    /**
     * Adds a value to property AlbumPeakGain from an instance of java.lang.Float 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addAlbumPeakGain(java.lang.Float value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ALBUMPEAKGAIN, value, 1);
	}
 
 

    /**
     * Sets a value of property AlbumPeakGain from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAlbumPeakGain( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ALBUMPEAKGAIN, value);
	}
	
    /**
     * Sets a value of property AlbumPeakGain from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAlbumPeakGain( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ALBUMPEAKGAIN, value);
	}
    /**
     * Sets a value of property AlbumPeakGain from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAlbumPeakGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, ALBUMPEAKGAIN, value);
	}
	
    /**
     * Sets a value of property AlbumPeakGain from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAlbumPeakGain(java.lang.Float value) {
		Base.set(this.model, this.getResource(), ALBUMPEAKGAIN, value);
	}
  


    /**
     * Removes a value of property AlbumPeakGain as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAlbumPeakGain( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ALBUMPEAKGAIN, value);
	}
	
    /**
     * Removes a value of property AlbumPeakGain as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAlbumPeakGain( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ALBUMPEAKGAIN, value);
	}
    /**
     * Removes a value of property AlbumPeakGain given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAlbumPeakGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, ALBUMPEAKGAIN, value);
	}
	
    /**
     * Removes a value of property AlbumPeakGain given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAlbumPeakGain(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), ALBUMPEAKGAIN, value);
	}
  
    /**
     * Removes all values of property AlbumPeakGain     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAlbumPeakGain( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ALBUMPEAKGAIN);
	}
	
    /**
     * Removes all values of property AlbumPeakGain	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAlbumPeakGain() {
		Base.removeAll(this.model, this.getResource(), ALBUMPEAKGAIN);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@292daa37 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAlbumTrackCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ALBUMTRACKCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@292daa37 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAlbumTrackCount() {
		return Base.has(this.model, this.getResource(), ALBUMTRACKCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@292daa37 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAlbumTrackCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ALBUMTRACKCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@292daa37 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAlbumTrackCount( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ALBUMTRACKCOUNT);
	}

    /**
     * Get single value of property AlbumTrackCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getAlbumTrackCount_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, ALBUMTRACKCOUNT);
	}
	
    /**
     * Get single value of property AlbumTrackCount as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getAlbumTrackCount_asNode() {
		return Base.get_asNode(this.model, this.getResource(), ALBUMTRACKCOUNT);
	}
     /**
     * Get single value of property AlbumTrackCount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getAlbumTrackCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, ALBUMTRACKCOUNT, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property AlbumTrackCount  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getAlbumTrackCount() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), ALBUMTRACKCOUNT, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property AlbumTrackCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addAlbumTrackCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, ALBUMTRACKCOUNT, value, 1);
	}
	
    /**
     * Adds a value to property AlbumTrackCount as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addAlbumTrackCount( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ALBUMTRACKCOUNT, value, 1);
	}
    /**
     * Adds a value to property AlbumTrackCount from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addAlbumTrackCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, ALBUMTRACKCOUNT, value, 1);
	}
	
    /**
     * Adds a value to property AlbumTrackCount from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addAlbumTrackCount(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), ALBUMTRACKCOUNT, value, 1);
	}
 
 

    /**
     * Sets a value of property AlbumTrackCount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAlbumTrackCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ALBUMTRACKCOUNT, value);
	}
	
    /**
     * Sets a value of property AlbumTrackCount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAlbumTrackCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ALBUMTRACKCOUNT, value);
	}
    /**
     * Sets a value of property AlbumTrackCount from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAlbumTrackCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, ALBUMTRACKCOUNT, value);
	}
	
    /**
     * Sets a value of property AlbumTrackCount from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAlbumTrackCount(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), ALBUMTRACKCOUNT, value);
	}
  


    /**
     * Removes a value of property AlbumTrackCount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAlbumTrackCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ALBUMTRACKCOUNT, value);
	}
	
    /**
     * Removes a value of property AlbumTrackCount as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAlbumTrackCount( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ALBUMTRACKCOUNT, value);
	}
    /**
     * Removes a value of property AlbumTrackCount given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAlbumTrackCount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, ALBUMTRACKCOUNT, value);
	}
	
    /**
     * Removes a value of property AlbumTrackCount given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAlbumTrackCount(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), ALBUMTRACKCOUNT, value);
	}
  
    /**
     * Removes all values of property AlbumTrackCount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAlbumTrackCount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ALBUMTRACKCOUNT);
	}
	
    /**
     * Removes all values of property AlbumTrackCount	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAlbumTrackCount() {
		Base.removeAll(this.model, this.getResource(), ALBUMTRACKCOUNT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@665fa81b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInternationalStandardRecordingCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@665fa81b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInternationalStandardRecordingCode() {
		return Base.has(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@665fa81b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInternationalStandardRecordingCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@665fa81b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInternationalStandardRecordingCode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE);
	}

    /**
     * Get single value of property InternationalStandardRecordingCode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getInternationalStandardRecordingCode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE);
	}
	
    /**
     * Get single value of property InternationalStandardRecordingCode as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getInternationalStandardRecordingCode_asNode() {
		return Base.get_asNode(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE);
	}
     /**
     * Get single value of property InternationalStandardRecordingCode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getInternationalStandardRecordingCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, java.lang.String.class);
	}
	
    /**
     * Get single value of property InternationalStandardRecordingCode  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getInternationalStandardRecordingCode() {
		return (java.lang.String) Base.get(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, java.lang.String.class);
	}
  
    /**
     * Adds a value to property InternationalStandardRecordingCode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addInternationalStandardRecordingCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, value, 1);
	}
	
    /**
     * Adds a value to property InternationalStandardRecordingCode as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addInternationalStandardRecordingCode( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, value, 1);
	}
    /**
     * Adds a value to property InternationalStandardRecordingCode from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addInternationalStandardRecordingCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, value, 1);
	}
	
    /**
     * Adds a value to property InternationalStandardRecordingCode from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addInternationalStandardRecordingCode(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, value, 1);
	}
 
 

    /**
     * Sets a value of property InternationalStandardRecordingCode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInternationalStandardRecordingCode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
	
    /**
     * Sets a value of property InternationalStandardRecordingCode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInternationalStandardRecordingCode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
    /**
     * Sets a value of property InternationalStandardRecordingCode from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInternationalStandardRecordingCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
	
    /**
     * Sets a value of property InternationalStandardRecordingCode from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInternationalStandardRecordingCode(java.lang.String value) {
		Base.set(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
  


    /**
     * Removes a value of property InternationalStandardRecordingCode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInternationalStandardRecordingCode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
	
    /**
     * Removes a value of property InternationalStandardRecordingCode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInternationalStandardRecordingCode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
    /**
     * Removes a value of property InternationalStandardRecordingCode given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInternationalStandardRecordingCode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
	
    /**
     * Removes a value of property InternationalStandardRecordingCode given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInternationalStandardRecordingCode(java.lang.String value) {
		Base.remove(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE, value);
	}
  
    /**
     * Removes all values of property InternationalStandardRecordingCode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInternationalStandardRecordingCode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTERNATIONALSTANDARDRECORDINGCODE);
	}
	
    /**
     * Removes all values of property InternationalStandardRecordingCode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInternationalStandardRecordingCode() {
		Base.removeAll(this.model, this.getResource(), INTERNATIONALSTANDARDRECORDINGCODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@97c09c6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMusicBrainzAlbumID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MUSICBRAINZALBUMID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@97c09c6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMusicBrainzAlbumID() {
		return Base.has(this.model, this.getResource(), MUSICBRAINZALBUMID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@97c09c6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMusicBrainzAlbumID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MUSICBRAINZALBUMID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@97c09c6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMusicBrainzAlbumID( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MUSICBRAINZALBUMID);
	}

    /**
     * Get single value of property MusicBrainzAlbumID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getMusicBrainzAlbumID_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, MUSICBRAINZALBUMID);
	}
	
    /**
     * Get single value of property MusicBrainzAlbumID as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getMusicBrainzAlbumID_asNode() {
		return Base.get_asNode(this.model, this.getResource(), MUSICBRAINZALBUMID);
	}
     /**
     * Get single value of property MusicBrainzAlbumID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getMusicBrainzAlbumID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, MUSICBRAINZALBUMID, java.lang.String.class);
	}
	
    /**
     * Get single value of property MusicBrainzAlbumID  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getMusicBrainzAlbumID() {
		return (java.lang.String) Base.get(this.model, this.getResource(), MUSICBRAINZALBUMID, java.lang.String.class);
	}
  
    /**
     * Adds a value to property MusicBrainzAlbumID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addMusicBrainzAlbumID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, MUSICBRAINZALBUMID, value, 1);
	}
	
    /**
     * Adds a value to property MusicBrainzAlbumID as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addMusicBrainzAlbumID( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MUSICBRAINZALBUMID, value, 1);
	}
    /**
     * Adds a value to property MusicBrainzAlbumID from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addMusicBrainzAlbumID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, MUSICBRAINZALBUMID, value, 1);
	}
	
    /**
     * Adds a value to property MusicBrainzAlbumID from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addMusicBrainzAlbumID(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MUSICBRAINZALBUMID, value, 1);
	}
 
 

    /**
     * Sets a value of property MusicBrainzAlbumID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMusicBrainzAlbumID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MUSICBRAINZALBUMID, value);
	}
	
    /**
     * Sets a value of property MusicBrainzAlbumID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMusicBrainzAlbumID( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MUSICBRAINZALBUMID, value);
	}
    /**
     * Sets a value of property MusicBrainzAlbumID from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMusicBrainzAlbumID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, MUSICBRAINZALBUMID, value);
	}
	
    /**
     * Sets a value of property MusicBrainzAlbumID from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMusicBrainzAlbumID(java.lang.String value) {
		Base.set(this.model, this.getResource(), MUSICBRAINZALBUMID, value);
	}
  


    /**
     * Removes a value of property MusicBrainzAlbumID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMusicBrainzAlbumID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MUSICBRAINZALBUMID, value);
	}
	
    /**
     * Removes a value of property MusicBrainzAlbumID as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMusicBrainzAlbumID( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MUSICBRAINZALBUMID, value);
	}
    /**
     * Removes a value of property MusicBrainzAlbumID given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMusicBrainzAlbumID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, MUSICBRAINZALBUMID, value);
	}
	
    /**
     * Removes a value of property MusicBrainzAlbumID given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMusicBrainzAlbumID(java.lang.String value) {
		Base.remove(this.model, this.getResource(), MUSICBRAINZALBUMID, value);
	}
  
    /**
     * Removes all values of property MusicBrainzAlbumID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMusicBrainzAlbumID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MUSICBRAINZALBUMID);
	}
	
    /**
     * Removes all values of property MusicBrainzAlbumID	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMusicBrainzAlbumID() {
		Base.removeAll(this.model, this.getResource(), MUSICBRAINZALBUMID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5490122d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMusicCDIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MUSICCDIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5490122d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMusicCDIdentifier() {
		return Base.has(this.model, this.getResource(), MUSICCDIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5490122d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMusicCDIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MUSICCDIDENTIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5490122d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMusicCDIdentifier( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MUSICCDIDENTIFIER);
	}

     /**
     * Get all values of property MusicCDIdentifier as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMusicCDIdentifier_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MUSICCDIDENTIFIER);
	}
	
    /**
     * Get all values of property MusicCDIdentifier as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMusicCDIdentifier_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MUSICCDIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MusicCDIdentifier as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMusicCDIdentifier_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MUSICCDIDENTIFIER);
	}

    /**
     * Get all values of property MusicCDIdentifier as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMusicCDIdentifier_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MUSICCDIDENTIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MusicCDIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllMusicCDIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MUSICCDIDENTIFIER, java.lang.String.class);
	}
	
    /**
     * Get all values of property MusicCDIdentifier as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllMusicCDIdentifier_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MUSICCDIDENTIFIER, java.lang.String.class);
	}

    /**
     * Get all values of property MusicCDIdentifier     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllMusicCDIdentifier() {
		return Base.getAll(this.model, this.getResource(), MUSICCDIDENTIFIER, java.lang.String.class);
	}

    /**
     * Get all values of property MusicCDIdentifier as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllMusicCDIdentifier_as() {
		return Base.getAll_as(this.model, this.getResource(), MUSICCDIDENTIFIER, java.lang.String.class);
	}
 
    /**
     * Adds a value to property MusicCDIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMusicCDIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MUSICCDIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property MusicCDIdentifier as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMusicCDIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MUSICCDIDENTIFIER, value);
	}
    /**
     * Adds a value to property MusicCDIdentifier from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMusicCDIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, MUSICCDIDENTIFIER, value);
	}
	
    /**
     * Adds a value to property MusicCDIdentifier from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMusicCDIdentifier(java.lang.String value) {
		Base.add(this.model, this.getResource(), MUSICCDIDENTIFIER, value);
	}
  

    /**
     * Sets a value of property MusicCDIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMusicCDIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MUSICCDIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property MusicCDIdentifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMusicCDIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MUSICCDIDENTIFIER, value);
	}
    /**
     * Sets a value of property MusicCDIdentifier from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMusicCDIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, MUSICCDIDENTIFIER, value);
	}
	
    /**
     * Sets a value of property MusicCDIdentifier from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMusicCDIdentifier(java.lang.String value) {
		Base.set(this.model, this.getResource(), MUSICCDIDENTIFIER, value);
	}
  


    /**
     * Removes a value of property MusicCDIdentifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMusicCDIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MUSICCDIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property MusicCDIdentifier as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMusicCDIdentifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MUSICCDIDENTIFIER, value);
	}
    /**
     * Removes a value of property MusicCDIdentifier given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMusicCDIdentifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, MUSICCDIDENTIFIER, value);
	}
	
    /**
     * Removes a value of property MusicCDIdentifier given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMusicCDIdentifier(java.lang.String value) {
		Base.remove(this.model, this.getResource(), MUSICCDIDENTIFIER, value);
	}
  
    /**
     * Removes all values of property MusicCDIdentifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMusicCDIdentifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MUSICCDIDENTIFIER);
	}
	
    /**
     * Removes all values of property MusicCDIdentifier	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMusicCDIdentifier() {
		Base.removeAll(this.model, this.getResource(), MUSICCDIDENTIFIER);
	}
 }