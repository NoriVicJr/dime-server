/*
* Copyright 2013 by the digital.me project (http://www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.nexif;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> ApertureValue </li>
 *   <li> Artist </li>
 *   <li> BitsPerSample </li>
 *   <li> BrightnessValue </li>
 *   <li> CfaPattern </li>
 *   <li> ColorSpace </li>
 *   <li> ComponentsConfiguration </li>
 *   <li> CompressedBitsPerPixel </li>
 *   <li> Compression </li>
 *   <li> Contrast </li>
 *   <li> Copyright </li>
 *   <li> CustomRendered </li>
 *   <li> Datatype </li>
 *   <li> Date </li>
 *   <li> DateAndOrTime </li>
 *   <li> DateTime </li>
 *   <li> DateTimeDigitized </li>
 *   <li> DateTimeOriginal </li>
 *   <li> DeviceSettingDescription </li>
 *   <li> DigitalZoomRatio </li>
 *   <li> ExifAttribute </li>
 *   <li> ExifIFDPointer </li>
 *   <li> ExifVersion </li>
 *   <li> Exifdata </li>
 *   <li> ExposureBiasValue </li>
 *   <li> ExposureIndex </li>
 *   <li> ExposureMode </li>
 *   <li> ExposureProgram </li>
 *   <li> ExposureTime </li>
 *   <li> FNumber </li>
 *   <li> FileSource </li>
 *   <li> Flash </li>
 *   <li> FlashEnergy </li>
 *   <li> FlashpixVersion </li>
 *   <li> FocalLength </li>
 *   <li> FocalLengthIn35mmFilm </li>
 *   <li> FocalPlaneResolutionUnit </li>
 *   <li> FocalPlaneXResolution </li>
 *   <li> FocalPlaneYResolution </li>
 *   <li> GainControl </li>
 *   <li> Geo </li>
 *   <li> Gps </li>
 *   <li> GpsAltitudeRef </li>
 *   <li> GpsAreaInformation </li>
 *   <li> GpsDOP </li>
 *   <li> GpsDateStamp </li>
 *   <li> GpsDestBearing </li>
 *   <li> GpsDestBearingRef </li>
 *   <li> GpsDestDistance </li>
 *   <li> GpsDestDistanceRef </li>
 *   <li> GpsDestLatitudeRef </li>
 *   <li> GpsDestLongitudeRef </li>
 *   <li> GpsDifferential </li>
 *   <li> GpsImgDirection </li>
 *   <li> GpsImgDirectionRef </li>
 *   <li> GpsInfo </li>
 *   <li> GpsInfoIFDPointer </li>
 *   <li> GpsLatitudeRef </li>
 *   <li> GpsLongitudeRef </li>
 *   <li> GpsMapDatum </li>
 *   <li> GpsMeasureMode </li>
 *   <li> GpsProcessingMethod </li>
 *   <li> GpsSatellites </li>
 *   <li> GpsSpeed </li>
 *   <li> GpsSpeedRef </li>
 *   <li> GpsStatus </li>
 *   <li> GpsTimeStamp </li>
 *   <li> GpsTrack </li>
 *   <li> GpsTrackRef </li>
 *   <li> GpsVersionID </li>
 *   <li> Height </li>
 *   <li> IfdPointer </li>
 *   <li> ImageConfig </li>
 *   <li> ImageDataCharacter </li>
 *   <li> ImageDataStruct </li>
 *   <li> ImageDescription </li>
 *   <li> ImageLength </li>
 *   <li> ImageUniqueID </li>
 *   <li> ImageWidth </li>
 *   <li> InteropInfo </li>
 *   <li> InteroperabilityIFDPointer </li>
 *   <li> InteroperabilityIndex </li>
 *   <li> InteroperabilityVersion </li>
 *   <li> IsoSpeedRatings </li>
 *   <li> JpegInterchangeFormat </li>
 *   <li> JpegInterchangeFormatLength </li>
 *   <li> Length </li>
 *   <li> LightSource </li>
 *   <li> Make </li>
 *   <li> MakerNote </li>
 *   <li> MaxApertureValue </li>
 *   <li> Meter </li>
 *   <li> MeteringMode </li>
 *   <li> Mm </li>
 *   <li> Model </li>
 *   <li> Oecf </li>
 *   <li> Orientation </li>
 *   <li> PhotometricInterpretation </li>
 *   <li> PictTaking </li>
 *   <li> PimBrightness </li>
 *   <li> PimColorBalance </li>
 *   <li> PimContrast </li>
 *   <li> PimInfo </li>
 *   <li> PimSaturation </li>
 *   <li> PimSharpness </li>
 *   <li> PixelXDimension </li>
 *   <li> PixelYDimension </li>
 *   <li> PlanarConfiguration </li>
 *   <li> PrimaryChromaticities </li>
 *   <li> PrintImageMatchingIFDPointer </li>
 *   <li> RecOffset </li>
 *   <li> ReferenceBlackWhite </li>
 *   <li> RelatedFile </li>
 *   <li> RelatedImageFileFormat </li>
 *   <li> RelatedImageLength </li>
 *   <li> RelatedImageWidth </li>
 *   <li> RelatedSoundFile </li>
 *   <li> Resolution </li>
 *   <li> ResolutionUnit </li>
 *   <li> RowsPerStrip </li>
 *   <li> SamplesPerPixel </li>
 *   <li> Saturation </li>
 *   <li> SceneCaptureType </li>
 *   <li> SceneType </li>
 *   <li> Seconds </li>
 *   <li> SensingMethod </li>
 *   <li> Sharpness </li>
 *   <li> ShutterSpeedValue </li>
 *   <li> Software </li>
 *   <li> SpatialFrequencyResponse </li>
 *   <li> SpectralSensitivity </li>
 *   <li> StripByteCounts </li>
 *   <li> StripOffsets </li>
 *   <li> SubSecTime </li>
 *   <li> SubSecTimeDigitized </li>
 *   <li> SubSecTimeOriginal </li>
 *   <li> SubjectArea </li>
 *   <li> SubjectDistance </li>
 *   <li> SubjectDistanceRange </li>
 *   <li> SubjectLocation </li>
 *   <li> Subseconds </li>
 *   <li> TagNumber </li>
 *   <li> Tagid </li>
 *   <li> TransferFunction </li>
 *   <li> Unknown </li>
 *   <li> UserComment </li>
 *   <li> UserInfo </li>
 *   <li> VersionInfo </li>
 *   <li> WhiteBalance </li>
 *   <li> WhitePoint </li>
 *   <li> Width </li>
 *   <li> XResolution </li>
 *   <li> YCbCrCoefficients </li>
 *   <li> YCbCrPositioning </li>
 *   <li> YCbCrSubSampling </li>
 *   <li> YResolution </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Photo extends eu.dime.ps.semantic.model.nfo.RasterImage {

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#Photo */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#Photo", false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#apertureValue */
    @SuppressWarnings("hiding")
	public static final URI APERTUREVALUE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#apertureValue",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#artist */
    @SuppressWarnings("hiding")
	public static final URI ARTIST = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#artist",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#bitsPerSample */
    @SuppressWarnings("hiding")
	public static final URI BITSPERSAMPLE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#bitsPerSample",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#brightnessValue */
    @SuppressWarnings("hiding")
	public static final URI BRIGHTNESSVALUE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#brightnessValue",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#cfaPattern */
    @SuppressWarnings("hiding")
	public static final URI CFAPATTERN = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#cfaPattern",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#colorSpace */
    @SuppressWarnings("hiding")
	public static final URI COLORSPACE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#colorSpace",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#componentsConfiguration */
    @SuppressWarnings("hiding")
	public static final URI COMPONENTSCONFIGURATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#componentsConfiguration",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#compressedBitsPerPixel */
    @SuppressWarnings("hiding")
	public static final URI COMPRESSEDBITSPERPIXEL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#compressedBitsPerPixel",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#compression */
    @SuppressWarnings("hiding")
	public static final URI COMPRESSION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#compression",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#contrast */
    @SuppressWarnings("hiding")
	public static final URI CONTRAST = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#contrast",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#copyright */
    @SuppressWarnings("hiding")
	public static final URI COPYRIGHT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#copyright",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#customRendered */
    @SuppressWarnings("hiding")
	public static final URI CUSTOMRENDERED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#customRendered",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#datatype */
    @SuppressWarnings("hiding")
	public static final URI DATATYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#datatype",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#date */
    @SuppressWarnings("hiding")
	public static final URI DATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#date",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#dateAndOrTime */
    @SuppressWarnings("hiding")
	public static final URI DATEANDORTIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#dateAndOrTime",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#dateTime */
    @SuppressWarnings("hiding")
	public static final URI DATETIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#dateTime",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#dateTimeDigitized */
    @SuppressWarnings("hiding")
	public static final URI DATETIMEDIGITIZED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#dateTimeDigitized",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#dateTimeOriginal */
    @SuppressWarnings("hiding")
	public static final URI DATETIMEORIGINAL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#dateTimeOriginal",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#deviceSettingDescription */
    @SuppressWarnings("hiding")
	public static final URI DEVICESETTINGDESCRIPTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#deviceSettingDescription",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#digitalZoomRatio */
    @SuppressWarnings("hiding")
	public static final URI DIGITALZOOMRATIO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#digitalZoomRatio",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exifAttribute */
    @SuppressWarnings("hiding")
	public static final URI EXIFATTRIBUTE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exifAttribute",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exifIFDPointer */
    @SuppressWarnings("hiding")
	public static final URI EXIFIFDPOINTER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exifIFDPointer",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exifVersion */
    @SuppressWarnings("hiding")
	public static final URI EXIFVERSION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exifVersion",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exifdata */
    @SuppressWarnings("hiding")
	public static final URI EXIFDATA = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exifdata",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exposureBiasValue */
    @SuppressWarnings("hiding")
	public static final URI EXPOSUREBIASVALUE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exposureBiasValue",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exposureIndex */
    @SuppressWarnings("hiding")
	public static final URI EXPOSUREINDEX = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exposureIndex",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exposureMode */
    @SuppressWarnings("hiding")
	public static final URI EXPOSUREMODE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exposureMode",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exposureProgram */
    @SuppressWarnings("hiding")
	public static final URI EXPOSUREPROGRAM = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exposureProgram",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exposureTime */
    @SuppressWarnings("hiding")
	public static final URI EXPOSURETIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exposureTime",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#fNumber */
    @SuppressWarnings("hiding")
	public static final URI FNUMBER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#fNumber",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#fileSource */
    @SuppressWarnings("hiding")
	public static final URI FILESOURCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#fileSource",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#flash */
    @SuppressWarnings("hiding")
	public static final URI FLASH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#flash",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#flashEnergy */
    @SuppressWarnings("hiding")
	public static final URI FLASHENERGY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#flashEnergy",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#flashpixVersion */
    @SuppressWarnings("hiding")
	public static final URI FLASHPIXVERSION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#flashpixVersion",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#focalLength */
    @SuppressWarnings("hiding")
	public static final URI FOCALLENGTH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#focalLength",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#focalLengthIn35mmFilm */
    @SuppressWarnings("hiding")
	public static final URI FOCALLENGTHIN35MMFILM = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#focalLengthIn35mmFilm",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#focalPlaneResolutionUnit */
    @SuppressWarnings("hiding")
	public static final URI FOCALPLANERESOLUTIONUNIT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#focalPlaneResolutionUnit",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#focalPlaneXResolution */
    @SuppressWarnings("hiding")
	public static final URI FOCALPLANEXRESOLUTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#focalPlaneXResolution",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#focalPlaneYResolution */
    @SuppressWarnings("hiding")
	public static final URI FOCALPLANEYRESOLUTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#focalPlaneYResolution",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gainControl */
    @SuppressWarnings("hiding")
	public static final URI GAINCONTROL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gainControl",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#geo */
    @SuppressWarnings("hiding")
	public static final URI GEO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#geo",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gps */
    @SuppressWarnings("hiding")
	public static final URI GPS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gps",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsAltitudeRef */
    @SuppressWarnings("hiding")
	public static final URI GPSALTITUDEREF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsAltitudeRef",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsAreaInformation */
    @SuppressWarnings("hiding")
	public static final URI GPSAREAINFORMATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsAreaInformation",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDOP */
    @SuppressWarnings("hiding")
	public static final URI GPSDOP = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDOP",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDateStamp */
    @SuppressWarnings("hiding")
	public static final URI GPSDATESTAMP = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDateStamp",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestBearing */
    @SuppressWarnings("hiding")
	public static final URI GPSDESTBEARING = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestBearing",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestBearingRef */
    @SuppressWarnings("hiding")
	public static final URI GPSDESTBEARINGREF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestBearingRef",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestDistance */
    @SuppressWarnings("hiding")
	public static final URI GPSDESTDISTANCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestDistance",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestDistanceRef */
    @SuppressWarnings("hiding")
	public static final URI GPSDESTDISTANCEREF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestDistanceRef",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestLatitudeRef */
    @SuppressWarnings("hiding")
	public static final URI GPSDESTLATITUDEREF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestLatitudeRef",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestLongitudeRef */
    @SuppressWarnings("hiding")
	public static final URI GPSDESTLONGITUDEREF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestLongitudeRef",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDifferential */
    @SuppressWarnings("hiding")
	public static final URI GPSDIFFERENTIAL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDifferential",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsImgDirection */
    @SuppressWarnings("hiding")
	public static final URI GPSIMGDIRECTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsImgDirection",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsImgDirectionRef */
    @SuppressWarnings("hiding")
	public static final URI GPSIMGDIRECTIONREF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsImgDirectionRef",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsInfo */
    @SuppressWarnings("hiding")
	public static final URI GPSINFO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsInfo",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsInfoIFDPointer */
    @SuppressWarnings("hiding")
	public static final URI GPSINFOIFDPOINTER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsInfoIFDPointer",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsLatitudeRef */
    @SuppressWarnings("hiding")
	public static final URI GPSLATITUDEREF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsLatitudeRef",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsLongitudeRef */
    @SuppressWarnings("hiding")
	public static final URI GPSLONGITUDEREF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsLongitudeRef",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsMapDatum */
    @SuppressWarnings("hiding")
	public static final URI GPSMAPDATUM = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsMapDatum",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsMeasureMode */
    @SuppressWarnings("hiding")
	public static final URI GPSMEASUREMODE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsMeasureMode",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsProcessingMethod */
    @SuppressWarnings("hiding")
	public static final URI GPSPROCESSINGMETHOD = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsProcessingMethod",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsSatellites */
    @SuppressWarnings("hiding")
	public static final URI GPSSATELLITES = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsSatellites",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsSpeed */
    @SuppressWarnings("hiding")
	public static final URI GPSSPEED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsSpeed",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsSpeedRef */
    @SuppressWarnings("hiding")
	public static final URI GPSSPEEDREF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsSpeedRef",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsStatus */
    @SuppressWarnings("hiding")
	public static final URI GPSSTATUS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsStatus",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsTimeStamp */
    @SuppressWarnings("hiding")
	public static final URI GPSTIMESTAMP = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsTimeStamp",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsTrack */
    @SuppressWarnings("hiding")
	public static final URI GPSTRACK = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsTrack",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsTrackRef */
    @SuppressWarnings("hiding")
	public static final URI GPSTRACKREF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsTrackRef",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsVersionID */
    @SuppressWarnings("hiding")
	public static final URI GPSVERSIONID = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsVersionID",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#height */
    @SuppressWarnings("hiding")
	public static final URI HEIGHT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#height",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#ifdPointer */
    @SuppressWarnings("hiding")
	public static final URI IFDPOINTER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#ifdPointer",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageConfig */
    @SuppressWarnings("hiding")
	public static final URI IMAGECONFIG = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageConfig",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageDataCharacter */
    @SuppressWarnings("hiding")
	public static final URI IMAGEDATACHARACTER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageDataCharacter",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageDataStruct */
    @SuppressWarnings("hiding")
	public static final URI IMAGEDATASTRUCT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageDataStruct",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageDescription */
    @SuppressWarnings("hiding")
	public static final URI IMAGEDESCRIPTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageDescription",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageLength */
    @SuppressWarnings("hiding")
	public static final URI IMAGELENGTH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageLength",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageUniqueID */
    @SuppressWarnings("hiding")
	public static final URI IMAGEUNIQUEID = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageUniqueID",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageWidth */
    @SuppressWarnings("hiding")
	public static final URI IMAGEWIDTH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageWidth",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#interopInfo */
    @SuppressWarnings("hiding")
	public static final URI INTEROPINFO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#interopInfo",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#interoperabilityIFDPointer */
    @SuppressWarnings("hiding")
	public static final URI INTEROPERABILITYIFDPOINTER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#interoperabilityIFDPointer",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#interoperabilityIndex */
    @SuppressWarnings("hiding")
	public static final URI INTEROPERABILITYINDEX = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#interoperabilityIndex",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#interoperabilityVersion */
    @SuppressWarnings("hiding")
	public static final URI INTEROPERABILITYVERSION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#interoperabilityVersion",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#isoSpeedRatings */
    @SuppressWarnings("hiding")
	public static final URI ISOSPEEDRATINGS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#isoSpeedRatings",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#jpegInterchangeFormat */
    @SuppressWarnings("hiding")
	public static final URI JPEGINTERCHANGEFORMAT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#jpegInterchangeFormat",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#jpegInterchangeFormatLength */
    @SuppressWarnings("hiding")
	public static final URI JPEGINTERCHANGEFORMATLENGTH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#jpegInterchangeFormatLength",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#length */
    @SuppressWarnings("hiding")
	public static final URI LENGTH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#length",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#lightSource */
    @SuppressWarnings("hiding")
	public static final URI LIGHTSOURCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#lightSource",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#make */
    @SuppressWarnings("hiding")
	public static final URI MAKE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#make",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#makerNote */
    @SuppressWarnings("hiding")
	public static final URI MAKERNOTE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#makerNote",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#maxApertureValue */
    @SuppressWarnings("hiding")
	public static final URI MAXAPERTUREVALUE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#maxApertureValue",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#meter */
    @SuppressWarnings("hiding")
	public static final URI METER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#meter",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#meteringMode */
    @SuppressWarnings("hiding")
	public static final URI METERINGMODE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#meteringMode",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#mm */
    @SuppressWarnings("hiding")
	public static final URI MM = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#mm",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#model */
    @SuppressWarnings("hiding")
	public static final URI MODEL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#model",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#oecf */
    @SuppressWarnings("hiding")
	public static final URI OECF = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#oecf",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#orientation */
    @SuppressWarnings("hiding")
	public static final URI ORIENTATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#orientation",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#photometricInterpretation */
    @SuppressWarnings("hiding")
	public static final URI PHOTOMETRICINTERPRETATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#photometricInterpretation",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pictTaking */
    @SuppressWarnings("hiding")
	public static final URI PICTTAKING = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pictTaking",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimBrightness */
    @SuppressWarnings("hiding")
	public static final URI PIMBRIGHTNESS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimBrightness",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimColorBalance */
    @SuppressWarnings("hiding")
	public static final URI PIMCOLORBALANCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimColorBalance",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimContrast */
    @SuppressWarnings("hiding")
	public static final URI PIMCONTRAST = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimContrast",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimInfo */
    @SuppressWarnings("hiding")
	public static final URI PIMINFO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimInfo",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimSaturation */
    @SuppressWarnings("hiding")
	public static final URI PIMSATURATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimSaturation",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimSharpness */
    @SuppressWarnings("hiding")
	public static final URI PIMSHARPNESS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimSharpness",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pixelXDimension */
    @SuppressWarnings("hiding")
	public static final URI PIXELXDIMENSION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pixelXDimension",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pixelYDimension */
    @SuppressWarnings("hiding")
	public static final URI PIXELYDIMENSION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pixelYDimension",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#planarConfiguration */
    @SuppressWarnings("hiding")
	public static final URI PLANARCONFIGURATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#planarConfiguration",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#primaryChromaticities */
    @SuppressWarnings("hiding")
	public static final URI PRIMARYCHROMATICITIES = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#primaryChromaticities",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#printImageMatchingIFDPointer */
    @SuppressWarnings("hiding")
	public static final URI PRINTIMAGEMATCHINGIFDPOINTER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#printImageMatchingIFDPointer",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#recOffset */
    @SuppressWarnings("hiding")
	public static final URI RECOFFSET = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#recOffset",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#referenceBlackWhite */
    @SuppressWarnings("hiding")
	public static final URI REFERENCEBLACKWHITE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#referenceBlackWhite",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#relatedFile */
    @SuppressWarnings("hiding")
	public static final URI RELATEDFILE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#relatedFile",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#relatedImageFileFormat */
    @SuppressWarnings("hiding")
	public static final URI RELATEDIMAGEFILEFORMAT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#relatedImageFileFormat",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#relatedImageLength */
    @SuppressWarnings("hiding")
	public static final URI RELATEDIMAGELENGTH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#relatedImageLength",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#relatedImageWidth */
    @SuppressWarnings("hiding")
	public static final URI RELATEDIMAGEWIDTH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#relatedImageWidth",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#relatedSoundFile */
    @SuppressWarnings("hiding")
	public static final URI RELATEDSOUNDFILE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#relatedSoundFile",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#resolution */
    @SuppressWarnings("hiding")
	public static final URI RESOLUTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#resolution",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#resolutionUnit */
    @SuppressWarnings("hiding")
	public static final URI RESOLUTIONUNIT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#resolutionUnit",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#rowsPerStrip */
    @SuppressWarnings("hiding")
	public static final URI ROWSPERSTRIP = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#rowsPerStrip",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#samplesPerPixel */
    @SuppressWarnings("hiding")
	public static final URI SAMPLESPERPIXEL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#samplesPerPixel",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#saturation */
    @SuppressWarnings("hiding")
	public static final URI SATURATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#saturation",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#sceneCaptureType */
    @SuppressWarnings("hiding")
	public static final URI SCENECAPTURETYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#sceneCaptureType",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#sceneType */
    @SuppressWarnings("hiding")
	public static final URI SCENETYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#sceneType",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#seconds */
    @SuppressWarnings("hiding")
	public static final URI SECONDS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#seconds",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#sensingMethod */
    @SuppressWarnings("hiding")
	public static final URI SENSINGMETHOD = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#sensingMethod",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#sharpness */
    @SuppressWarnings("hiding")
	public static final URI SHARPNESS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#sharpness",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#shutterSpeedValue */
    @SuppressWarnings("hiding")
	public static final URI SHUTTERSPEEDVALUE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#shutterSpeedValue",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#software */
    @SuppressWarnings("hiding")
	public static final URI SOFTWARE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#software",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#spatialFrequencyResponse */
    @SuppressWarnings("hiding")
	public static final URI SPATIALFREQUENCYRESPONSE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#spatialFrequencyResponse",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#spectralSensitivity */
    @SuppressWarnings("hiding")
	public static final URI SPECTRALSENSITIVITY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#spectralSensitivity",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#stripByteCounts */
    @SuppressWarnings("hiding")
	public static final URI STRIPBYTECOUNTS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#stripByteCounts",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#stripOffsets */
    @SuppressWarnings("hiding")
	public static final URI STRIPOFFSETS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#stripOffsets",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subSecTime */
    @SuppressWarnings("hiding")
	public static final URI SUBSECTIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subSecTime",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subSecTimeDigitized */
    @SuppressWarnings("hiding")
	public static final URI SUBSECTIMEDIGITIZED = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subSecTimeDigitized",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subSecTimeOriginal */
    @SuppressWarnings("hiding")
	public static final URI SUBSECTIMEORIGINAL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subSecTimeOriginal",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subjectArea */
    @SuppressWarnings("hiding")
	public static final URI SUBJECTAREA = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subjectArea",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subjectDistance */
    @SuppressWarnings("hiding")
	public static final URI SUBJECTDISTANCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subjectDistance",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subjectDistanceRange */
    @SuppressWarnings("hiding")
	public static final URI SUBJECTDISTANCERANGE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subjectDistanceRange",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subjectLocation */
    @SuppressWarnings("hiding")
	public static final URI SUBJECTLOCATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subjectLocation",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subseconds */
    @SuppressWarnings("hiding")
	public static final URI SUBSECONDS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subseconds",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#tagNumber */
    @SuppressWarnings("hiding")
	public static final URI TAGNUMBER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#tagNumber",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#tagid */
    @SuppressWarnings("hiding")
	public static final URI TAGID = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#tagid",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#transferFunction */
    @SuppressWarnings("hiding")
	public static final URI TRANSFERFUNCTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#transferFunction",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#unknown */
    @SuppressWarnings("hiding")
	public static final URI UNKNOWN = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#unknown",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#userComment */
    @SuppressWarnings("hiding")
	public static final URI USERCOMMENT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#userComment",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#userInfo */
    @SuppressWarnings("hiding")
	public static final URI USERINFO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#userInfo",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#versionInfo */
    @SuppressWarnings("hiding")
	public static final URI VERSIONINFO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#versionInfo",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#whiteBalance */
    @SuppressWarnings("hiding")
	public static final URI WHITEBALANCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#whiteBalance",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#whitePoint */
    @SuppressWarnings("hiding")
	public static final URI WHITEPOINT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#whitePoint",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#width */
    @SuppressWarnings("hiding")
	public static final URI WIDTH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#width",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#xResolution */
    @SuppressWarnings("hiding")
	public static final URI XRESOLUTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#xResolution",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#yCbCrCoefficients */
    @SuppressWarnings("hiding")
	public static final URI YCBCRCOEFFICIENTS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#yCbCrCoefficients",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#yCbCrPositioning */
    @SuppressWarnings("hiding")
	public static final URI YCBCRPOSITIONING = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#yCbCrPositioning",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#yCbCrSubSampling */
    @SuppressWarnings("hiding")
	public static final URI YCBCRSUBSAMPLING = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#yCbCrSubSampling",false);

    /** http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#yResolution */
    @SuppressWarnings("hiding")
	public static final URI YRESOLUTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#yResolution",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#apertureValue",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#artist",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#bitsPerSample",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#brightnessValue",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#cfaPattern",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#colorSpace",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#componentsConfiguration",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#compressedBitsPerPixel",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#compression",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#contrast",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#copyright",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#customRendered",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#datatype",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#date",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#dateAndOrTime",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#dateTime",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#dateTimeDigitized",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#dateTimeOriginal",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#deviceSettingDescription",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#digitalZoomRatio",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exifAttribute",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exifIFDPointer",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exifVersion",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exifdata",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exposureBiasValue",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exposureIndex",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exposureMode",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exposureProgram",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#exposureTime",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#fNumber",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#fileSource",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#flash",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#flashEnergy",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#flashpixVersion",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#focalLength",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#focalLengthIn35mmFilm",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#focalPlaneResolutionUnit",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#focalPlaneXResolution",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#focalPlaneYResolution",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gainControl",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#geo",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gps",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsAltitudeRef",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsAreaInformation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDOP",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDateStamp",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestBearing",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestBearingRef",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestDistance",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestDistanceRef",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestLatitudeRef",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDestLongitudeRef",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsDifferential",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsImgDirection",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsImgDirectionRef",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsInfo",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsInfoIFDPointer",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsLatitudeRef",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsLongitudeRef",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsMapDatum",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsMeasureMode",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsProcessingMethod",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsSatellites",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsSpeed",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsSpeedRef",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsStatus",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsTimeStamp",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsTrack",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsTrackRef",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#gpsVersionID",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#height",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#ifdPointer",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageConfig",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageDataCharacter",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageDataStruct",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageDescription",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageLength",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageUniqueID",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#imageWidth",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#interopInfo",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#interoperabilityIFDPointer",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#interoperabilityIndex",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#interoperabilityVersion",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#isoSpeedRatings",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#jpegInterchangeFormat",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#jpegInterchangeFormatLength",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#length",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#lightSource",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#make",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#makerNote",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#maxApertureValue",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#meter",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#meteringMode",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#mm",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#model",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#oecf",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#orientation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#photometricInterpretation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pictTaking",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimBrightness",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimColorBalance",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimContrast",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimInfo",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimSaturation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pimSharpness",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pixelXDimension",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#pixelYDimension",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#planarConfiguration",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#primaryChromaticities",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#printImageMatchingIFDPointer",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#recOffset",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#referenceBlackWhite",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#relatedFile",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#relatedImageFileFormat",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#relatedImageLength",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#relatedImageWidth",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#relatedSoundFile",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#resolution",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#resolutionUnit",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#rowsPerStrip",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#samplesPerPixel",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#saturation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#sceneCaptureType",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#sceneType",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#seconds",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#sensingMethod",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#sharpness",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#shutterSpeedValue",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#software",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#spatialFrequencyResponse",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#spectralSensitivity",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#stripByteCounts",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#stripOffsets",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subSecTime",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subSecTimeDigitized",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subSecTimeOriginal",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subjectArea",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subjectDistance",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subjectDistanceRange",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subjectLocation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#subseconds",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#tagNumber",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#tagid",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#transferFunction",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#unknown",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#userComment",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#userInfo",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#versionInfo",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#whiteBalance",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#whitePoint",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#width",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#xResolution",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#yCbCrCoefficients",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#yCbCrPositioning",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#yCbCrSubSampling",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#yResolution",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Photo (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Photo (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Photo (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Photo (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Photo (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Photo  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Photo  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Photo.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/05/10/nexif#Photo).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Photo> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Photo.class );
	}

    /**
	 * Remove rdf:type Photo from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ExifIFDPointer' to this Photo instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifIFDPointer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nexif.Photo.EXIFIFDPOINTER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ExifIFDPointer' to this Photo instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllExifIFDPointer_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nexif.Photo.EXIFIFDPOINTER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ExifIFDPointer' to this Photo instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllExifIFDPointer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nexif.Photo.EXIFIFDPOINTER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'GpsInfoIFDPointer' to this Photo instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGpsInfoIFDPointer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nexif.Photo.GPSINFOIFDPOINTER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'GpsInfoIFDPointer' to this Photo instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGpsInfoIFDPointer_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nexif.Photo.GPSINFOIFDPOINTER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'GpsInfoIFDPointer' to this Photo instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllGpsInfoIFDPointer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nexif.Photo.GPSINFOIFDPOINTER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'IfdPointer' to this Photo instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIfdPointer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nexif.Photo.IFDPOINTER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'IfdPointer' to this Photo instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIfdPointer_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nexif.Photo.IFDPOINTER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'IfdPointer' to this Photo instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllIfdPointer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nexif.Photo.IFDPOINTER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InteroperabilityIFDPointer' to this Photo instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInteroperabilityIFDPointer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nexif.Photo.INTEROPERABILITYIFDPOINTER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InteroperabilityIFDPointer' to this Photo instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInteroperabilityIFDPointer_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nexif.Photo.INTEROPERABILITYIFDPOINTER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InteroperabilityIFDPointer' to this Photo instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInteroperabilityIFDPointer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nexif.Photo.INTEROPERABILITYIFDPOINTER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PrintImageMatchingIFDPointer' to this Photo instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrintImageMatchingIFDPointer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nexif.Photo.PRINTIMAGEMATCHINGIFDPOINTER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PrintImageMatchingIFDPointer' to this Photo instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrintImageMatchingIFDPointer_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nexif.Photo.PRINTIMAGEMATCHINGIFDPOINTER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PrintImageMatchingIFDPointer' to this Photo instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPrintImageMatchingIFDPointer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nexif.Photo.PRINTIMAGEMATCHINGIFDPOINTER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@559582d9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, APERTUREVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@559582d9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasApertureValue() {
		return Base.has(this.model, this.getResource(), APERTUREVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@559582d9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, APERTUREVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@559582d9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasApertureValue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), APERTUREVALUE);
	}

     /**
     * Get all values of property ApertureValue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllApertureValue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, APERTUREVALUE);
	}
	
    /**
     * Get all values of property ApertureValue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllApertureValue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, APERTUREVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ApertureValue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllApertureValue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), APERTUREVALUE);
	}

    /**
     * Get all values of property ApertureValue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllApertureValue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), APERTUREVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ApertureValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, APERTUREVALUE, java.lang.Float.class);
	}
	
    /**
     * Get all values of property ApertureValue as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllApertureValue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, APERTUREVALUE, java.lang.Float.class);
	}

    /**
     * Get all values of property ApertureValue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllApertureValue() {
		return Base.getAll(this.model, this.getResource(), APERTUREVALUE, java.lang.Float.class);
	}

    /**
     * Get all values of property ApertureValue as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllApertureValue_as() {
		return Base.getAll_as(this.model, this.getResource(), APERTUREVALUE, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property ApertureValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, APERTUREVALUE, value);
	}
	
    /**
     * Adds a value to property ApertureValue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addApertureValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), APERTUREVALUE, value);
	}
    /**
     * Adds a value to property ApertureValue from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, APERTUREVALUE, value);
	}
	
    /**
     * Adds a value to property ApertureValue from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addApertureValue(java.lang.Float value) {
		Base.add(this.model, this.getResource(), APERTUREVALUE, value);
	}
  

    /**
     * Sets a value of property ApertureValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setApertureValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, APERTUREVALUE, value);
	}
	
    /**
     * Sets a value of property ApertureValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setApertureValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), APERTUREVALUE, value);
	}
    /**
     * Sets a value of property ApertureValue from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, APERTUREVALUE, value);
	}
	
    /**
     * Sets a value of property ApertureValue from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setApertureValue(java.lang.Float value) {
		Base.set(this.model, this.getResource(), APERTUREVALUE, value);
	}
  


    /**
     * Removes a value of property ApertureValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeApertureValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, APERTUREVALUE, value);
	}
	
    /**
     * Removes a value of property ApertureValue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeApertureValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), APERTUREVALUE, value);
	}
    /**
     * Removes a value of property ApertureValue given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, APERTUREVALUE, value);
	}
	
    /**
     * Removes a value of property ApertureValue given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeApertureValue(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), APERTUREVALUE, value);
	}
  
    /**
     * Removes all values of property ApertureValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllApertureValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, APERTUREVALUE);
	}
	
    /**
     * Removes all values of property ApertureValue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllApertureValue() {
		Base.removeAll(this.model, this.getResource(), APERTUREVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@160abda0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ARTIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@160abda0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasArtist() {
		return Base.has(this.model, this.getResource(), ARTIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@160abda0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ARTIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@160abda0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasArtist( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ARTIST);
	}

     /**
     * Get all values of property Artist as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllArtist_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ARTIST);
	}
	
    /**
     * Get all values of property Artist as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllArtist_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ARTIST, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Artist as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllArtist_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ARTIST);
	}

    /**
     * Get all values of property Artist as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllArtist_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ARTIST, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Artist     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ARTIST, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Artist as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllArtist_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ARTIST, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Artist     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllArtist() {
		return Base.getAll(this.model, this.getResource(), ARTIST, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Artist as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllArtist_as() {
		return Base.getAll_as(this.model, this.getResource(), ARTIST, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Artist as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ARTIST, value);
	}
	
    /**
     * Adds a value to property Artist as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addArtist( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ARTIST, value);
	}
    /**
     * Adds a value to property Artist from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, ARTIST, value);
	}
	
    /**
     * Adds a value to property Artist from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addArtist(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), ARTIST, value);
	}
  

    /**
     * Sets a value of property Artist from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ARTIST, value);
	}
	
    /**
     * Sets a value of property Artist from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setArtist( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ARTIST, value);
	}
    /**
     * Sets a value of property Artist from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, ARTIST, value);
	}
	
    /**
     * Sets a value of property Artist from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setArtist(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), ARTIST, value);
	}
  


    /**
     * Removes a value of property Artist as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ARTIST, value);
	}
	
    /**
     * Removes a value of property Artist as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeArtist( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ARTIST, value);
	}
    /**
     * Removes a value of property Artist given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeArtist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, ARTIST, value);
	}
	
    /**
     * Removes a value of property Artist given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeArtist(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), ARTIST, value);
	}
  
    /**
     * Removes all values of property Artist     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllArtist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ARTIST);
	}
	
    /**
     * Removes all values of property Artist	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllArtist() {
		Base.removeAll(this.model, this.getResource(), ARTIST);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ce10a23 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BITSPERSAMPLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ce10a23 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBitsPerSample() {
		return Base.has(this.model, this.getResource(), BITSPERSAMPLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ce10a23 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BITSPERSAMPLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ce10a23 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBitsPerSample( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BITSPERSAMPLE);
	}

     /**
     * Get all values of property BitsPerSample as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBitsPerSample_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BITSPERSAMPLE);
	}
	
    /**
     * Get all values of property BitsPerSample as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBitsPerSample_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BITSPERSAMPLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BitsPerSample as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBitsPerSample_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BITSPERSAMPLE);
	}

    /**
     * Get all values of property BitsPerSample as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBitsPerSample_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BITSPERSAMPLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BitsPerSample     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BITSPERSAMPLE, java.lang.String.class);
	}
	
    /**
     * Get all values of property BitsPerSample as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllBitsPerSample_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BITSPERSAMPLE, java.lang.String.class);
	}

    /**
     * Get all values of property BitsPerSample     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllBitsPerSample() {
		return Base.getAll(this.model, this.getResource(), BITSPERSAMPLE, java.lang.String.class);
	}

    /**
     * Get all values of property BitsPerSample as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllBitsPerSample_as() {
		return Base.getAll_as(this.model, this.getResource(), BITSPERSAMPLE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property BitsPerSample as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BITSPERSAMPLE, value);
	}
	
    /**
     * Adds a value to property BitsPerSample as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBitsPerSample( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BITSPERSAMPLE, value);
	}
    /**
     * Adds a value to property BitsPerSample from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, BITSPERSAMPLE, value);
	}
	
    /**
     * Adds a value to property BitsPerSample from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBitsPerSample(java.lang.String value) {
		Base.add(this.model, this.getResource(), BITSPERSAMPLE, value);
	}
  

    /**
     * Sets a value of property BitsPerSample from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBitsPerSample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BITSPERSAMPLE, value);
	}
	
    /**
     * Sets a value of property BitsPerSample from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBitsPerSample( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BITSPERSAMPLE, value);
	}
    /**
     * Sets a value of property BitsPerSample from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, BITSPERSAMPLE, value);
	}
	
    /**
     * Sets a value of property BitsPerSample from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBitsPerSample(java.lang.String value) {
		Base.set(this.model, this.getResource(), BITSPERSAMPLE, value);
	}
  


    /**
     * Removes a value of property BitsPerSample as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBitsPerSample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BITSPERSAMPLE, value);
	}
	
    /**
     * Removes a value of property BitsPerSample as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBitsPerSample( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BITSPERSAMPLE, value);
	}
    /**
     * Removes a value of property BitsPerSample given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBitsPerSample(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, BITSPERSAMPLE, value);
	}
	
    /**
     * Removes a value of property BitsPerSample given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBitsPerSample(java.lang.String value) {
		Base.remove(this.model, this.getResource(), BITSPERSAMPLE, value);
	}
  
    /**
     * Removes all values of property BitsPerSample     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBitsPerSample( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BITSPERSAMPLE);
	}
	
    /**
     * Removes all values of property BitsPerSample	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBitsPerSample() {
		Base.removeAll(this.model, this.getResource(), BITSPERSAMPLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78eaec66 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBrightnessValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BRIGHTNESSVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78eaec66 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBrightnessValue() {
		return Base.has(this.model, this.getResource(), BRIGHTNESSVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78eaec66 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBrightnessValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BRIGHTNESSVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78eaec66 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBrightnessValue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BRIGHTNESSVALUE);
	}

     /**
     * Get all values of property BrightnessValue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBrightnessValue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BRIGHTNESSVALUE);
	}
	
    /**
     * Get all values of property BrightnessValue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBrightnessValue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BRIGHTNESSVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BrightnessValue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBrightnessValue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BRIGHTNESSVALUE);
	}

    /**
     * Get all values of property BrightnessValue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBrightnessValue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BRIGHTNESSVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BrightnessValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllBrightnessValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BRIGHTNESSVALUE, java.lang.Float.class);
	}
	
    /**
     * Get all values of property BrightnessValue as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllBrightnessValue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BRIGHTNESSVALUE, java.lang.Float.class);
	}

    /**
     * Get all values of property BrightnessValue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllBrightnessValue() {
		return Base.getAll(this.model, this.getResource(), BRIGHTNESSVALUE, java.lang.Float.class);
	}

    /**
     * Get all values of property BrightnessValue as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllBrightnessValue_as() {
		return Base.getAll_as(this.model, this.getResource(), BRIGHTNESSVALUE, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property BrightnessValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBrightnessValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BRIGHTNESSVALUE, value);
	}
	
    /**
     * Adds a value to property BrightnessValue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBrightnessValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BRIGHTNESSVALUE, value);
	}
    /**
     * Adds a value to property BrightnessValue from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBrightnessValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, BRIGHTNESSVALUE, value);
	}
	
    /**
     * Adds a value to property BrightnessValue from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBrightnessValue(java.lang.Float value) {
		Base.add(this.model, this.getResource(), BRIGHTNESSVALUE, value);
	}
  

    /**
     * Sets a value of property BrightnessValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBrightnessValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BRIGHTNESSVALUE, value);
	}
	
    /**
     * Sets a value of property BrightnessValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBrightnessValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BRIGHTNESSVALUE, value);
	}
    /**
     * Sets a value of property BrightnessValue from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBrightnessValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, BRIGHTNESSVALUE, value);
	}
	
    /**
     * Sets a value of property BrightnessValue from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBrightnessValue(java.lang.Float value) {
		Base.set(this.model, this.getResource(), BRIGHTNESSVALUE, value);
	}
  


    /**
     * Removes a value of property BrightnessValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBrightnessValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BRIGHTNESSVALUE, value);
	}
	
    /**
     * Removes a value of property BrightnessValue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBrightnessValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BRIGHTNESSVALUE, value);
	}
    /**
     * Removes a value of property BrightnessValue given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBrightnessValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, BRIGHTNESSVALUE, value);
	}
	
    /**
     * Removes a value of property BrightnessValue given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBrightnessValue(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), BRIGHTNESSVALUE, value);
	}
  
    /**
     * Removes all values of property BrightnessValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBrightnessValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BRIGHTNESSVALUE);
	}
	
    /**
     * Removes all values of property BrightnessValue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBrightnessValue() {
		Base.removeAll(this.model, this.getResource(), BRIGHTNESSVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63f79069 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCfaPattern(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CFAPATTERN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63f79069 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCfaPattern() {
		return Base.has(this.model, this.getResource(), CFAPATTERN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63f79069 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCfaPattern(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CFAPATTERN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63f79069 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCfaPattern( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CFAPATTERN);
	}

     /**
     * Get all values of property CfaPattern as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCfaPattern_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CFAPATTERN);
	}
	
    /**
     * Get all values of property CfaPattern as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCfaPattern_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CFAPATTERN, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property CfaPattern as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCfaPattern_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CFAPATTERN);
	}

    /**
     * Get all values of property CfaPattern as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCfaPattern_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CFAPATTERN, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property CfaPattern     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllCfaPattern(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CFAPATTERN, java.lang.String.class);
	}
	
    /**
     * Get all values of property CfaPattern as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllCfaPattern_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CFAPATTERN, java.lang.String.class);
	}

    /**
     * Get all values of property CfaPattern     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllCfaPattern() {
		return Base.getAll(this.model, this.getResource(), CFAPATTERN, java.lang.String.class);
	}

    /**
     * Get all values of property CfaPattern as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllCfaPattern_as() {
		return Base.getAll_as(this.model, this.getResource(), CFAPATTERN, java.lang.String.class);
	}
 
    /**
     * Adds a value to property CfaPattern as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCfaPattern(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CFAPATTERN, value);
	}
	
    /**
     * Adds a value to property CfaPattern as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCfaPattern( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CFAPATTERN, value);
	}
    /**
     * Adds a value to property CfaPattern from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCfaPattern(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, CFAPATTERN, value);
	}
	
    /**
     * Adds a value to property CfaPattern from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCfaPattern(java.lang.String value) {
		Base.add(this.model, this.getResource(), CFAPATTERN, value);
	}
  

    /**
     * Sets a value of property CfaPattern from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCfaPattern( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CFAPATTERN, value);
	}
	
    /**
     * Sets a value of property CfaPattern from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCfaPattern( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CFAPATTERN, value);
	}
    /**
     * Sets a value of property CfaPattern from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCfaPattern(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, CFAPATTERN, value);
	}
	
    /**
     * Sets a value of property CfaPattern from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCfaPattern(java.lang.String value) {
		Base.set(this.model, this.getResource(), CFAPATTERN, value);
	}
  


    /**
     * Removes a value of property CfaPattern as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCfaPattern( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CFAPATTERN, value);
	}
	
    /**
     * Removes a value of property CfaPattern as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCfaPattern( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CFAPATTERN, value);
	}
    /**
     * Removes a value of property CfaPattern given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCfaPattern(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, CFAPATTERN, value);
	}
	
    /**
     * Removes a value of property CfaPattern given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCfaPattern(java.lang.String value) {
		Base.remove(this.model, this.getResource(), CFAPATTERN, value);
	}
  
    /**
     * Removes all values of property CfaPattern     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCfaPattern( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CFAPATTERN);
	}
	
    /**
     * Removes all values of property CfaPattern	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCfaPattern() {
		Base.removeAll(this.model, this.getResource(), CFAPATTERN);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e548759 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasColorSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COLORSPACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e548759 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasColorSpace() {
		return Base.has(this.model, this.getResource(), COLORSPACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e548759 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasColorSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COLORSPACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e548759 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasColorSpace( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COLORSPACE);
	}

     /**
     * Get all values of property ColorSpace as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllColorSpace_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COLORSPACE);
	}
	
    /**
     * Get all values of property ColorSpace as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllColorSpace_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORSPACE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ColorSpace as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllColorSpace_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COLORSPACE);
	}

    /**
     * Get all values of property ColorSpace as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllColorSpace_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COLORSPACE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ColorSpace     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllColorSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COLORSPACE, java.lang.String.class);
	}
	
    /**
     * Get all values of property ColorSpace as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllColorSpace_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COLORSPACE, java.lang.String.class);
	}

    /**
     * Get all values of property ColorSpace     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllColorSpace() {
		return Base.getAll(this.model, this.getResource(), COLORSPACE, java.lang.String.class);
	}

    /**
     * Get all values of property ColorSpace as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllColorSpace_as() {
		return Base.getAll_as(this.model, this.getResource(), COLORSPACE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ColorSpace as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addColorSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COLORSPACE, value);
	}
	
    /**
     * Adds a value to property ColorSpace as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addColorSpace( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COLORSPACE, value);
	}
    /**
     * Adds a value to property ColorSpace from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addColorSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, COLORSPACE, value);
	}
	
    /**
     * Adds a value to property ColorSpace from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addColorSpace(java.lang.String value) {
		Base.add(this.model, this.getResource(), COLORSPACE, value);
	}
  

    /**
     * Sets a value of property ColorSpace from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setColorSpace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COLORSPACE, value);
	}
	
    /**
     * Sets a value of property ColorSpace from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setColorSpace( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COLORSPACE, value);
	}
    /**
     * Sets a value of property ColorSpace from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setColorSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, COLORSPACE, value);
	}
	
    /**
     * Sets a value of property ColorSpace from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setColorSpace(java.lang.String value) {
		Base.set(this.model, this.getResource(), COLORSPACE, value);
	}
  


    /**
     * Removes a value of property ColorSpace as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeColorSpace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COLORSPACE, value);
	}
	
    /**
     * Removes a value of property ColorSpace as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeColorSpace( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COLORSPACE, value);
	}
    /**
     * Removes a value of property ColorSpace given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeColorSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, COLORSPACE, value);
	}
	
    /**
     * Removes a value of property ColorSpace given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeColorSpace(java.lang.String value) {
		Base.remove(this.model, this.getResource(), COLORSPACE, value);
	}
  
    /**
     * Removes all values of property ColorSpace     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllColorSpace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COLORSPACE);
	}
	
    /**
     * Removes all values of property ColorSpace	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllColorSpace() {
		Base.removeAll(this.model, this.getResource(), COLORSPACE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bef2f36 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasComponentsConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COMPONENTSCONFIGURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bef2f36 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasComponentsConfiguration() {
		return Base.has(this.model, this.getResource(), COMPONENTSCONFIGURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bef2f36 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasComponentsConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COMPONENTSCONFIGURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bef2f36 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasComponentsConfiguration( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COMPONENTSCONFIGURATION);
	}

     /**
     * Get all values of property ComponentsConfiguration as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComponentsConfiguration_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COMPONENTSCONFIGURATION);
	}
	
    /**
     * Get all values of property ComponentsConfiguration as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComponentsConfiguration_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMPONENTSCONFIGURATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ComponentsConfiguration as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComponentsConfiguration_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COMPONENTSCONFIGURATION);
	}

    /**
     * Get all values of property ComponentsConfiguration as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComponentsConfiguration_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COMPONENTSCONFIGURATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ComponentsConfiguration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllComponentsConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COMPONENTSCONFIGURATION, java.lang.String.class);
	}
	
    /**
     * Get all values of property ComponentsConfiguration as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllComponentsConfiguration_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMPONENTSCONFIGURATION, java.lang.String.class);
	}

    /**
     * Get all values of property ComponentsConfiguration     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllComponentsConfiguration() {
		return Base.getAll(this.model, this.getResource(), COMPONENTSCONFIGURATION, java.lang.String.class);
	}

    /**
     * Get all values of property ComponentsConfiguration as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllComponentsConfiguration_as() {
		return Base.getAll_as(this.model, this.getResource(), COMPONENTSCONFIGURATION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ComponentsConfiguration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addComponentsConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COMPONENTSCONFIGURATION, value);
	}
	
    /**
     * Adds a value to property ComponentsConfiguration as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addComponentsConfiguration( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COMPONENTSCONFIGURATION, value);
	}
    /**
     * Adds a value to property ComponentsConfiguration from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addComponentsConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, COMPONENTSCONFIGURATION, value);
	}
	
    /**
     * Adds a value to property ComponentsConfiguration from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addComponentsConfiguration(java.lang.String value) {
		Base.add(this.model, this.getResource(), COMPONENTSCONFIGURATION, value);
	}
  

    /**
     * Sets a value of property ComponentsConfiguration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setComponentsConfiguration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COMPONENTSCONFIGURATION, value);
	}
	
    /**
     * Sets a value of property ComponentsConfiguration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setComponentsConfiguration( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COMPONENTSCONFIGURATION, value);
	}
    /**
     * Sets a value of property ComponentsConfiguration from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setComponentsConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, COMPONENTSCONFIGURATION, value);
	}
	
    /**
     * Sets a value of property ComponentsConfiguration from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setComponentsConfiguration(java.lang.String value) {
		Base.set(this.model, this.getResource(), COMPONENTSCONFIGURATION, value);
	}
  


    /**
     * Removes a value of property ComponentsConfiguration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeComponentsConfiguration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COMPONENTSCONFIGURATION, value);
	}
	
    /**
     * Removes a value of property ComponentsConfiguration as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeComponentsConfiguration( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COMPONENTSCONFIGURATION, value);
	}
    /**
     * Removes a value of property ComponentsConfiguration given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeComponentsConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, COMPONENTSCONFIGURATION, value);
	}
	
    /**
     * Removes a value of property ComponentsConfiguration given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeComponentsConfiguration(java.lang.String value) {
		Base.remove(this.model, this.getResource(), COMPONENTSCONFIGURATION, value);
	}
  
    /**
     * Removes all values of property ComponentsConfiguration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllComponentsConfiguration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COMPONENTSCONFIGURATION);
	}
	
    /**
     * Removes all values of property ComponentsConfiguration	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllComponentsConfiguration() {
		Base.removeAll(this.model, this.getResource(), COMPONENTSCONFIGURATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33a999a2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCompressedBitsPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COMPRESSEDBITSPERPIXEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33a999a2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCompressedBitsPerPixel() {
		return Base.has(this.model, this.getResource(), COMPRESSEDBITSPERPIXEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33a999a2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCompressedBitsPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COMPRESSEDBITSPERPIXEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33a999a2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCompressedBitsPerPixel( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COMPRESSEDBITSPERPIXEL);
	}

     /**
     * Get all values of property CompressedBitsPerPixel as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCompressedBitsPerPixel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COMPRESSEDBITSPERPIXEL);
	}
	
    /**
     * Get all values of property CompressedBitsPerPixel as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCompressedBitsPerPixel_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMPRESSEDBITSPERPIXEL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property CompressedBitsPerPixel as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCompressedBitsPerPixel_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COMPRESSEDBITSPERPIXEL);
	}

    /**
     * Get all values of property CompressedBitsPerPixel as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCompressedBitsPerPixel_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COMPRESSEDBITSPERPIXEL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property CompressedBitsPerPixel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllCompressedBitsPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COMPRESSEDBITSPERPIXEL, java.lang.String.class);
	}
	
    /**
     * Get all values of property CompressedBitsPerPixel as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllCompressedBitsPerPixel_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMPRESSEDBITSPERPIXEL, java.lang.String.class);
	}

    /**
     * Get all values of property CompressedBitsPerPixel     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllCompressedBitsPerPixel() {
		return Base.getAll(this.model, this.getResource(), COMPRESSEDBITSPERPIXEL, java.lang.String.class);
	}

    /**
     * Get all values of property CompressedBitsPerPixel as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllCompressedBitsPerPixel_as() {
		return Base.getAll_as(this.model, this.getResource(), COMPRESSEDBITSPERPIXEL, java.lang.String.class);
	}
 
    /**
     * Adds a value to property CompressedBitsPerPixel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCompressedBitsPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COMPRESSEDBITSPERPIXEL, value);
	}
	
    /**
     * Adds a value to property CompressedBitsPerPixel as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCompressedBitsPerPixel( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COMPRESSEDBITSPERPIXEL, value);
	}
    /**
     * Adds a value to property CompressedBitsPerPixel from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCompressedBitsPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, COMPRESSEDBITSPERPIXEL, value);
	}
	
    /**
     * Adds a value to property CompressedBitsPerPixel from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCompressedBitsPerPixel(java.lang.String value) {
		Base.add(this.model, this.getResource(), COMPRESSEDBITSPERPIXEL, value);
	}
  

    /**
     * Sets a value of property CompressedBitsPerPixel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCompressedBitsPerPixel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COMPRESSEDBITSPERPIXEL, value);
	}
	
    /**
     * Sets a value of property CompressedBitsPerPixel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCompressedBitsPerPixel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COMPRESSEDBITSPERPIXEL, value);
	}
    /**
     * Sets a value of property CompressedBitsPerPixel from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCompressedBitsPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, COMPRESSEDBITSPERPIXEL, value);
	}
	
    /**
     * Sets a value of property CompressedBitsPerPixel from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCompressedBitsPerPixel(java.lang.String value) {
		Base.set(this.model, this.getResource(), COMPRESSEDBITSPERPIXEL, value);
	}
  


    /**
     * Removes a value of property CompressedBitsPerPixel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCompressedBitsPerPixel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COMPRESSEDBITSPERPIXEL, value);
	}
	
    /**
     * Removes a value of property CompressedBitsPerPixel as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCompressedBitsPerPixel( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COMPRESSEDBITSPERPIXEL, value);
	}
    /**
     * Removes a value of property CompressedBitsPerPixel given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCompressedBitsPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, COMPRESSEDBITSPERPIXEL, value);
	}
	
    /**
     * Removes a value of property CompressedBitsPerPixel given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCompressedBitsPerPixel(java.lang.String value) {
		Base.remove(this.model, this.getResource(), COMPRESSEDBITSPERPIXEL, value);
	}
  
    /**
     * Removes all values of property CompressedBitsPerPixel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCompressedBitsPerPixel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COMPRESSEDBITSPERPIXEL);
	}
	
    /**
     * Removes all values of property CompressedBitsPerPixel	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCompressedBitsPerPixel() {
		Base.removeAll(this.model, this.getResource(), COMPRESSEDBITSPERPIXEL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66f92fb5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCompression(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COMPRESSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66f92fb5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCompression() {
		return Base.has(this.model, this.getResource(), COMPRESSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66f92fb5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCompression(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COMPRESSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66f92fb5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCompression( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COMPRESSION);
	}

     /**
     * Get all values of property Compression as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCompression_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COMPRESSION);
	}
	
    /**
     * Get all values of property Compression as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCompression_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMPRESSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Compression as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCompression_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COMPRESSION);
	}

    /**
     * Get all values of property Compression as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCompression_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COMPRESSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Compression     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllCompression(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COMPRESSION, java.lang.String.class);
	}
	
    /**
     * Get all values of property Compression as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllCompression_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMPRESSION, java.lang.String.class);
	}

    /**
     * Get all values of property Compression     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllCompression() {
		return Base.getAll(this.model, this.getResource(), COMPRESSION, java.lang.String.class);
	}

    /**
     * Get all values of property Compression as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllCompression_as() {
		return Base.getAll_as(this.model, this.getResource(), COMPRESSION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Compression as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCompression(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COMPRESSION, value);
	}
	
    /**
     * Adds a value to property Compression as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCompression( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COMPRESSION, value);
	}
    /**
     * Adds a value to property Compression from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCompression(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, COMPRESSION, value);
	}
	
    /**
     * Adds a value to property Compression from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCompression(java.lang.String value) {
		Base.add(this.model, this.getResource(), COMPRESSION, value);
	}
  

    /**
     * Sets a value of property Compression from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCompression( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COMPRESSION, value);
	}
	
    /**
     * Sets a value of property Compression from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCompression( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COMPRESSION, value);
	}
    /**
     * Sets a value of property Compression from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCompression(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, COMPRESSION, value);
	}
	
    /**
     * Sets a value of property Compression from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCompression(java.lang.String value) {
		Base.set(this.model, this.getResource(), COMPRESSION, value);
	}
  


    /**
     * Removes a value of property Compression as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCompression( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COMPRESSION, value);
	}
	
    /**
     * Removes a value of property Compression as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCompression( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COMPRESSION, value);
	}
    /**
     * Removes a value of property Compression given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCompression(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, COMPRESSION, value);
	}
	
    /**
     * Removes a value of property Compression given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCompression(java.lang.String value) {
		Base.remove(this.model, this.getResource(), COMPRESSION, value);
	}
  
    /**
     * Removes all values of property Compression     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCompression( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COMPRESSION);
	}
	
    /**
     * Removes all values of property Compression	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCompression() {
		Base.removeAll(this.model, this.getResource(), COMPRESSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26b7933f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTRAST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26b7933f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContrast() {
		return Base.has(this.model, this.getResource(), CONTRAST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26b7933f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTRAST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26b7933f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContrast( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTRAST);
	}

     /**
     * Get all values of property Contrast as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContrast_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTRAST);
	}
	
    /**
     * Get all values of property Contrast as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContrast_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTRAST, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Contrast as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContrast_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTRAST);
	}

    /**
     * Get all values of property Contrast as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContrast_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTRAST, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Contrast     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTRAST, java.lang.String.class);
	}
	
    /**
     * Get all values of property Contrast as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllContrast_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTRAST, java.lang.String.class);
	}

    /**
     * Get all values of property Contrast     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllContrast() {
		return Base.getAll(this.model, this.getResource(), CONTRAST, java.lang.String.class);
	}

    /**
     * Get all values of property Contrast as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllContrast_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTRAST, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Contrast as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTRAST, value);
	}
	
    /**
     * Adds a value to property Contrast as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addContrast( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTRAST, value);
	}
    /**
     * Adds a value to property Contrast from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, CONTRAST, value);
	}
	
    /**
     * Adds a value to property Contrast from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addContrast(java.lang.String value) {
		Base.add(this.model, this.getResource(), CONTRAST, value);
	}
  

    /**
     * Sets a value of property Contrast from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContrast( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTRAST, value);
	}
	
    /**
     * Sets a value of property Contrast from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContrast( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTRAST, value);
	}
    /**
     * Sets a value of property Contrast from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, CONTRAST, value);
	}
	
    /**
     * Sets a value of property Contrast from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContrast(java.lang.String value) {
		Base.set(this.model, this.getResource(), CONTRAST, value);
	}
  


    /**
     * Removes a value of property Contrast as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContrast( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTRAST, value);
	}
	
    /**
     * Removes a value of property Contrast as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContrast( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTRAST, value);
	}
    /**
     * Removes a value of property Contrast given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, CONTRAST, value);
	}
	
    /**
     * Removes a value of property Contrast given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContrast(java.lang.String value) {
		Base.remove(this.model, this.getResource(), CONTRAST, value);
	}
  
    /**
     * Removes all values of property Contrast     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContrast( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTRAST);
	}
	
    /**
     * Removes all values of property Contrast	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContrast() {
		Base.removeAll(this.model, this.getResource(), CONTRAST);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6af2a299 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COPYRIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6af2a299 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCopyright() {
		return Base.has(this.model, this.getResource(), COPYRIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6af2a299 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COPYRIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6af2a299 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCopyright( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COPYRIGHT);
	}

     /**
     * Get all values of property Copyright as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCopyright_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COPYRIGHT);
	}
	
    /**
     * Get all values of property Copyright as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCopyright_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COPYRIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Copyright as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCopyright_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COPYRIGHT);
	}

    /**
     * Get all values of property Copyright as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCopyright_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COPYRIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Copyright     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COPYRIGHT, java.lang.String.class);
	}
	
    /**
     * Get all values of property Copyright as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllCopyright_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COPYRIGHT, java.lang.String.class);
	}

    /**
     * Get all values of property Copyright     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllCopyright() {
		return Base.getAll(this.model, this.getResource(), COPYRIGHT, java.lang.String.class);
	}

    /**
     * Get all values of property Copyright as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllCopyright_as() {
		return Base.getAll_as(this.model, this.getResource(), COPYRIGHT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Copyright as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COPYRIGHT, value);
	}
	
    /**
     * Adds a value to property Copyright as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCopyright( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COPYRIGHT, value);
	}
    /**
     * Adds a value to property Copyright from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, COPYRIGHT, value);
	}
	
    /**
     * Adds a value to property Copyright from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCopyright(java.lang.String value) {
		Base.add(this.model, this.getResource(), COPYRIGHT, value);
	}
  

    /**
     * Sets a value of property Copyright from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCopyright( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COPYRIGHT, value);
	}
	
    /**
     * Sets a value of property Copyright from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCopyright( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COPYRIGHT, value);
	}
    /**
     * Sets a value of property Copyright from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, COPYRIGHT, value);
	}
	
    /**
     * Sets a value of property Copyright from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCopyright(java.lang.String value) {
		Base.set(this.model, this.getResource(), COPYRIGHT, value);
	}
  


    /**
     * Removes a value of property Copyright as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCopyright( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COPYRIGHT, value);
	}
	
    /**
     * Removes a value of property Copyright as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCopyright( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COPYRIGHT, value);
	}
    /**
     * Removes a value of property Copyright given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCopyright(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, COPYRIGHT, value);
	}
	
    /**
     * Removes a value of property Copyright given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCopyright(java.lang.String value) {
		Base.remove(this.model, this.getResource(), COPYRIGHT, value);
	}
  
    /**
     * Removes all values of property Copyright     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCopyright( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COPYRIGHT);
	}
	
    /**
     * Removes all values of property Copyright	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCopyright() {
		Base.removeAll(this.model, this.getResource(), COPYRIGHT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ce02cf4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCustomRendered(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CUSTOMRENDERED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ce02cf4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCustomRendered() {
		return Base.has(this.model, this.getResource(), CUSTOMRENDERED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ce02cf4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCustomRendered(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CUSTOMRENDERED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ce02cf4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCustomRendered( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CUSTOMRENDERED);
	}

     /**
     * Get all values of property CustomRendered as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCustomRendered_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CUSTOMRENDERED);
	}
	
    /**
     * Get all values of property CustomRendered as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCustomRendered_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CUSTOMRENDERED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property CustomRendered as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCustomRendered_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CUSTOMRENDERED);
	}

    /**
     * Get all values of property CustomRendered as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCustomRendered_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CUSTOMRENDERED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property CustomRendered     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllCustomRendered(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CUSTOMRENDERED, java.lang.String.class);
	}
	
    /**
     * Get all values of property CustomRendered as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllCustomRendered_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CUSTOMRENDERED, java.lang.String.class);
	}

    /**
     * Get all values of property CustomRendered     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllCustomRendered() {
		return Base.getAll(this.model, this.getResource(), CUSTOMRENDERED, java.lang.String.class);
	}

    /**
     * Get all values of property CustomRendered as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllCustomRendered_as() {
		return Base.getAll_as(this.model, this.getResource(), CUSTOMRENDERED, java.lang.String.class);
	}
 
    /**
     * Adds a value to property CustomRendered as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCustomRendered(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CUSTOMRENDERED, value);
	}
	
    /**
     * Adds a value to property CustomRendered as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCustomRendered( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CUSTOMRENDERED, value);
	}
    /**
     * Adds a value to property CustomRendered from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCustomRendered(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, CUSTOMRENDERED, value);
	}
	
    /**
     * Adds a value to property CustomRendered from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCustomRendered(java.lang.String value) {
		Base.add(this.model, this.getResource(), CUSTOMRENDERED, value);
	}
  

    /**
     * Sets a value of property CustomRendered from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCustomRendered( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CUSTOMRENDERED, value);
	}
	
    /**
     * Sets a value of property CustomRendered from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCustomRendered( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CUSTOMRENDERED, value);
	}
    /**
     * Sets a value of property CustomRendered from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCustomRendered(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, CUSTOMRENDERED, value);
	}
	
    /**
     * Sets a value of property CustomRendered from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCustomRendered(java.lang.String value) {
		Base.set(this.model, this.getResource(), CUSTOMRENDERED, value);
	}
  


    /**
     * Removes a value of property CustomRendered as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCustomRendered( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CUSTOMRENDERED, value);
	}
	
    /**
     * Removes a value of property CustomRendered as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCustomRendered( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CUSTOMRENDERED, value);
	}
    /**
     * Removes a value of property CustomRendered given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCustomRendered(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, CUSTOMRENDERED, value);
	}
	
    /**
     * Removes a value of property CustomRendered given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCustomRendered(java.lang.String value) {
		Base.remove(this.model, this.getResource(), CUSTOMRENDERED, value);
	}
  
    /**
     * Removes all values of property CustomRendered     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCustomRendered( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CUSTOMRENDERED);
	}
	
    /**
     * Removes all values of property CustomRendered	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCustomRendered() {
		Base.removeAll(this.model, this.getResource(), CUSTOMRENDERED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@410a321d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDatatype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DATATYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@410a321d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDatatype() {
		return Base.has(this.model, this.getResource(), DATATYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@410a321d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDatatype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DATATYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@410a321d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDatatype( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DATATYPE);
	}

     /**
     * Get all values of property Datatype as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDatatype_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DATATYPE);
	}
	
    /**
     * Get all values of property Datatype as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDatatype_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATATYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Datatype as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDatatype_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DATATYPE);
	}

    /**
     * Get all values of property Datatype as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDatatype_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DATATYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Datatype     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllDatatype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DATATYPE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Datatype as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllDatatype_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATATYPE, java.lang.String.class);
	}

    /**
     * Get all values of property Datatype     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllDatatype() {
		return Base.getAll(this.model, this.getResource(), DATATYPE, java.lang.String.class);
	}

    /**
     * Get all values of property Datatype as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllDatatype_as() {
		return Base.getAll_as(this.model, this.getResource(), DATATYPE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Datatype as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDatatype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DATATYPE, value);
	}
	
    /**
     * Adds a value to property Datatype as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDatatype( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DATATYPE, value);
	}
    /**
     * Adds a value to property Datatype from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDatatype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, DATATYPE, value);
	}
	
    /**
     * Adds a value to property Datatype from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDatatype(java.lang.String value) {
		Base.add(this.model, this.getResource(), DATATYPE, value);
	}
  

    /**
     * Sets a value of property Datatype from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDatatype( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DATATYPE, value);
	}
	
    /**
     * Sets a value of property Datatype from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDatatype( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DATATYPE, value);
	}
    /**
     * Sets a value of property Datatype from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDatatype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, DATATYPE, value);
	}
	
    /**
     * Sets a value of property Datatype from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDatatype(java.lang.String value) {
		Base.set(this.model, this.getResource(), DATATYPE, value);
	}
  


    /**
     * Removes a value of property Datatype as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDatatype( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DATATYPE, value);
	}
	
    /**
     * Removes a value of property Datatype as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDatatype( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DATATYPE, value);
	}
    /**
     * Removes a value of property Datatype given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDatatype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, DATATYPE, value);
	}
	
    /**
     * Removes a value of property Datatype given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDatatype(java.lang.String value) {
		Base.remove(this.model, this.getResource(), DATATYPE, value);
	}
  
    /**
     * Removes all values of property Datatype     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDatatype( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DATATYPE);
	}
	
    /**
     * Removes all values of property Datatype	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDatatype() {
		Base.removeAll(this.model, this.getResource(), DATATYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@634f0150 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@634f0150 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDate() {
		return Base.has(this.model, this.getResource(), DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@634f0150 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@634f0150 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DATE);
	}

     /**
     * Get all values of property Date as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DATE);
	}
	
    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DATE);
	}

    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Date     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DATE, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property Date as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllDate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATE, java.util.Calendar.class);
	}

    /**
     * Get all values of property Date     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllDate() {
		return Base.getAll(this.model, this.getResource(), DATE, java.util.Calendar.class);
	}

    /**
     * Get all values of property Date as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllDate_as() {
		return Base.getAll_as(this.model, this.getResource(), DATE, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property Date as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DATE, value);
	}
	
    /**
     * Adds a value to property Date as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DATE, value);
	}
    /**
     * Adds a value to property Date from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, DATE, value);
	}
	
    /**
     * Adds a value to property Date from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDate(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), DATE, value);
	}
  

    /**
     * Sets a value of property Date from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DATE, value);
	}
	
    /**
     * Sets a value of property Date from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DATE, value);
	}
    /**
     * Sets a value of property Date from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, DATE, value);
	}
	
    /**
     * Sets a value of property Date from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDate(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), DATE, value);
	}
  


    /**
     * Removes a value of property Date as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DATE, value);
	}
	
    /**
     * Removes a value of property Date as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DATE, value);
	}
    /**
     * Removes a value of property Date given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, DATE, value);
	}
	
    /**
     * Removes a value of property Date given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDate(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), DATE, value);
	}
  
    /**
     * Removes all values of property Date     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DATE);
	}
	
    /**
     * Removes all values of property Date	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDate() {
		Base.removeAll(this.model, this.getResource(), DATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b59b823 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDateAndOrTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DATEANDORTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b59b823 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDateAndOrTime() {
		return Base.has(this.model, this.getResource(), DATEANDORTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b59b823 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDateAndOrTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DATEANDORTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b59b823 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDateAndOrTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DATEANDORTIME);
	}

     /**
     * Get all values of property DateAndOrTime as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDateAndOrTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DATEANDORTIME);
	}
	
    /**
     * Get all values of property DateAndOrTime as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDateAndOrTime_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATEANDORTIME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DateAndOrTime as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDateAndOrTime_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DATEANDORTIME);
	}

    /**
     * Get all values of property DateAndOrTime as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDateAndOrTime_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DATEANDORTIME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DateAndOrTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllDateAndOrTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DATEANDORTIME, java.lang.String.class);
	}
	
    /**
     * Get all values of property DateAndOrTime as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllDateAndOrTime_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATEANDORTIME, java.lang.String.class);
	}

    /**
     * Get all values of property DateAndOrTime     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllDateAndOrTime() {
		return Base.getAll(this.model, this.getResource(), DATEANDORTIME, java.lang.String.class);
	}

    /**
     * Get all values of property DateAndOrTime as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllDateAndOrTime_as() {
		return Base.getAll_as(this.model, this.getResource(), DATEANDORTIME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property DateAndOrTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDateAndOrTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DATEANDORTIME, value);
	}
	
    /**
     * Adds a value to property DateAndOrTime as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDateAndOrTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DATEANDORTIME, value);
	}
    /**
     * Adds a value to property DateAndOrTime from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDateAndOrTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, DATEANDORTIME, value);
	}
	
    /**
     * Adds a value to property DateAndOrTime from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDateAndOrTime(java.lang.String value) {
		Base.add(this.model, this.getResource(), DATEANDORTIME, value);
	}
  

    /**
     * Sets a value of property DateAndOrTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDateAndOrTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DATEANDORTIME, value);
	}
	
    /**
     * Sets a value of property DateAndOrTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDateAndOrTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DATEANDORTIME, value);
	}
    /**
     * Sets a value of property DateAndOrTime from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDateAndOrTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, DATEANDORTIME, value);
	}
	
    /**
     * Sets a value of property DateAndOrTime from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDateAndOrTime(java.lang.String value) {
		Base.set(this.model, this.getResource(), DATEANDORTIME, value);
	}
  


    /**
     * Removes a value of property DateAndOrTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDateAndOrTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DATEANDORTIME, value);
	}
	
    /**
     * Removes a value of property DateAndOrTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDateAndOrTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DATEANDORTIME, value);
	}
    /**
     * Removes a value of property DateAndOrTime given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDateAndOrTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, DATEANDORTIME, value);
	}
	
    /**
     * Removes a value of property DateAndOrTime given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDateAndOrTime(java.lang.String value) {
		Base.remove(this.model, this.getResource(), DATEANDORTIME, value);
	}
  
    /**
     * Removes all values of property DateAndOrTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDateAndOrTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DATEANDORTIME);
	}
	
    /**
     * Removes all values of property DateAndOrTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDateAndOrTime() {
		Base.removeAll(this.model, this.getResource(), DATEANDORTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@126f0939 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DATETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@126f0939 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDateTime() {
		return Base.has(this.model, this.getResource(), DATETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@126f0939 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DATETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@126f0939 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDateTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DATETIME);
	}

     /**
     * Get all values of property DateTime as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDateTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DATETIME);
	}
	
    /**
     * Get all values of property DateTime as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDateTime_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATETIME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DateTime as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDateTime_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DATETIME);
	}

    /**
     * Get all values of property DateTime as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDateTime_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DATETIME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DateTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DATETIME, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property DateTime as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllDateTime_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATETIME, java.util.Calendar.class);
	}

    /**
     * Get all values of property DateTime     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllDateTime() {
		return Base.getAll(this.model, this.getResource(), DATETIME, java.util.Calendar.class);
	}

    /**
     * Get all values of property DateTime as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllDateTime_as() {
		return Base.getAll_as(this.model, this.getResource(), DATETIME, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property DateTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DATETIME, value);
	}
	
    /**
     * Adds a value to property DateTime as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDateTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DATETIME, value);
	}
    /**
     * Adds a value to property DateTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, DATETIME, value);
	}
	
    /**
     * Adds a value to property DateTime from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDateTime(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), DATETIME, value);
	}
  

    /**
     * Sets a value of property DateTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDateTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DATETIME, value);
	}
	
    /**
     * Sets a value of property DateTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDateTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DATETIME, value);
	}
    /**
     * Sets a value of property DateTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, DATETIME, value);
	}
	
    /**
     * Sets a value of property DateTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDateTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), DATETIME, value);
	}
  


    /**
     * Removes a value of property DateTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDateTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DATETIME, value);
	}
	
    /**
     * Removes a value of property DateTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDateTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DATETIME, value);
	}
    /**
     * Removes a value of property DateTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, DATETIME, value);
	}
	
    /**
     * Removes a value of property DateTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDateTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), DATETIME, value);
	}
  
    /**
     * Removes all values of property DateTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDateTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DATETIME);
	}
	
    /**
     * Removes all values of property DateTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDateTime() {
		Base.removeAll(this.model, this.getResource(), DATETIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2181c21 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDateTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DATETIMEDIGITIZED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2181c21 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDateTimeDigitized() {
		return Base.has(this.model, this.getResource(), DATETIMEDIGITIZED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2181c21 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDateTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DATETIMEDIGITIZED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2181c21 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDateTimeDigitized( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DATETIMEDIGITIZED);
	}

     /**
     * Get all values of property DateTimeDigitized as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDateTimeDigitized_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DATETIMEDIGITIZED);
	}
	
    /**
     * Get all values of property DateTimeDigitized as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDateTimeDigitized_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATETIMEDIGITIZED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DateTimeDigitized as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDateTimeDigitized_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DATETIMEDIGITIZED);
	}

    /**
     * Get all values of property DateTimeDigitized as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDateTimeDigitized_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DATETIMEDIGITIZED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DateTimeDigitized     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllDateTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DATETIMEDIGITIZED, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property DateTimeDigitized as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllDateTimeDigitized_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATETIMEDIGITIZED, java.util.Calendar.class);
	}

    /**
     * Get all values of property DateTimeDigitized     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllDateTimeDigitized() {
		return Base.getAll(this.model, this.getResource(), DATETIMEDIGITIZED, java.util.Calendar.class);
	}

    /**
     * Get all values of property DateTimeDigitized as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllDateTimeDigitized_as() {
		return Base.getAll_as(this.model, this.getResource(), DATETIMEDIGITIZED, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property DateTimeDigitized as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDateTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DATETIMEDIGITIZED, value);
	}
	
    /**
     * Adds a value to property DateTimeDigitized as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDateTimeDigitized( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DATETIMEDIGITIZED, value);
	}
    /**
     * Adds a value to property DateTimeDigitized from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDateTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, DATETIMEDIGITIZED, value);
	}
	
    /**
     * Adds a value to property DateTimeDigitized from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDateTimeDigitized(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), DATETIMEDIGITIZED, value);
	}
  

    /**
     * Sets a value of property DateTimeDigitized from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDateTimeDigitized( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DATETIMEDIGITIZED, value);
	}
	
    /**
     * Sets a value of property DateTimeDigitized from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDateTimeDigitized( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DATETIMEDIGITIZED, value);
	}
    /**
     * Sets a value of property DateTimeDigitized from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDateTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, DATETIMEDIGITIZED, value);
	}
	
    /**
     * Sets a value of property DateTimeDigitized from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDateTimeDigitized(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), DATETIMEDIGITIZED, value);
	}
  


    /**
     * Removes a value of property DateTimeDigitized as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDateTimeDigitized( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DATETIMEDIGITIZED, value);
	}
	
    /**
     * Removes a value of property DateTimeDigitized as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDateTimeDigitized( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DATETIMEDIGITIZED, value);
	}
    /**
     * Removes a value of property DateTimeDigitized given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDateTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, DATETIMEDIGITIZED, value);
	}
	
    /**
     * Removes a value of property DateTimeDigitized given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDateTimeDigitized(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), DATETIMEDIGITIZED, value);
	}
  
    /**
     * Removes all values of property DateTimeDigitized     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDateTimeDigitized( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DATETIMEDIGITIZED);
	}
	
    /**
     * Removes all values of property DateTimeDigitized	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDateTimeDigitized() {
		Base.removeAll(this.model, this.getResource(), DATETIMEDIGITIZED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45589605 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDateTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DATETIMEORIGINAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45589605 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDateTimeOriginal() {
		return Base.has(this.model, this.getResource(), DATETIMEORIGINAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45589605 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDateTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DATETIMEORIGINAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45589605 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDateTimeOriginal( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DATETIMEORIGINAL);
	}

     /**
     * Get all values of property DateTimeOriginal as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDateTimeOriginal_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DATETIMEORIGINAL);
	}
	
    /**
     * Get all values of property DateTimeOriginal as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDateTimeOriginal_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATETIMEORIGINAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DateTimeOriginal as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDateTimeOriginal_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DATETIMEORIGINAL);
	}

    /**
     * Get all values of property DateTimeOriginal as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDateTimeOriginal_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DATETIMEORIGINAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DateTimeOriginal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllDateTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DATETIMEORIGINAL, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property DateTimeOriginal as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllDateTimeOriginal_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATETIMEORIGINAL, java.util.Calendar.class);
	}

    /**
     * Get all values of property DateTimeOriginal     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllDateTimeOriginal() {
		return Base.getAll(this.model, this.getResource(), DATETIMEORIGINAL, java.util.Calendar.class);
	}

    /**
     * Get all values of property DateTimeOriginal as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllDateTimeOriginal_as() {
		return Base.getAll_as(this.model, this.getResource(), DATETIMEORIGINAL, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property DateTimeOriginal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDateTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DATETIMEORIGINAL, value);
	}
	
    /**
     * Adds a value to property DateTimeOriginal as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDateTimeOriginal( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DATETIMEORIGINAL, value);
	}
    /**
     * Adds a value to property DateTimeOriginal from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDateTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, DATETIMEORIGINAL, value);
	}
	
    /**
     * Adds a value to property DateTimeOriginal from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDateTimeOriginal(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), DATETIMEORIGINAL, value);
	}
  

    /**
     * Sets a value of property DateTimeOriginal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDateTimeOriginal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DATETIMEORIGINAL, value);
	}
	
    /**
     * Sets a value of property DateTimeOriginal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDateTimeOriginal( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DATETIMEORIGINAL, value);
	}
    /**
     * Sets a value of property DateTimeOriginal from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDateTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, DATETIMEORIGINAL, value);
	}
	
    /**
     * Sets a value of property DateTimeOriginal from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDateTimeOriginal(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), DATETIMEORIGINAL, value);
	}
  


    /**
     * Removes a value of property DateTimeOriginal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDateTimeOriginal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DATETIMEORIGINAL, value);
	}
	
    /**
     * Removes a value of property DateTimeOriginal as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDateTimeOriginal( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DATETIMEORIGINAL, value);
	}
    /**
     * Removes a value of property DateTimeOriginal given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDateTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, DATETIMEORIGINAL, value);
	}
	
    /**
     * Removes a value of property DateTimeOriginal given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDateTimeOriginal(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), DATETIMEORIGINAL, value);
	}
  
    /**
     * Removes all values of property DateTimeOriginal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDateTimeOriginal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DATETIMEORIGINAL);
	}
	
    /**
     * Removes all values of property DateTimeOriginal	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDateTimeOriginal() {
		Base.removeAll(this.model, this.getResource(), DATETIMEORIGINAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c44d9b4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDeviceSettingDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEVICESETTINGDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c44d9b4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDeviceSettingDescription() {
		return Base.has(this.model, this.getResource(), DEVICESETTINGDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c44d9b4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDeviceSettingDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEVICESETTINGDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c44d9b4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDeviceSettingDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEVICESETTINGDESCRIPTION);
	}

     /**
     * Get all values of property DeviceSettingDescription as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDeviceSettingDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DEVICESETTINGDESCRIPTION);
	}
	
    /**
     * Get all values of property DeviceSettingDescription as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDeviceSettingDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEVICESETTINGDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DeviceSettingDescription as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDeviceSettingDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DEVICESETTINGDESCRIPTION);
	}

    /**
     * Get all values of property DeviceSettingDescription as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDeviceSettingDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DEVICESETTINGDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DeviceSettingDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllDeviceSettingDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DEVICESETTINGDESCRIPTION, java.lang.String.class);
	}
	
    /**
     * Get all values of property DeviceSettingDescription as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllDeviceSettingDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEVICESETTINGDESCRIPTION, java.lang.String.class);
	}

    /**
     * Get all values of property DeviceSettingDescription     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllDeviceSettingDescription() {
		return Base.getAll(this.model, this.getResource(), DEVICESETTINGDESCRIPTION, java.lang.String.class);
	}

    /**
     * Get all values of property DeviceSettingDescription as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllDeviceSettingDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), DEVICESETTINGDESCRIPTION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property DeviceSettingDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDeviceSettingDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DEVICESETTINGDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property DeviceSettingDescription as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDeviceSettingDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DEVICESETTINGDESCRIPTION, value);
	}
    /**
     * Adds a value to property DeviceSettingDescription from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDeviceSettingDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, DEVICESETTINGDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property DeviceSettingDescription from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDeviceSettingDescription(java.lang.String value) {
		Base.add(this.model, this.getResource(), DEVICESETTINGDESCRIPTION, value);
	}
  

    /**
     * Sets a value of property DeviceSettingDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDeviceSettingDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEVICESETTINGDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property DeviceSettingDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDeviceSettingDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEVICESETTINGDESCRIPTION, value);
	}
    /**
     * Sets a value of property DeviceSettingDescription from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDeviceSettingDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, DEVICESETTINGDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property DeviceSettingDescription from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDeviceSettingDescription(java.lang.String value) {
		Base.set(this.model, this.getResource(), DEVICESETTINGDESCRIPTION, value);
	}
  


    /**
     * Removes a value of property DeviceSettingDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDeviceSettingDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEVICESETTINGDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property DeviceSettingDescription as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDeviceSettingDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEVICESETTINGDESCRIPTION, value);
	}
    /**
     * Removes a value of property DeviceSettingDescription given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDeviceSettingDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, DEVICESETTINGDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property DeviceSettingDescription given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDeviceSettingDescription(java.lang.String value) {
		Base.remove(this.model, this.getResource(), DEVICESETTINGDESCRIPTION, value);
	}
  
    /**
     * Removes all values of property DeviceSettingDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDeviceSettingDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEVICESETTINGDESCRIPTION);
	}
	
    /**
     * Removes all values of property DeviceSettingDescription	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDeviceSettingDescription() {
		Base.removeAll(this.model, this.getResource(), DEVICESETTINGDESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@118be4b2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDigitalZoomRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DIGITALZOOMRATIO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@118be4b2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDigitalZoomRatio() {
		return Base.has(this.model, this.getResource(), DIGITALZOOMRATIO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@118be4b2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDigitalZoomRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DIGITALZOOMRATIO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@118be4b2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDigitalZoomRatio( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DIGITALZOOMRATIO);
	}

     /**
     * Get all values of property DigitalZoomRatio as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDigitalZoomRatio_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DIGITALZOOMRATIO);
	}
	
    /**
     * Get all values of property DigitalZoomRatio as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDigitalZoomRatio_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DIGITALZOOMRATIO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DigitalZoomRatio as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDigitalZoomRatio_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DIGITALZOOMRATIO);
	}

    /**
     * Get all values of property DigitalZoomRatio as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDigitalZoomRatio_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DIGITALZOOMRATIO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DigitalZoomRatio     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllDigitalZoomRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DIGITALZOOMRATIO, java.lang.Float.class);
	}
	
    /**
     * Get all values of property DigitalZoomRatio as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllDigitalZoomRatio_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DIGITALZOOMRATIO, java.lang.Float.class);
	}

    /**
     * Get all values of property DigitalZoomRatio     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllDigitalZoomRatio() {
		return Base.getAll(this.model, this.getResource(), DIGITALZOOMRATIO, java.lang.Float.class);
	}

    /**
     * Get all values of property DigitalZoomRatio as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllDigitalZoomRatio_as() {
		return Base.getAll_as(this.model, this.getResource(), DIGITALZOOMRATIO, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property DigitalZoomRatio as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDigitalZoomRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DIGITALZOOMRATIO, value);
	}
	
    /**
     * Adds a value to property DigitalZoomRatio as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDigitalZoomRatio( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DIGITALZOOMRATIO, value);
	}
    /**
     * Adds a value to property DigitalZoomRatio from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDigitalZoomRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, DIGITALZOOMRATIO, value);
	}
	
    /**
     * Adds a value to property DigitalZoomRatio from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDigitalZoomRatio(java.lang.Float value) {
		Base.add(this.model, this.getResource(), DIGITALZOOMRATIO, value);
	}
  

    /**
     * Sets a value of property DigitalZoomRatio from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDigitalZoomRatio( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DIGITALZOOMRATIO, value);
	}
	
    /**
     * Sets a value of property DigitalZoomRatio from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDigitalZoomRatio( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DIGITALZOOMRATIO, value);
	}
    /**
     * Sets a value of property DigitalZoomRatio from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDigitalZoomRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, DIGITALZOOMRATIO, value);
	}
	
    /**
     * Sets a value of property DigitalZoomRatio from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDigitalZoomRatio(java.lang.Float value) {
		Base.set(this.model, this.getResource(), DIGITALZOOMRATIO, value);
	}
  


    /**
     * Removes a value of property DigitalZoomRatio as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDigitalZoomRatio( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DIGITALZOOMRATIO, value);
	}
	
    /**
     * Removes a value of property DigitalZoomRatio as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDigitalZoomRatio( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DIGITALZOOMRATIO, value);
	}
    /**
     * Removes a value of property DigitalZoomRatio given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDigitalZoomRatio(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, DIGITALZOOMRATIO, value);
	}
	
    /**
     * Removes a value of property DigitalZoomRatio given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDigitalZoomRatio(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), DIGITALZOOMRATIO, value);
	}
  
    /**
     * Removes all values of property DigitalZoomRatio     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDigitalZoomRatio( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DIGITALZOOMRATIO);
	}
	
    /**
     * Removes all values of property DigitalZoomRatio	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDigitalZoomRatio() {
		Base.removeAll(this.model, this.getResource(), DIGITALZOOMRATIO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c2d0f1d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFATTRIBUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c2d0f1d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifAttribute() {
		return Base.has(this.model, this.getResource(), EXIFATTRIBUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c2d0f1d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFATTRIBUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7c2d0f1d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifAttribute( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFATTRIBUTE);
	}

     /**
     * Get all values of property ExifAttribute as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifAttribute_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFATTRIBUTE);
	}
	
    /**
     * Get all values of property ExifAttribute as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifAttribute_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFATTRIBUTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifAttribute as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifAttribute_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFATTRIBUTE);
	}

    /**
     * Get all values of property ExifAttribute as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifAttribute_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFATTRIBUTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifAttribute     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllExifAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFATTRIBUTE, java.lang.String.class);
	}
	
    /**
     * Get all values of property ExifAttribute as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllExifAttribute_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFATTRIBUTE, java.lang.String.class);
	}

    /**
     * Get all values of property ExifAttribute     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllExifAttribute() {
		return Base.getAll(this.model, this.getResource(), EXIFATTRIBUTE, java.lang.String.class);
	}

    /**
     * Get all values of property ExifAttribute as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllExifAttribute_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFATTRIBUTE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ExifAttribute as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFATTRIBUTE, value);
	}
	
    /**
     * Adds a value to property ExifAttribute as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifAttribute( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFATTRIBUTE, value);
	}
    /**
     * Adds a value to property ExifAttribute from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, EXIFATTRIBUTE, value);
	}
	
    /**
     * Adds a value to property ExifAttribute from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifAttribute(java.lang.String value) {
		Base.add(this.model, this.getResource(), EXIFATTRIBUTE, value);
	}
  

    /**
     * Sets a value of property ExifAttribute from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifAttribute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFATTRIBUTE, value);
	}
	
    /**
     * Sets a value of property ExifAttribute from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifAttribute( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFATTRIBUTE, value);
	}
    /**
     * Sets a value of property ExifAttribute from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, EXIFATTRIBUTE, value);
	}
	
    /**
     * Sets a value of property ExifAttribute from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifAttribute(java.lang.String value) {
		Base.set(this.model, this.getResource(), EXIFATTRIBUTE, value);
	}
  


    /**
     * Removes a value of property ExifAttribute as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifAttribute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFATTRIBUTE, value);
	}
	
    /**
     * Removes a value of property ExifAttribute as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifAttribute( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFATTRIBUTE, value);
	}
    /**
     * Removes a value of property ExifAttribute given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, EXIFATTRIBUTE, value);
	}
	
    /**
     * Removes a value of property ExifAttribute given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifAttribute(java.lang.String value) {
		Base.remove(this.model, this.getResource(), EXIFATTRIBUTE, value);
	}
  
    /**
     * Removes all values of property ExifAttribute     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifAttribute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFATTRIBUTE);
	}
	
    /**
     * Removes all values of property ExifAttribute	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifAttribute() {
		Base.removeAll(this.model, this.getResource(), EXIFATTRIBUTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6eedd5e4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6eedd5e4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifIFDPointer() {
		return Base.has(this.model, this.getResource(), EXIFIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6eedd5e4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6eedd5e4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifIFDPointer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFIFDPOINTER);
	}

     /**
     * Get all values of property ExifIFDPointer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifIFDPointer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFIFDPOINTER);
	}
	
    /**
     * Get all values of property ExifIFDPointer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifIFDPointer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifIFDPointer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifIFDPointer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFIFDPOINTER);
	}

    /**
     * Get all values of property ExifIFDPointer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifIFDPointer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nexif.Photo> getAllExifIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}
	
    /**
     * Get all values of property ExifIFDPointer as a ReactorResult of Photo 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nexif.Photo> getAllExifIFDPointer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}

    /**
     * Get all values of property ExifIFDPointer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nexif.Photo> getAllExifIFDPointer() {
		return Base.getAll(this.model, this.getResource(), EXIFIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}

    /**
     * Get all values of property ExifIFDPointer as a ReactorResult of Photo 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nexif.Photo> getAllExifIFDPointer_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}
 
    /**
     * Adds a value to property ExifIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property ExifIFDPointer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFIFDPOINTER, value);
	}
    /**
     * Adds a value to property ExifIFDPointer from an instance of Photo 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.add(model, instanceResource, EXIFIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property ExifIFDPointer from an instance of Photo 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifIFDPointer(eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.add(this.model, this.getResource(), EXIFIFDPOINTER, value);
	}
  

    /**
     * Sets a value of property ExifIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property ExifIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFIFDPOINTER, value);
	}
    /**
     * Sets a value of property ExifIFDPointer from an instance of Photo 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.set(model, instanceResource, EXIFIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property ExifIFDPointer from an instance of Photo 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifIFDPointer(eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.set(this.model, this.getResource(), EXIFIFDPOINTER, value);
	}
  


    /**
     * Removes a value of property ExifIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property ExifIFDPointer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFIFDPOINTER, value);
	}
    /**
     * Removes a value of property ExifIFDPointer given as an instance of Photo 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.remove(model, instanceResource, EXIFIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property ExifIFDPointer given as an instance of Photo 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifIFDPointer(eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.remove(this.model, this.getResource(), EXIFIFDPOINTER, value);
	}
  
    /**
     * Removes all values of property ExifIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFIFDPOINTER);
	}
	
    /**
     * Removes all values of property ExifIFDPointer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifIFDPointer() {
		Base.removeAll(this.model, this.getResource(), EXIFIFDPOINTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47ef10be has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47ef10be has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifVersion() {
		return Base.has(this.model, this.getResource(), EXIFVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47ef10be has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47ef10be has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifVersion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFVERSION);
	}

     /**
     * Get all values of property ExifVersion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifVersion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFVERSION);
	}
	
    /**
     * Get all values of property ExifVersion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifVersion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExifVersion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifVersion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFVERSION);
	}

    /**
     * Get all values of property ExifVersion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifVersion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExifVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllExifVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFVERSION, java.lang.String.class);
	}
	
    /**
     * Get all values of property ExifVersion as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllExifVersion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFVERSION, java.lang.String.class);
	}

    /**
     * Get all values of property ExifVersion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllExifVersion() {
		return Base.getAll(this.model, this.getResource(), EXIFVERSION, java.lang.String.class);
	}

    /**
     * Get all values of property ExifVersion as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllExifVersion_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFVERSION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ExifVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFVERSION, value);
	}
	
    /**
     * Adds a value to property ExifVersion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFVERSION, value);
	}
    /**
     * Adds a value to property ExifVersion from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, EXIFVERSION, value);
	}
	
    /**
     * Adds a value to property ExifVersion from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifVersion(java.lang.String value) {
		Base.add(this.model, this.getResource(), EXIFVERSION, value);
	}
  

    /**
     * Sets a value of property ExifVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFVERSION, value);
	}
	
    /**
     * Sets a value of property ExifVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFVERSION, value);
	}
    /**
     * Sets a value of property ExifVersion from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, EXIFVERSION, value);
	}
	
    /**
     * Sets a value of property ExifVersion from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifVersion(java.lang.String value) {
		Base.set(this.model, this.getResource(), EXIFVERSION, value);
	}
  


    /**
     * Removes a value of property ExifVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFVERSION, value);
	}
	
    /**
     * Removes a value of property ExifVersion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFVERSION, value);
	}
    /**
     * Removes a value of property ExifVersion given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, EXIFVERSION, value);
	}
	
    /**
     * Removes a value of property ExifVersion given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifVersion(java.lang.String value) {
		Base.remove(this.model, this.getResource(), EXIFVERSION, value);
	}
  
    /**
     * Removes all values of property ExifVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFVERSION);
	}
	
    /**
     * Removes all values of property ExifVersion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifVersion() {
		Base.removeAll(this.model, this.getResource(), EXIFVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192040a6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExifdata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXIFDATA);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192040a6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExifdata() {
		return Base.has(this.model, this.getResource(), EXIFDATA);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192040a6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExifdata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXIFDATA);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192040a6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExifdata( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXIFDATA);
	}

     /**
     * Get all values of property Exifdata as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifdata_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXIFDATA);
	}
	
    /**
     * Get all values of property Exifdata as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifdata_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDATA, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Exifdata as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExifdata_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXIFDATA);
	}

    /**
     * Get all values of property Exifdata as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExifdata_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDATA, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Exifdata     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllExifdata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXIFDATA, java.lang.String.class);
	}
	
    /**
     * Get all values of property Exifdata as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllExifdata_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXIFDATA, java.lang.String.class);
	}

    /**
     * Get all values of property Exifdata     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllExifdata() {
		return Base.getAll(this.model, this.getResource(), EXIFDATA, java.lang.String.class);
	}

    /**
     * Get all values of property Exifdata as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllExifdata_as() {
		return Base.getAll_as(this.model, this.getResource(), EXIFDATA, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Exifdata as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExifdata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXIFDATA, value);
	}
	
    /**
     * Adds a value to property Exifdata as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExifdata( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXIFDATA, value);
	}
    /**
     * Adds a value to property Exifdata from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExifdata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, EXIFDATA, value);
	}
	
    /**
     * Adds a value to property Exifdata from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExifdata(java.lang.String value) {
		Base.add(this.model, this.getResource(), EXIFDATA, value);
	}
  

    /**
     * Sets a value of property Exifdata from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExifdata( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXIFDATA, value);
	}
	
    /**
     * Sets a value of property Exifdata from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExifdata( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXIFDATA, value);
	}
    /**
     * Sets a value of property Exifdata from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExifdata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, EXIFDATA, value);
	}
	
    /**
     * Sets a value of property Exifdata from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExifdata(java.lang.String value) {
		Base.set(this.model, this.getResource(), EXIFDATA, value);
	}
  


    /**
     * Removes a value of property Exifdata as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExifdata( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXIFDATA, value);
	}
	
    /**
     * Removes a value of property Exifdata as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExifdata( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXIFDATA, value);
	}
    /**
     * Removes a value of property Exifdata given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExifdata(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, EXIFDATA, value);
	}
	
    /**
     * Removes a value of property Exifdata given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExifdata(java.lang.String value) {
		Base.remove(this.model, this.getResource(), EXIFDATA, value);
	}
  
    /**
     * Removes all values of property Exifdata     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExifdata( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXIFDATA);
	}
	
    /**
     * Removes all values of property Exifdata	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExifdata() {
		Base.removeAll(this.model, this.getResource(), EXIFDATA);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61539c24 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExposureBiasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXPOSUREBIASVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61539c24 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExposureBiasValue() {
		return Base.has(this.model, this.getResource(), EXPOSUREBIASVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61539c24 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExposureBiasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXPOSUREBIASVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61539c24 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExposureBiasValue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXPOSUREBIASVALUE);
	}

     /**
     * Get all values of property ExposureBiasValue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExposureBiasValue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXPOSUREBIASVALUE);
	}
	
    /**
     * Get all values of property ExposureBiasValue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExposureBiasValue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPOSUREBIASVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExposureBiasValue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExposureBiasValue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXPOSUREBIASVALUE);
	}

    /**
     * Get all values of property ExposureBiasValue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExposureBiasValue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXPOSUREBIASVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExposureBiasValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllExposureBiasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXPOSUREBIASVALUE, java.lang.Float.class);
	}
	
    /**
     * Get all values of property ExposureBiasValue as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllExposureBiasValue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPOSUREBIASVALUE, java.lang.Float.class);
	}

    /**
     * Get all values of property ExposureBiasValue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllExposureBiasValue() {
		return Base.getAll(this.model, this.getResource(), EXPOSUREBIASVALUE, java.lang.Float.class);
	}

    /**
     * Get all values of property ExposureBiasValue as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllExposureBiasValue_as() {
		return Base.getAll_as(this.model, this.getResource(), EXPOSUREBIASVALUE, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property ExposureBiasValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExposureBiasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXPOSUREBIASVALUE, value);
	}
	
    /**
     * Adds a value to property ExposureBiasValue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExposureBiasValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXPOSUREBIASVALUE, value);
	}
    /**
     * Adds a value to property ExposureBiasValue from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExposureBiasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, EXPOSUREBIASVALUE, value);
	}
	
    /**
     * Adds a value to property ExposureBiasValue from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExposureBiasValue(java.lang.Float value) {
		Base.add(this.model, this.getResource(), EXPOSUREBIASVALUE, value);
	}
  

    /**
     * Sets a value of property ExposureBiasValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExposureBiasValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXPOSUREBIASVALUE, value);
	}
	
    /**
     * Sets a value of property ExposureBiasValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExposureBiasValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXPOSUREBIASVALUE, value);
	}
    /**
     * Sets a value of property ExposureBiasValue from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExposureBiasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, EXPOSUREBIASVALUE, value);
	}
	
    /**
     * Sets a value of property ExposureBiasValue from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExposureBiasValue(java.lang.Float value) {
		Base.set(this.model, this.getResource(), EXPOSUREBIASVALUE, value);
	}
  


    /**
     * Removes a value of property ExposureBiasValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExposureBiasValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXPOSUREBIASVALUE, value);
	}
	
    /**
     * Removes a value of property ExposureBiasValue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExposureBiasValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXPOSUREBIASVALUE, value);
	}
    /**
     * Removes a value of property ExposureBiasValue given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExposureBiasValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, EXPOSUREBIASVALUE, value);
	}
	
    /**
     * Removes a value of property ExposureBiasValue given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExposureBiasValue(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), EXPOSUREBIASVALUE, value);
	}
  
    /**
     * Removes all values of property ExposureBiasValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExposureBiasValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXPOSUREBIASVALUE);
	}
	
    /**
     * Removes all values of property ExposureBiasValue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExposureBiasValue() {
		Base.removeAll(this.model, this.getResource(), EXPOSUREBIASVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@155767ad has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExposureIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXPOSUREINDEX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@155767ad has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExposureIndex() {
		return Base.has(this.model, this.getResource(), EXPOSUREINDEX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@155767ad has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExposureIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXPOSUREINDEX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@155767ad has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExposureIndex( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXPOSUREINDEX);
	}

     /**
     * Get all values of property ExposureIndex as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExposureIndex_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXPOSUREINDEX);
	}
	
    /**
     * Get all values of property ExposureIndex as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExposureIndex_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPOSUREINDEX, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExposureIndex as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExposureIndex_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXPOSUREINDEX);
	}

    /**
     * Get all values of property ExposureIndex as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExposureIndex_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXPOSUREINDEX, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExposureIndex     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllExposureIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXPOSUREINDEX, java.lang.Float.class);
	}
	
    /**
     * Get all values of property ExposureIndex as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllExposureIndex_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPOSUREINDEX, java.lang.Float.class);
	}

    /**
     * Get all values of property ExposureIndex     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllExposureIndex() {
		return Base.getAll(this.model, this.getResource(), EXPOSUREINDEX, java.lang.Float.class);
	}

    /**
     * Get all values of property ExposureIndex as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllExposureIndex_as() {
		return Base.getAll_as(this.model, this.getResource(), EXPOSUREINDEX, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property ExposureIndex as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExposureIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXPOSUREINDEX, value);
	}
	
    /**
     * Adds a value to property ExposureIndex as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExposureIndex( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXPOSUREINDEX, value);
	}
    /**
     * Adds a value to property ExposureIndex from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExposureIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, EXPOSUREINDEX, value);
	}
	
    /**
     * Adds a value to property ExposureIndex from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExposureIndex(java.lang.Float value) {
		Base.add(this.model, this.getResource(), EXPOSUREINDEX, value);
	}
  

    /**
     * Sets a value of property ExposureIndex from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExposureIndex( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXPOSUREINDEX, value);
	}
	
    /**
     * Sets a value of property ExposureIndex from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExposureIndex( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXPOSUREINDEX, value);
	}
    /**
     * Sets a value of property ExposureIndex from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExposureIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, EXPOSUREINDEX, value);
	}
	
    /**
     * Sets a value of property ExposureIndex from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExposureIndex(java.lang.Float value) {
		Base.set(this.model, this.getResource(), EXPOSUREINDEX, value);
	}
  


    /**
     * Removes a value of property ExposureIndex as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExposureIndex( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXPOSUREINDEX, value);
	}
	
    /**
     * Removes a value of property ExposureIndex as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExposureIndex( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXPOSUREINDEX, value);
	}
    /**
     * Removes a value of property ExposureIndex given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExposureIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, EXPOSUREINDEX, value);
	}
	
    /**
     * Removes a value of property ExposureIndex given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExposureIndex(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), EXPOSUREINDEX, value);
	}
  
    /**
     * Removes all values of property ExposureIndex     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExposureIndex( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXPOSUREINDEX);
	}
	
    /**
     * Removes all values of property ExposureIndex	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExposureIndex() {
		Base.removeAll(this.model, this.getResource(), EXPOSUREINDEX);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fe9cdc8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExposureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXPOSUREMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fe9cdc8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExposureMode() {
		return Base.has(this.model, this.getResource(), EXPOSUREMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fe9cdc8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExposureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXPOSUREMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fe9cdc8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExposureMode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXPOSUREMODE);
	}

     /**
     * Get all values of property ExposureMode as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExposureMode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXPOSUREMODE);
	}
	
    /**
     * Get all values of property ExposureMode as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExposureMode_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPOSUREMODE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExposureMode as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExposureMode_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXPOSUREMODE);
	}

    /**
     * Get all values of property ExposureMode as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExposureMode_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXPOSUREMODE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExposureMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllExposureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXPOSUREMODE, java.lang.String.class);
	}
	
    /**
     * Get all values of property ExposureMode as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllExposureMode_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPOSUREMODE, java.lang.String.class);
	}

    /**
     * Get all values of property ExposureMode     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllExposureMode() {
		return Base.getAll(this.model, this.getResource(), EXPOSUREMODE, java.lang.String.class);
	}

    /**
     * Get all values of property ExposureMode as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllExposureMode_as() {
		return Base.getAll_as(this.model, this.getResource(), EXPOSUREMODE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ExposureMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExposureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXPOSUREMODE, value);
	}
	
    /**
     * Adds a value to property ExposureMode as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExposureMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXPOSUREMODE, value);
	}
    /**
     * Adds a value to property ExposureMode from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExposureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, EXPOSUREMODE, value);
	}
	
    /**
     * Adds a value to property ExposureMode from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExposureMode(java.lang.String value) {
		Base.add(this.model, this.getResource(), EXPOSUREMODE, value);
	}
  

    /**
     * Sets a value of property ExposureMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExposureMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXPOSUREMODE, value);
	}
	
    /**
     * Sets a value of property ExposureMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExposureMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXPOSUREMODE, value);
	}
    /**
     * Sets a value of property ExposureMode from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExposureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, EXPOSUREMODE, value);
	}
	
    /**
     * Sets a value of property ExposureMode from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExposureMode(java.lang.String value) {
		Base.set(this.model, this.getResource(), EXPOSUREMODE, value);
	}
  


    /**
     * Removes a value of property ExposureMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExposureMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXPOSUREMODE, value);
	}
	
    /**
     * Removes a value of property ExposureMode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExposureMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXPOSUREMODE, value);
	}
    /**
     * Removes a value of property ExposureMode given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExposureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, EXPOSUREMODE, value);
	}
	
    /**
     * Removes a value of property ExposureMode given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExposureMode(java.lang.String value) {
		Base.remove(this.model, this.getResource(), EXPOSUREMODE, value);
	}
  
    /**
     * Removes all values of property ExposureMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExposureMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXPOSUREMODE);
	}
	
    /**
     * Removes all values of property ExposureMode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExposureMode() {
		Base.removeAll(this.model, this.getResource(), EXPOSUREMODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@432ba62 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExposureProgram(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXPOSUREPROGRAM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@432ba62 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExposureProgram() {
		return Base.has(this.model, this.getResource(), EXPOSUREPROGRAM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@432ba62 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExposureProgram(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXPOSUREPROGRAM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@432ba62 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExposureProgram( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXPOSUREPROGRAM);
	}

     /**
     * Get all values of property ExposureProgram as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExposureProgram_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXPOSUREPROGRAM);
	}
	
    /**
     * Get all values of property ExposureProgram as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExposureProgram_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPOSUREPROGRAM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExposureProgram as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExposureProgram_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXPOSUREPROGRAM);
	}

    /**
     * Get all values of property ExposureProgram as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExposureProgram_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXPOSUREPROGRAM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExposureProgram     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllExposureProgram(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXPOSUREPROGRAM, java.lang.String.class);
	}
	
    /**
     * Get all values of property ExposureProgram as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllExposureProgram_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPOSUREPROGRAM, java.lang.String.class);
	}

    /**
     * Get all values of property ExposureProgram     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllExposureProgram() {
		return Base.getAll(this.model, this.getResource(), EXPOSUREPROGRAM, java.lang.String.class);
	}

    /**
     * Get all values of property ExposureProgram as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllExposureProgram_as() {
		return Base.getAll_as(this.model, this.getResource(), EXPOSUREPROGRAM, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ExposureProgram as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExposureProgram(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXPOSUREPROGRAM, value);
	}
	
    /**
     * Adds a value to property ExposureProgram as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExposureProgram( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXPOSUREPROGRAM, value);
	}
    /**
     * Adds a value to property ExposureProgram from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExposureProgram(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, EXPOSUREPROGRAM, value);
	}
	
    /**
     * Adds a value to property ExposureProgram from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExposureProgram(java.lang.String value) {
		Base.add(this.model, this.getResource(), EXPOSUREPROGRAM, value);
	}
  

    /**
     * Sets a value of property ExposureProgram from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExposureProgram( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXPOSUREPROGRAM, value);
	}
	
    /**
     * Sets a value of property ExposureProgram from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExposureProgram( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXPOSUREPROGRAM, value);
	}
    /**
     * Sets a value of property ExposureProgram from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExposureProgram(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, EXPOSUREPROGRAM, value);
	}
	
    /**
     * Sets a value of property ExposureProgram from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExposureProgram(java.lang.String value) {
		Base.set(this.model, this.getResource(), EXPOSUREPROGRAM, value);
	}
  


    /**
     * Removes a value of property ExposureProgram as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExposureProgram( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXPOSUREPROGRAM, value);
	}
	
    /**
     * Removes a value of property ExposureProgram as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExposureProgram( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXPOSUREPROGRAM, value);
	}
    /**
     * Removes a value of property ExposureProgram given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExposureProgram(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, EXPOSUREPROGRAM, value);
	}
	
    /**
     * Removes a value of property ExposureProgram given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExposureProgram(java.lang.String value) {
		Base.remove(this.model, this.getResource(), EXPOSUREPROGRAM, value);
	}
  
    /**
     * Removes all values of property ExposureProgram     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExposureProgram( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXPOSUREPROGRAM);
	}
	
    /**
     * Removes all values of property ExposureProgram	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExposureProgram() {
		Base.removeAll(this.model, this.getResource(), EXPOSUREPROGRAM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b713040 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasExposureTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EXPOSURETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b713040 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasExposureTime() {
		return Base.has(this.model, this.getResource(), EXPOSURETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b713040 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasExposureTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EXPOSURETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b713040 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasExposureTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EXPOSURETIME);
	}

     /**
     * Get all values of property ExposureTime as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExposureTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EXPOSURETIME);
	}
	
    /**
     * Get all values of property ExposureTime as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExposureTime_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPOSURETIME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ExposureTime as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllExposureTime_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EXPOSURETIME);
	}

    /**
     * Get all values of property ExposureTime as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllExposureTime_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EXPOSURETIME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ExposureTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllExposureTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EXPOSURETIME, java.lang.Float.class);
	}
	
    /**
     * Get all values of property ExposureTime as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllExposureTime_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EXPOSURETIME, java.lang.Float.class);
	}

    /**
     * Get all values of property ExposureTime     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllExposureTime() {
		return Base.getAll(this.model, this.getResource(), EXPOSURETIME, java.lang.Float.class);
	}

    /**
     * Get all values of property ExposureTime as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllExposureTime_as() {
		return Base.getAll_as(this.model, this.getResource(), EXPOSURETIME, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property ExposureTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addExposureTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EXPOSURETIME, value);
	}
	
    /**
     * Adds a value to property ExposureTime as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addExposureTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EXPOSURETIME, value);
	}
    /**
     * Adds a value to property ExposureTime from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addExposureTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, EXPOSURETIME, value);
	}
	
    /**
     * Adds a value to property ExposureTime from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addExposureTime(java.lang.Float value) {
		Base.add(this.model, this.getResource(), EXPOSURETIME, value);
	}
  

    /**
     * Sets a value of property ExposureTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setExposureTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EXPOSURETIME, value);
	}
	
    /**
     * Sets a value of property ExposureTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setExposureTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EXPOSURETIME, value);
	}
    /**
     * Sets a value of property ExposureTime from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setExposureTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, EXPOSURETIME, value);
	}
	
    /**
     * Sets a value of property ExposureTime from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setExposureTime(java.lang.Float value) {
		Base.set(this.model, this.getResource(), EXPOSURETIME, value);
	}
  


    /**
     * Removes a value of property ExposureTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeExposureTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EXPOSURETIME, value);
	}
	
    /**
     * Removes a value of property ExposureTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeExposureTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EXPOSURETIME, value);
	}
    /**
     * Removes a value of property ExposureTime given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeExposureTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, EXPOSURETIME, value);
	}
	
    /**
     * Removes a value of property ExposureTime given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeExposureTime(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), EXPOSURETIME, value);
	}
  
    /**
     * Removes all values of property ExposureTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllExposureTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EXPOSURETIME);
	}
	
    /**
     * Removes all values of property ExposureTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllExposureTime() {
		Base.removeAll(this.model, this.getResource(), EXPOSURETIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@249d6d0e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@249d6d0e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFNumber() {
		return Base.has(this.model, this.getResource(), FNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@249d6d0e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@249d6d0e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFNumber( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FNUMBER);
	}

     /**
     * Get all values of property FNumber as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFNumber_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FNUMBER);
	}
	
    /**
     * Get all values of property FNumber as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFNumber_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FNumber as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFNumber_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FNUMBER);
	}

    /**
     * Get all values of property FNumber as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFNumber_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllFNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FNUMBER, java.lang.Float.class);
	}
	
    /**
     * Get all values of property FNumber as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllFNumber_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FNUMBER, java.lang.Float.class);
	}

    /**
     * Get all values of property FNumber     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllFNumber() {
		return Base.getAll(this.model, this.getResource(), FNUMBER, java.lang.Float.class);
	}

    /**
     * Get all values of property FNumber as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllFNumber_as() {
		return Base.getAll_as(this.model, this.getResource(), FNUMBER, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property FNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FNUMBER, value);
	}
	
    /**
     * Adds a value to property FNumber as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FNUMBER, value);
	}
    /**
     * Adds a value to property FNumber from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, FNUMBER, value);
	}
	
    /**
     * Adds a value to property FNumber from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFNumber(java.lang.Float value) {
		Base.add(this.model, this.getResource(), FNUMBER, value);
	}
  

    /**
     * Sets a value of property FNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FNUMBER, value);
	}
	
    /**
     * Sets a value of property FNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FNUMBER, value);
	}
    /**
     * Sets a value of property FNumber from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, FNUMBER, value);
	}
	
    /**
     * Sets a value of property FNumber from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFNumber(java.lang.Float value) {
		Base.set(this.model, this.getResource(), FNUMBER, value);
	}
  


    /**
     * Removes a value of property FNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FNUMBER, value);
	}
	
    /**
     * Removes a value of property FNumber as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FNUMBER, value);
	}
    /**
     * Removes a value of property FNumber given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, FNUMBER, value);
	}
	
    /**
     * Removes a value of property FNumber given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFNumber(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), FNUMBER, value);
	}
  
    /**
     * Removes all values of property FNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FNUMBER);
	}
	
    /**
     * Removes all values of property FNumber	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFNumber() {
		Base.removeAll(this.model, this.getResource(), FNUMBER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1006e28f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFileSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FILESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1006e28f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFileSource() {
		return Base.has(this.model, this.getResource(), FILESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1006e28f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFileSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FILESOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1006e28f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFileSource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FILESOURCE);
	}

     /**
     * Get all values of property FileSource as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileSource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FILESOURCE);
	}
	
    /**
     * Get all values of property FileSource as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileSource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FileSource as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFileSource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FILESOURCE);
	}

    /**
     * Get all values of property FileSource as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFileSource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FILESOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FileSource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFileSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FILESOURCE, java.lang.String.class);
	}
	
    /**
     * Get all values of property FileSource as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFileSource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FILESOURCE, java.lang.String.class);
	}

    /**
     * Get all values of property FileSource     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFileSource() {
		return Base.getAll(this.model, this.getResource(), FILESOURCE, java.lang.String.class);
	}

    /**
     * Get all values of property FileSource as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFileSource_as() {
		return Base.getAll_as(this.model, this.getResource(), FILESOURCE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property FileSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFileSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FILESOURCE, value);
	}
	
    /**
     * Adds a value to property FileSource as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFileSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FILESOURCE, value);
	}
    /**
     * Adds a value to property FileSource from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFileSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, FILESOURCE, value);
	}
	
    /**
     * Adds a value to property FileSource from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFileSource(java.lang.String value) {
		Base.add(this.model, this.getResource(), FILESOURCE, value);
	}
  

    /**
     * Sets a value of property FileSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFileSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FILESOURCE, value);
	}
	
    /**
     * Sets a value of property FileSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFileSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FILESOURCE, value);
	}
    /**
     * Sets a value of property FileSource from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFileSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, FILESOURCE, value);
	}
	
    /**
     * Sets a value of property FileSource from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFileSource(java.lang.String value) {
		Base.set(this.model, this.getResource(), FILESOURCE, value);
	}
  


    /**
     * Removes a value of property FileSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFileSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FILESOURCE, value);
	}
	
    /**
     * Removes a value of property FileSource as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFileSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FILESOURCE, value);
	}
    /**
     * Removes a value of property FileSource given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFileSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, FILESOURCE, value);
	}
	
    /**
     * Removes a value of property FileSource given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFileSource(java.lang.String value) {
		Base.remove(this.model, this.getResource(), FILESOURCE, value);
	}
  
    /**
     * Removes all values of property FileSource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFileSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FILESOURCE);
	}
	
    /**
     * Removes all values of property FileSource	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFileSource() {
		Base.removeAll(this.model, this.getResource(), FILESOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22e67bbf has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFlash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FLASH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22e67bbf has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFlash() {
		return Base.has(this.model, this.getResource(), FLASH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22e67bbf has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFlash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FLASH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22e67bbf has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFlash( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FLASH);
	}

     /**
     * Get all values of property Flash as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFlash_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FLASH);
	}
	
    /**
     * Get all values of property Flash as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFlash_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FLASH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Flash as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFlash_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FLASH);
	}

    /**
     * Get all values of property Flash as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFlash_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FLASH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Flash     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFlash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FLASH, java.lang.String.class);
	}
	
    /**
     * Get all values of property Flash as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFlash_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FLASH, java.lang.String.class);
	}

    /**
     * Get all values of property Flash     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFlash() {
		return Base.getAll(this.model, this.getResource(), FLASH, java.lang.String.class);
	}

    /**
     * Get all values of property Flash as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFlash_as() {
		return Base.getAll_as(this.model, this.getResource(), FLASH, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Flash as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFlash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FLASH, value);
	}
	
    /**
     * Adds a value to property Flash as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFlash( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FLASH, value);
	}
    /**
     * Adds a value to property Flash from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFlash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, FLASH, value);
	}
	
    /**
     * Adds a value to property Flash from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFlash(java.lang.String value) {
		Base.add(this.model, this.getResource(), FLASH, value);
	}
  

    /**
     * Sets a value of property Flash from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFlash( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FLASH, value);
	}
	
    /**
     * Sets a value of property Flash from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFlash( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FLASH, value);
	}
    /**
     * Sets a value of property Flash from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFlash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, FLASH, value);
	}
	
    /**
     * Sets a value of property Flash from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFlash(java.lang.String value) {
		Base.set(this.model, this.getResource(), FLASH, value);
	}
  


    /**
     * Removes a value of property Flash as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFlash( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FLASH, value);
	}
	
    /**
     * Removes a value of property Flash as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFlash( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FLASH, value);
	}
    /**
     * Removes a value of property Flash given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFlash(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, FLASH, value);
	}
	
    /**
     * Removes a value of property Flash given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFlash(java.lang.String value) {
		Base.remove(this.model, this.getResource(), FLASH, value);
	}
  
    /**
     * Removes all values of property Flash     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFlash( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FLASH);
	}
	
    /**
     * Removes all values of property Flash	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFlash() {
		Base.removeAll(this.model, this.getResource(), FLASH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b7ee074 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFlashEnergy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FLASHENERGY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b7ee074 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFlashEnergy() {
		return Base.has(this.model, this.getResource(), FLASHENERGY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b7ee074 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFlashEnergy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FLASHENERGY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b7ee074 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFlashEnergy( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FLASHENERGY);
	}

     /**
     * Get all values of property FlashEnergy as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFlashEnergy_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FLASHENERGY);
	}
	
    /**
     * Get all values of property FlashEnergy as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFlashEnergy_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FLASHENERGY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FlashEnergy as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFlashEnergy_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FLASHENERGY);
	}

    /**
     * Get all values of property FlashEnergy as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFlashEnergy_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FLASHENERGY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FlashEnergy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllFlashEnergy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FLASHENERGY, java.lang.Float.class);
	}
	
    /**
     * Get all values of property FlashEnergy as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllFlashEnergy_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FLASHENERGY, java.lang.Float.class);
	}

    /**
     * Get all values of property FlashEnergy     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllFlashEnergy() {
		return Base.getAll(this.model, this.getResource(), FLASHENERGY, java.lang.Float.class);
	}

    /**
     * Get all values of property FlashEnergy as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllFlashEnergy_as() {
		return Base.getAll_as(this.model, this.getResource(), FLASHENERGY, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property FlashEnergy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFlashEnergy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FLASHENERGY, value);
	}
	
    /**
     * Adds a value to property FlashEnergy as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFlashEnergy( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FLASHENERGY, value);
	}
    /**
     * Adds a value to property FlashEnergy from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFlashEnergy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, FLASHENERGY, value);
	}
	
    /**
     * Adds a value to property FlashEnergy from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFlashEnergy(java.lang.Float value) {
		Base.add(this.model, this.getResource(), FLASHENERGY, value);
	}
  

    /**
     * Sets a value of property FlashEnergy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFlashEnergy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FLASHENERGY, value);
	}
	
    /**
     * Sets a value of property FlashEnergy from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFlashEnergy( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FLASHENERGY, value);
	}
    /**
     * Sets a value of property FlashEnergy from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFlashEnergy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, FLASHENERGY, value);
	}
	
    /**
     * Sets a value of property FlashEnergy from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFlashEnergy(java.lang.Float value) {
		Base.set(this.model, this.getResource(), FLASHENERGY, value);
	}
  


    /**
     * Removes a value of property FlashEnergy as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFlashEnergy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FLASHENERGY, value);
	}
	
    /**
     * Removes a value of property FlashEnergy as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFlashEnergy( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FLASHENERGY, value);
	}
    /**
     * Removes a value of property FlashEnergy given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFlashEnergy(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, FLASHENERGY, value);
	}
	
    /**
     * Removes a value of property FlashEnergy given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFlashEnergy(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), FLASHENERGY, value);
	}
  
    /**
     * Removes all values of property FlashEnergy     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFlashEnergy( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FLASHENERGY);
	}
	
    /**
     * Removes all values of property FlashEnergy	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFlashEnergy() {
		Base.removeAll(this.model, this.getResource(), FLASHENERGY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71cdc96a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFlashpixVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FLASHPIXVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71cdc96a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFlashpixVersion() {
		return Base.has(this.model, this.getResource(), FLASHPIXVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71cdc96a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFlashpixVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FLASHPIXVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@71cdc96a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFlashpixVersion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FLASHPIXVERSION);
	}

     /**
     * Get all values of property FlashpixVersion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFlashpixVersion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FLASHPIXVERSION);
	}
	
    /**
     * Get all values of property FlashpixVersion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFlashpixVersion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FLASHPIXVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FlashpixVersion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFlashpixVersion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FLASHPIXVERSION);
	}

    /**
     * Get all values of property FlashpixVersion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFlashpixVersion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FLASHPIXVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FlashpixVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFlashpixVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FLASHPIXVERSION, java.lang.String.class);
	}
	
    /**
     * Get all values of property FlashpixVersion as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFlashpixVersion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FLASHPIXVERSION, java.lang.String.class);
	}

    /**
     * Get all values of property FlashpixVersion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFlashpixVersion() {
		return Base.getAll(this.model, this.getResource(), FLASHPIXVERSION, java.lang.String.class);
	}

    /**
     * Get all values of property FlashpixVersion as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFlashpixVersion_as() {
		return Base.getAll_as(this.model, this.getResource(), FLASHPIXVERSION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property FlashpixVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFlashpixVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FLASHPIXVERSION, value);
	}
	
    /**
     * Adds a value to property FlashpixVersion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFlashpixVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FLASHPIXVERSION, value);
	}
    /**
     * Adds a value to property FlashpixVersion from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFlashpixVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, FLASHPIXVERSION, value);
	}
	
    /**
     * Adds a value to property FlashpixVersion from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFlashpixVersion(java.lang.String value) {
		Base.add(this.model, this.getResource(), FLASHPIXVERSION, value);
	}
  

    /**
     * Sets a value of property FlashpixVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFlashpixVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FLASHPIXVERSION, value);
	}
	
    /**
     * Sets a value of property FlashpixVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFlashpixVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FLASHPIXVERSION, value);
	}
    /**
     * Sets a value of property FlashpixVersion from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFlashpixVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, FLASHPIXVERSION, value);
	}
	
    /**
     * Sets a value of property FlashpixVersion from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFlashpixVersion(java.lang.String value) {
		Base.set(this.model, this.getResource(), FLASHPIXVERSION, value);
	}
  


    /**
     * Removes a value of property FlashpixVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFlashpixVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FLASHPIXVERSION, value);
	}
	
    /**
     * Removes a value of property FlashpixVersion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFlashpixVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FLASHPIXVERSION, value);
	}
    /**
     * Removes a value of property FlashpixVersion given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFlashpixVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, FLASHPIXVERSION, value);
	}
	
    /**
     * Removes a value of property FlashpixVersion given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFlashpixVersion(java.lang.String value) {
		Base.remove(this.model, this.getResource(), FLASHPIXVERSION, value);
	}
  
    /**
     * Removes all values of property FlashpixVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFlashpixVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FLASHPIXVERSION);
	}
	
    /**
     * Removes all values of property FlashpixVersion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFlashpixVersion() {
		Base.removeAll(this.model, this.getResource(), FLASHPIXVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b998b0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFocalLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FOCALLENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b998b0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFocalLength() {
		return Base.has(this.model, this.getResource(), FOCALLENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b998b0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFocalLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FOCALLENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2b998b0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFocalLength( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FOCALLENGTH);
	}

     /**
     * Get all values of property FocalLength as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFocalLength_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FOCALLENGTH);
	}
	
    /**
     * Get all values of property FocalLength as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFocalLength_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOCALLENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FocalLength as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFocalLength_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FOCALLENGTH);
	}

    /**
     * Get all values of property FocalLength as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFocalLength_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FOCALLENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FocalLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllFocalLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FOCALLENGTH, java.lang.Float.class);
	}
	
    /**
     * Get all values of property FocalLength as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllFocalLength_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOCALLENGTH, java.lang.Float.class);
	}

    /**
     * Get all values of property FocalLength     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllFocalLength() {
		return Base.getAll(this.model, this.getResource(), FOCALLENGTH, java.lang.Float.class);
	}

    /**
     * Get all values of property FocalLength as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllFocalLength_as() {
		return Base.getAll_as(this.model, this.getResource(), FOCALLENGTH, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property FocalLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFocalLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FOCALLENGTH, value);
	}
	
    /**
     * Adds a value to property FocalLength as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFocalLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FOCALLENGTH, value);
	}
    /**
     * Adds a value to property FocalLength from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFocalLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, FOCALLENGTH, value);
	}
	
    /**
     * Adds a value to property FocalLength from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFocalLength(java.lang.Float value) {
		Base.add(this.model, this.getResource(), FOCALLENGTH, value);
	}
  

    /**
     * Sets a value of property FocalLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFocalLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FOCALLENGTH, value);
	}
	
    /**
     * Sets a value of property FocalLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFocalLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FOCALLENGTH, value);
	}
    /**
     * Sets a value of property FocalLength from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFocalLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, FOCALLENGTH, value);
	}
	
    /**
     * Sets a value of property FocalLength from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFocalLength(java.lang.Float value) {
		Base.set(this.model, this.getResource(), FOCALLENGTH, value);
	}
  


    /**
     * Removes a value of property FocalLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFocalLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FOCALLENGTH, value);
	}
	
    /**
     * Removes a value of property FocalLength as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFocalLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FOCALLENGTH, value);
	}
    /**
     * Removes a value of property FocalLength given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFocalLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, FOCALLENGTH, value);
	}
	
    /**
     * Removes a value of property FocalLength given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFocalLength(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), FOCALLENGTH, value);
	}
  
    /**
     * Removes all values of property FocalLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFocalLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FOCALLENGTH);
	}
	
    /**
     * Removes all values of property FocalLength	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFocalLength() {
		Base.removeAll(this.model, this.getResource(), FOCALLENGTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3360f6c5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFocalLengthIn35mmFilm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FOCALLENGTHIN35MMFILM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3360f6c5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFocalLengthIn35mmFilm() {
		return Base.has(this.model, this.getResource(), FOCALLENGTHIN35MMFILM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3360f6c5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFocalLengthIn35mmFilm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FOCALLENGTHIN35MMFILM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3360f6c5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFocalLengthIn35mmFilm( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FOCALLENGTHIN35MMFILM);
	}

     /**
     * Get all values of property FocalLengthIn35mmFilm as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFocalLengthIn35mmFilm_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FOCALLENGTHIN35MMFILM);
	}
	
    /**
     * Get all values of property FocalLengthIn35mmFilm as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFocalLengthIn35mmFilm_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOCALLENGTHIN35MMFILM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FocalLengthIn35mmFilm as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFocalLengthIn35mmFilm_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FOCALLENGTHIN35MMFILM);
	}

    /**
     * Get all values of property FocalLengthIn35mmFilm as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFocalLengthIn35mmFilm_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FOCALLENGTHIN35MMFILM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FocalLengthIn35mmFilm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllFocalLengthIn35mmFilm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FOCALLENGTHIN35MMFILM, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property FocalLengthIn35mmFilm as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllFocalLengthIn35mmFilm_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOCALLENGTHIN35MMFILM, java.lang.Integer.class);
	}

    /**
     * Get all values of property FocalLengthIn35mmFilm     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllFocalLengthIn35mmFilm() {
		return Base.getAll(this.model, this.getResource(), FOCALLENGTHIN35MMFILM, java.lang.Integer.class);
	}

    /**
     * Get all values of property FocalLengthIn35mmFilm as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllFocalLengthIn35mmFilm_as() {
		return Base.getAll_as(this.model, this.getResource(), FOCALLENGTHIN35MMFILM, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property FocalLengthIn35mmFilm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFocalLengthIn35mmFilm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FOCALLENGTHIN35MMFILM, value);
	}
	
    /**
     * Adds a value to property FocalLengthIn35mmFilm as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFocalLengthIn35mmFilm( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FOCALLENGTHIN35MMFILM, value);
	}
    /**
     * Adds a value to property FocalLengthIn35mmFilm from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFocalLengthIn35mmFilm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, FOCALLENGTHIN35MMFILM, value);
	}
	
    /**
     * Adds a value to property FocalLengthIn35mmFilm from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFocalLengthIn35mmFilm(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), FOCALLENGTHIN35MMFILM, value);
	}
  

    /**
     * Sets a value of property FocalLengthIn35mmFilm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFocalLengthIn35mmFilm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FOCALLENGTHIN35MMFILM, value);
	}
	
    /**
     * Sets a value of property FocalLengthIn35mmFilm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFocalLengthIn35mmFilm( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FOCALLENGTHIN35MMFILM, value);
	}
    /**
     * Sets a value of property FocalLengthIn35mmFilm from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFocalLengthIn35mmFilm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, FOCALLENGTHIN35MMFILM, value);
	}
	
    /**
     * Sets a value of property FocalLengthIn35mmFilm from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFocalLengthIn35mmFilm(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), FOCALLENGTHIN35MMFILM, value);
	}
  


    /**
     * Removes a value of property FocalLengthIn35mmFilm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFocalLengthIn35mmFilm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FOCALLENGTHIN35MMFILM, value);
	}
	
    /**
     * Removes a value of property FocalLengthIn35mmFilm as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFocalLengthIn35mmFilm( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FOCALLENGTHIN35MMFILM, value);
	}
    /**
     * Removes a value of property FocalLengthIn35mmFilm given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFocalLengthIn35mmFilm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, FOCALLENGTHIN35MMFILM, value);
	}
	
    /**
     * Removes a value of property FocalLengthIn35mmFilm given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFocalLengthIn35mmFilm(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), FOCALLENGTHIN35MMFILM, value);
	}
  
    /**
     * Removes all values of property FocalLengthIn35mmFilm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFocalLengthIn35mmFilm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FOCALLENGTHIN35MMFILM);
	}
	
    /**
     * Removes all values of property FocalLengthIn35mmFilm	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFocalLengthIn35mmFilm() {
		Base.removeAll(this.model, this.getResource(), FOCALLENGTHIN35MMFILM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ca6e4b3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFocalPlaneResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FOCALPLANERESOLUTIONUNIT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ca6e4b3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFocalPlaneResolutionUnit() {
		return Base.has(this.model, this.getResource(), FOCALPLANERESOLUTIONUNIT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ca6e4b3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFocalPlaneResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FOCALPLANERESOLUTIONUNIT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2ca6e4b3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFocalPlaneResolutionUnit( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FOCALPLANERESOLUTIONUNIT);
	}

     /**
     * Get all values of property FocalPlaneResolutionUnit as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFocalPlaneResolutionUnit_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FOCALPLANERESOLUTIONUNIT);
	}
	
    /**
     * Get all values of property FocalPlaneResolutionUnit as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFocalPlaneResolutionUnit_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOCALPLANERESOLUTIONUNIT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FocalPlaneResolutionUnit as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFocalPlaneResolutionUnit_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FOCALPLANERESOLUTIONUNIT);
	}

    /**
     * Get all values of property FocalPlaneResolutionUnit as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFocalPlaneResolutionUnit_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FOCALPLANERESOLUTIONUNIT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FocalPlaneResolutionUnit     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFocalPlaneResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FOCALPLANERESOLUTIONUNIT, java.lang.String.class);
	}
	
    /**
     * Get all values of property FocalPlaneResolutionUnit as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFocalPlaneResolutionUnit_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOCALPLANERESOLUTIONUNIT, java.lang.String.class);
	}

    /**
     * Get all values of property FocalPlaneResolutionUnit     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFocalPlaneResolutionUnit() {
		return Base.getAll(this.model, this.getResource(), FOCALPLANERESOLUTIONUNIT, java.lang.String.class);
	}

    /**
     * Get all values of property FocalPlaneResolutionUnit as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFocalPlaneResolutionUnit_as() {
		return Base.getAll_as(this.model, this.getResource(), FOCALPLANERESOLUTIONUNIT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property FocalPlaneResolutionUnit as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFocalPlaneResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FOCALPLANERESOLUTIONUNIT, value);
	}
	
    /**
     * Adds a value to property FocalPlaneResolutionUnit as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFocalPlaneResolutionUnit( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FOCALPLANERESOLUTIONUNIT, value);
	}
    /**
     * Adds a value to property FocalPlaneResolutionUnit from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFocalPlaneResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, FOCALPLANERESOLUTIONUNIT, value);
	}
	
    /**
     * Adds a value to property FocalPlaneResolutionUnit from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFocalPlaneResolutionUnit(java.lang.String value) {
		Base.add(this.model, this.getResource(), FOCALPLANERESOLUTIONUNIT, value);
	}
  

    /**
     * Sets a value of property FocalPlaneResolutionUnit from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFocalPlaneResolutionUnit( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FOCALPLANERESOLUTIONUNIT, value);
	}
	
    /**
     * Sets a value of property FocalPlaneResolutionUnit from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFocalPlaneResolutionUnit( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FOCALPLANERESOLUTIONUNIT, value);
	}
    /**
     * Sets a value of property FocalPlaneResolutionUnit from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFocalPlaneResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, FOCALPLANERESOLUTIONUNIT, value);
	}
	
    /**
     * Sets a value of property FocalPlaneResolutionUnit from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFocalPlaneResolutionUnit(java.lang.String value) {
		Base.set(this.model, this.getResource(), FOCALPLANERESOLUTIONUNIT, value);
	}
  


    /**
     * Removes a value of property FocalPlaneResolutionUnit as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFocalPlaneResolutionUnit( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FOCALPLANERESOLUTIONUNIT, value);
	}
	
    /**
     * Removes a value of property FocalPlaneResolutionUnit as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFocalPlaneResolutionUnit( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FOCALPLANERESOLUTIONUNIT, value);
	}
    /**
     * Removes a value of property FocalPlaneResolutionUnit given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFocalPlaneResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, FOCALPLANERESOLUTIONUNIT, value);
	}
	
    /**
     * Removes a value of property FocalPlaneResolutionUnit given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFocalPlaneResolutionUnit(java.lang.String value) {
		Base.remove(this.model, this.getResource(), FOCALPLANERESOLUTIONUNIT, value);
	}
  
    /**
     * Removes all values of property FocalPlaneResolutionUnit     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFocalPlaneResolutionUnit( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FOCALPLANERESOLUTIONUNIT);
	}
	
    /**
     * Removes all values of property FocalPlaneResolutionUnit	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFocalPlaneResolutionUnit() {
		Base.removeAll(this.model, this.getResource(), FOCALPLANERESOLUTIONUNIT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23f78d2b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFocalPlaneXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FOCALPLANEXRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23f78d2b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFocalPlaneXResolution() {
		return Base.has(this.model, this.getResource(), FOCALPLANEXRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23f78d2b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFocalPlaneXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FOCALPLANEXRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23f78d2b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFocalPlaneXResolution( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FOCALPLANEXRESOLUTION);
	}

     /**
     * Get all values of property FocalPlaneXResolution as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFocalPlaneXResolution_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FOCALPLANEXRESOLUTION);
	}
	
    /**
     * Get all values of property FocalPlaneXResolution as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFocalPlaneXResolution_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOCALPLANEXRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FocalPlaneXResolution as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFocalPlaneXResolution_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FOCALPLANEXRESOLUTION);
	}

    /**
     * Get all values of property FocalPlaneXResolution as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFocalPlaneXResolution_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FOCALPLANEXRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FocalPlaneXResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllFocalPlaneXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FOCALPLANEXRESOLUTION, java.lang.Float.class);
	}
	
    /**
     * Get all values of property FocalPlaneXResolution as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllFocalPlaneXResolution_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOCALPLANEXRESOLUTION, java.lang.Float.class);
	}

    /**
     * Get all values of property FocalPlaneXResolution     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllFocalPlaneXResolution() {
		return Base.getAll(this.model, this.getResource(), FOCALPLANEXRESOLUTION, java.lang.Float.class);
	}

    /**
     * Get all values of property FocalPlaneXResolution as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllFocalPlaneXResolution_as() {
		return Base.getAll_as(this.model, this.getResource(), FOCALPLANEXRESOLUTION, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property FocalPlaneXResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFocalPlaneXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FOCALPLANEXRESOLUTION, value);
	}
	
    /**
     * Adds a value to property FocalPlaneXResolution as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFocalPlaneXResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FOCALPLANEXRESOLUTION, value);
	}
    /**
     * Adds a value to property FocalPlaneXResolution from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFocalPlaneXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, FOCALPLANEXRESOLUTION, value);
	}
	
    /**
     * Adds a value to property FocalPlaneXResolution from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFocalPlaneXResolution(java.lang.Float value) {
		Base.add(this.model, this.getResource(), FOCALPLANEXRESOLUTION, value);
	}
  

    /**
     * Sets a value of property FocalPlaneXResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFocalPlaneXResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FOCALPLANEXRESOLUTION, value);
	}
	
    /**
     * Sets a value of property FocalPlaneXResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFocalPlaneXResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FOCALPLANEXRESOLUTION, value);
	}
    /**
     * Sets a value of property FocalPlaneXResolution from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFocalPlaneXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, FOCALPLANEXRESOLUTION, value);
	}
	
    /**
     * Sets a value of property FocalPlaneXResolution from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFocalPlaneXResolution(java.lang.Float value) {
		Base.set(this.model, this.getResource(), FOCALPLANEXRESOLUTION, value);
	}
  


    /**
     * Removes a value of property FocalPlaneXResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFocalPlaneXResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FOCALPLANEXRESOLUTION, value);
	}
	
    /**
     * Removes a value of property FocalPlaneXResolution as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFocalPlaneXResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FOCALPLANEXRESOLUTION, value);
	}
    /**
     * Removes a value of property FocalPlaneXResolution given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFocalPlaneXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, FOCALPLANEXRESOLUTION, value);
	}
	
    /**
     * Removes a value of property FocalPlaneXResolution given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFocalPlaneXResolution(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), FOCALPLANEXRESOLUTION, value);
	}
  
    /**
     * Removes all values of property FocalPlaneXResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFocalPlaneXResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FOCALPLANEXRESOLUTION);
	}
	
    /**
     * Removes all values of property FocalPlaneXResolution	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFocalPlaneXResolution() {
		Base.removeAll(this.model, this.getResource(), FOCALPLANEXRESOLUTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3354eefc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFocalPlaneYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FOCALPLANEYRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3354eefc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFocalPlaneYResolution() {
		return Base.has(this.model, this.getResource(), FOCALPLANEYRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3354eefc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFocalPlaneYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FOCALPLANEYRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3354eefc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFocalPlaneYResolution( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FOCALPLANEYRESOLUTION);
	}

     /**
     * Get all values of property FocalPlaneYResolution as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFocalPlaneYResolution_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FOCALPLANEYRESOLUTION);
	}
	
    /**
     * Get all values of property FocalPlaneYResolution as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFocalPlaneYResolution_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOCALPLANEYRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FocalPlaneYResolution as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFocalPlaneYResolution_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FOCALPLANEYRESOLUTION);
	}

    /**
     * Get all values of property FocalPlaneYResolution as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFocalPlaneYResolution_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FOCALPLANEYRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FocalPlaneYResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllFocalPlaneYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FOCALPLANEYRESOLUTION, java.lang.Float.class);
	}
	
    /**
     * Get all values of property FocalPlaneYResolution as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllFocalPlaneYResolution_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOCALPLANEYRESOLUTION, java.lang.Float.class);
	}

    /**
     * Get all values of property FocalPlaneYResolution     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllFocalPlaneYResolution() {
		return Base.getAll(this.model, this.getResource(), FOCALPLANEYRESOLUTION, java.lang.Float.class);
	}

    /**
     * Get all values of property FocalPlaneYResolution as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllFocalPlaneYResolution_as() {
		return Base.getAll_as(this.model, this.getResource(), FOCALPLANEYRESOLUTION, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property FocalPlaneYResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFocalPlaneYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FOCALPLANEYRESOLUTION, value);
	}
	
    /**
     * Adds a value to property FocalPlaneYResolution as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFocalPlaneYResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FOCALPLANEYRESOLUTION, value);
	}
    /**
     * Adds a value to property FocalPlaneYResolution from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFocalPlaneYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, FOCALPLANEYRESOLUTION, value);
	}
	
    /**
     * Adds a value to property FocalPlaneYResolution from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFocalPlaneYResolution(java.lang.Float value) {
		Base.add(this.model, this.getResource(), FOCALPLANEYRESOLUTION, value);
	}
  

    /**
     * Sets a value of property FocalPlaneYResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFocalPlaneYResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FOCALPLANEYRESOLUTION, value);
	}
	
    /**
     * Sets a value of property FocalPlaneYResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFocalPlaneYResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FOCALPLANEYRESOLUTION, value);
	}
    /**
     * Sets a value of property FocalPlaneYResolution from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFocalPlaneYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, FOCALPLANEYRESOLUTION, value);
	}
	
    /**
     * Sets a value of property FocalPlaneYResolution from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFocalPlaneYResolution(java.lang.Float value) {
		Base.set(this.model, this.getResource(), FOCALPLANEYRESOLUTION, value);
	}
  


    /**
     * Removes a value of property FocalPlaneYResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFocalPlaneYResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FOCALPLANEYRESOLUTION, value);
	}
	
    /**
     * Removes a value of property FocalPlaneYResolution as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFocalPlaneYResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FOCALPLANEYRESOLUTION, value);
	}
    /**
     * Removes a value of property FocalPlaneYResolution given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFocalPlaneYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, FOCALPLANEYRESOLUTION, value);
	}
	
    /**
     * Removes a value of property FocalPlaneYResolution given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFocalPlaneYResolution(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), FOCALPLANEYRESOLUTION, value);
	}
  
    /**
     * Removes all values of property FocalPlaneYResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFocalPlaneYResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FOCALPLANEYRESOLUTION);
	}
	
    /**
     * Removes all values of property FocalPlaneYResolution	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFocalPlaneYResolution() {
		Base.removeAll(this.model, this.getResource(), FOCALPLANEYRESOLUTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73f2e59d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGainControl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GAINCONTROL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73f2e59d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGainControl() {
		return Base.has(this.model, this.getResource(), GAINCONTROL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73f2e59d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGainControl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GAINCONTROL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73f2e59d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGainControl( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GAINCONTROL);
	}

     /**
     * Get all values of property GainControl as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGainControl_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GAINCONTROL);
	}
	
    /**
     * Get all values of property GainControl as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGainControl_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GAINCONTROL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GainControl as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGainControl_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GAINCONTROL);
	}

    /**
     * Get all values of property GainControl as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGainControl_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GAINCONTROL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GainControl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGainControl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GAINCONTROL, java.lang.String.class);
	}
	
    /**
     * Get all values of property GainControl as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGainControl_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GAINCONTROL, java.lang.String.class);
	}

    /**
     * Get all values of property GainControl     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGainControl() {
		return Base.getAll(this.model, this.getResource(), GAINCONTROL, java.lang.String.class);
	}

    /**
     * Get all values of property GainControl as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGainControl_as() {
		return Base.getAll_as(this.model, this.getResource(), GAINCONTROL, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GainControl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGainControl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GAINCONTROL, value);
	}
	
    /**
     * Adds a value to property GainControl as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGainControl( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GAINCONTROL, value);
	}
    /**
     * Adds a value to property GainControl from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGainControl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GAINCONTROL, value);
	}
	
    /**
     * Adds a value to property GainControl from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGainControl(java.lang.String value) {
		Base.add(this.model, this.getResource(), GAINCONTROL, value);
	}
  

    /**
     * Sets a value of property GainControl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGainControl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GAINCONTROL, value);
	}
	
    /**
     * Sets a value of property GainControl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGainControl( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GAINCONTROL, value);
	}
    /**
     * Sets a value of property GainControl from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGainControl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GAINCONTROL, value);
	}
	
    /**
     * Sets a value of property GainControl from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGainControl(java.lang.String value) {
		Base.set(this.model, this.getResource(), GAINCONTROL, value);
	}
  


    /**
     * Removes a value of property GainControl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGainControl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GAINCONTROL, value);
	}
	
    /**
     * Removes a value of property GainControl as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGainControl( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GAINCONTROL, value);
	}
    /**
     * Removes a value of property GainControl given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGainControl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GAINCONTROL, value);
	}
	
    /**
     * Removes a value of property GainControl given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGainControl(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GAINCONTROL, value);
	}
  
    /**
     * Removes all values of property GainControl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGainControl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GAINCONTROL);
	}
	
    /**
     * Removes all values of property GainControl	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGainControl() {
		Base.removeAll(this.model, this.getResource(), GAINCONTROL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fa0337b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGeo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GEO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fa0337b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGeo() {
		return Base.has(this.model, this.getResource(), GEO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fa0337b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGeo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GEO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fa0337b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGeo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GEO);
	}

     /**
     * Get all values of property Geo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GEO);
	}
	
    /**
     * Get all values of property Geo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GEO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Geo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GEO);
	}

    /**
     * Get all values of property Geo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGeo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GEO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Geo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllGeo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GEO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property Geo as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllGeo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GEO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Geo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllGeo() {
		return Base.getAll(this.model, this.getResource(), GEO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property Geo as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllGeo_as() {
		return Base.getAll_as(this.model, this.getResource(), GEO, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property Geo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGeo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GEO, value);
	}
	
    /**
     * Adds a value to property Geo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGeo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GEO, value);
	}
    /**
     * Adds a value to property Geo from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGeo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, GEO, value);
	}
	
    /**
     * Adds a value to property Geo from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGeo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), GEO, value);
	}
  

    /**
     * Sets a value of property Geo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGeo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GEO, value);
	}
	
    /**
     * Sets a value of property Geo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGeo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GEO, value);
	}
    /**
     * Sets a value of property Geo from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGeo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, GEO, value);
	}
	
    /**
     * Sets a value of property Geo from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGeo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), GEO, value);
	}
  


    /**
     * Removes a value of property Geo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGeo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GEO, value);
	}
	
    /**
     * Removes a value of property Geo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGeo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GEO, value);
	}
    /**
     * Removes a value of property Geo given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGeo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, GEO, value);
	}
	
    /**
     * Removes a value of property Geo given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGeo(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), GEO, value);
	}
  
    /**
     * Removes all values of property Geo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGeo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GEO);
	}
	
    /**
     * Removes all values of property Geo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGeo() {
		Base.removeAll(this.model, this.getResource(), GEO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e6aea22 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGps(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e6aea22 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGps() {
		return Base.has(this.model, this.getResource(), GPS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e6aea22 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGps(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e6aea22 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGps( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPS);
	}

     /**
     * Get all values of property Gps as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGps_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPS);
	}
	
    /**
     * Get all values of property Gps as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGps_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Gps as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGps_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPS);
	}

    /**
     * Get all values of property Gps as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGps_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Gps     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.geo.Point> getAllGps(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPS, eu.dime.ps.semantic.model.geo.Point.class);
	}
	
    /**
     * Get all values of property Gps as a ReactorResult of Point 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.geo.Point> getAllGps_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPS, eu.dime.ps.semantic.model.geo.Point.class);
	}

    /**
     * Get all values of property Gps     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.geo.Point> getAllGps() {
		return Base.getAll(this.model, this.getResource(), GPS, eu.dime.ps.semantic.model.geo.Point.class);
	}

    /**
     * Get all values of property Gps as a ReactorResult of Point 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.geo.Point> getAllGps_as() {
		return Base.getAll_as(this.model, this.getResource(), GPS, eu.dime.ps.semantic.model.geo.Point.class);
	}
 
    /**
     * Adds a value to property Gps as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGps(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPS, value);
	}
	
    /**
     * Adds a value to property Gps as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGps( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPS, value);
	}
    /**
     * Adds a value to property Gps from an instance of Point 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGps(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.geo.Point value) {
		Base.add(model, instanceResource, GPS, value);
	}
	
    /**
     * Adds a value to property Gps from an instance of Point 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGps(eu.dime.ps.semantic.model.geo.Point value) {
		Base.add(this.model, this.getResource(), GPS, value);
	}
  

    /**
     * Sets a value of property Gps from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGps( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPS, value);
	}
	
    /**
     * Sets a value of property Gps from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGps( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPS, value);
	}
    /**
     * Sets a value of property Gps from an instance of Point 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGps(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.geo.Point value) {
		Base.set(model, instanceResource, GPS, value);
	}
	
    /**
     * Sets a value of property Gps from an instance of Point 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGps(eu.dime.ps.semantic.model.geo.Point value) {
		Base.set(this.model, this.getResource(), GPS, value);
	}
  


    /**
     * Removes a value of property Gps as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGps( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPS, value);
	}
	
    /**
     * Removes a value of property Gps as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGps( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPS, value);
	}
    /**
     * Removes a value of property Gps given as an instance of Point 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGps(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.geo.Point value) {
		Base.remove(model, instanceResource, GPS, value);
	}
	
    /**
     * Removes a value of property Gps given as an instance of Point 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGps(eu.dime.ps.semantic.model.geo.Point value) {
		Base.remove(this.model, this.getResource(), GPS, value);
	}
  
    /**
     * Removes all values of property Gps     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGps( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPS);
	}
	
    /**
     * Removes all values of property Gps	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGps() {
		Base.removeAll(this.model, this.getResource(), GPS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a566914 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsAltitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSALTITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a566914 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsAltitudeRef() {
		return Base.has(this.model, this.getResource(), GPSALTITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a566914 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsAltitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSALTITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a566914 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsAltitudeRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSALTITUDEREF);
	}

     /**
     * Get all values of property GpsAltitudeRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsAltitudeRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSALTITUDEREF);
	}
	
    /**
     * Get all values of property GpsAltitudeRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsAltitudeRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSALTITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsAltitudeRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsAltitudeRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSALTITUDEREF);
	}

    /**
     * Get all values of property GpsAltitudeRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsAltitudeRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSALTITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsAltitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsAltitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSALTITUDEREF, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsAltitudeRef as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsAltitudeRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSALTITUDEREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsAltitudeRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsAltitudeRef() {
		return Base.getAll(this.model, this.getResource(), GPSALTITUDEREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsAltitudeRef as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsAltitudeRef_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSALTITUDEREF, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsAltitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsAltitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSALTITUDEREF, value);
	}
	
    /**
     * Adds a value to property GpsAltitudeRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsAltitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSALTITUDEREF, value);
	}
    /**
     * Adds a value to property GpsAltitudeRef from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsAltitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSALTITUDEREF, value);
	}
	
    /**
     * Adds a value to property GpsAltitudeRef from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsAltitudeRef(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSALTITUDEREF, value);
	}
  

    /**
     * Sets a value of property GpsAltitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsAltitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSALTITUDEREF, value);
	}
	
    /**
     * Sets a value of property GpsAltitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsAltitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSALTITUDEREF, value);
	}
    /**
     * Sets a value of property GpsAltitudeRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsAltitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSALTITUDEREF, value);
	}
	
    /**
     * Sets a value of property GpsAltitudeRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsAltitudeRef(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSALTITUDEREF, value);
	}
  


    /**
     * Removes a value of property GpsAltitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsAltitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSALTITUDEREF, value);
	}
	
    /**
     * Removes a value of property GpsAltitudeRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsAltitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSALTITUDEREF, value);
	}
    /**
     * Removes a value of property GpsAltitudeRef given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsAltitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSALTITUDEREF, value);
	}
	
    /**
     * Removes a value of property GpsAltitudeRef given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsAltitudeRef(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSALTITUDEREF, value);
	}
  
    /**
     * Removes all values of property GpsAltitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsAltitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSALTITUDEREF);
	}
	
    /**
     * Removes all values of property GpsAltitudeRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsAltitudeRef() {
		Base.removeAll(this.model, this.getResource(), GPSALTITUDEREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@713ca3f7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsAreaInformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSAREAINFORMATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@713ca3f7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsAreaInformation() {
		return Base.has(this.model, this.getResource(), GPSAREAINFORMATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@713ca3f7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsAreaInformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSAREAINFORMATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@713ca3f7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsAreaInformation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSAREAINFORMATION);
	}

     /**
     * Get all values of property GpsAreaInformation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsAreaInformation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSAREAINFORMATION);
	}
	
    /**
     * Get all values of property GpsAreaInformation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsAreaInformation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSAREAINFORMATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsAreaInformation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsAreaInformation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSAREAINFORMATION);
	}

    /**
     * Get all values of property GpsAreaInformation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsAreaInformation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSAREAINFORMATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsAreaInformation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsAreaInformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSAREAINFORMATION, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsAreaInformation as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsAreaInformation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSAREAINFORMATION, java.lang.String.class);
	}

    /**
     * Get all values of property GpsAreaInformation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsAreaInformation() {
		return Base.getAll(this.model, this.getResource(), GPSAREAINFORMATION, java.lang.String.class);
	}

    /**
     * Get all values of property GpsAreaInformation as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsAreaInformation_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSAREAINFORMATION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsAreaInformation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsAreaInformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSAREAINFORMATION, value);
	}
	
    /**
     * Adds a value to property GpsAreaInformation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsAreaInformation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSAREAINFORMATION, value);
	}
    /**
     * Adds a value to property GpsAreaInformation from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsAreaInformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSAREAINFORMATION, value);
	}
	
    /**
     * Adds a value to property GpsAreaInformation from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsAreaInformation(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSAREAINFORMATION, value);
	}
  

    /**
     * Sets a value of property GpsAreaInformation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsAreaInformation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSAREAINFORMATION, value);
	}
	
    /**
     * Sets a value of property GpsAreaInformation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsAreaInformation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSAREAINFORMATION, value);
	}
    /**
     * Sets a value of property GpsAreaInformation from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsAreaInformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSAREAINFORMATION, value);
	}
	
    /**
     * Sets a value of property GpsAreaInformation from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsAreaInformation(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSAREAINFORMATION, value);
	}
  


    /**
     * Removes a value of property GpsAreaInformation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsAreaInformation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSAREAINFORMATION, value);
	}
	
    /**
     * Removes a value of property GpsAreaInformation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsAreaInformation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSAREAINFORMATION, value);
	}
    /**
     * Removes a value of property GpsAreaInformation given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsAreaInformation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSAREAINFORMATION, value);
	}
	
    /**
     * Removes a value of property GpsAreaInformation given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsAreaInformation(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSAREAINFORMATION, value);
	}
  
    /**
     * Removes all values of property GpsAreaInformation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsAreaInformation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSAREAINFORMATION);
	}
	
    /**
     * Removes all values of property GpsAreaInformation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsAreaInformation() {
		Base.removeAll(this.model, this.getResource(), GPSAREAINFORMATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@740dc55e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsDOP(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSDOP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@740dc55e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsDOP() {
		return Base.has(this.model, this.getResource(), GPSDOP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@740dc55e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsDOP(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSDOP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@740dc55e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsDOP( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSDOP);
	}

     /**
     * Get all values of property GpsDOP as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDOP_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSDOP);
	}
	
    /**
     * Get all values of property GpsDOP as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDOP_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDOP, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsDOP as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDOP_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSDOP);
	}

    /**
     * Get all values of property GpsDOP as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDOP_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSDOP, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsDOP     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsDOP(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSDOP, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsDOP as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsDOP_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDOP, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDOP     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsDOP() {
		return Base.getAll(this.model, this.getResource(), GPSDOP, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDOP as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsDOP_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSDOP, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsDOP as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsDOP(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSDOP, value);
	}
	
    /**
     * Adds a value to property GpsDOP as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsDOP( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSDOP, value);
	}
    /**
     * Adds a value to property GpsDOP from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsDOP(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSDOP, value);
	}
	
    /**
     * Adds a value to property GpsDOP from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsDOP(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSDOP, value);
	}
  

    /**
     * Sets a value of property GpsDOP from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsDOP( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSDOP, value);
	}
	
    /**
     * Sets a value of property GpsDOP from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsDOP( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSDOP, value);
	}
    /**
     * Sets a value of property GpsDOP from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsDOP(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSDOP, value);
	}
	
    /**
     * Sets a value of property GpsDOP from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsDOP(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSDOP, value);
	}
  


    /**
     * Removes a value of property GpsDOP as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsDOP( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSDOP, value);
	}
	
    /**
     * Removes a value of property GpsDOP as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsDOP( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSDOP, value);
	}
    /**
     * Removes a value of property GpsDOP given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsDOP(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSDOP, value);
	}
	
    /**
     * Removes a value of property GpsDOP given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsDOP(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSDOP, value);
	}
  
    /**
     * Removes all values of property GpsDOP     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsDOP( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSDOP);
	}
	
    /**
     * Removes all values of property GpsDOP	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsDOP() {
		Base.removeAll(this.model, this.getResource(), GPSDOP);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58842593 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsDateStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSDATESTAMP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58842593 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsDateStamp() {
		return Base.has(this.model, this.getResource(), GPSDATESTAMP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58842593 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsDateStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSDATESTAMP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58842593 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsDateStamp( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSDATESTAMP);
	}

     /**
     * Get all values of property GpsDateStamp as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDateStamp_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSDATESTAMP);
	}
	
    /**
     * Get all values of property GpsDateStamp as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDateStamp_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDATESTAMP, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsDateStamp as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDateStamp_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSDATESTAMP);
	}

    /**
     * Get all values of property GpsDateStamp as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDateStamp_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSDATESTAMP, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsDateStamp     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllGpsDateStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSDATESTAMP, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property GpsDateStamp as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllGpsDateStamp_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDATESTAMP, java.util.Calendar.class);
	}

    /**
     * Get all values of property GpsDateStamp     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllGpsDateStamp() {
		return Base.getAll(this.model, this.getResource(), GPSDATESTAMP, java.util.Calendar.class);
	}

    /**
     * Get all values of property GpsDateStamp as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllGpsDateStamp_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSDATESTAMP, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property GpsDateStamp as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsDateStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSDATESTAMP, value);
	}
	
    /**
     * Adds a value to property GpsDateStamp as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsDateStamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSDATESTAMP, value);
	}
    /**
     * Adds a value to property GpsDateStamp from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsDateStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, GPSDATESTAMP, value);
	}
	
    /**
     * Adds a value to property GpsDateStamp from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsDateStamp(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), GPSDATESTAMP, value);
	}
  

    /**
     * Sets a value of property GpsDateStamp from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsDateStamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSDATESTAMP, value);
	}
	
    /**
     * Sets a value of property GpsDateStamp from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsDateStamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSDATESTAMP, value);
	}
    /**
     * Sets a value of property GpsDateStamp from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsDateStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, GPSDATESTAMP, value);
	}
	
    /**
     * Sets a value of property GpsDateStamp from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsDateStamp(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), GPSDATESTAMP, value);
	}
  


    /**
     * Removes a value of property GpsDateStamp as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsDateStamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSDATESTAMP, value);
	}
	
    /**
     * Removes a value of property GpsDateStamp as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsDateStamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSDATESTAMP, value);
	}
    /**
     * Removes a value of property GpsDateStamp given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsDateStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, GPSDATESTAMP, value);
	}
	
    /**
     * Removes a value of property GpsDateStamp given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsDateStamp(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), GPSDATESTAMP, value);
	}
  
    /**
     * Removes all values of property GpsDateStamp     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsDateStamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSDATESTAMP);
	}
	
    /**
     * Removes all values of property GpsDateStamp	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsDateStamp() {
		Base.removeAll(this.model, this.getResource(), GPSDATESTAMP);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@607f3b3c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsDestBearing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSDESTBEARING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@607f3b3c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsDestBearing() {
		return Base.has(this.model, this.getResource(), GPSDESTBEARING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@607f3b3c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsDestBearing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSDESTBEARING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@607f3b3c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsDestBearing( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSDESTBEARING);
	}

     /**
     * Get all values of property GpsDestBearing as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDestBearing_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSDESTBEARING);
	}
	
    /**
     * Get all values of property GpsDestBearing as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDestBearing_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDESTBEARING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsDestBearing as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDestBearing_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSDESTBEARING);
	}

    /**
     * Get all values of property GpsDestBearing as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDestBearing_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSDESTBEARING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsDestBearing     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsDestBearing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSDESTBEARING, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsDestBearing as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsDestBearing_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDESTBEARING, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDestBearing     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsDestBearing() {
		return Base.getAll(this.model, this.getResource(), GPSDESTBEARING, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDestBearing as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsDestBearing_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSDESTBEARING, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsDestBearing as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsDestBearing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSDESTBEARING, value);
	}
	
    /**
     * Adds a value to property GpsDestBearing as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsDestBearing( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSDESTBEARING, value);
	}
    /**
     * Adds a value to property GpsDestBearing from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsDestBearing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSDESTBEARING, value);
	}
	
    /**
     * Adds a value to property GpsDestBearing from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsDestBearing(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSDESTBEARING, value);
	}
  

    /**
     * Sets a value of property GpsDestBearing from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsDestBearing( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSDESTBEARING, value);
	}
	
    /**
     * Sets a value of property GpsDestBearing from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsDestBearing( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSDESTBEARING, value);
	}
    /**
     * Sets a value of property GpsDestBearing from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsDestBearing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSDESTBEARING, value);
	}
	
    /**
     * Sets a value of property GpsDestBearing from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsDestBearing(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSDESTBEARING, value);
	}
  


    /**
     * Removes a value of property GpsDestBearing as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsDestBearing( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSDESTBEARING, value);
	}
	
    /**
     * Removes a value of property GpsDestBearing as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsDestBearing( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSDESTBEARING, value);
	}
    /**
     * Removes a value of property GpsDestBearing given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsDestBearing(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSDESTBEARING, value);
	}
	
    /**
     * Removes a value of property GpsDestBearing given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsDestBearing(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSDESTBEARING, value);
	}
  
    /**
     * Removes all values of property GpsDestBearing     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsDestBearing( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSDESTBEARING);
	}
	
    /**
     * Removes all values of property GpsDestBearing	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsDestBearing() {
		Base.removeAll(this.model, this.getResource(), GPSDESTBEARING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@281b2cc1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsDestBearingRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSDESTBEARINGREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@281b2cc1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsDestBearingRef() {
		return Base.has(this.model, this.getResource(), GPSDESTBEARINGREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@281b2cc1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsDestBearingRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSDESTBEARINGREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@281b2cc1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsDestBearingRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSDESTBEARINGREF);
	}

     /**
     * Get all values of property GpsDestBearingRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDestBearingRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSDESTBEARINGREF);
	}
	
    /**
     * Get all values of property GpsDestBearingRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDestBearingRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDESTBEARINGREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsDestBearingRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDestBearingRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSDESTBEARINGREF);
	}

    /**
     * Get all values of property GpsDestBearingRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDestBearingRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSDESTBEARINGREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsDestBearingRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsDestBearingRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSDESTBEARINGREF, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsDestBearingRef as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsDestBearingRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDESTBEARINGREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDestBearingRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsDestBearingRef() {
		return Base.getAll(this.model, this.getResource(), GPSDESTBEARINGREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDestBearingRef as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsDestBearingRef_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSDESTBEARINGREF, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsDestBearingRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsDestBearingRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSDESTBEARINGREF, value);
	}
	
    /**
     * Adds a value to property GpsDestBearingRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsDestBearingRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSDESTBEARINGREF, value);
	}
    /**
     * Adds a value to property GpsDestBearingRef from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsDestBearingRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSDESTBEARINGREF, value);
	}
	
    /**
     * Adds a value to property GpsDestBearingRef from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsDestBearingRef(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSDESTBEARINGREF, value);
	}
  

    /**
     * Sets a value of property GpsDestBearingRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsDestBearingRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSDESTBEARINGREF, value);
	}
	
    /**
     * Sets a value of property GpsDestBearingRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsDestBearingRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSDESTBEARINGREF, value);
	}
    /**
     * Sets a value of property GpsDestBearingRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsDestBearingRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSDESTBEARINGREF, value);
	}
	
    /**
     * Sets a value of property GpsDestBearingRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsDestBearingRef(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSDESTBEARINGREF, value);
	}
  


    /**
     * Removes a value of property GpsDestBearingRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsDestBearingRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSDESTBEARINGREF, value);
	}
	
    /**
     * Removes a value of property GpsDestBearingRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsDestBearingRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSDESTBEARINGREF, value);
	}
    /**
     * Removes a value of property GpsDestBearingRef given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsDestBearingRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSDESTBEARINGREF, value);
	}
	
    /**
     * Removes a value of property GpsDestBearingRef given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsDestBearingRef(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSDESTBEARINGREF, value);
	}
  
    /**
     * Removes all values of property GpsDestBearingRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsDestBearingRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSDESTBEARINGREF);
	}
	
    /**
     * Removes all values of property GpsDestBearingRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsDestBearingRef() {
		Base.removeAll(this.model, this.getResource(), GPSDESTBEARINGREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@427fb1d3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsDestDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSDESTDISTANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@427fb1d3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsDestDistance() {
		return Base.has(this.model, this.getResource(), GPSDESTDISTANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@427fb1d3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsDestDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSDESTDISTANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@427fb1d3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsDestDistance( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSDESTDISTANCE);
	}

     /**
     * Get all values of property GpsDestDistance as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDestDistance_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSDESTDISTANCE);
	}
	
    /**
     * Get all values of property GpsDestDistance as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDestDistance_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDESTDISTANCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsDestDistance as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDestDistance_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSDESTDISTANCE);
	}

    /**
     * Get all values of property GpsDestDistance as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDestDistance_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSDESTDISTANCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsDestDistance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsDestDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSDESTDISTANCE, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsDestDistance as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsDestDistance_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDESTDISTANCE, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDestDistance     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsDestDistance() {
		return Base.getAll(this.model, this.getResource(), GPSDESTDISTANCE, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDestDistance as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsDestDistance_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSDESTDISTANCE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsDestDistance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsDestDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSDESTDISTANCE, value);
	}
	
    /**
     * Adds a value to property GpsDestDistance as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsDestDistance( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSDESTDISTANCE, value);
	}
    /**
     * Adds a value to property GpsDestDistance from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsDestDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSDESTDISTANCE, value);
	}
	
    /**
     * Adds a value to property GpsDestDistance from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsDestDistance(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSDESTDISTANCE, value);
	}
  

    /**
     * Sets a value of property GpsDestDistance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsDestDistance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSDESTDISTANCE, value);
	}
	
    /**
     * Sets a value of property GpsDestDistance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsDestDistance( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSDESTDISTANCE, value);
	}
    /**
     * Sets a value of property GpsDestDistance from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsDestDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSDESTDISTANCE, value);
	}
	
    /**
     * Sets a value of property GpsDestDistance from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsDestDistance(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSDESTDISTANCE, value);
	}
  


    /**
     * Removes a value of property GpsDestDistance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsDestDistance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSDESTDISTANCE, value);
	}
	
    /**
     * Removes a value of property GpsDestDistance as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsDestDistance( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSDESTDISTANCE, value);
	}
    /**
     * Removes a value of property GpsDestDistance given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsDestDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSDESTDISTANCE, value);
	}
	
    /**
     * Removes a value of property GpsDestDistance given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsDestDistance(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSDESTDISTANCE, value);
	}
  
    /**
     * Removes all values of property GpsDestDistance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsDestDistance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSDESTDISTANCE);
	}
	
    /**
     * Removes all values of property GpsDestDistance	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsDestDistance() {
		Base.removeAll(this.model, this.getResource(), GPSDESTDISTANCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27e7cc72 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsDestDistanceRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSDESTDISTANCEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27e7cc72 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsDestDistanceRef() {
		return Base.has(this.model, this.getResource(), GPSDESTDISTANCEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27e7cc72 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsDestDistanceRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSDESTDISTANCEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27e7cc72 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsDestDistanceRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSDESTDISTANCEREF);
	}

     /**
     * Get all values of property GpsDestDistanceRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDestDistanceRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSDESTDISTANCEREF);
	}
	
    /**
     * Get all values of property GpsDestDistanceRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDestDistanceRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDESTDISTANCEREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsDestDistanceRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDestDistanceRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSDESTDISTANCEREF);
	}

    /**
     * Get all values of property GpsDestDistanceRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDestDistanceRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSDESTDISTANCEREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsDestDistanceRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsDestDistanceRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSDESTDISTANCEREF, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsDestDistanceRef as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsDestDistanceRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDESTDISTANCEREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDestDistanceRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsDestDistanceRef() {
		return Base.getAll(this.model, this.getResource(), GPSDESTDISTANCEREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDestDistanceRef as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsDestDistanceRef_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSDESTDISTANCEREF, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsDestDistanceRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsDestDistanceRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSDESTDISTANCEREF, value);
	}
	
    /**
     * Adds a value to property GpsDestDistanceRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsDestDistanceRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSDESTDISTANCEREF, value);
	}
    /**
     * Adds a value to property GpsDestDistanceRef from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsDestDistanceRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSDESTDISTANCEREF, value);
	}
	
    /**
     * Adds a value to property GpsDestDistanceRef from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsDestDistanceRef(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSDESTDISTANCEREF, value);
	}
  

    /**
     * Sets a value of property GpsDestDistanceRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsDestDistanceRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSDESTDISTANCEREF, value);
	}
	
    /**
     * Sets a value of property GpsDestDistanceRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsDestDistanceRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSDESTDISTANCEREF, value);
	}
    /**
     * Sets a value of property GpsDestDistanceRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsDestDistanceRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSDESTDISTANCEREF, value);
	}
	
    /**
     * Sets a value of property GpsDestDistanceRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsDestDistanceRef(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSDESTDISTANCEREF, value);
	}
  


    /**
     * Removes a value of property GpsDestDistanceRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsDestDistanceRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSDESTDISTANCEREF, value);
	}
	
    /**
     * Removes a value of property GpsDestDistanceRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsDestDistanceRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSDESTDISTANCEREF, value);
	}
    /**
     * Removes a value of property GpsDestDistanceRef given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsDestDistanceRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSDESTDISTANCEREF, value);
	}
	
    /**
     * Removes a value of property GpsDestDistanceRef given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsDestDistanceRef(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSDESTDISTANCEREF, value);
	}
  
    /**
     * Removes all values of property GpsDestDistanceRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsDestDistanceRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSDESTDISTANCEREF);
	}
	
    /**
     * Removes all values of property GpsDestDistanceRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsDestDistanceRef() {
		Base.removeAll(this.model, this.getResource(), GPSDESTDISTANCEREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d41f27c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsDestLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSDESTLATITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d41f27c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsDestLatitudeRef() {
		return Base.has(this.model, this.getResource(), GPSDESTLATITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d41f27c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsDestLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSDESTLATITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d41f27c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsDestLatitudeRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSDESTLATITUDEREF);
	}

     /**
     * Get all values of property GpsDestLatitudeRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDestLatitudeRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSDESTLATITUDEREF);
	}
	
    /**
     * Get all values of property GpsDestLatitudeRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDestLatitudeRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDESTLATITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsDestLatitudeRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDestLatitudeRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSDESTLATITUDEREF);
	}

    /**
     * Get all values of property GpsDestLatitudeRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDestLatitudeRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSDESTLATITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsDestLatitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsDestLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSDESTLATITUDEREF, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsDestLatitudeRef as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsDestLatitudeRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDESTLATITUDEREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDestLatitudeRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsDestLatitudeRef() {
		return Base.getAll(this.model, this.getResource(), GPSDESTLATITUDEREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDestLatitudeRef as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsDestLatitudeRef_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSDESTLATITUDEREF, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsDestLatitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsDestLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSDESTLATITUDEREF, value);
	}
	
    /**
     * Adds a value to property GpsDestLatitudeRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsDestLatitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSDESTLATITUDEREF, value);
	}
    /**
     * Adds a value to property GpsDestLatitudeRef from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsDestLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSDESTLATITUDEREF, value);
	}
	
    /**
     * Adds a value to property GpsDestLatitudeRef from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsDestLatitudeRef(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSDESTLATITUDEREF, value);
	}
  

    /**
     * Sets a value of property GpsDestLatitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsDestLatitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSDESTLATITUDEREF, value);
	}
	
    /**
     * Sets a value of property GpsDestLatitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsDestLatitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSDESTLATITUDEREF, value);
	}
    /**
     * Sets a value of property GpsDestLatitudeRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsDestLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSDESTLATITUDEREF, value);
	}
	
    /**
     * Sets a value of property GpsDestLatitudeRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsDestLatitudeRef(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSDESTLATITUDEREF, value);
	}
  


    /**
     * Removes a value of property GpsDestLatitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsDestLatitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSDESTLATITUDEREF, value);
	}
	
    /**
     * Removes a value of property GpsDestLatitudeRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsDestLatitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSDESTLATITUDEREF, value);
	}
    /**
     * Removes a value of property GpsDestLatitudeRef given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsDestLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSDESTLATITUDEREF, value);
	}
	
    /**
     * Removes a value of property GpsDestLatitudeRef given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsDestLatitudeRef(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSDESTLATITUDEREF, value);
	}
  
    /**
     * Removes all values of property GpsDestLatitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsDestLatitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSDESTLATITUDEREF);
	}
	
    /**
     * Removes all values of property GpsDestLatitudeRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsDestLatitudeRef() {
		Base.removeAll(this.model, this.getResource(), GPSDESTLATITUDEREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2158ce23 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsDestLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSDESTLONGITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2158ce23 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsDestLongitudeRef() {
		return Base.has(this.model, this.getResource(), GPSDESTLONGITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2158ce23 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsDestLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSDESTLONGITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2158ce23 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsDestLongitudeRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSDESTLONGITUDEREF);
	}

     /**
     * Get all values of property GpsDestLongitudeRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDestLongitudeRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSDESTLONGITUDEREF);
	}
	
    /**
     * Get all values of property GpsDestLongitudeRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDestLongitudeRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDESTLONGITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsDestLongitudeRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDestLongitudeRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSDESTLONGITUDEREF);
	}

    /**
     * Get all values of property GpsDestLongitudeRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDestLongitudeRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSDESTLONGITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsDestLongitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsDestLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSDESTLONGITUDEREF, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsDestLongitudeRef as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsDestLongitudeRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDESTLONGITUDEREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDestLongitudeRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsDestLongitudeRef() {
		return Base.getAll(this.model, this.getResource(), GPSDESTLONGITUDEREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDestLongitudeRef as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsDestLongitudeRef_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSDESTLONGITUDEREF, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsDestLongitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsDestLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSDESTLONGITUDEREF, value);
	}
	
    /**
     * Adds a value to property GpsDestLongitudeRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsDestLongitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSDESTLONGITUDEREF, value);
	}
    /**
     * Adds a value to property GpsDestLongitudeRef from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsDestLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSDESTLONGITUDEREF, value);
	}
	
    /**
     * Adds a value to property GpsDestLongitudeRef from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsDestLongitudeRef(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSDESTLONGITUDEREF, value);
	}
  

    /**
     * Sets a value of property GpsDestLongitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsDestLongitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSDESTLONGITUDEREF, value);
	}
	
    /**
     * Sets a value of property GpsDestLongitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsDestLongitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSDESTLONGITUDEREF, value);
	}
    /**
     * Sets a value of property GpsDestLongitudeRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsDestLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSDESTLONGITUDEREF, value);
	}
	
    /**
     * Sets a value of property GpsDestLongitudeRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsDestLongitudeRef(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSDESTLONGITUDEREF, value);
	}
  


    /**
     * Removes a value of property GpsDestLongitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsDestLongitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSDESTLONGITUDEREF, value);
	}
	
    /**
     * Removes a value of property GpsDestLongitudeRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsDestLongitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSDESTLONGITUDEREF, value);
	}
    /**
     * Removes a value of property GpsDestLongitudeRef given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsDestLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSDESTLONGITUDEREF, value);
	}
	
    /**
     * Removes a value of property GpsDestLongitudeRef given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsDestLongitudeRef(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSDESTLONGITUDEREF, value);
	}
  
    /**
     * Removes all values of property GpsDestLongitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsDestLongitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSDESTLONGITUDEREF);
	}
	
    /**
     * Removes all values of property GpsDestLongitudeRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsDestLongitudeRef() {
		Base.removeAll(this.model, this.getResource(), GPSDESTLONGITUDEREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4df1363b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsDifferential(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSDIFFERENTIAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4df1363b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsDifferential() {
		return Base.has(this.model, this.getResource(), GPSDIFFERENTIAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4df1363b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsDifferential(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSDIFFERENTIAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4df1363b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsDifferential( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSDIFFERENTIAL);
	}

     /**
     * Get all values of property GpsDifferential as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDifferential_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSDIFFERENTIAL);
	}
	
    /**
     * Get all values of property GpsDifferential as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDifferential_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDIFFERENTIAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsDifferential as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsDifferential_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSDIFFERENTIAL);
	}

    /**
     * Get all values of property GpsDifferential as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsDifferential_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSDIFFERENTIAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsDifferential     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsDifferential(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSDIFFERENTIAL, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsDifferential as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsDifferential_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSDIFFERENTIAL, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDifferential     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsDifferential() {
		return Base.getAll(this.model, this.getResource(), GPSDIFFERENTIAL, java.lang.String.class);
	}

    /**
     * Get all values of property GpsDifferential as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsDifferential_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSDIFFERENTIAL, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsDifferential as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsDifferential(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSDIFFERENTIAL, value);
	}
	
    /**
     * Adds a value to property GpsDifferential as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsDifferential( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSDIFFERENTIAL, value);
	}
    /**
     * Adds a value to property GpsDifferential from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsDifferential(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSDIFFERENTIAL, value);
	}
	
    /**
     * Adds a value to property GpsDifferential from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsDifferential(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSDIFFERENTIAL, value);
	}
  

    /**
     * Sets a value of property GpsDifferential from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsDifferential( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSDIFFERENTIAL, value);
	}
	
    /**
     * Sets a value of property GpsDifferential from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsDifferential( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSDIFFERENTIAL, value);
	}
    /**
     * Sets a value of property GpsDifferential from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsDifferential(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSDIFFERENTIAL, value);
	}
	
    /**
     * Sets a value of property GpsDifferential from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsDifferential(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSDIFFERENTIAL, value);
	}
  


    /**
     * Removes a value of property GpsDifferential as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsDifferential( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSDIFFERENTIAL, value);
	}
	
    /**
     * Removes a value of property GpsDifferential as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsDifferential( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSDIFFERENTIAL, value);
	}
    /**
     * Removes a value of property GpsDifferential given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsDifferential(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSDIFFERENTIAL, value);
	}
	
    /**
     * Removes a value of property GpsDifferential given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsDifferential(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSDIFFERENTIAL, value);
	}
  
    /**
     * Removes all values of property GpsDifferential     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsDifferential( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSDIFFERENTIAL);
	}
	
    /**
     * Removes all values of property GpsDifferential	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsDifferential() {
		Base.removeAll(this.model, this.getResource(), GPSDIFFERENTIAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4716cab2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsImgDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSIMGDIRECTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4716cab2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsImgDirection() {
		return Base.has(this.model, this.getResource(), GPSIMGDIRECTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4716cab2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsImgDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSIMGDIRECTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4716cab2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsImgDirection( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSIMGDIRECTION);
	}

     /**
     * Get all values of property GpsImgDirection as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsImgDirection_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSIMGDIRECTION);
	}
	
    /**
     * Get all values of property GpsImgDirection as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsImgDirection_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSIMGDIRECTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsImgDirection as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsImgDirection_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSIMGDIRECTION);
	}

    /**
     * Get all values of property GpsImgDirection as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsImgDirection_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSIMGDIRECTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsImgDirection     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsImgDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSIMGDIRECTION, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsImgDirection as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsImgDirection_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSIMGDIRECTION, java.lang.String.class);
	}

    /**
     * Get all values of property GpsImgDirection     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsImgDirection() {
		return Base.getAll(this.model, this.getResource(), GPSIMGDIRECTION, java.lang.String.class);
	}

    /**
     * Get all values of property GpsImgDirection as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsImgDirection_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSIMGDIRECTION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsImgDirection as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsImgDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSIMGDIRECTION, value);
	}
	
    /**
     * Adds a value to property GpsImgDirection as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsImgDirection( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSIMGDIRECTION, value);
	}
    /**
     * Adds a value to property GpsImgDirection from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsImgDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSIMGDIRECTION, value);
	}
	
    /**
     * Adds a value to property GpsImgDirection from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsImgDirection(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSIMGDIRECTION, value);
	}
  

    /**
     * Sets a value of property GpsImgDirection from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsImgDirection( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSIMGDIRECTION, value);
	}
	
    /**
     * Sets a value of property GpsImgDirection from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsImgDirection( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSIMGDIRECTION, value);
	}
    /**
     * Sets a value of property GpsImgDirection from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsImgDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSIMGDIRECTION, value);
	}
	
    /**
     * Sets a value of property GpsImgDirection from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsImgDirection(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSIMGDIRECTION, value);
	}
  


    /**
     * Removes a value of property GpsImgDirection as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsImgDirection( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSIMGDIRECTION, value);
	}
	
    /**
     * Removes a value of property GpsImgDirection as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsImgDirection( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSIMGDIRECTION, value);
	}
    /**
     * Removes a value of property GpsImgDirection given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsImgDirection(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSIMGDIRECTION, value);
	}
	
    /**
     * Removes a value of property GpsImgDirection given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsImgDirection(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSIMGDIRECTION, value);
	}
  
    /**
     * Removes all values of property GpsImgDirection     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsImgDirection( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSIMGDIRECTION);
	}
	
    /**
     * Removes all values of property GpsImgDirection	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsImgDirection() {
		Base.removeAll(this.model, this.getResource(), GPSIMGDIRECTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47596c17 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsImgDirectionRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSIMGDIRECTIONREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47596c17 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsImgDirectionRef() {
		return Base.has(this.model, this.getResource(), GPSIMGDIRECTIONREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47596c17 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsImgDirectionRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSIMGDIRECTIONREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47596c17 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsImgDirectionRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSIMGDIRECTIONREF);
	}

     /**
     * Get all values of property GpsImgDirectionRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsImgDirectionRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSIMGDIRECTIONREF);
	}
	
    /**
     * Get all values of property GpsImgDirectionRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsImgDirectionRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSIMGDIRECTIONREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsImgDirectionRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsImgDirectionRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSIMGDIRECTIONREF);
	}

    /**
     * Get all values of property GpsImgDirectionRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsImgDirectionRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSIMGDIRECTIONREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsImgDirectionRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsImgDirectionRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSIMGDIRECTIONREF, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsImgDirectionRef as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsImgDirectionRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSIMGDIRECTIONREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsImgDirectionRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsImgDirectionRef() {
		return Base.getAll(this.model, this.getResource(), GPSIMGDIRECTIONREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsImgDirectionRef as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsImgDirectionRef_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSIMGDIRECTIONREF, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsImgDirectionRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsImgDirectionRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSIMGDIRECTIONREF, value);
	}
	
    /**
     * Adds a value to property GpsImgDirectionRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsImgDirectionRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSIMGDIRECTIONREF, value);
	}
    /**
     * Adds a value to property GpsImgDirectionRef from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsImgDirectionRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSIMGDIRECTIONREF, value);
	}
	
    /**
     * Adds a value to property GpsImgDirectionRef from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsImgDirectionRef(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSIMGDIRECTIONREF, value);
	}
  

    /**
     * Sets a value of property GpsImgDirectionRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsImgDirectionRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSIMGDIRECTIONREF, value);
	}
	
    /**
     * Sets a value of property GpsImgDirectionRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsImgDirectionRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSIMGDIRECTIONREF, value);
	}
    /**
     * Sets a value of property GpsImgDirectionRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsImgDirectionRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSIMGDIRECTIONREF, value);
	}
	
    /**
     * Sets a value of property GpsImgDirectionRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsImgDirectionRef(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSIMGDIRECTIONREF, value);
	}
  


    /**
     * Removes a value of property GpsImgDirectionRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsImgDirectionRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSIMGDIRECTIONREF, value);
	}
	
    /**
     * Removes a value of property GpsImgDirectionRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsImgDirectionRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSIMGDIRECTIONREF, value);
	}
    /**
     * Removes a value of property GpsImgDirectionRef given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsImgDirectionRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSIMGDIRECTIONREF, value);
	}
	
    /**
     * Removes a value of property GpsImgDirectionRef given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsImgDirectionRef(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSIMGDIRECTIONREF, value);
	}
  
    /**
     * Removes all values of property GpsImgDirectionRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsImgDirectionRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSIMGDIRECTIONREF);
	}
	
    /**
     * Removes all values of property GpsImgDirectionRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsImgDirectionRef() {
		Base.removeAll(this.model, this.getResource(), GPSIMGDIRECTIONREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@297fe856 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@297fe856 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsInfo() {
		return Base.has(this.model, this.getResource(), GPSINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@297fe856 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@297fe856 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsInfo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSINFO);
	}

     /**
     * Get all values of property GpsInfo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsInfo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSINFO);
	}
	
    /**
     * Get all values of property GpsInfo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsInfo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSINFO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsInfo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsInfo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSINFO);
	}

    /**
     * Get all values of property GpsInfo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsInfo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSINFO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSINFO, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsInfo as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsInfo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSINFO, java.lang.String.class);
	}

    /**
     * Get all values of property GpsInfo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsInfo() {
		return Base.getAll(this.model, this.getResource(), GPSINFO, java.lang.String.class);
	}

    /**
     * Get all values of property GpsInfo as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsInfo_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSINFO, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSINFO, value);
	}
	
    /**
     * Adds a value to property GpsInfo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSINFO, value);
	}
    /**
     * Adds a value to property GpsInfo from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSINFO, value);
	}
	
    /**
     * Adds a value to property GpsInfo from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsInfo(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSINFO, value);
	}
  

    /**
     * Sets a value of property GpsInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSINFO, value);
	}
	
    /**
     * Sets a value of property GpsInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSINFO, value);
	}
    /**
     * Sets a value of property GpsInfo from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSINFO, value);
	}
	
    /**
     * Sets a value of property GpsInfo from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsInfo(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSINFO, value);
	}
  


    /**
     * Removes a value of property GpsInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSINFO, value);
	}
	
    /**
     * Removes a value of property GpsInfo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSINFO, value);
	}
    /**
     * Removes a value of property GpsInfo given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSINFO, value);
	}
	
    /**
     * Removes a value of property GpsInfo given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsInfo(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSINFO, value);
	}
  
    /**
     * Removes all values of property GpsInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSINFO);
	}
	
    /**
     * Removes all values of property GpsInfo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsInfo() {
		Base.removeAll(this.model, this.getResource(), GPSINFO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1840f700 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsInfoIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSINFOIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1840f700 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsInfoIFDPointer() {
		return Base.has(this.model, this.getResource(), GPSINFOIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1840f700 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsInfoIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSINFOIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1840f700 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsInfoIFDPointer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSINFOIFDPOINTER);
	}

     /**
     * Get all values of property GpsInfoIFDPointer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsInfoIFDPointer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSINFOIFDPOINTER);
	}
	
    /**
     * Get all values of property GpsInfoIFDPointer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsInfoIFDPointer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSINFOIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsInfoIFDPointer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsInfoIFDPointer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSINFOIFDPOINTER);
	}

    /**
     * Get all values of property GpsInfoIFDPointer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsInfoIFDPointer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSINFOIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsInfoIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nexif.Photo> getAllGpsInfoIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSINFOIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}
	
    /**
     * Get all values of property GpsInfoIFDPointer as a ReactorResult of Photo 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nexif.Photo> getAllGpsInfoIFDPointer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSINFOIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}

    /**
     * Get all values of property GpsInfoIFDPointer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nexif.Photo> getAllGpsInfoIFDPointer() {
		return Base.getAll(this.model, this.getResource(), GPSINFOIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}

    /**
     * Get all values of property GpsInfoIFDPointer as a ReactorResult of Photo 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nexif.Photo> getAllGpsInfoIFDPointer_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSINFOIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}
 
    /**
     * Adds a value to property GpsInfoIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsInfoIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSINFOIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property GpsInfoIFDPointer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsInfoIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSINFOIFDPOINTER, value);
	}
    /**
     * Adds a value to property GpsInfoIFDPointer from an instance of Photo 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsInfoIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.add(model, instanceResource, GPSINFOIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property GpsInfoIFDPointer from an instance of Photo 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsInfoIFDPointer(eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.add(this.model, this.getResource(), GPSINFOIFDPOINTER, value);
	}
  

    /**
     * Sets a value of property GpsInfoIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsInfoIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSINFOIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property GpsInfoIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsInfoIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSINFOIFDPOINTER, value);
	}
    /**
     * Sets a value of property GpsInfoIFDPointer from an instance of Photo 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsInfoIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.set(model, instanceResource, GPSINFOIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property GpsInfoIFDPointer from an instance of Photo 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsInfoIFDPointer(eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.set(this.model, this.getResource(), GPSINFOIFDPOINTER, value);
	}
  


    /**
     * Removes a value of property GpsInfoIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsInfoIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSINFOIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property GpsInfoIFDPointer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsInfoIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSINFOIFDPOINTER, value);
	}
    /**
     * Removes a value of property GpsInfoIFDPointer given as an instance of Photo 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsInfoIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.remove(model, instanceResource, GPSINFOIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property GpsInfoIFDPointer given as an instance of Photo 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsInfoIFDPointer(eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.remove(this.model, this.getResource(), GPSINFOIFDPOINTER, value);
	}
  
    /**
     * Removes all values of property GpsInfoIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsInfoIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSINFOIFDPOINTER);
	}
	
    /**
     * Removes all values of property GpsInfoIFDPointer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsInfoIFDPointer() {
		Base.removeAll(this.model, this.getResource(), GPSINFOIFDPOINTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23b73f8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSLATITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23b73f8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsLatitudeRef() {
		return Base.has(this.model, this.getResource(), GPSLATITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23b73f8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSLATITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23b73f8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsLatitudeRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSLATITUDEREF);
	}

     /**
     * Get all values of property GpsLatitudeRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsLatitudeRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSLATITUDEREF);
	}
	
    /**
     * Get all values of property GpsLatitudeRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsLatitudeRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSLATITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsLatitudeRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsLatitudeRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSLATITUDEREF);
	}

    /**
     * Get all values of property GpsLatitudeRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsLatitudeRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSLATITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsLatitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSLATITUDEREF, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsLatitudeRef as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsLatitudeRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSLATITUDEREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsLatitudeRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsLatitudeRef() {
		return Base.getAll(this.model, this.getResource(), GPSLATITUDEREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsLatitudeRef as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsLatitudeRef_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSLATITUDEREF, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsLatitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSLATITUDEREF, value);
	}
	
    /**
     * Adds a value to property GpsLatitudeRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsLatitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSLATITUDEREF, value);
	}
    /**
     * Adds a value to property GpsLatitudeRef from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSLATITUDEREF, value);
	}
	
    /**
     * Adds a value to property GpsLatitudeRef from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsLatitudeRef(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSLATITUDEREF, value);
	}
  

    /**
     * Sets a value of property GpsLatitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsLatitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSLATITUDEREF, value);
	}
	
    /**
     * Sets a value of property GpsLatitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsLatitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSLATITUDEREF, value);
	}
    /**
     * Sets a value of property GpsLatitudeRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSLATITUDEREF, value);
	}
	
    /**
     * Sets a value of property GpsLatitudeRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsLatitudeRef(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSLATITUDEREF, value);
	}
  


    /**
     * Removes a value of property GpsLatitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsLatitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSLATITUDEREF, value);
	}
	
    /**
     * Removes a value of property GpsLatitudeRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsLatitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSLATITUDEREF, value);
	}
    /**
     * Removes a value of property GpsLatitudeRef given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsLatitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSLATITUDEREF, value);
	}
	
    /**
     * Removes a value of property GpsLatitudeRef given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsLatitudeRef(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSLATITUDEREF, value);
	}
  
    /**
     * Removes all values of property GpsLatitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsLatitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSLATITUDEREF);
	}
	
    /**
     * Removes all values of property GpsLatitudeRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsLatitudeRef() {
		Base.removeAll(this.model, this.getResource(), GPSLATITUDEREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24ccab01 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSLONGITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24ccab01 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsLongitudeRef() {
		return Base.has(this.model, this.getResource(), GPSLONGITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24ccab01 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSLONGITUDEREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@24ccab01 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsLongitudeRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSLONGITUDEREF);
	}

     /**
     * Get all values of property GpsLongitudeRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsLongitudeRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSLONGITUDEREF);
	}
	
    /**
     * Get all values of property GpsLongitudeRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsLongitudeRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSLONGITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsLongitudeRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsLongitudeRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSLONGITUDEREF);
	}

    /**
     * Get all values of property GpsLongitudeRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsLongitudeRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSLONGITUDEREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsLongitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSLONGITUDEREF, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsLongitudeRef as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsLongitudeRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSLONGITUDEREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsLongitudeRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsLongitudeRef() {
		return Base.getAll(this.model, this.getResource(), GPSLONGITUDEREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsLongitudeRef as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsLongitudeRef_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSLONGITUDEREF, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsLongitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSLONGITUDEREF, value);
	}
	
    /**
     * Adds a value to property GpsLongitudeRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsLongitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSLONGITUDEREF, value);
	}
    /**
     * Adds a value to property GpsLongitudeRef from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSLONGITUDEREF, value);
	}
	
    /**
     * Adds a value to property GpsLongitudeRef from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsLongitudeRef(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSLONGITUDEREF, value);
	}
  

    /**
     * Sets a value of property GpsLongitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsLongitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSLONGITUDEREF, value);
	}
	
    /**
     * Sets a value of property GpsLongitudeRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsLongitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSLONGITUDEREF, value);
	}
    /**
     * Sets a value of property GpsLongitudeRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSLONGITUDEREF, value);
	}
	
    /**
     * Sets a value of property GpsLongitudeRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsLongitudeRef(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSLONGITUDEREF, value);
	}
  


    /**
     * Removes a value of property GpsLongitudeRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsLongitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSLONGITUDEREF, value);
	}
	
    /**
     * Removes a value of property GpsLongitudeRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsLongitudeRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSLONGITUDEREF, value);
	}
    /**
     * Removes a value of property GpsLongitudeRef given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsLongitudeRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSLONGITUDEREF, value);
	}
	
    /**
     * Removes a value of property GpsLongitudeRef given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsLongitudeRef(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSLONGITUDEREF, value);
	}
  
    /**
     * Removes all values of property GpsLongitudeRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsLongitudeRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSLONGITUDEREF);
	}
	
    /**
     * Removes all values of property GpsLongitudeRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsLongitudeRef() {
		Base.removeAll(this.model, this.getResource(), GPSLONGITUDEREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@644f6a6c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsMapDatum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSMAPDATUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@644f6a6c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsMapDatum() {
		return Base.has(this.model, this.getResource(), GPSMAPDATUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@644f6a6c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsMapDatum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSMAPDATUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@644f6a6c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsMapDatum( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSMAPDATUM);
	}

     /**
     * Get all values of property GpsMapDatum as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsMapDatum_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSMAPDATUM);
	}
	
    /**
     * Get all values of property GpsMapDatum as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsMapDatum_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSMAPDATUM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsMapDatum as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsMapDatum_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSMAPDATUM);
	}

    /**
     * Get all values of property GpsMapDatum as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsMapDatum_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSMAPDATUM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsMapDatum     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsMapDatum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSMAPDATUM, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsMapDatum as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsMapDatum_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSMAPDATUM, java.lang.String.class);
	}

    /**
     * Get all values of property GpsMapDatum     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsMapDatum() {
		return Base.getAll(this.model, this.getResource(), GPSMAPDATUM, java.lang.String.class);
	}

    /**
     * Get all values of property GpsMapDatum as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsMapDatum_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSMAPDATUM, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsMapDatum as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsMapDatum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSMAPDATUM, value);
	}
	
    /**
     * Adds a value to property GpsMapDatum as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsMapDatum( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSMAPDATUM, value);
	}
    /**
     * Adds a value to property GpsMapDatum from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsMapDatum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSMAPDATUM, value);
	}
	
    /**
     * Adds a value to property GpsMapDatum from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsMapDatum(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSMAPDATUM, value);
	}
  

    /**
     * Sets a value of property GpsMapDatum from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsMapDatum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSMAPDATUM, value);
	}
	
    /**
     * Sets a value of property GpsMapDatum from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsMapDatum( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSMAPDATUM, value);
	}
    /**
     * Sets a value of property GpsMapDatum from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsMapDatum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSMAPDATUM, value);
	}
	
    /**
     * Sets a value of property GpsMapDatum from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsMapDatum(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSMAPDATUM, value);
	}
  


    /**
     * Removes a value of property GpsMapDatum as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsMapDatum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSMAPDATUM, value);
	}
	
    /**
     * Removes a value of property GpsMapDatum as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsMapDatum( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSMAPDATUM, value);
	}
    /**
     * Removes a value of property GpsMapDatum given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsMapDatum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSMAPDATUM, value);
	}
	
    /**
     * Removes a value of property GpsMapDatum given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsMapDatum(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSMAPDATUM, value);
	}
  
    /**
     * Removes all values of property GpsMapDatum     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsMapDatum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSMAPDATUM);
	}
	
    /**
     * Removes all values of property GpsMapDatum	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsMapDatum() {
		Base.removeAll(this.model, this.getResource(), GPSMAPDATUM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58b3793b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsMeasureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSMEASUREMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58b3793b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsMeasureMode() {
		return Base.has(this.model, this.getResource(), GPSMEASUREMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58b3793b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsMeasureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSMEASUREMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@58b3793b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsMeasureMode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSMEASUREMODE);
	}

     /**
     * Get all values of property GpsMeasureMode as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsMeasureMode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSMEASUREMODE);
	}
	
    /**
     * Get all values of property GpsMeasureMode as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsMeasureMode_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSMEASUREMODE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsMeasureMode as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsMeasureMode_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSMEASUREMODE);
	}

    /**
     * Get all values of property GpsMeasureMode as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsMeasureMode_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSMEASUREMODE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsMeasureMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsMeasureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSMEASUREMODE, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsMeasureMode as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsMeasureMode_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSMEASUREMODE, java.lang.String.class);
	}

    /**
     * Get all values of property GpsMeasureMode     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsMeasureMode() {
		return Base.getAll(this.model, this.getResource(), GPSMEASUREMODE, java.lang.String.class);
	}

    /**
     * Get all values of property GpsMeasureMode as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsMeasureMode_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSMEASUREMODE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsMeasureMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsMeasureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSMEASUREMODE, value);
	}
	
    /**
     * Adds a value to property GpsMeasureMode as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsMeasureMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSMEASUREMODE, value);
	}
    /**
     * Adds a value to property GpsMeasureMode from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsMeasureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSMEASUREMODE, value);
	}
	
    /**
     * Adds a value to property GpsMeasureMode from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsMeasureMode(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSMEASUREMODE, value);
	}
  

    /**
     * Sets a value of property GpsMeasureMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsMeasureMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSMEASUREMODE, value);
	}
	
    /**
     * Sets a value of property GpsMeasureMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsMeasureMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSMEASUREMODE, value);
	}
    /**
     * Sets a value of property GpsMeasureMode from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsMeasureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSMEASUREMODE, value);
	}
	
    /**
     * Sets a value of property GpsMeasureMode from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsMeasureMode(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSMEASUREMODE, value);
	}
  


    /**
     * Removes a value of property GpsMeasureMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsMeasureMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSMEASUREMODE, value);
	}
	
    /**
     * Removes a value of property GpsMeasureMode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsMeasureMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSMEASUREMODE, value);
	}
    /**
     * Removes a value of property GpsMeasureMode given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsMeasureMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSMEASUREMODE, value);
	}
	
    /**
     * Removes a value of property GpsMeasureMode given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsMeasureMode(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSMEASUREMODE, value);
	}
  
    /**
     * Removes all values of property GpsMeasureMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsMeasureMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSMEASUREMODE);
	}
	
    /**
     * Removes all values of property GpsMeasureMode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsMeasureMode() {
		Base.removeAll(this.model, this.getResource(), GPSMEASUREMODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5108c21a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsProcessingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSPROCESSINGMETHOD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5108c21a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsProcessingMethod() {
		return Base.has(this.model, this.getResource(), GPSPROCESSINGMETHOD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5108c21a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsProcessingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSPROCESSINGMETHOD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5108c21a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsProcessingMethod( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSPROCESSINGMETHOD);
	}

     /**
     * Get all values of property GpsProcessingMethod as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsProcessingMethod_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSPROCESSINGMETHOD);
	}
	
    /**
     * Get all values of property GpsProcessingMethod as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsProcessingMethod_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSPROCESSINGMETHOD, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsProcessingMethod as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsProcessingMethod_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSPROCESSINGMETHOD);
	}

    /**
     * Get all values of property GpsProcessingMethod as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsProcessingMethod_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSPROCESSINGMETHOD, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsProcessingMethod     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsProcessingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSPROCESSINGMETHOD, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsProcessingMethod as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsProcessingMethod_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSPROCESSINGMETHOD, java.lang.String.class);
	}

    /**
     * Get all values of property GpsProcessingMethod     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsProcessingMethod() {
		return Base.getAll(this.model, this.getResource(), GPSPROCESSINGMETHOD, java.lang.String.class);
	}

    /**
     * Get all values of property GpsProcessingMethod as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsProcessingMethod_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSPROCESSINGMETHOD, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsProcessingMethod as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsProcessingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSPROCESSINGMETHOD, value);
	}
	
    /**
     * Adds a value to property GpsProcessingMethod as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsProcessingMethod( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSPROCESSINGMETHOD, value);
	}
    /**
     * Adds a value to property GpsProcessingMethod from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsProcessingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSPROCESSINGMETHOD, value);
	}
	
    /**
     * Adds a value to property GpsProcessingMethod from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsProcessingMethod(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSPROCESSINGMETHOD, value);
	}
  

    /**
     * Sets a value of property GpsProcessingMethod from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsProcessingMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSPROCESSINGMETHOD, value);
	}
	
    /**
     * Sets a value of property GpsProcessingMethod from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsProcessingMethod( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSPROCESSINGMETHOD, value);
	}
    /**
     * Sets a value of property GpsProcessingMethod from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsProcessingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSPROCESSINGMETHOD, value);
	}
	
    /**
     * Sets a value of property GpsProcessingMethod from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsProcessingMethod(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSPROCESSINGMETHOD, value);
	}
  


    /**
     * Removes a value of property GpsProcessingMethod as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsProcessingMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSPROCESSINGMETHOD, value);
	}
	
    /**
     * Removes a value of property GpsProcessingMethod as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsProcessingMethod( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSPROCESSINGMETHOD, value);
	}
    /**
     * Removes a value of property GpsProcessingMethod given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsProcessingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSPROCESSINGMETHOD, value);
	}
	
    /**
     * Removes a value of property GpsProcessingMethod given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsProcessingMethod(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSPROCESSINGMETHOD, value);
	}
  
    /**
     * Removes all values of property GpsProcessingMethod     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsProcessingMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSPROCESSINGMETHOD);
	}
	
    /**
     * Removes all values of property GpsProcessingMethod	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsProcessingMethod() {
		Base.removeAll(this.model, this.getResource(), GPSPROCESSINGMETHOD);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f7666de has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsSatellites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSSATELLITES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f7666de has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsSatellites() {
		return Base.has(this.model, this.getResource(), GPSSATELLITES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f7666de has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsSatellites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSSATELLITES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f7666de has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsSatellites( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSSATELLITES);
	}

     /**
     * Get all values of property GpsSatellites as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsSatellites_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSSATELLITES);
	}
	
    /**
     * Get all values of property GpsSatellites as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsSatellites_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSSATELLITES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsSatellites as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsSatellites_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSSATELLITES);
	}

    /**
     * Get all values of property GpsSatellites as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsSatellites_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSSATELLITES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsSatellites     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsSatellites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSSATELLITES, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsSatellites as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsSatellites_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSSATELLITES, java.lang.String.class);
	}

    /**
     * Get all values of property GpsSatellites     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsSatellites() {
		return Base.getAll(this.model, this.getResource(), GPSSATELLITES, java.lang.String.class);
	}

    /**
     * Get all values of property GpsSatellites as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsSatellites_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSSATELLITES, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsSatellites as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsSatellites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSSATELLITES, value);
	}
	
    /**
     * Adds a value to property GpsSatellites as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsSatellites( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSSATELLITES, value);
	}
    /**
     * Adds a value to property GpsSatellites from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsSatellites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSSATELLITES, value);
	}
	
    /**
     * Adds a value to property GpsSatellites from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsSatellites(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSSATELLITES, value);
	}
  

    /**
     * Sets a value of property GpsSatellites from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsSatellites( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSSATELLITES, value);
	}
	
    /**
     * Sets a value of property GpsSatellites from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsSatellites( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSSATELLITES, value);
	}
    /**
     * Sets a value of property GpsSatellites from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsSatellites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSSATELLITES, value);
	}
	
    /**
     * Sets a value of property GpsSatellites from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsSatellites(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSSATELLITES, value);
	}
  


    /**
     * Removes a value of property GpsSatellites as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsSatellites( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSSATELLITES, value);
	}
	
    /**
     * Removes a value of property GpsSatellites as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsSatellites( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSSATELLITES, value);
	}
    /**
     * Removes a value of property GpsSatellites given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsSatellites(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSSATELLITES, value);
	}
	
    /**
     * Removes a value of property GpsSatellites given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsSatellites(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSSATELLITES, value);
	}
  
    /**
     * Removes all values of property GpsSatellites     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsSatellites( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSSATELLITES);
	}
	
    /**
     * Removes all values of property GpsSatellites	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsSatellites() {
		Base.removeAll(this.model, this.getResource(), GPSSATELLITES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19557519 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSSPEED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19557519 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsSpeed() {
		return Base.has(this.model, this.getResource(), GPSSPEED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19557519 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSSPEED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19557519 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsSpeed( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSSPEED);
	}

     /**
     * Get all values of property GpsSpeed as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsSpeed_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSSPEED);
	}
	
    /**
     * Get all values of property GpsSpeed as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsSpeed_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSSPEED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsSpeed as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsSpeed_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSSPEED);
	}

    /**
     * Get all values of property GpsSpeed as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsSpeed_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSSPEED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsSpeed     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSSPEED, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsSpeed as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsSpeed_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSSPEED, java.lang.String.class);
	}

    /**
     * Get all values of property GpsSpeed     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsSpeed() {
		return Base.getAll(this.model, this.getResource(), GPSSPEED, java.lang.String.class);
	}

    /**
     * Get all values of property GpsSpeed as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsSpeed_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSSPEED, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsSpeed as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSSPEED, value);
	}
	
    /**
     * Adds a value to property GpsSpeed as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsSpeed( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSSPEED, value);
	}
    /**
     * Adds a value to property GpsSpeed from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSSPEED, value);
	}
	
    /**
     * Adds a value to property GpsSpeed from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsSpeed(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSSPEED, value);
	}
  

    /**
     * Sets a value of property GpsSpeed from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsSpeed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSSPEED, value);
	}
	
    /**
     * Sets a value of property GpsSpeed from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsSpeed( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSSPEED, value);
	}
    /**
     * Sets a value of property GpsSpeed from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSSPEED, value);
	}
	
    /**
     * Sets a value of property GpsSpeed from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsSpeed(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSSPEED, value);
	}
  


    /**
     * Removes a value of property GpsSpeed as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsSpeed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSSPEED, value);
	}
	
    /**
     * Removes a value of property GpsSpeed as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsSpeed( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSSPEED, value);
	}
    /**
     * Removes a value of property GpsSpeed given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsSpeed(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSSPEED, value);
	}
	
    /**
     * Removes a value of property GpsSpeed given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsSpeed(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSSPEED, value);
	}
  
    /**
     * Removes all values of property GpsSpeed     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsSpeed( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSSPEED);
	}
	
    /**
     * Removes all values of property GpsSpeed	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsSpeed() {
		Base.removeAll(this.model, this.getResource(), GPSSPEED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54124706 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsSpeedRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSSPEEDREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54124706 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsSpeedRef() {
		return Base.has(this.model, this.getResource(), GPSSPEEDREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54124706 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsSpeedRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSSPEEDREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@54124706 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsSpeedRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSSPEEDREF);
	}

     /**
     * Get all values of property GpsSpeedRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsSpeedRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSSPEEDREF);
	}
	
    /**
     * Get all values of property GpsSpeedRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsSpeedRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSSPEEDREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsSpeedRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsSpeedRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSSPEEDREF);
	}

    /**
     * Get all values of property GpsSpeedRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsSpeedRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSSPEEDREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsSpeedRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsSpeedRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSSPEEDREF, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsSpeedRef as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsSpeedRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSSPEEDREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsSpeedRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsSpeedRef() {
		return Base.getAll(this.model, this.getResource(), GPSSPEEDREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsSpeedRef as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsSpeedRef_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSSPEEDREF, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsSpeedRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsSpeedRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSSPEEDREF, value);
	}
	
    /**
     * Adds a value to property GpsSpeedRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsSpeedRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSSPEEDREF, value);
	}
    /**
     * Adds a value to property GpsSpeedRef from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsSpeedRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSSPEEDREF, value);
	}
	
    /**
     * Adds a value to property GpsSpeedRef from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsSpeedRef(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSSPEEDREF, value);
	}
  

    /**
     * Sets a value of property GpsSpeedRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsSpeedRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSSPEEDREF, value);
	}
	
    /**
     * Sets a value of property GpsSpeedRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsSpeedRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSSPEEDREF, value);
	}
    /**
     * Sets a value of property GpsSpeedRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsSpeedRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSSPEEDREF, value);
	}
	
    /**
     * Sets a value of property GpsSpeedRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsSpeedRef(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSSPEEDREF, value);
	}
  


    /**
     * Removes a value of property GpsSpeedRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsSpeedRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSSPEEDREF, value);
	}
	
    /**
     * Removes a value of property GpsSpeedRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsSpeedRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSSPEEDREF, value);
	}
    /**
     * Removes a value of property GpsSpeedRef given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsSpeedRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSSPEEDREF, value);
	}
	
    /**
     * Removes a value of property GpsSpeedRef given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsSpeedRef(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSSPEEDREF, value);
	}
  
    /**
     * Removes all values of property GpsSpeedRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsSpeedRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSSPEEDREF);
	}
	
    /**
     * Removes all values of property GpsSpeedRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsSpeedRef() {
		Base.removeAll(this.model, this.getResource(), GPSSPEEDREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fdb744e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fdb744e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsStatus() {
		return Base.has(this.model, this.getResource(), GPSSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fdb744e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fdb744e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsStatus( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSSTATUS);
	}

     /**
     * Get all values of property GpsStatus as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsStatus_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSSTATUS);
	}
	
    /**
     * Get all values of property GpsStatus as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsStatus_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSSTATUS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsStatus as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsStatus_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSSTATUS);
	}

    /**
     * Get all values of property GpsStatus as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsStatus_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSSTATUS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsStatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSSTATUS, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsStatus as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsStatus_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSSTATUS, java.lang.String.class);
	}

    /**
     * Get all values of property GpsStatus     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsStatus() {
		return Base.getAll(this.model, this.getResource(), GPSSTATUS, java.lang.String.class);
	}

    /**
     * Get all values of property GpsStatus as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsStatus_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSSTATUS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsStatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSSTATUS, value);
	}
	
    /**
     * Adds a value to property GpsStatus as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSSTATUS, value);
	}
    /**
     * Adds a value to property GpsStatus from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSSTATUS, value);
	}
	
    /**
     * Adds a value to property GpsStatus from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsStatus(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSSTATUS, value);
	}
  

    /**
     * Sets a value of property GpsStatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSSTATUS, value);
	}
	
    /**
     * Sets a value of property GpsStatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSSTATUS, value);
	}
    /**
     * Sets a value of property GpsStatus from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSSTATUS, value);
	}
	
    /**
     * Sets a value of property GpsStatus from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsStatus(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSSTATUS, value);
	}
  


    /**
     * Removes a value of property GpsStatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSSTATUS, value);
	}
	
    /**
     * Removes a value of property GpsStatus as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsStatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSSTATUS, value);
	}
    /**
     * Removes a value of property GpsStatus given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsStatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSSTATUS, value);
	}
	
    /**
     * Removes a value of property GpsStatus given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsStatus(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSSTATUS, value);
	}
  
    /**
     * Removes all values of property GpsStatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsStatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSSTATUS);
	}
	
    /**
     * Removes all values of property GpsStatus	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsStatus() {
		Base.removeAll(this.model, this.getResource(), GPSSTATUS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f44774e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsTimeStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSTIMESTAMP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f44774e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsTimeStamp() {
		return Base.has(this.model, this.getResource(), GPSTIMESTAMP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f44774e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsTimeStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSTIMESTAMP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7f44774e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsTimeStamp( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSTIMESTAMP);
	}

     /**
     * Get all values of property GpsTimeStamp as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsTimeStamp_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSTIMESTAMP);
	}
	
    /**
     * Get all values of property GpsTimeStamp as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsTimeStamp_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSTIMESTAMP, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsTimeStamp as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsTimeStamp_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSTIMESTAMP);
	}

    /**
     * Get all values of property GpsTimeStamp as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsTimeStamp_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSTIMESTAMP, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsTimeStamp     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsTimeStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSTIMESTAMP, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsTimeStamp as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsTimeStamp_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSTIMESTAMP, java.lang.String.class);
	}

    /**
     * Get all values of property GpsTimeStamp     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsTimeStamp() {
		return Base.getAll(this.model, this.getResource(), GPSTIMESTAMP, java.lang.String.class);
	}

    /**
     * Get all values of property GpsTimeStamp as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsTimeStamp_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSTIMESTAMP, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsTimeStamp as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsTimeStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSTIMESTAMP, value);
	}
	
    /**
     * Adds a value to property GpsTimeStamp as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsTimeStamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSTIMESTAMP, value);
	}
    /**
     * Adds a value to property GpsTimeStamp from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsTimeStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSTIMESTAMP, value);
	}
	
    /**
     * Adds a value to property GpsTimeStamp from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsTimeStamp(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSTIMESTAMP, value);
	}
  

    /**
     * Sets a value of property GpsTimeStamp from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsTimeStamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSTIMESTAMP, value);
	}
	
    /**
     * Sets a value of property GpsTimeStamp from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsTimeStamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSTIMESTAMP, value);
	}
    /**
     * Sets a value of property GpsTimeStamp from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsTimeStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSTIMESTAMP, value);
	}
	
    /**
     * Sets a value of property GpsTimeStamp from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsTimeStamp(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSTIMESTAMP, value);
	}
  


    /**
     * Removes a value of property GpsTimeStamp as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsTimeStamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSTIMESTAMP, value);
	}
	
    /**
     * Removes a value of property GpsTimeStamp as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsTimeStamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSTIMESTAMP, value);
	}
    /**
     * Removes a value of property GpsTimeStamp given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsTimeStamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSTIMESTAMP, value);
	}
	
    /**
     * Removes a value of property GpsTimeStamp given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsTimeStamp(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSTIMESTAMP, value);
	}
  
    /**
     * Removes all values of property GpsTimeStamp     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsTimeStamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSTIMESTAMP);
	}
	
    /**
     * Removes all values of property GpsTimeStamp	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsTimeStamp() {
		Base.removeAll(this.model, this.getResource(), GPSTIMESTAMP);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5322e645 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsTrack(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSTRACK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5322e645 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsTrack() {
		return Base.has(this.model, this.getResource(), GPSTRACK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5322e645 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsTrack(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSTRACK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5322e645 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsTrack( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSTRACK);
	}

     /**
     * Get all values of property GpsTrack as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsTrack_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSTRACK);
	}
	
    /**
     * Get all values of property GpsTrack as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsTrack_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSTRACK, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsTrack as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsTrack_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSTRACK);
	}

    /**
     * Get all values of property GpsTrack as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsTrack_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSTRACK, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsTrack     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsTrack(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSTRACK, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsTrack as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsTrack_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSTRACK, java.lang.String.class);
	}

    /**
     * Get all values of property GpsTrack     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsTrack() {
		return Base.getAll(this.model, this.getResource(), GPSTRACK, java.lang.String.class);
	}

    /**
     * Get all values of property GpsTrack as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsTrack_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSTRACK, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsTrack as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsTrack(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSTRACK, value);
	}
	
    /**
     * Adds a value to property GpsTrack as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsTrack( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSTRACK, value);
	}
    /**
     * Adds a value to property GpsTrack from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsTrack(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSTRACK, value);
	}
	
    /**
     * Adds a value to property GpsTrack from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsTrack(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSTRACK, value);
	}
  

    /**
     * Sets a value of property GpsTrack from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsTrack( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSTRACK, value);
	}
	
    /**
     * Sets a value of property GpsTrack from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsTrack( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSTRACK, value);
	}
    /**
     * Sets a value of property GpsTrack from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsTrack(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSTRACK, value);
	}
	
    /**
     * Sets a value of property GpsTrack from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsTrack(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSTRACK, value);
	}
  


    /**
     * Removes a value of property GpsTrack as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsTrack( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSTRACK, value);
	}
	
    /**
     * Removes a value of property GpsTrack as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsTrack( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSTRACK, value);
	}
    /**
     * Removes a value of property GpsTrack given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsTrack(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSTRACK, value);
	}
	
    /**
     * Removes a value of property GpsTrack given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsTrack(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSTRACK, value);
	}
  
    /**
     * Removes all values of property GpsTrack     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsTrack( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSTRACK);
	}
	
    /**
     * Removes all values of property GpsTrack	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsTrack() {
		Base.removeAll(this.model, this.getResource(), GPSTRACK);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bdb85f9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsTrackRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSTRACKREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bdb85f9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsTrackRef() {
		return Base.has(this.model, this.getResource(), GPSTRACKREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bdb85f9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsTrackRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSTRACKREF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bdb85f9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsTrackRef( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSTRACKREF);
	}

     /**
     * Get all values of property GpsTrackRef as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsTrackRef_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSTRACKREF);
	}
	
    /**
     * Get all values of property GpsTrackRef as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsTrackRef_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSTRACKREF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsTrackRef as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsTrackRef_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSTRACKREF);
	}

    /**
     * Get all values of property GpsTrackRef as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsTrackRef_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSTRACKREF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsTrackRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsTrackRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSTRACKREF, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsTrackRef as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsTrackRef_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSTRACKREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsTrackRef     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsTrackRef() {
		return Base.getAll(this.model, this.getResource(), GPSTRACKREF, java.lang.String.class);
	}

    /**
     * Get all values of property GpsTrackRef as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsTrackRef_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSTRACKREF, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsTrackRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsTrackRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSTRACKREF, value);
	}
	
    /**
     * Adds a value to property GpsTrackRef as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsTrackRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSTRACKREF, value);
	}
    /**
     * Adds a value to property GpsTrackRef from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsTrackRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSTRACKREF, value);
	}
	
    /**
     * Adds a value to property GpsTrackRef from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsTrackRef(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSTRACKREF, value);
	}
  

    /**
     * Sets a value of property GpsTrackRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsTrackRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSTRACKREF, value);
	}
	
    /**
     * Sets a value of property GpsTrackRef from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsTrackRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSTRACKREF, value);
	}
    /**
     * Sets a value of property GpsTrackRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsTrackRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSTRACKREF, value);
	}
	
    /**
     * Sets a value of property GpsTrackRef from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsTrackRef(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSTRACKREF, value);
	}
  


    /**
     * Removes a value of property GpsTrackRef as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsTrackRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSTRACKREF, value);
	}
	
    /**
     * Removes a value of property GpsTrackRef as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsTrackRef( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSTRACKREF, value);
	}
    /**
     * Removes a value of property GpsTrackRef given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsTrackRef(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSTRACKREF, value);
	}
	
    /**
     * Removes a value of property GpsTrackRef given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsTrackRef(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSTRACKREF, value);
	}
  
    /**
     * Removes all values of property GpsTrackRef     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsTrackRef( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSTRACKREF);
	}
	
    /**
     * Removes all values of property GpsTrackRef	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsTrackRef() {
		Base.removeAll(this.model, this.getResource(), GPSTRACKREF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6951e281 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGpsVersionID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GPSVERSIONID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6951e281 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGpsVersionID() {
		return Base.has(this.model, this.getResource(), GPSVERSIONID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6951e281 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGpsVersionID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GPSVERSIONID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6951e281 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGpsVersionID( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GPSVERSIONID);
	}

     /**
     * Get all values of property GpsVersionID as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsVersionID_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GPSVERSIONID);
	}
	
    /**
     * Get all values of property GpsVersionID as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsVersionID_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSVERSIONID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property GpsVersionID as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGpsVersionID_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GPSVERSIONID);
	}

    /**
     * Get all values of property GpsVersionID as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllGpsVersionID_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GPSVERSIONID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property GpsVersionID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllGpsVersionID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GPSVERSIONID, java.lang.String.class);
	}
	
    /**
     * Get all values of property GpsVersionID as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllGpsVersionID_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GPSVERSIONID, java.lang.String.class);
	}

    /**
     * Get all values of property GpsVersionID     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllGpsVersionID() {
		return Base.getAll(this.model, this.getResource(), GPSVERSIONID, java.lang.String.class);
	}

    /**
     * Get all values of property GpsVersionID as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllGpsVersionID_as() {
		return Base.getAll_as(this.model, this.getResource(), GPSVERSIONID, java.lang.String.class);
	}
 
    /**
     * Adds a value to property GpsVersionID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addGpsVersionID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GPSVERSIONID, value);
	}
	
    /**
     * Adds a value to property GpsVersionID as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addGpsVersionID( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GPSVERSIONID, value);
	}
    /**
     * Adds a value to property GpsVersionID from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addGpsVersionID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GPSVERSIONID, value);
	}
	
    /**
     * Adds a value to property GpsVersionID from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addGpsVersionID(java.lang.String value) {
		Base.add(this.model, this.getResource(), GPSVERSIONID, value);
	}
  

    /**
     * Sets a value of property GpsVersionID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGpsVersionID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GPSVERSIONID, value);
	}
	
    /**
     * Sets a value of property GpsVersionID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGpsVersionID( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GPSVERSIONID, value);
	}
    /**
     * Sets a value of property GpsVersionID from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGpsVersionID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GPSVERSIONID, value);
	}
	
    /**
     * Sets a value of property GpsVersionID from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGpsVersionID(java.lang.String value) {
		Base.set(this.model, this.getResource(), GPSVERSIONID, value);
	}
  


    /**
     * Removes a value of property GpsVersionID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGpsVersionID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GPSVERSIONID, value);
	}
	
    /**
     * Removes a value of property GpsVersionID as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGpsVersionID( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GPSVERSIONID, value);
	}
    /**
     * Removes a value of property GpsVersionID given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGpsVersionID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GPSVERSIONID, value);
	}
	
    /**
     * Removes a value of property GpsVersionID given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGpsVersionID(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GPSVERSIONID, value);
	}
  
    /**
     * Removes all values of property GpsVersionID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGpsVersionID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GPSVERSIONID);
	}
	
    /**
     * Removes all values of property GpsVersionID	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGpsVersionID() {
		Base.removeAll(this.model, this.getResource(), GPSVERSIONID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@542955e3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HEIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@542955e3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHeight() {
		return Base.has(this.model, this.getResource(), HEIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@542955e3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HEIGHT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@542955e3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHeight( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HEIGHT);
	}

     /**
     * Get all values of property Height as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHeight_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HEIGHT);
	}
	
    /**
     * Get all values of property Height as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHeight_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HEIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Height as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHeight_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HEIGHT);
	}

    /**
     * Get all values of property Height as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHeight_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HEIGHT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Height     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HEIGHT, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Height as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllHeight_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HEIGHT, java.lang.Integer.class);
	}

    /**
     * Get all values of property Height     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllHeight() {
		return Base.getAll(this.model, this.getResource(), HEIGHT, java.lang.Integer.class);
	}

    /**
     * Get all values of property Height as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllHeight_as() {
		return Base.getAll_as(this.model, this.getResource(), HEIGHT, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Height as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HEIGHT, value);
	}
	
    /**
     * Adds a value to property Height as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHeight( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HEIGHT, value);
	}
    /**
     * Adds a value to property Height from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, HEIGHT, value);
	}
	
    /**
     * Adds a value to property Height from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHeight(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), HEIGHT, value);
	}
  

    /**
     * Sets a value of property Height from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HEIGHT, value);
	}
	
    /**
     * Sets a value of property Height from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHeight( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HEIGHT, value);
	}
    /**
     * Sets a value of property Height from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, HEIGHT, value);
	}
	
    /**
     * Sets a value of property Height from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHeight(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), HEIGHT, value);
	}
  


    /**
     * Removes a value of property Height as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HEIGHT, value);
	}
	
    /**
     * Removes a value of property Height as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHeight( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HEIGHT, value);
	}
    /**
     * Removes a value of property Height given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHeight(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, HEIGHT, value);
	}
	
    /**
     * Removes a value of property Height given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHeight(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), HEIGHT, value);
	}
  
    /**
     * Removes all values of property Height     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHeight( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HEIGHT);
	}
	
    /**
     * Removes all values of property Height	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHeight() {
		Base.removeAll(this.model, this.getResource(), HEIGHT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73ccc30c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIfdPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73ccc30c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIfdPointer() {
		return Base.has(this.model, this.getResource(), IFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73ccc30c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIfdPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73ccc30c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIfdPointer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IFDPOINTER);
	}

     /**
     * Get all values of property IfdPointer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIfdPointer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IFDPOINTER);
	}
	
    /**
     * Get all values of property IfdPointer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIfdPointer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IfdPointer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIfdPointer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IFDPOINTER);
	}

    /**
     * Get all values of property IfdPointer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIfdPointer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IfdPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nexif.Photo> getAllIfdPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}
	
    /**
     * Get all values of property IfdPointer as a ReactorResult of Photo 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nexif.Photo> getAllIfdPointer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}

    /**
     * Get all values of property IfdPointer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nexif.Photo> getAllIfdPointer() {
		return Base.getAll(this.model, this.getResource(), IFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}

    /**
     * Get all values of property IfdPointer as a ReactorResult of Photo 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nexif.Photo> getAllIfdPointer_as() {
		return Base.getAll_as(this.model, this.getResource(), IFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}
 
    /**
     * Adds a value to property IfdPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIfdPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IFDPOINTER, value);
	}
	
    /**
     * Adds a value to property IfdPointer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIfdPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IFDPOINTER, value);
	}
    /**
     * Adds a value to property IfdPointer from an instance of Photo 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIfdPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.add(model, instanceResource, IFDPOINTER, value);
	}
	
    /**
     * Adds a value to property IfdPointer from an instance of Photo 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIfdPointer(eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.add(this.model, this.getResource(), IFDPOINTER, value);
	}
  

    /**
     * Sets a value of property IfdPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIfdPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IFDPOINTER, value);
	}
	
    /**
     * Sets a value of property IfdPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIfdPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IFDPOINTER, value);
	}
    /**
     * Sets a value of property IfdPointer from an instance of Photo 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIfdPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.set(model, instanceResource, IFDPOINTER, value);
	}
	
    /**
     * Sets a value of property IfdPointer from an instance of Photo 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIfdPointer(eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.set(this.model, this.getResource(), IFDPOINTER, value);
	}
  


    /**
     * Removes a value of property IfdPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIfdPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IFDPOINTER, value);
	}
	
    /**
     * Removes a value of property IfdPointer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIfdPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IFDPOINTER, value);
	}
    /**
     * Removes a value of property IfdPointer given as an instance of Photo 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIfdPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.remove(model, instanceResource, IFDPOINTER, value);
	}
	
    /**
     * Removes a value of property IfdPointer given as an instance of Photo 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIfdPointer(eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.remove(this.model, this.getResource(), IFDPOINTER, value);
	}
  
    /**
     * Removes all values of property IfdPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIfdPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IFDPOINTER);
	}
	
    /**
     * Removes all values of property IfdPointer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIfdPointer() {
		Base.removeAll(this.model, this.getResource(), IFDPOINTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d60390a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImageConfig(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMAGECONFIG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d60390a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImageConfig() {
		return Base.has(this.model, this.getResource(), IMAGECONFIG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d60390a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImageConfig(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMAGECONFIG);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d60390a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImageConfig( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMAGECONFIG);
	}

     /**
     * Get all values of property ImageConfig as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImageConfig_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMAGECONFIG);
	}
	
    /**
     * Get all values of property ImageConfig as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImageConfig_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGECONFIG, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ImageConfig as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImageConfig_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMAGECONFIG);
	}

    /**
     * Get all values of property ImageConfig as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImageConfig_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMAGECONFIG, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ImageConfig     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllImageConfig(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMAGECONFIG, java.lang.String.class);
	}
	
    /**
     * Get all values of property ImageConfig as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllImageConfig_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGECONFIG, java.lang.String.class);
	}

    /**
     * Get all values of property ImageConfig     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllImageConfig() {
		return Base.getAll(this.model, this.getResource(), IMAGECONFIG, java.lang.String.class);
	}

    /**
     * Get all values of property ImageConfig as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllImageConfig_as() {
		return Base.getAll_as(this.model, this.getResource(), IMAGECONFIG, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ImageConfig as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImageConfig(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMAGECONFIG, value);
	}
	
    /**
     * Adds a value to property ImageConfig as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImageConfig( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMAGECONFIG, value);
	}
    /**
     * Adds a value to property ImageConfig from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImageConfig(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, IMAGECONFIG, value);
	}
	
    /**
     * Adds a value to property ImageConfig from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImageConfig(java.lang.String value) {
		Base.add(this.model, this.getResource(), IMAGECONFIG, value);
	}
  

    /**
     * Sets a value of property ImageConfig from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImageConfig( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMAGECONFIG, value);
	}
	
    /**
     * Sets a value of property ImageConfig from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImageConfig( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMAGECONFIG, value);
	}
    /**
     * Sets a value of property ImageConfig from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImageConfig(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, IMAGECONFIG, value);
	}
	
    /**
     * Sets a value of property ImageConfig from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImageConfig(java.lang.String value) {
		Base.set(this.model, this.getResource(), IMAGECONFIG, value);
	}
  


    /**
     * Removes a value of property ImageConfig as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImageConfig( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMAGECONFIG, value);
	}
	
    /**
     * Removes a value of property ImageConfig as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImageConfig( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMAGECONFIG, value);
	}
    /**
     * Removes a value of property ImageConfig given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImageConfig(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, IMAGECONFIG, value);
	}
	
    /**
     * Removes a value of property ImageConfig given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImageConfig(java.lang.String value) {
		Base.remove(this.model, this.getResource(), IMAGECONFIG, value);
	}
  
    /**
     * Removes all values of property ImageConfig     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImageConfig( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMAGECONFIG);
	}
	
    /**
     * Removes all values of property ImageConfig	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImageConfig() {
		Base.removeAll(this.model, this.getResource(), IMAGECONFIG);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b6a3d73 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImageDataCharacter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMAGEDATACHARACTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b6a3d73 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImageDataCharacter() {
		return Base.has(this.model, this.getResource(), IMAGEDATACHARACTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b6a3d73 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImageDataCharacter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMAGEDATACHARACTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b6a3d73 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImageDataCharacter( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMAGEDATACHARACTER);
	}

     /**
     * Get all values of property ImageDataCharacter as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImageDataCharacter_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMAGEDATACHARACTER);
	}
	
    /**
     * Get all values of property ImageDataCharacter as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImageDataCharacter_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGEDATACHARACTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ImageDataCharacter as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImageDataCharacter_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMAGEDATACHARACTER);
	}

    /**
     * Get all values of property ImageDataCharacter as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImageDataCharacter_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMAGEDATACHARACTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ImageDataCharacter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllImageDataCharacter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMAGEDATACHARACTER, java.lang.String.class);
	}
	
    /**
     * Get all values of property ImageDataCharacter as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllImageDataCharacter_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGEDATACHARACTER, java.lang.String.class);
	}

    /**
     * Get all values of property ImageDataCharacter     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllImageDataCharacter() {
		return Base.getAll(this.model, this.getResource(), IMAGEDATACHARACTER, java.lang.String.class);
	}

    /**
     * Get all values of property ImageDataCharacter as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllImageDataCharacter_as() {
		return Base.getAll_as(this.model, this.getResource(), IMAGEDATACHARACTER, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ImageDataCharacter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImageDataCharacter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMAGEDATACHARACTER, value);
	}
	
    /**
     * Adds a value to property ImageDataCharacter as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImageDataCharacter( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMAGEDATACHARACTER, value);
	}
    /**
     * Adds a value to property ImageDataCharacter from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImageDataCharacter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, IMAGEDATACHARACTER, value);
	}
	
    /**
     * Adds a value to property ImageDataCharacter from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImageDataCharacter(java.lang.String value) {
		Base.add(this.model, this.getResource(), IMAGEDATACHARACTER, value);
	}
  

    /**
     * Sets a value of property ImageDataCharacter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImageDataCharacter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMAGEDATACHARACTER, value);
	}
	
    /**
     * Sets a value of property ImageDataCharacter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImageDataCharacter( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMAGEDATACHARACTER, value);
	}
    /**
     * Sets a value of property ImageDataCharacter from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImageDataCharacter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, IMAGEDATACHARACTER, value);
	}
	
    /**
     * Sets a value of property ImageDataCharacter from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImageDataCharacter(java.lang.String value) {
		Base.set(this.model, this.getResource(), IMAGEDATACHARACTER, value);
	}
  


    /**
     * Removes a value of property ImageDataCharacter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImageDataCharacter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMAGEDATACHARACTER, value);
	}
	
    /**
     * Removes a value of property ImageDataCharacter as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImageDataCharacter( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMAGEDATACHARACTER, value);
	}
    /**
     * Removes a value of property ImageDataCharacter given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImageDataCharacter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, IMAGEDATACHARACTER, value);
	}
	
    /**
     * Removes a value of property ImageDataCharacter given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImageDataCharacter(java.lang.String value) {
		Base.remove(this.model, this.getResource(), IMAGEDATACHARACTER, value);
	}
  
    /**
     * Removes all values of property ImageDataCharacter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImageDataCharacter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMAGEDATACHARACTER);
	}
	
    /**
     * Removes all values of property ImageDataCharacter	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImageDataCharacter() {
		Base.removeAll(this.model, this.getResource(), IMAGEDATACHARACTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29cc3776 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImageDataStruct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMAGEDATASTRUCT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29cc3776 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImageDataStruct() {
		return Base.has(this.model, this.getResource(), IMAGEDATASTRUCT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29cc3776 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImageDataStruct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMAGEDATASTRUCT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29cc3776 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImageDataStruct( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMAGEDATASTRUCT);
	}

     /**
     * Get all values of property ImageDataStruct as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImageDataStruct_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMAGEDATASTRUCT);
	}
	
    /**
     * Get all values of property ImageDataStruct as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImageDataStruct_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGEDATASTRUCT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ImageDataStruct as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImageDataStruct_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMAGEDATASTRUCT);
	}

    /**
     * Get all values of property ImageDataStruct as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImageDataStruct_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMAGEDATASTRUCT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ImageDataStruct     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllImageDataStruct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMAGEDATASTRUCT, java.lang.String.class);
	}
	
    /**
     * Get all values of property ImageDataStruct as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllImageDataStruct_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGEDATASTRUCT, java.lang.String.class);
	}

    /**
     * Get all values of property ImageDataStruct     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllImageDataStruct() {
		return Base.getAll(this.model, this.getResource(), IMAGEDATASTRUCT, java.lang.String.class);
	}

    /**
     * Get all values of property ImageDataStruct as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllImageDataStruct_as() {
		return Base.getAll_as(this.model, this.getResource(), IMAGEDATASTRUCT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ImageDataStruct as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImageDataStruct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMAGEDATASTRUCT, value);
	}
	
    /**
     * Adds a value to property ImageDataStruct as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImageDataStruct( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMAGEDATASTRUCT, value);
	}
    /**
     * Adds a value to property ImageDataStruct from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImageDataStruct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, IMAGEDATASTRUCT, value);
	}
	
    /**
     * Adds a value to property ImageDataStruct from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImageDataStruct(java.lang.String value) {
		Base.add(this.model, this.getResource(), IMAGEDATASTRUCT, value);
	}
  

    /**
     * Sets a value of property ImageDataStruct from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImageDataStruct( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMAGEDATASTRUCT, value);
	}
	
    /**
     * Sets a value of property ImageDataStruct from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImageDataStruct( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMAGEDATASTRUCT, value);
	}
    /**
     * Sets a value of property ImageDataStruct from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImageDataStruct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, IMAGEDATASTRUCT, value);
	}
	
    /**
     * Sets a value of property ImageDataStruct from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImageDataStruct(java.lang.String value) {
		Base.set(this.model, this.getResource(), IMAGEDATASTRUCT, value);
	}
  


    /**
     * Removes a value of property ImageDataStruct as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImageDataStruct( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMAGEDATASTRUCT, value);
	}
	
    /**
     * Removes a value of property ImageDataStruct as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImageDataStruct( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMAGEDATASTRUCT, value);
	}
    /**
     * Removes a value of property ImageDataStruct given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImageDataStruct(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, IMAGEDATASTRUCT, value);
	}
	
    /**
     * Removes a value of property ImageDataStruct given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImageDataStruct(java.lang.String value) {
		Base.remove(this.model, this.getResource(), IMAGEDATASTRUCT, value);
	}
  
    /**
     * Removes all values of property ImageDataStruct     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImageDataStruct( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMAGEDATASTRUCT);
	}
	
    /**
     * Removes all values of property ImageDataStruct	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImageDataStruct() {
		Base.removeAll(this.model, this.getResource(), IMAGEDATASTRUCT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e114545 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImageDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMAGEDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e114545 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImageDescription() {
		return Base.has(this.model, this.getResource(), IMAGEDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e114545 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImageDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMAGEDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e114545 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImageDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMAGEDESCRIPTION);
	}

     /**
     * Get all values of property ImageDescription as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImageDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMAGEDESCRIPTION);
	}
	
    /**
     * Get all values of property ImageDescription as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImageDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGEDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ImageDescription as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImageDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMAGEDESCRIPTION);
	}

    /**
     * Get all values of property ImageDescription as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImageDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMAGEDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ImageDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllImageDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMAGEDESCRIPTION, java.lang.String.class);
	}
	
    /**
     * Get all values of property ImageDescription as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllImageDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGEDESCRIPTION, java.lang.String.class);
	}

    /**
     * Get all values of property ImageDescription     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllImageDescription() {
		return Base.getAll(this.model, this.getResource(), IMAGEDESCRIPTION, java.lang.String.class);
	}

    /**
     * Get all values of property ImageDescription as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllImageDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), IMAGEDESCRIPTION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ImageDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImageDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMAGEDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property ImageDescription as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImageDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMAGEDESCRIPTION, value);
	}
    /**
     * Adds a value to property ImageDescription from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImageDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, IMAGEDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property ImageDescription from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImageDescription(java.lang.String value) {
		Base.add(this.model, this.getResource(), IMAGEDESCRIPTION, value);
	}
  

    /**
     * Sets a value of property ImageDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImageDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMAGEDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property ImageDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImageDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMAGEDESCRIPTION, value);
	}
    /**
     * Sets a value of property ImageDescription from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImageDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, IMAGEDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property ImageDescription from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImageDescription(java.lang.String value) {
		Base.set(this.model, this.getResource(), IMAGEDESCRIPTION, value);
	}
  


    /**
     * Removes a value of property ImageDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImageDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMAGEDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property ImageDescription as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImageDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMAGEDESCRIPTION, value);
	}
    /**
     * Removes a value of property ImageDescription given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImageDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, IMAGEDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property ImageDescription given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImageDescription(java.lang.String value) {
		Base.remove(this.model, this.getResource(), IMAGEDESCRIPTION, value);
	}
  
    /**
     * Removes all values of property ImageDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImageDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMAGEDESCRIPTION);
	}
	
    /**
     * Removes all values of property ImageDescription	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImageDescription() {
		Base.removeAll(this.model, this.getResource(), IMAGEDESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@170364f2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMAGELENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@170364f2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImageLength() {
		return Base.has(this.model, this.getResource(), IMAGELENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@170364f2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMAGELENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@170364f2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImageLength( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMAGELENGTH);
	}

     /**
     * Get all values of property ImageLength as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImageLength_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMAGELENGTH);
	}
	
    /**
     * Get all values of property ImageLength as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImageLength_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGELENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ImageLength as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImageLength_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMAGELENGTH);
	}

    /**
     * Get all values of property ImageLength as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImageLength_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMAGELENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ImageLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMAGELENGTH, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property ImageLength as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllImageLength_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGELENGTH, java.lang.Integer.class);
	}

    /**
     * Get all values of property ImageLength     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllImageLength() {
		return Base.getAll(this.model, this.getResource(), IMAGELENGTH, java.lang.Integer.class);
	}

    /**
     * Get all values of property ImageLength as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllImageLength_as() {
		return Base.getAll_as(this.model, this.getResource(), IMAGELENGTH, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property ImageLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMAGELENGTH, value);
	}
	
    /**
     * Adds a value to property ImageLength as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImageLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMAGELENGTH, value);
	}
    /**
     * Adds a value to property ImageLength from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, IMAGELENGTH, value);
	}
	
    /**
     * Adds a value to property ImageLength from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImageLength(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), IMAGELENGTH, value);
	}
  

    /**
     * Sets a value of property ImageLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImageLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMAGELENGTH, value);
	}
	
    /**
     * Sets a value of property ImageLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImageLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMAGELENGTH, value);
	}
    /**
     * Sets a value of property ImageLength from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, IMAGELENGTH, value);
	}
	
    /**
     * Sets a value of property ImageLength from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImageLength(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), IMAGELENGTH, value);
	}
  


    /**
     * Removes a value of property ImageLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImageLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMAGELENGTH, value);
	}
	
    /**
     * Removes a value of property ImageLength as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImageLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMAGELENGTH, value);
	}
    /**
     * Removes a value of property ImageLength given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, IMAGELENGTH, value);
	}
	
    /**
     * Removes a value of property ImageLength given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImageLength(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), IMAGELENGTH, value);
	}
  
    /**
     * Removes all values of property ImageLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImageLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMAGELENGTH);
	}
	
    /**
     * Removes all values of property ImageLength	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImageLength() {
		Base.removeAll(this.model, this.getResource(), IMAGELENGTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4630cee5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImageUniqueID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMAGEUNIQUEID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4630cee5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImageUniqueID() {
		return Base.has(this.model, this.getResource(), IMAGEUNIQUEID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4630cee5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImageUniqueID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMAGEUNIQUEID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4630cee5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImageUniqueID( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMAGEUNIQUEID);
	}

     /**
     * Get all values of property ImageUniqueID as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImageUniqueID_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMAGEUNIQUEID);
	}
	
    /**
     * Get all values of property ImageUniqueID as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImageUniqueID_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGEUNIQUEID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ImageUniqueID as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImageUniqueID_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMAGEUNIQUEID);
	}

    /**
     * Get all values of property ImageUniqueID as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImageUniqueID_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMAGEUNIQUEID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ImageUniqueID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllImageUniqueID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMAGEUNIQUEID, java.lang.String.class);
	}
	
    /**
     * Get all values of property ImageUniqueID as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllImageUniqueID_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGEUNIQUEID, java.lang.String.class);
	}

    /**
     * Get all values of property ImageUniqueID     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllImageUniqueID() {
		return Base.getAll(this.model, this.getResource(), IMAGEUNIQUEID, java.lang.String.class);
	}

    /**
     * Get all values of property ImageUniqueID as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllImageUniqueID_as() {
		return Base.getAll_as(this.model, this.getResource(), IMAGEUNIQUEID, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ImageUniqueID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImageUniqueID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMAGEUNIQUEID, value);
	}
	
    /**
     * Adds a value to property ImageUniqueID as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImageUniqueID( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMAGEUNIQUEID, value);
	}
    /**
     * Adds a value to property ImageUniqueID from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImageUniqueID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, IMAGEUNIQUEID, value);
	}
	
    /**
     * Adds a value to property ImageUniqueID from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImageUniqueID(java.lang.String value) {
		Base.add(this.model, this.getResource(), IMAGEUNIQUEID, value);
	}
  

    /**
     * Sets a value of property ImageUniqueID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImageUniqueID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMAGEUNIQUEID, value);
	}
	
    /**
     * Sets a value of property ImageUniqueID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImageUniqueID( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMAGEUNIQUEID, value);
	}
    /**
     * Sets a value of property ImageUniqueID from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImageUniqueID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, IMAGEUNIQUEID, value);
	}
	
    /**
     * Sets a value of property ImageUniqueID from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImageUniqueID(java.lang.String value) {
		Base.set(this.model, this.getResource(), IMAGEUNIQUEID, value);
	}
  


    /**
     * Removes a value of property ImageUniqueID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImageUniqueID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMAGEUNIQUEID, value);
	}
	
    /**
     * Removes a value of property ImageUniqueID as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImageUniqueID( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMAGEUNIQUEID, value);
	}
    /**
     * Removes a value of property ImageUniqueID given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImageUniqueID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, IMAGEUNIQUEID, value);
	}
	
    /**
     * Removes a value of property ImageUniqueID given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImageUniqueID(java.lang.String value) {
		Base.remove(this.model, this.getResource(), IMAGEUNIQUEID, value);
	}
  
    /**
     * Removes all values of property ImageUniqueID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImageUniqueID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMAGEUNIQUEID);
	}
	
    /**
     * Removes all values of property ImageUniqueID	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImageUniqueID() {
		Base.removeAll(this.model, this.getResource(), IMAGEUNIQUEID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@480ae916 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMAGEWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@480ae916 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasImageWidth() {
		return Base.has(this.model, this.getResource(), IMAGEWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@480ae916 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMAGEWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@480ae916 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasImageWidth( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMAGEWIDTH);
	}

     /**
     * Get all values of property ImageWidth as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImageWidth_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMAGEWIDTH);
	}
	
    /**
     * Get all values of property ImageWidth as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImageWidth_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGEWIDTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ImageWidth as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImageWidth_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMAGEWIDTH);
	}

    /**
     * Get all values of property ImageWidth as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllImageWidth_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMAGEWIDTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ImageWidth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMAGEWIDTH, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property ImageWidth as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllImageWidth_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGEWIDTH, java.lang.Integer.class);
	}

    /**
     * Get all values of property ImageWidth     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllImageWidth() {
		return Base.getAll(this.model, this.getResource(), IMAGEWIDTH, java.lang.Integer.class);
	}

    /**
     * Get all values of property ImageWidth as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllImageWidth_as() {
		return Base.getAll_as(this.model, this.getResource(), IMAGEWIDTH, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property ImageWidth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMAGEWIDTH, value);
	}
	
    /**
     * Adds a value to property ImageWidth as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addImageWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMAGEWIDTH, value);
	}
    /**
     * Adds a value to property ImageWidth from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, IMAGEWIDTH, value);
	}
	
    /**
     * Adds a value to property ImageWidth from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addImageWidth(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), IMAGEWIDTH, value);
	}
  

    /**
     * Sets a value of property ImageWidth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setImageWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMAGEWIDTH, value);
	}
	
    /**
     * Sets a value of property ImageWidth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setImageWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMAGEWIDTH, value);
	}
    /**
     * Sets a value of property ImageWidth from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, IMAGEWIDTH, value);
	}
	
    /**
     * Sets a value of property ImageWidth from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setImageWidth(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), IMAGEWIDTH, value);
	}
  


    /**
     * Removes a value of property ImageWidth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeImageWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMAGEWIDTH, value);
	}
	
    /**
     * Removes a value of property ImageWidth as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeImageWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMAGEWIDTH, value);
	}
    /**
     * Removes a value of property ImageWidth given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, IMAGEWIDTH, value);
	}
	
    /**
     * Removes a value of property ImageWidth given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeImageWidth(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), IMAGEWIDTH, value);
	}
  
    /**
     * Removes all values of property ImageWidth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllImageWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMAGEWIDTH);
	}
	
    /**
     * Removes all values of property ImageWidth	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllImageWidth() {
		Base.removeAll(this.model, this.getResource(), IMAGEWIDTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44aca693 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInteropInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INTEROPINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44aca693 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInteropInfo() {
		return Base.has(this.model, this.getResource(), INTEROPINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44aca693 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInteropInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INTEROPINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44aca693 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInteropInfo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INTEROPINFO);
	}

     /**
     * Get all values of property InteropInfo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInteropInfo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INTEROPINFO);
	}
	
    /**
     * Get all values of property InteropInfo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInteropInfo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTEROPINFO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InteropInfo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInteropInfo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INTEROPINFO);
	}

    /**
     * Get all values of property InteropInfo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInteropInfo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INTEROPINFO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InteropInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllInteropInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INTEROPINFO, java.lang.String.class);
	}
	
    /**
     * Get all values of property InteropInfo as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllInteropInfo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTEROPINFO, java.lang.String.class);
	}

    /**
     * Get all values of property InteropInfo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllInteropInfo() {
		return Base.getAll(this.model, this.getResource(), INTEROPINFO, java.lang.String.class);
	}

    /**
     * Get all values of property InteropInfo as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllInteropInfo_as() {
		return Base.getAll_as(this.model, this.getResource(), INTEROPINFO, java.lang.String.class);
	}
 
    /**
     * Adds a value to property InteropInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInteropInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INTEROPINFO, value);
	}
	
    /**
     * Adds a value to property InteropInfo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInteropInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INTEROPINFO, value);
	}
    /**
     * Adds a value to property InteropInfo from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInteropInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, INTEROPINFO, value);
	}
	
    /**
     * Adds a value to property InteropInfo from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInteropInfo(java.lang.String value) {
		Base.add(this.model, this.getResource(), INTEROPINFO, value);
	}
  

    /**
     * Sets a value of property InteropInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInteropInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTEROPINFO, value);
	}
	
    /**
     * Sets a value of property InteropInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInteropInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTEROPINFO, value);
	}
    /**
     * Sets a value of property InteropInfo from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInteropInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, INTEROPINFO, value);
	}
	
    /**
     * Sets a value of property InteropInfo from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInteropInfo(java.lang.String value) {
		Base.set(this.model, this.getResource(), INTEROPINFO, value);
	}
  


    /**
     * Removes a value of property InteropInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInteropInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTEROPINFO, value);
	}
	
    /**
     * Removes a value of property InteropInfo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInteropInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTEROPINFO, value);
	}
    /**
     * Removes a value of property InteropInfo given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInteropInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, INTEROPINFO, value);
	}
	
    /**
     * Removes a value of property InteropInfo given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInteropInfo(java.lang.String value) {
		Base.remove(this.model, this.getResource(), INTEROPINFO, value);
	}
  
    /**
     * Removes all values of property InteropInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInteropInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTEROPINFO);
	}
	
    /**
     * Removes all values of property InteropInfo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInteropInfo() {
		Base.removeAll(this.model, this.getResource(), INTEROPINFO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3166cb66 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInteroperabilityIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INTEROPERABILITYIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3166cb66 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInteroperabilityIFDPointer() {
		return Base.has(this.model, this.getResource(), INTEROPERABILITYIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3166cb66 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInteroperabilityIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INTEROPERABILITYIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3166cb66 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInteroperabilityIFDPointer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INTEROPERABILITYIFDPOINTER);
	}

     /**
     * Get all values of property InteroperabilityIFDPointer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInteroperabilityIFDPointer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INTEROPERABILITYIFDPOINTER);
	}
	
    /**
     * Get all values of property InteroperabilityIFDPointer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInteroperabilityIFDPointer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTEROPERABILITYIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InteroperabilityIFDPointer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInteroperabilityIFDPointer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INTEROPERABILITYIFDPOINTER);
	}

    /**
     * Get all values of property InteroperabilityIFDPointer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInteroperabilityIFDPointer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INTEROPERABILITYIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InteroperabilityIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nexif.Photo> getAllInteroperabilityIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INTEROPERABILITYIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}
	
    /**
     * Get all values of property InteroperabilityIFDPointer as a ReactorResult of Photo 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nexif.Photo> getAllInteroperabilityIFDPointer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTEROPERABILITYIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}

    /**
     * Get all values of property InteroperabilityIFDPointer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nexif.Photo> getAllInteroperabilityIFDPointer() {
		return Base.getAll(this.model, this.getResource(), INTEROPERABILITYIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}

    /**
     * Get all values of property InteroperabilityIFDPointer as a ReactorResult of Photo 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nexif.Photo> getAllInteroperabilityIFDPointer_as() {
		return Base.getAll_as(this.model, this.getResource(), INTEROPERABILITYIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}
 
    /**
     * Adds a value to property InteroperabilityIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInteroperabilityIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INTEROPERABILITYIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property InteroperabilityIFDPointer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInteroperabilityIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INTEROPERABILITYIFDPOINTER, value);
	}
    /**
     * Adds a value to property InteroperabilityIFDPointer from an instance of Photo 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInteroperabilityIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.add(model, instanceResource, INTEROPERABILITYIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property InteroperabilityIFDPointer from an instance of Photo 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInteroperabilityIFDPointer(eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.add(this.model, this.getResource(), INTEROPERABILITYIFDPOINTER, value);
	}
  

    /**
     * Sets a value of property InteroperabilityIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInteroperabilityIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTEROPERABILITYIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property InteroperabilityIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInteroperabilityIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTEROPERABILITYIFDPOINTER, value);
	}
    /**
     * Sets a value of property InteroperabilityIFDPointer from an instance of Photo 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInteroperabilityIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.set(model, instanceResource, INTEROPERABILITYIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property InteroperabilityIFDPointer from an instance of Photo 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInteroperabilityIFDPointer(eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.set(this.model, this.getResource(), INTEROPERABILITYIFDPOINTER, value);
	}
  


    /**
     * Removes a value of property InteroperabilityIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInteroperabilityIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTEROPERABILITYIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property InteroperabilityIFDPointer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInteroperabilityIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTEROPERABILITYIFDPOINTER, value);
	}
    /**
     * Removes a value of property InteroperabilityIFDPointer given as an instance of Photo 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInteroperabilityIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.remove(model, instanceResource, INTEROPERABILITYIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property InteroperabilityIFDPointer given as an instance of Photo 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInteroperabilityIFDPointer(eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.remove(this.model, this.getResource(), INTEROPERABILITYIFDPOINTER, value);
	}
  
    /**
     * Removes all values of property InteroperabilityIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInteroperabilityIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTEROPERABILITYIFDPOINTER);
	}
	
    /**
     * Removes all values of property InteroperabilityIFDPointer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInteroperabilityIFDPointer() {
		Base.removeAll(this.model, this.getResource(), INTEROPERABILITYIFDPOINTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fa4af2a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInteroperabilityIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INTEROPERABILITYINDEX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fa4af2a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInteroperabilityIndex() {
		return Base.has(this.model, this.getResource(), INTEROPERABILITYINDEX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fa4af2a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInteroperabilityIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INTEROPERABILITYINDEX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1fa4af2a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInteroperabilityIndex( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INTEROPERABILITYINDEX);
	}

     /**
     * Get all values of property InteroperabilityIndex as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInteroperabilityIndex_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INTEROPERABILITYINDEX);
	}
	
    /**
     * Get all values of property InteroperabilityIndex as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInteroperabilityIndex_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTEROPERABILITYINDEX, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InteroperabilityIndex as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInteroperabilityIndex_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INTEROPERABILITYINDEX);
	}

    /**
     * Get all values of property InteroperabilityIndex as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInteroperabilityIndex_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INTEROPERABILITYINDEX, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InteroperabilityIndex     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllInteroperabilityIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INTEROPERABILITYINDEX, java.lang.String.class);
	}
	
    /**
     * Get all values of property InteroperabilityIndex as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllInteroperabilityIndex_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTEROPERABILITYINDEX, java.lang.String.class);
	}

    /**
     * Get all values of property InteroperabilityIndex     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllInteroperabilityIndex() {
		return Base.getAll(this.model, this.getResource(), INTEROPERABILITYINDEX, java.lang.String.class);
	}

    /**
     * Get all values of property InteroperabilityIndex as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllInteroperabilityIndex_as() {
		return Base.getAll_as(this.model, this.getResource(), INTEROPERABILITYINDEX, java.lang.String.class);
	}
 
    /**
     * Adds a value to property InteroperabilityIndex as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInteroperabilityIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INTEROPERABILITYINDEX, value);
	}
	
    /**
     * Adds a value to property InteroperabilityIndex as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInteroperabilityIndex( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INTEROPERABILITYINDEX, value);
	}
    /**
     * Adds a value to property InteroperabilityIndex from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInteroperabilityIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, INTEROPERABILITYINDEX, value);
	}
	
    /**
     * Adds a value to property InteroperabilityIndex from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInteroperabilityIndex(java.lang.String value) {
		Base.add(this.model, this.getResource(), INTEROPERABILITYINDEX, value);
	}
  

    /**
     * Sets a value of property InteroperabilityIndex from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInteroperabilityIndex( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTEROPERABILITYINDEX, value);
	}
	
    /**
     * Sets a value of property InteroperabilityIndex from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInteroperabilityIndex( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTEROPERABILITYINDEX, value);
	}
    /**
     * Sets a value of property InteroperabilityIndex from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInteroperabilityIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, INTEROPERABILITYINDEX, value);
	}
	
    /**
     * Sets a value of property InteroperabilityIndex from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInteroperabilityIndex(java.lang.String value) {
		Base.set(this.model, this.getResource(), INTEROPERABILITYINDEX, value);
	}
  


    /**
     * Removes a value of property InteroperabilityIndex as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInteroperabilityIndex( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTEROPERABILITYINDEX, value);
	}
	
    /**
     * Removes a value of property InteroperabilityIndex as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInteroperabilityIndex( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTEROPERABILITYINDEX, value);
	}
    /**
     * Removes a value of property InteroperabilityIndex given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInteroperabilityIndex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, INTEROPERABILITYINDEX, value);
	}
	
    /**
     * Removes a value of property InteroperabilityIndex given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInteroperabilityIndex(java.lang.String value) {
		Base.remove(this.model, this.getResource(), INTEROPERABILITYINDEX, value);
	}
  
    /**
     * Removes all values of property InteroperabilityIndex     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInteroperabilityIndex( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTEROPERABILITYINDEX);
	}
	
    /**
     * Removes all values of property InteroperabilityIndex	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInteroperabilityIndex() {
		Base.removeAll(this.model, this.getResource(), INTEROPERABILITYINDEX);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45e6ce45 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasInteroperabilityVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INTEROPERABILITYVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45e6ce45 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasInteroperabilityVersion() {
		return Base.has(this.model, this.getResource(), INTEROPERABILITYVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45e6ce45 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasInteroperabilityVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INTEROPERABILITYVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@45e6ce45 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasInteroperabilityVersion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INTEROPERABILITYVERSION);
	}

     /**
     * Get all values of property InteroperabilityVersion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInteroperabilityVersion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INTEROPERABILITYVERSION);
	}
	
    /**
     * Get all values of property InteroperabilityVersion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInteroperabilityVersion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTEROPERABILITYVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InteroperabilityVersion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInteroperabilityVersion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INTEROPERABILITYVERSION);
	}

    /**
     * Get all values of property InteroperabilityVersion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllInteroperabilityVersion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INTEROPERABILITYVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InteroperabilityVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllInteroperabilityVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INTEROPERABILITYVERSION, java.lang.String.class);
	}
	
    /**
     * Get all values of property InteroperabilityVersion as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllInteroperabilityVersion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INTEROPERABILITYVERSION, java.lang.String.class);
	}

    /**
     * Get all values of property InteroperabilityVersion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllInteroperabilityVersion() {
		return Base.getAll(this.model, this.getResource(), INTEROPERABILITYVERSION, java.lang.String.class);
	}

    /**
     * Get all values of property InteroperabilityVersion as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllInteroperabilityVersion_as() {
		return Base.getAll_as(this.model, this.getResource(), INTEROPERABILITYVERSION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property InteroperabilityVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addInteroperabilityVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INTEROPERABILITYVERSION, value);
	}
	
    /**
     * Adds a value to property InteroperabilityVersion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addInteroperabilityVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INTEROPERABILITYVERSION, value);
	}
    /**
     * Adds a value to property InteroperabilityVersion from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addInteroperabilityVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, INTEROPERABILITYVERSION, value);
	}
	
    /**
     * Adds a value to property InteroperabilityVersion from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addInteroperabilityVersion(java.lang.String value) {
		Base.add(this.model, this.getResource(), INTEROPERABILITYVERSION, value);
	}
  

    /**
     * Sets a value of property InteroperabilityVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setInteroperabilityVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INTEROPERABILITYVERSION, value);
	}
	
    /**
     * Sets a value of property InteroperabilityVersion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setInteroperabilityVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INTEROPERABILITYVERSION, value);
	}
    /**
     * Sets a value of property InteroperabilityVersion from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setInteroperabilityVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, INTEROPERABILITYVERSION, value);
	}
	
    /**
     * Sets a value of property InteroperabilityVersion from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setInteroperabilityVersion(java.lang.String value) {
		Base.set(this.model, this.getResource(), INTEROPERABILITYVERSION, value);
	}
  


    /**
     * Removes a value of property InteroperabilityVersion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeInteroperabilityVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INTEROPERABILITYVERSION, value);
	}
	
    /**
     * Removes a value of property InteroperabilityVersion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeInteroperabilityVersion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INTEROPERABILITYVERSION, value);
	}
    /**
     * Removes a value of property InteroperabilityVersion given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeInteroperabilityVersion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, INTEROPERABILITYVERSION, value);
	}
	
    /**
     * Removes a value of property InteroperabilityVersion given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeInteroperabilityVersion(java.lang.String value) {
		Base.remove(this.model, this.getResource(), INTEROPERABILITYVERSION, value);
	}
  
    /**
     * Removes all values of property InteroperabilityVersion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllInteroperabilityVersion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INTEROPERABILITYVERSION);
	}
	
    /**
     * Removes all values of property InteroperabilityVersion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllInteroperabilityVersion() {
		Base.removeAll(this.model, this.getResource(), INTEROPERABILITYVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@82e0ff has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIsoSpeedRatings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ISOSPEEDRATINGS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@82e0ff has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIsoSpeedRatings() {
		return Base.has(this.model, this.getResource(), ISOSPEEDRATINGS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@82e0ff has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIsoSpeedRatings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ISOSPEEDRATINGS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@82e0ff has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIsoSpeedRatings( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ISOSPEEDRATINGS);
	}

     /**
     * Get all values of property IsoSpeedRatings as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsoSpeedRatings_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ISOSPEEDRATINGS);
	}
	
    /**
     * Get all values of property IsoSpeedRatings as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsoSpeedRatings_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISOSPEEDRATINGS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IsoSpeedRatings as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsoSpeedRatings_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ISOSPEEDRATINGS);
	}

    /**
     * Get all values of property IsoSpeedRatings as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIsoSpeedRatings_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ISOSPEEDRATINGS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IsoSpeedRatings     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllIsoSpeedRatings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ISOSPEEDRATINGS, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property IsoSpeedRatings as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllIsoSpeedRatings_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ISOSPEEDRATINGS, java.lang.Integer.class);
	}

    /**
     * Get all values of property IsoSpeedRatings     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllIsoSpeedRatings() {
		return Base.getAll(this.model, this.getResource(), ISOSPEEDRATINGS, java.lang.Integer.class);
	}

    /**
     * Get all values of property IsoSpeedRatings as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllIsoSpeedRatings_as() {
		return Base.getAll_as(this.model, this.getResource(), ISOSPEEDRATINGS, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property IsoSpeedRatings as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIsoSpeedRatings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ISOSPEEDRATINGS, value);
	}
	
    /**
     * Adds a value to property IsoSpeedRatings as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIsoSpeedRatings( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ISOSPEEDRATINGS, value);
	}
    /**
     * Adds a value to property IsoSpeedRatings from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIsoSpeedRatings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, ISOSPEEDRATINGS, value);
	}
	
    /**
     * Adds a value to property IsoSpeedRatings from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIsoSpeedRatings(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), ISOSPEEDRATINGS, value);
	}
  

    /**
     * Sets a value of property IsoSpeedRatings from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIsoSpeedRatings( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ISOSPEEDRATINGS, value);
	}
	
    /**
     * Sets a value of property IsoSpeedRatings from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIsoSpeedRatings( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ISOSPEEDRATINGS, value);
	}
    /**
     * Sets a value of property IsoSpeedRatings from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIsoSpeedRatings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, ISOSPEEDRATINGS, value);
	}
	
    /**
     * Sets a value of property IsoSpeedRatings from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIsoSpeedRatings(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), ISOSPEEDRATINGS, value);
	}
  


    /**
     * Removes a value of property IsoSpeedRatings as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIsoSpeedRatings( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ISOSPEEDRATINGS, value);
	}
	
    /**
     * Removes a value of property IsoSpeedRatings as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIsoSpeedRatings( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ISOSPEEDRATINGS, value);
	}
    /**
     * Removes a value of property IsoSpeedRatings given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIsoSpeedRatings(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, ISOSPEEDRATINGS, value);
	}
	
    /**
     * Removes a value of property IsoSpeedRatings given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIsoSpeedRatings(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), ISOSPEEDRATINGS, value);
	}
  
    /**
     * Removes all values of property IsoSpeedRatings     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIsoSpeedRatings( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ISOSPEEDRATINGS);
	}
	
    /**
     * Removes all values of property IsoSpeedRatings	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIsoSpeedRatings() {
		Base.removeAll(this.model, this.getResource(), ISOSPEEDRATINGS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4edb03e4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasJpegInterchangeFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, JPEGINTERCHANGEFORMAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4edb03e4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasJpegInterchangeFormat() {
		return Base.has(this.model, this.getResource(), JPEGINTERCHANGEFORMAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4edb03e4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasJpegInterchangeFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, JPEGINTERCHANGEFORMAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4edb03e4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasJpegInterchangeFormat( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), JPEGINTERCHANGEFORMAT);
	}

     /**
     * Get all values of property JpegInterchangeFormat as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllJpegInterchangeFormat_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, JPEGINTERCHANGEFORMAT);
	}
	
    /**
     * Get all values of property JpegInterchangeFormat as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllJpegInterchangeFormat_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, JPEGINTERCHANGEFORMAT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property JpegInterchangeFormat as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllJpegInterchangeFormat_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), JPEGINTERCHANGEFORMAT);
	}

    /**
     * Get all values of property JpegInterchangeFormat as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllJpegInterchangeFormat_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), JPEGINTERCHANGEFORMAT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property JpegInterchangeFormat     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllJpegInterchangeFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, JPEGINTERCHANGEFORMAT, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property JpegInterchangeFormat as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllJpegInterchangeFormat_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, JPEGINTERCHANGEFORMAT, java.lang.Integer.class);
	}

    /**
     * Get all values of property JpegInterchangeFormat     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllJpegInterchangeFormat() {
		return Base.getAll(this.model, this.getResource(), JPEGINTERCHANGEFORMAT, java.lang.Integer.class);
	}

    /**
     * Get all values of property JpegInterchangeFormat as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllJpegInterchangeFormat_as() {
		return Base.getAll_as(this.model, this.getResource(), JPEGINTERCHANGEFORMAT, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property JpegInterchangeFormat as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addJpegInterchangeFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, JPEGINTERCHANGEFORMAT, value);
	}
	
    /**
     * Adds a value to property JpegInterchangeFormat as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addJpegInterchangeFormat( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), JPEGINTERCHANGEFORMAT, value);
	}
    /**
     * Adds a value to property JpegInterchangeFormat from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addJpegInterchangeFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, JPEGINTERCHANGEFORMAT, value);
	}
	
    /**
     * Adds a value to property JpegInterchangeFormat from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addJpegInterchangeFormat(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), JPEGINTERCHANGEFORMAT, value);
	}
  

    /**
     * Sets a value of property JpegInterchangeFormat from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setJpegInterchangeFormat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, JPEGINTERCHANGEFORMAT, value);
	}
	
    /**
     * Sets a value of property JpegInterchangeFormat from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setJpegInterchangeFormat( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), JPEGINTERCHANGEFORMAT, value);
	}
    /**
     * Sets a value of property JpegInterchangeFormat from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setJpegInterchangeFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, JPEGINTERCHANGEFORMAT, value);
	}
	
    /**
     * Sets a value of property JpegInterchangeFormat from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setJpegInterchangeFormat(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), JPEGINTERCHANGEFORMAT, value);
	}
  


    /**
     * Removes a value of property JpegInterchangeFormat as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeJpegInterchangeFormat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, JPEGINTERCHANGEFORMAT, value);
	}
	
    /**
     * Removes a value of property JpegInterchangeFormat as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeJpegInterchangeFormat( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), JPEGINTERCHANGEFORMAT, value);
	}
    /**
     * Removes a value of property JpegInterchangeFormat given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeJpegInterchangeFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, JPEGINTERCHANGEFORMAT, value);
	}
	
    /**
     * Removes a value of property JpegInterchangeFormat given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeJpegInterchangeFormat(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), JPEGINTERCHANGEFORMAT, value);
	}
  
    /**
     * Removes all values of property JpegInterchangeFormat     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllJpegInterchangeFormat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, JPEGINTERCHANGEFORMAT);
	}
	
    /**
     * Removes all values of property JpegInterchangeFormat	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllJpegInterchangeFormat() {
		Base.removeAll(this.model, this.getResource(), JPEGINTERCHANGEFORMAT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@328ef6db has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasJpegInterchangeFormatLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, JPEGINTERCHANGEFORMATLENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@328ef6db has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasJpegInterchangeFormatLength() {
		return Base.has(this.model, this.getResource(), JPEGINTERCHANGEFORMATLENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@328ef6db has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasJpegInterchangeFormatLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, JPEGINTERCHANGEFORMATLENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@328ef6db has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasJpegInterchangeFormatLength( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), JPEGINTERCHANGEFORMATLENGTH);
	}

     /**
     * Get all values of property JpegInterchangeFormatLength as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllJpegInterchangeFormatLength_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, JPEGINTERCHANGEFORMATLENGTH);
	}
	
    /**
     * Get all values of property JpegInterchangeFormatLength as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllJpegInterchangeFormatLength_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, JPEGINTERCHANGEFORMATLENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property JpegInterchangeFormatLength as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllJpegInterchangeFormatLength_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), JPEGINTERCHANGEFORMATLENGTH);
	}

    /**
     * Get all values of property JpegInterchangeFormatLength as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllJpegInterchangeFormatLength_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), JPEGINTERCHANGEFORMATLENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property JpegInterchangeFormatLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllJpegInterchangeFormatLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, JPEGINTERCHANGEFORMATLENGTH, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property JpegInterchangeFormatLength as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllJpegInterchangeFormatLength_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, JPEGINTERCHANGEFORMATLENGTH, java.lang.Integer.class);
	}

    /**
     * Get all values of property JpegInterchangeFormatLength     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllJpegInterchangeFormatLength() {
		return Base.getAll(this.model, this.getResource(), JPEGINTERCHANGEFORMATLENGTH, java.lang.Integer.class);
	}

    /**
     * Get all values of property JpegInterchangeFormatLength as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllJpegInterchangeFormatLength_as() {
		return Base.getAll_as(this.model, this.getResource(), JPEGINTERCHANGEFORMATLENGTH, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property JpegInterchangeFormatLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addJpegInterchangeFormatLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, JPEGINTERCHANGEFORMATLENGTH, value);
	}
	
    /**
     * Adds a value to property JpegInterchangeFormatLength as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addJpegInterchangeFormatLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), JPEGINTERCHANGEFORMATLENGTH, value);
	}
    /**
     * Adds a value to property JpegInterchangeFormatLength from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addJpegInterchangeFormatLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, JPEGINTERCHANGEFORMATLENGTH, value);
	}
	
    /**
     * Adds a value to property JpegInterchangeFormatLength from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addJpegInterchangeFormatLength(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), JPEGINTERCHANGEFORMATLENGTH, value);
	}
  

    /**
     * Sets a value of property JpegInterchangeFormatLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setJpegInterchangeFormatLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, JPEGINTERCHANGEFORMATLENGTH, value);
	}
	
    /**
     * Sets a value of property JpegInterchangeFormatLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setJpegInterchangeFormatLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), JPEGINTERCHANGEFORMATLENGTH, value);
	}
    /**
     * Sets a value of property JpegInterchangeFormatLength from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setJpegInterchangeFormatLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, JPEGINTERCHANGEFORMATLENGTH, value);
	}
	
    /**
     * Sets a value of property JpegInterchangeFormatLength from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setJpegInterchangeFormatLength(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), JPEGINTERCHANGEFORMATLENGTH, value);
	}
  


    /**
     * Removes a value of property JpegInterchangeFormatLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeJpegInterchangeFormatLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, JPEGINTERCHANGEFORMATLENGTH, value);
	}
	
    /**
     * Removes a value of property JpegInterchangeFormatLength as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeJpegInterchangeFormatLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), JPEGINTERCHANGEFORMATLENGTH, value);
	}
    /**
     * Removes a value of property JpegInterchangeFormatLength given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeJpegInterchangeFormatLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, JPEGINTERCHANGEFORMATLENGTH, value);
	}
	
    /**
     * Removes a value of property JpegInterchangeFormatLength given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeJpegInterchangeFormatLength(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), JPEGINTERCHANGEFORMATLENGTH, value);
	}
  
    /**
     * Removes all values of property JpegInterchangeFormatLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllJpegInterchangeFormatLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, JPEGINTERCHANGEFORMATLENGTH);
	}
	
    /**
     * Removes all values of property JpegInterchangeFormatLength	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllJpegInterchangeFormatLength() {
		Base.removeAll(this.model, this.getResource(), JPEGINTERCHANGEFORMATLENGTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c0e6e36 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c0e6e36 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLength() {
		return Base.has(this.model, this.getResource(), LENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c0e6e36 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c0e6e36 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLength( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LENGTH);
	}

     /**
     * Get all values of property Length as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLength_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LENGTH);
	}
	
    /**
     * Get all values of property Length as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLength_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Length as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLength_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LENGTH);
	}

    /**
     * Get all values of property Length as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLength_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Length     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LENGTH, java.lang.String.class);
	}
	
    /**
     * Get all values of property Length as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllLength_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LENGTH, java.lang.String.class);
	}

    /**
     * Get all values of property Length     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllLength() {
		return Base.getAll(this.model, this.getResource(), LENGTH, java.lang.String.class);
	}

    /**
     * Get all values of property Length as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllLength_as() {
		return Base.getAll_as(this.model, this.getResource(), LENGTH, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Length as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LENGTH, value);
	}
	
    /**
     * Adds a value to property Length as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LENGTH, value);
	}
    /**
     * Adds a value to property Length from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LENGTH, value);
	}
	
    /**
     * Adds a value to property Length from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLength(java.lang.String value) {
		Base.add(this.model, this.getResource(), LENGTH, value);
	}
  

    /**
     * Sets a value of property Length from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LENGTH, value);
	}
	
    /**
     * Sets a value of property Length from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LENGTH, value);
	}
    /**
     * Sets a value of property Length from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LENGTH, value);
	}
	
    /**
     * Sets a value of property Length from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLength(java.lang.String value) {
		Base.set(this.model, this.getResource(), LENGTH, value);
	}
  


    /**
     * Removes a value of property Length as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LENGTH, value);
	}
	
    /**
     * Removes a value of property Length as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LENGTH, value);
	}
    /**
     * Removes a value of property Length given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LENGTH, value);
	}
	
    /**
     * Removes a value of property Length given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLength(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LENGTH, value);
	}
  
    /**
     * Removes all values of property Length     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LENGTH);
	}
	
    /**
     * Removes all values of property Length	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLength() {
		Base.removeAll(this.model, this.getResource(), LENGTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75b3795b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLightSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LIGHTSOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75b3795b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLightSource() {
		return Base.has(this.model, this.getResource(), LIGHTSOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75b3795b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLightSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LIGHTSOURCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@75b3795b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLightSource( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LIGHTSOURCE);
	}

     /**
     * Get all values of property LightSource as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLightSource_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LIGHTSOURCE);
	}
	
    /**
     * Get all values of property LightSource as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLightSource_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LIGHTSOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property LightSource as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLightSource_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LIGHTSOURCE);
	}

    /**
     * Get all values of property LightSource as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLightSource_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LIGHTSOURCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property LightSource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllLightSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LIGHTSOURCE, java.lang.String.class);
	}
	
    /**
     * Get all values of property LightSource as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllLightSource_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LIGHTSOURCE, java.lang.String.class);
	}

    /**
     * Get all values of property LightSource     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllLightSource() {
		return Base.getAll(this.model, this.getResource(), LIGHTSOURCE, java.lang.String.class);
	}

    /**
     * Get all values of property LightSource as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllLightSource_as() {
		return Base.getAll_as(this.model, this.getResource(), LIGHTSOURCE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property LightSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLightSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LIGHTSOURCE, value);
	}
	
    /**
     * Adds a value to property LightSource as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLightSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LIGHTSOURCE, value);
	}
    /**
     * Adds a value to property LightSource from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLightSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LIGHTSOURCE, value);
	}
	
    /**
     * Adds a value to property LightSource from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLightSource(java.lang.String value) {
		Base.add(this.model, this.getResource(), LIGHTSOURCE, value);
	}
  

    /**
     * Sets a value of property LightSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLightSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LIGHTSOURCE, value);
	}
	
    /**
     * Sets a value of property LightSource from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLightSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LIGHTSOURCE, value);
	}
    /**
     * Sets a value of property LightSource from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLightSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LIGHTSOURCE, value);
	}
	
    /**
     * Sets a value of property LightSource from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLightSource(java.lang.String value) {
		Base.set(this.model, this.getResource(), LIGHTSOURCE, value);
	}
  


    /**
     * Removes a value of property LightSource as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLightSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LIGHTSOURCE, value);
	}
	
    /**
     * Removes a value of property LightSource as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLightSource( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LIGHTSOURCE, value);
	}
    /**
     * Removes a value of property LightSource given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLightSource(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LIGHTSOURCE, value);
	}
	
    /**
     * Removes a value of property LightSource given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLightSource(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LIGHTSOURCE, value);
	}
  
    /**
     * Removes all values of property LightSource     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLightSource( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LIGHTSOURCE);
	}
	
    /**
     * Removes all values of property LightSource	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLightSource() {
		Base.removeAll(this.model, this.getResource(), LIGHTSOURCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9839970 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMake(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MAKE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9839970 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMake() {
		return Base.has(this.model, this.getResource(), MAKE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9839970 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMake(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MAKE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9839970 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMake( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MAKE);
	}

     /**
     * Get all values of property Make as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMake_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MAKE);
	}
	
    /**
     * Get all values of property Make as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMake_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAKE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Make as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMake_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MAKE);
	}

    /**
     * Get all values of property Make as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMake_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MAKE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Make     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllMake(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MAKE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Make as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllMake_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAKE, java.lang.String.class);
	}

    /**
     * Get all values of property Make     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllMake() {
		return Base.getAll(this.model, this.getResource(), MAKE, java.lang.String.class);
	}

    /**
     * Get all values of property Make as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllMake_as() {
		return Base.getAll_as(this.model, this.getResource(), MAKE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Make as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMake(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MAKE, value);
	}
	
    /**
     * Adds a value to property Make as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMake( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MAKE, value);
	}
    /**
     * Adds a value to property Make from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMake(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, MAKE, value);
	}
	
    /**
     * Adds a value to property Make from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMake(java.lang.String value) {
		Base.add(this.model, this.getResource(), MAKE, value);
	}
  

    /**
     * Sets a value of property Make from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMake( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MAKE, value);
	}
	
    /**
     * Sets a value of property Make from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMake( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MAKE, value);
	}
    /**
     * Sets a value of property Make from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMake(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, MAKE, value);
	}
	
    /**
     * Sets a value of property Make from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMake(java.lang.String value) {
		Base.set(this.model, this.getResource(), MAKE, value);
	}
  


    /**
     * Removes a value of property Make as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMake( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MAKE, value);
	}
	
    /**
     * Removes a value of property Make as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMake( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MAKE, value);
	}
    /**
     * Removes a value of property Make given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMake(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, MAKE, value);
	}
	
    /**
     * Removes a value of property Make given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMake(java.lang.String value) {
		Base.remove(this.model, this.getResource(), MAKE, value);
	}
  
    /**
     * Removes all values of property Make     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMake( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MAKE);
	}
	
    /**
     * Removes all values of property Make	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMake() {
		Base.removeAll(this.model, this.getResource(), MAKE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d696c52 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMakerNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MAKERNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d696c52 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMakerNote() {
		return Base.has(this.model, this.getResource(), MAKERNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d696c52 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMakerNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MAKERNOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d696c52 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMakerNote( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MAKERNOTE);
	}

     /**
     * Get all values of property MakerNote as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMakerNote_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MAKERNOTE);
	}
	
    /**
     * Get all values of property MakerNote as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMakerNote_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAKERNOTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MakerNote as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMakerNote_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MAKERNOTE);
	}

    /**
     * Get all values of property MakerNote as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMakerNote_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MAKERNOTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MakerNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllMakerNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MAKERNOTE, java.lang.String.class);
	}
	
    /**
     * Get all values of property MakerNote as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllMakerNote_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAKERNOTE, java.lang.String.class);
	}

    /**
     * Get all values of property MakerNote     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllMakerNote() {
		return Base.getAll(this.model, this.getResource(), MAKERNOTE, java.lang.String.class);
	}

    /**
     * Get all values of property MakerNote as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllMakerNote_as() {
		return Base.getAll_as(this.model, this.getResource(), MAKERNOTE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property MakerNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMakerNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MAKERNOTE, value);
	}
	
    /**
     * Adds a value to property MakerNote as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMakerNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MAKERNOTE, value);
	}
    /**
     * Adds a value to property MakerNote from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMakerNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, MAKERNOTE, value);
	}
	
    /**
     * Adds a value to property MakerNote from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMakerNote(java.lang.String value) {
		Base.add(this.model, this.getResource(), MAKERNOTE, value);
	}
  

    /**
     * Sets a value of property MakerNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMakerNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MAKERNOTE, value);
	}
	
    /**
     * Sets a value of property MakerNote from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMakerNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MAKERNOTE, value);
	}
    /**
     * Sets a value of property MakerNote from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMakerNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, MAKERNOTE, value);
	}
	
    /**
     * Sets a value of property MakerNote from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMakerNote(java.lang.String value) {
		Base.set(this.model, this.getResource(), MAKERNOTE, value);
	}
  


    /**
     * Removes a value of property MakerNote as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMakerNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MAKERNOTE, value);
	}
	
    /**
     * Removes a value of property MakerNote as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMakerNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MAKERNOTE, value);
	}
    /**
     * Removes a value of property MakerNote given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMakerNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, MAKERNOTE, value);
	}
	
    /**
     * Removes a value of property MakerNote given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMakerNote(java.lang.String value) {
		Base.remove(this.model, this.getResource(), MAKERNOTE, value);
	}
  
    /**
     * Removes all values of property MakerNote     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMakerNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MAKERNOTE);
	}
	
    /**
     * Removes all values of property MakerNote	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMakerNote() {
		Base.removeAll(this.model, this.getResource(), MAKERNOTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66b6e0d3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMaxApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MAXAPERTUREVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66b6e0d3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMaxApertureValue() {
		return Base.has(this.model, this.getResource(), MAXAPERTUREVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66b6e0d3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMaxApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MAXAPERTUREVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66b6e0d3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMaxApertureValue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MAXAPERTUREVALUE);
	}

     /**
     * Get all values of property MaxApertureValue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMaxApertureValue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MAXAPERTUREVALUE);
	}
	
    /**
     * Get all values of property MaxApertureValue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMaxApertureValue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAXAPERTUREVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MaxApertureValue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMaxApertureValue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MAXAPERTUREVALUE);
	}

    /**
     * Get all values of property MaxApertureValue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMaxApertureValue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MAXAPERTUREVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MaxApertureValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllMaxApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MAXAPERTUREVALUE, java.lang.Float.class);
	}
	
    /**
     * Get all values of property MaxApertureValue as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllMaxApertureValue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAXAPERTUREVALUE, java.lang.Float.class);
	}

    /**
     * Get all values of property MaxApertureValue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllMaxApertureValue() {
		return Base.getAll(this.model, this.getResource(), MAXAPERTUREVALUE, java.lang.Float.class);
	}

    /**
     * Get all values of property MaxApertureValue as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllMaxApertureValue_as() {
		return Base.getAll_as(this.model, this.getResource(), MAXAPERTUREVALUE, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property MaxApertureValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMaxApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MAXAPERTUREVALUE, value);
	}
	
    /**
     * Adds a value to property MaxApertureValue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMaxApertureValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MAXAPERTUREVALUE, value);
	}
    /**
     * Adds a value to property MaxApertureValue from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMaxApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, MAXAPERTUREVALUE, value);
	}
	
    /**
     * Adds a value to property MaxApertureValue from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMaxApertureValue(java.lang.Float value) {
		Base.add(this.model, this.getResource(), MAXAPERTUREVALUE, value);
	}
  

    /**
     * Sets a value of property MaxApertureValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMaxApertureValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MAXAPERTUREVALUE, value);
	}
	
    /**
     * Sets a value of property MaxApertureValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMaxApertureValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MAXAPERTUREVALUE, value);
	}
    /**
     * Sets a value of property MaxApertureValue from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMaxApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, MAXAPERTUREVALUE, value);
	}
	
    /**
     * Sets a value of property MaxApertureValue from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMaxApertureValue(java.lang.Float value) {
		Base.set(this.model, this.getResource(), MAXAPERTUREVALUE, value);
	}
  


    /**
     * Removes a value of property MaxApertureValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMaxApertureValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MAXAPERTUREVALUE, value);
	}
	
    /**
     * Removes a value of property MaxApertureValue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMaxApertureValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MAXAPERTUREVALUE, value);
	}
    /**
     * Removes a value of property MaxApertureValue given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMaxApertureValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, MAXAPERTUREVALUE, value);
	}
	
    /**
     * Removes a value of property MaxApertureValue given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMaxApertureValue(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), MAXAPERTUREVALUE, value);
	}
  
    /**
     * Removes all values of property MaxApertureValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMaxApertureValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MAXAPERTUREVALUE);
	}
	
    /**
     * Removes all values of property MaxApertureValue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMaxApertureValue() {
		Base.removeAll(this.model, this.getResource(), MAXAPERTUREVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6225747a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMeter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, METER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6225747a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMeter() {
		return Base.has(this.model, this.getResource(), METER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6225747a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMeter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, METER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6225747a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMeter( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), METER);
	}

     /**
     * Get all values of property Meter as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMeter_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, METER);
	}
	
    /**
     * Get all values of property Meter as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMeter_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, METER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Meter as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMeter_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), METER);
	}

    /**
     * Get all values of property Meter as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMeter_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), METER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Meter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllMeter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, METER, java.lang.String.class);
	}
	
    /**
     * Get all values of property Meter as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllMeter_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, METER, java.lang.String.class);
	}

    /**
     * Get all values of property Meter     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllMeter() {
		return Base.getAll(this.model, this.getResource(), METER, java.lang.String.class);
	}

    /**
     * Get all values of property Meter as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllMeter_as() {
		return Base.getAll_as(this.model, this.getResource(), METER, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Meter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMeter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, METER, value);
	}
	
    /**
     * Adds a value to property Meter as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMeter( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), METER, value);
	}
    /**
     * Adds a value to property Meter from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMeter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, METER, value);
	}
	
    /**
     * Adds a value to property Meter from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMeter(java.lang.String value) {
		Base.add(this.model, this.getResource(), METER, value);
	}
  

    /**
     * Sets a value of property Meter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMeter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, METER, value);
	}
	
    /**
     * Sets a value of property Meter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMeter( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), METER, value);
	}
    /**
     * Sets a value of property Meter from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMeter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, METER, value);
	}
	
    /**
     * Sets a value of property Meter from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMeter(java.lang.String value) {
		Base.set(this.model, this.getResource(), METER, value);
	}
  


    /**
     * Removes a value of property Meter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMeter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, METER, value);
	}
	
    /**
     * Removes a value of property Meter as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMeter( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), METER, value);
	}
    /**
     * Removes a value of property Meter given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMeter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, METER, value);
	}
	
    /**
     * Removes a value of property Meter given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMeter(java.lang.String value) {
		Base.remove(this.model, this.getResource(), METER, value);
	}
  
    /**
     * Removes all values of property Meter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMeter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, METER);
	}
	
    /**
     * Removes all values of property Meter	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMeter() {
		Base.removeAll(this.model, this.getResource(), METER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18ac9a6d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMeteringMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, METERINGMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18ac9a6d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMeteringMode() {
		return Base.has(this.model, this.getResource(), METERINGMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18ac9a6d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMeteringMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, METERINGMODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18ac9a6d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMeteringMode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), METERINGMODE);
	}

     /**
     * Get all values of property MeteringMode as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMeteringMode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, METERINGMODE);
	}
	
    /**
     * Get all values of property MeteringMode as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMeteringMode_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, METERINGMODE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MeteringMode as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMeteringMode_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), METERINGMODE);
	}

    /**
     * Get all values of property MeteringMode as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMeteringMode_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), METERINGMODE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MeteringMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllMeteringMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, METERINGMODE, java.lang.String.class);
	}
	
    /**
     * Get all values of property MeteringMode as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllMeteringMode_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, METERINGMODE, java.lang.String.class);
	}

    /**
     * Get all values of property MeteringMode     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllMeteringMode() {
		return Base.getAll(this.model, this.getResource(), METERINGMODE, java.lang.String.class);
	}

    /**
     * Get all values of property MeteringMode as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllMeteringMode_as() {
		return Base.getAll_as(this.model, this.getResource(), METERINGMODE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property MeteringMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMeteringMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, METERINGMODE, value);
	}
	
    /**
     * Adds a value to property MeteringMode as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMeteringMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), METERINGMODE, value);
	}
    /**
     * Adds a value to property MeteringMode from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMeteringMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, METERINGMODE, value);
	}
	
    /**
     * Adds a value to property MeteringMode from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMeteringMode(java.lang.String value) {
		Base.add(this.model, this.getResource(), METERINGMODE, value);
	}
  

    /**
     * Sets a value of property MeteringMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMeteringMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, METERINGMODE, value);
	}
	
    /**
     * Sets a value of property MeteringMode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMeteringMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), METERINGMODE, value);
	}
    /**
     * Sets a value of property MeteringMode from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMeteringMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, METERINGMODE, value);
	}
	
    /**
     * Sets a value of property MeteringMode from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMeteringMode(java.lang.String value) {
		Base.set(this.model, this.getResource(), METERINGMODE, value);
	}
  


    /**
     * Removes a value of property MeteringMode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMeteringMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, METERINGMODE, value);
	}
	
    /**
     * Removes a value of property MeteringMode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMeteringMode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), METERINGMODE, value);
	}
    /**
     * Removes a value of property MeteringMode given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMeteringMode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, METERINGMODE, value);
	}
	
    /**
     * Removes a value of property MeteringMode given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMeteringMode(java.lang.String value) {
		Base.remove(this.model, this.getResource(), METERINGMODE, value);
	}
  
    /**
     * Removes all values of property MeteringMode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMeteringMode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, METERINGMODE);
	}
	
    /**
     * Removes all values of property MeteringMode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMeteringMode() {
		Base.removeAll(this.model, this.getResource(), METERINGMODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@778ccfe9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@778ccfe9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMm() {
		return Base.has(this.model, this.getResource(), MM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@778ccfe9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@778ccfe9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMm( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MM);
	}

     /**
     * Get all values of property Mm as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMm_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MM);
	}
	
    /**
     * Get all values of property Mm as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMm_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Mm as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMm_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MM);
	}

    /**
     * Get all values of property Mm as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMm_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Mm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllMm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MM, java.lang.String.class);
	}
	
    /**
     * Get all values of property Mm as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllMm_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MM, java.lang.String.class);
	}

    /**
     * Get all values of property Mm     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllMm() {
		return Base.getAll(this.model, this.getResource(), MM, java.lang.String.class);
	}

    /**
     * Get all values of property Mm as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllMm_as() {
		return Base.getAll_as(this.model, this.getResource(), MM, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Mm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addMm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MM, value);
	}
	
    /**
     * Adds a value to property Mm as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addMm( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MM, value);
	}
    /**
     * Adds a value to property Mm from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addMm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, MM, value);
	}
	
    /**
     * Adds a value to property Mm from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addMm(java.lang.String value) {
		Base.add(this.model, this.getResource(), MM, value);
	}
  

    /**
     * Sets a value of property Mm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MM, value);
	}
	
    /**
     * Sets a value of property Mm from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMm( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MM, value);
	}
    /**
     * Sets a value of property Mm from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, MM, value);
	}
	
    /**
     * Sets a value of property Mm from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMm(java.lang.String value) {
		Base.set(this.model, this.getResource(), MM, value);
	}
  


    /**
     * Removes a value of property Mm as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MM, value);
	}
	
    /**
     * Removes a value of property Mm as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMm( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MM, value);
	}
    /**
     * Removes a value of property Mm given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMm(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, MM, value);
	}
	
    /**
     * Removes a value of property Mm given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMm(java.lang.String value) {
		Base.remove(this.model, this.getResource(), MM, value);
	}
  
    /**
     * Removes all values of property Mm     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMm( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MM);
	}
	
    /**
     * Removes all values of property Mm	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMm() {
		Base.removeAll(this.model, this.getResource(), MM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@456c0ec6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasModel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MODEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@456c0ec6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasModel() {
		return Base.has(this.model, this.getResource(), MODEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@456c0ec6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasModel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MODEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@456c0ec6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasModel( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MODEL);
	}

     /**
     * Get all values of property Model as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MODEL);
	}
	
    /**
     * Get all values of property Model as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllModel_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MODEL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Model as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModel_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MODEL);
	}

    /**
     * Get all values of property Model as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllModel_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MODEL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Model     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllModel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MODEL, java.lang.String.class);
	}
	
    /**
     * Get all values of property Model as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllModel_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MODEL, java.lang.String.class);
	}

    /**
     * Get all values of property Model     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllModel() {
		return Base.getAll(this.model, this.getResource(), MODEL, java.lang.String.class);
	}

    /**
     * Get all values of property Model as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllModel_as() {
		return Base.getAll_as(this.model, this.getResource(), MODEL, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Model as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addModel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MODEL, value);
	}
	
    /**
     * Adds a value to property Model as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addModel( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MODEL, value);
	}
    /**
     * Adds a value to property Model from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addModel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, MODEL, value);
	}
	
    /**
     * Adds a value to property Model from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addModel(java.lang.String value) {
		Base.add(this.model, this.getResource(), MODEL, value);
	}
  

    /**
     * Sets a value of property Model from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setModel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MODEL, value);
	}
	
    /**
     * Sets a value of property Model from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setModel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MODEL, value);
	}
    /**
     * Sets a value of property Model from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setModel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, MODEL, value);
	}
	
    /**
     * Sets a value of property Model from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setModel(java.lang.String value) {
		Base.set(this.model, this.getResource(), MODEL, value);
	}
  


    /**
     * Removes a value of property Model as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeModel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MODEL, value);
	}
	
    /**
     * Removes a value of property Model as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeModel( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MODEL, value);
	}
    /**
     * Removes a value of property Model given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeModel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, MODEL, value);
	}
	
    /**
     * Removes a value of property Model given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeModel(java.lang.String value) {
		Base.remove(this.model, this.getResource(), MODEL, value);
	}
  
    /**
     * Removes all values of property Model     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllModel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MODEL);
	}
	
    /**
     * Removes all values of property Model	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllModel() {
		Base.removeAll(this.model, this.getResource(), MODEL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@459752e1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOecf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, OECF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@459752e1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOecf() {
		return Base.has(this.model, this.getResource(), OECF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@459752e1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOecf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OECF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@459752e1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOecf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OECF);
	}

     /**
     * Get all values of property Oecf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOecf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OECF);
	}
	
    /**
     * Get all values of property Oecf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOecf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OECF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Oecf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOecf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OECF);
	}

    /**
     * Get all values of property Oecf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOecf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OECF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Oecf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllOecf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, OECF, java.lang.String.class);
	}
	
    /**
     * Get all values of property Oecf as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllOecf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OECF, java.lang.String.class);
	}

    /**
     * Get all values of property Oecf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllOecf() {
		return Base.getAll(this.model, this.getResource(), OECF, java.lang.String.class);
	}

    /**
     * Get all values of property Oecf as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllOecf_as() {
		return Base.getAll_as(this.model, this.getResource(), OECF, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Oecf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOecf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, OECF, value);
	}
	
    /**
     * Adds a value to property Oecf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOecf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), OECF, value);
	}
    /**
     * Adds a value to property Oecf from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOecf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, OECF, value);
	}
	
    /**
     * Adds a value to property Oecf from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOecf(java.lang.String value) {
		Base.add(this.model, this.getResource(), OECF, value);
	}
  

    /**
     * Sets a value of property Oecf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOecf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, OECF, value);
	}
	
    /**
     * Sets a value of property Oecf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOecf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), OECF, value);
	}
    /**
     * Sets a value of property Oecf from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOecf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, OECF, value);
	}
	
    /**
     * Sets a value of property Oecf from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOecf(java.lang.String value) {
		Base.set(this.model, this.getResource(), OECF, value);
	}
  


    /**
     * Removes a value of property Oecf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOecf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, OECF, value);
	}
	
    /**
     * Removes a value of property Oecf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOecf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), OECF, value);
	}
    /**
     * Removes a value of property Oecf given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOecf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, OECF, value);
	}
	
    /**
     * Removes a value of property Oecf given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOecf(java.lang.String value) {
		Base.remove(this.model, this.getResource(), OECF, value);
	}
  
    /**
     * Removes all values of property Oecf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOecf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, OECF);
	}
	
    /**
     * Removes all values of property Oecf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOecf() {
		Base.removeAll(this.model, this.getResource(), OECF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efca5a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasOrientation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ORIENTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efca5a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasOrientation() {
		return Base.has(this.model, this.getResource(), ORIENTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efca5a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasOrientation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ORIENTATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efca5a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasOrientation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ORIENTATION);
	}

     /**
     * Get all values of property Orientation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOrientation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ORIENTATION);
	}
	
    /**
     * Get all values of property Orientation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOrientation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORIENTATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Orientation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOrientation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ORIENTATION);
	}

    /**
     * Get all values of property Orientation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllOrientation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ORIENTATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Orientation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllOrientation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ORIENTATION, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Orientation as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllOrientation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ORIENTATION, java.lang.Integer.class);
	}

    /**
     * Get all values of property Orientation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllOrientation() {
		return Base.getAll(this.model, this.getResource(), ORIENTATION, java.lang.Integer.class);
	}

    /**
     * Get all values of property Orientation as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllOrientation_as() {
		return Base.getAll_as(this.model, this.getResource(), ORIENTATION, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Orientation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addOrientation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ORIENTATION, value);
	}
	
    /**
     * Adds a value to property Orientation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addOrientation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ORIENTATION, value);
	}
    /**
     * Adds a value to property Orientation from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addOrientation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, ORIENTATION, value);
	}
	
    /**
     * Adds a value to property Orientation from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addOrientation(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), ORIENTATION, value);
	}
  

    /**
     * Sets a value of property Orientation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setOrientation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ORIENTATION, value);
	}
	
    /**
     * Sets a value of property Orientation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setOrientation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ORIENTATION, value);
	}
    /**
     * Sets a value of property Orientation from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setOrientation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, ORIENTATION, value);
	}
	
    /**
     * Sets a value of property Orientation from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setOrientation(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), ORIENTATION, value);
	}
  


    /**
     * Removes a value of property Orientation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeOrientation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ORIENTATION, value);
	}
	
    /**
     * Removes a value of property Orientation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeOrientation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ORIENTATION, value);
	}
    /**
     * Removes a value of property Orientation given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeOrientation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, ORIENTATION, value);
	}
	
    /**
     * Removes a value of property Orientation given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeOrientation(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), ORIENTATION, value);
	}
  
    /**
     * Removes all values of property Orientation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllOrientation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ORIENTATION);
	}
	
    /**
     * Removes all values of property Orientation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllOrientation() {
		Base.removeAll(this.model, this.getResource(), ORIENTATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b485e43 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPhotometricInterpretation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PHOTOMETRICINTERPRETATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b485e43 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPhotometricInterpretation() {
		return Base.has(this.model, this.getResource(), PHOTOMETRICINTERPRETATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b485e43 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPhotometricInterpretation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PHOTOMETRICINTERPRETATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b485e43 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPhotometricInterpretation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PHOTOMETRICINTERPRETATION);
	}

     /**
     * Get all values of property PhotometricInterpretation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPhotometricInterpretation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PHOTOMETRICINTERPRETATION);
	}
	
    /**
     * Get all values of property PhotometricInterpretation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPhotometricInterpretation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PHOTOMETRICINTERPRETATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PhotometricInterpretation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPhotometricInterpretation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PHOTOMETRICINTERPRETATION);
	}

    /**
     * Get all values of property PhotometricInterpretation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPhotometricInterpretation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PHOTOMETRICINTERPRETATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PhotometricInterpretation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPhotometricInterpretation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PHOTOMETRICINTERPRETATION, java.lang.String.class);
	}
	
    /**
     * Get all values of property PhotometricInterpretation as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPhotometricInterpretation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PHOTOMETRICINTERPRETATION, java.lang.String.class);
	}

    /**
     * Get all values of property PhotometricInterpretation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPhotometricInterpretation() {
		return Base.getAll(this.model, this.getResource(), PHOTOMETRICINTERPRETATION, java.lang.String.class);
	}

    /**
     * Get all values of property PhotometricInterpretation as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPhotometricInterpretation_as() {
		return Base.getAll_as(this.model, this.getResource(), PHOTOMETRICINTERPRETATION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property PhotometricInterpretation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPhotometricInterpretation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PHOTOMETRICINTERPRETATION, value);
	}
	
    /**
     * Adds a value to property PhotometricInterpretation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPhotometricInterpretation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PHOTOMETRICINTERPRETATION, value);
	}
    /**
     * Adds a value to property PhotometricInterpretation from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPhotometricInterpretation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PHOTOMETRICINTERPRETATION, value);
	}
	
    /**
     * Adds a value to property PhotometricInterpretation from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPhotometricInterpretation(java.lang.String value) {
		Base.add(this.model, this.getResource(), PHOTOMETRICINTERPRETATION, value);
	}
  

    /**
     * Sets a value of property PhotometricInterpretation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPhotometricInterpretation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PHOTOMETRICINTERPRETATION, value);
	}
	
    /**
     * Sets a value of property PhotometricInterpretation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPhotometricInterpretation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PHOTOMETRICINTERPRETATION, value);
	}
    /**
     * Sets a value of property PhotometricInterpretation from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPhotometricInterpretation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PHOTOMETRICINTERPRETATION, value);
	}
	
    /**
     * Sets a value of property PhotometricInterpretation from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPhotometricInterpretation(java.lang.String value) {
		Base.set(this.model, this.getResource(), PHOTOMETRICINTERPRETATION, value);
	}
  


    /**
     * Removes a value of property PhotometricInterpretation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePhotometricInterpretation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PHOTOMETRICINTERPRETATION, value);
	}
	
    /**
     * Removes a value of property PhotometricInterpretation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePhotometricInterpretation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PHOTOMETRICINTERPRETATION, value);
	}
    /**
     * Removes a value of property PhotometricInterpretation given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePhotometricInterpretation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PHOTOMETRICINTERPRETATION, value);
	}
	
    /**
     * Removes a value of property PhotometricInterpretation given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePhotometricInterpretation(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PHOTOMETRICINTERPRETATION, value);
	}
  
    /**
     * Removes all values of property PhotometricInterpretation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPhotometricInterpretation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PHOTOMETRICINTERPRETATION);
	}
	
    /**
     * Removes all values of property PhotometricInterpretation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPhotometricInterpretation() {
		Base.removeAll(this.model, this.getResource(), PHOTOMETRICINTERPRETATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@590d0c83 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPictTaking(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PICTTAKING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@590d0c83 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPictTaking() {
		return Base.has(this.model, this.getResource(), PICTTAKING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@590d0c83 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPictTaking(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PICTTAKING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@590d0c83 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPictTaking( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PICTTAKING);
	}

     /**
     * Get all values of property PictTaking as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPictTaking_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PICTTAKING);
	}
	
    /**
     * Get all values of property PictTaking as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPictTaking_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PICTTAKING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PictTaking as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPictTaking_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PICTTAKING);
	}

    /**
     * Get all values of property PictTaking as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPictTaking_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PICTTAKING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PictTaking     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPictTaking(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PICTTAKING, java.lang.String.class);
	}
	
    /**
     * Get all values of property PictTaking as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPictTaking_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PICTTAKING, java.lang.String.class);
	}

    /**
     * Get all values of property PictTaking     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPictTaking() {
		return Base.getAll(this.model, this.getResource(), PICTTAKING, java.lang.String.class);
	}

    /**
     * Get all values of property PictTaking as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPictTaking_as() {
		return Base.getAll_as(this.model, this.getResource(), PICTTAKING, java.lang.String.class);
	}
 
    /**
     * Adds a value to property PictTaking as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPictTaking(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PICTTAKING, value);
	}
	
    /**
     * Adds a value to property PictTaking as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPictTaking( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PICTTAKING, value);
	}
    /**
     * Adds a value to property PictTaking from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPictTaking(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PICTTAKING, value);
	}
	
    /**
     * Adds a value to property PictTaking from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPictTaking(java.lang.String value) {
		Base.add(this.model, this.getResource(), PICTTAKING, value);
	}
  

    /**
     * Sets a value of property PictTaking from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPictTaking( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PICTTAKING, value);
	}
	
    /**
     * Sets a value of property PictTaking from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPictTaking( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PICTTAKING, value);
	}
    /**
     * Sets a value of property PictTaking from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPictTaking(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PICTTAKING, value);
	}
	
    /**
     * Sets a value of property PictTaking from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPictTaking(java.lang.String value) {
		Base.set(this.model, this.getResource(), PICTTAKING, value);
	}
  


    /**
     * Removes a value of property PictTaking as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePictTaking( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PICTTAKING, value);
	}
	
    /**
     * Removes a value of property PictTaking as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePictTaking( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PICTTAKING, value);
	}
    /**
     * Removes a value of property PictTaking given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePictTaking(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PICTTAKING, value);
	}
	
    /**
     * Removes a value of property PictTaking given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePictTaking(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PICTTAKING, value);
	}
  
    /**
     * Removes all values of property PictTaking     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPictTaking( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PICTTAKING);
	}
	
    /**
     * Removes all values of property PictTaking	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPictTaking() {
		Base.removeAll(this.model, this.getResource(), PICTTAKING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57ebc750 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPimBrightness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PIMBRIGHTNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57ebc750 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPimBrightness() {
		return Base.has(this.model, this.getResource(), PIMBRIGHTNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57ebc750 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPimBrightness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PIMBRIGHTNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57ebc750 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPimBrightness( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PIMBRIGHTNESS);
	}

     /**
     * Get all values of property PimBrightness as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimBrightness_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PIMBRIGHTNESS);
	}
	
    /**
     * Get all values of property PimBrightness as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimBrightness_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMBRIGHTNESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PimBrightness as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimBrightness_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PIMBRIGHTNESS);
	}

    /**
     * Get all values of property PimBrightness as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimBrightness_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PIMBRIGHTNESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PimBrightness     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPimBrightness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PIMBRIGHTNESS, java.lang.String.class);
	}
	
    /**
     * Get all values of property PimBrightness as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPimBrightness_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMBRIGHTNESS, java.lang.String.class);
	}

    /**
     * Get all values of property PimBrightness     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPimBrightness() {
		return Base.getAll(this.model, this.getResource(), PIMBRIGHTNESS, java.lang.String.class);
	}

    /**
     * Get all values of property PimBrightness as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPimBrightness_as() {
		return Base.getAll_as(this.model, this.getResource(), PIMBRIGHTNESS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property PimBrightness as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPimBrightness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PIMBRIGHTNESS, value);
	}
	
    /**
     * Adds a value to property PimBrightness as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPimBrightness( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PIMBRIGHTNESS, value);
	}
    /**
     * Adds a value to property PimBrightness from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPimBrightness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PIMBRIGHTNESS, value);
	}
	
    /**
     * Adds a value to property PimBrightness from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPimBrightness(java.lang.String value) {
		Base.add(this.model, this.getResource(), PIMBRIGHTNESS, value);
	}
  

    /**
     * Sets a value of property PimBrightness from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPimBrightness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PIMBRIGHTNESS, value);
	}
	
    /**
     * Sets a value of property PimBrightness from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPimBrightness( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PIMBRIGHTNESS, value);
	}
    /**
     * Sets a value of property PimBrightness from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPimBrightness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PIMBRIGHTNESS, value);
	}
	
    /**
     * Sets a value of property PimBrightness from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPimBrightness(java.lang.String value) {
		Base.set(this.model, this.getResource(), PIMBRIGHTNESS, value);
	}
  


    /**
     * Removes a value of property PimBrightness as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePimBrightness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PIMBRIGHTNESS, value);
	}
	
    /**
     * Removes a value of property PimBrightness as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePimBrightness( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PIMBRIGHTNESS, value);
	}
    /**
     * Removes a value of property PimBrightness given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePimBrightness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PIMBRIGHTNESS, value);
	}
	
    /**
     * Removes a value of property PimBrightness given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePimBrightness(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PIMBRIGHTNESS, value);
	}
  
    /**
     * Removes all values of property PimBrightness     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPimBrightness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PIMBRIGHTNESS);
	}
	
    /**
     * Removes all values of property PimBrightness	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPimBrightness() {
		Base.removeAll(this.model, this.getResource(), PIMBRIGHTNESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6cb4d00b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPimColorBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PIMCOLORBALANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6cb4d00b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPimColorBalance() {
		return Base.has(this.model, this.getResource(), PIMCOLORBALANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6cb4d00b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPimColorBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PIMCOLORBALANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6cb4d00b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPimColorBalance( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PIMCOLORBALANCE);
	}

     /**
     * Get all values of property PimColorBalance as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimColorBalance_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PIMCOLORBALANCE);
	}
	
    /**
     * Get all values of property PimColorBalance as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimColorBalance_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMCOLORBALANCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PimColorBalance as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimColorBalance_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PIMCOLORBALANCE);
	}

    /**
     * Get all values of property PimColorBalance as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimColorBalance_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PIMCOLORBALANCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PimColorBalance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPimColorBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PIMCOLORBALANCE, java.lang.String.class);
	}
	
    /**
     * Get all values of property PimColorBalance as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPimColorBalance_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMCOLORBALANCE, java.lang.String.class);
	}

    /**
     * Get all values of property PimColorBalance     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPimColorBalance() {
		return Base.getAll(this.model, this.getResource(), PIMCOLORBALANCE, java.lang.String.class);
	}

    /**
     * Get all values of property PimColorBalance as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPimColorBalance_as() {
		return Base.getAll_as(this.model, this.getResource(), PIMCOLORBALANCE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property PimColorBalance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPimColorBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PIMCOLORBALANCE, value);
	}
	
    /**
     * Adds a value to property PimColorBalance as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPimColorBalance( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PIMCOLORBALANCE, value);
	}
    /**
     * Adds a value to property PimColorBalance from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPimColorBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PIMCOLORBALANCE, value);
	}
	
    /**
     * Adds a value to property PimColorBalance from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPimColorBalance(java.lang.String value) {
		Base.add(this.model, this.getResource(), PIMCOLORBALANCE, value);
	}
  

    /**
     * Sets a value of property PimColorBalance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPimColorBalance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PIMCOLORBALANCE, value);
	}
	
    /**
     * Sets a value of property PimColorBalance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPimColorBalance( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PIMCOLORBALANCE, value);
	}
    /**
     * Sets a value of property PimColorBalance from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPimColorBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PIMCOLORBALANCE, value);
	}
	
    /**
     * Sets a value of property PimColorBalance from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPimColorBalance(java.lang.String value) {
		Base.set(this.model, this.getResource(), PIMCOLORBALANCE, value);
	}
  


    /**
     * Removes a value of property PimColorBalance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePimColorBalance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PIMCOLORBALANCE, value);
	}
	
    /**
     * Removes a value of property PimColorBalance as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePimColorBalance( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PIMCOLORBALANCE, value);
	}
    /**
     * Removes a value of property PimColorBalance given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePimColorBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PIMCOLORBALANCE, value);
	}
	
    /**
     * Removes a value of property PimColorBalance given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePimColorBalance(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PIMCOLORBALANCE, value);
	}
  
    /**
     * Removes all values of property PimColorBalance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPimColorBalance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PIMCOLORBALANCE);
	}
	
    /**
     * Removes all values of property PimColorBalance	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPimColorBalance() {
		Base.removeAll(this.model, this.getResource(), PIMCOLORBALANCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2914dd79 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPimContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PIMCONTRAST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2914dd79 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPimContrast() {
		return Base.has(this.model, this.getResource(), PIMCONTRAST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2914dd79 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPimContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PIMCONTRAST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2914dd79 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPimContrast( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PIMCONTRAST);
	}

     /**
     * Get all values of property PimContrast as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimContrast_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PIMCONTRAST);
	}
	
    /**
     * Get all values of property PimContrast as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimContrast_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMCONTRAST, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PimContrast as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimContrast_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PIMCONTRAST);
	}

    /**
     * Get all values of property PimContrast as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimContrast_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PIMCONTRAST, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PimContrast     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPimContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PIMCONTRAST, java.lang.String.class);
	}
	
    /**
     * Get all values of property PimContrast as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPimContrast_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMCONTRAST, java.lang.String.class);
	}

    /**
     * Get all values of property PimContrast     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPimContrast() {
		return Base.getAll(this.model, this.getResource(), PIMCONTRAST, java.lang.String.class);
	}

    /**
     * Get all values of property PimContrast as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPimContrast_as() {
		return Base.getAll_as(this.model, this.getResource(), PIMCONTRAST, java.lang.String.class);
	}
 
    /**
     * Adds a value to property PimContrast as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPimContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PIMCONTRAST, value);
	}
	
    /**
     * Adds a value to property PimContrast as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPimContrast( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PIMCONTRAST, value);
	}
    /**
     * Adds a value to property PimContrast from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPimContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PIMCONTRAST, value);
	}
	
    /**
     * Adds a value to property PimContrast from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPimContrast(java.lang.String value) {
		Base.add(this.model, this.getResource(), PIMCONTRAST, value);
	}
  

    /**
     * Sets a value of property PimContrast from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPimContrast( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PIMCONTRAST, value);
	}
	
    /**
     * Sets a value of property PimContrast from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPimContrast( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PIMCONTRAST, value);
	}
    /**
     * Sets a value of property PimContrast from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPimContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PIMCONTRAST, value);
	}
	
    /**
     * Sets a value of property PimContrast from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPimContrast(java.lang.String value) {
		Base.set(this.model, this.getResource(), PIMCONTRAST, value);
	}
  


    /**
     * Removes a value of property PimContrast as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePimContrast( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PIMCONTRAST, value);
	}
	
    /**
     * Removes a value of property PimContrast as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePimContrast( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PIMCONTRAST, value);
	}
    /**
     * Removes a value of property PimContrast given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePimContrast(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PIMCONTRAST, value);
	}
	
    /**
     * Removes a value of property PimContrast given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePimContrast(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PIMCONTRAST, value);
	}
  
    /**
     * Removes all values of property PimContrast     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPimContrast( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PIMCONTRAST);
	}
	
    /**
     * Removes all values of property PimContrast	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPimContrast() {
		Base.removeAll(this.model, this.getResource(), PIMCONTRAST);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bfb1416 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPimInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PIMINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bfb1416 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPimInfo() {
		return Base.has(this.model, this.getResource(), PIMINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bfb1416 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPimInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PIMINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bfb1416 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPimInfo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PIMINFO);
	}

     /**
     * Get all values of property PimInfo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimInfo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PIMINFO);
	}
	
    /**
     * Get all values of property PimInfo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimInfo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMINFO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PimInfo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimInfo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PIMINFO);
	}

    /**
     * Get all values of property PimInfo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimInfo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PIMINFO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PimInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPimInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PIMINFO, java.lang.String.class);
	}
	
    /**
     * Get all values of property PimInfo as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPimInfo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMINFO, java.lang.String.class);
	}

    /**
     * Get all values of property PimInfo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPimInfo() {
		return Base.getAll(this.model, this.getResource(), PIMINFO, java.lang.String.class);
	}

    /**
     * Get all values of property PimInfo as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPimInfo_as() {
		return Base.getAll_as(this.model, this.getResource(), PIMINFO, java.lang.String.class);
	}
 
    /**
     * Adds a value to property PimInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPimInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PIMINFO, value);
	}
	
    /**
     * Adds a value to property PimInfo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPimInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PIMINFO, value);
	}
    /**
     * Adds a value to property PimInfo from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPimInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PIMINFO, value);
	}
	
    /**
     * Adds a value to property PimInfo from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPimInfo(java.lang.String value) {
		Base.add(this.model, this.getResource(), PIMINFO, value);
	}
  

    /**
     * Sets a value of property PimInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPimInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PIMINFO, value);
	}
	
    /**
     * Sets a value of property PimInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPimInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PIMINFO, value);
	}
    /**
     * Sets a value of property PimInfo from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPimInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PIMINFO, value);
	}
	
    /**
     * Sets a value of property PimInfo from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPimInfo(java.lang.String value) {
		Base.set(this.model, this.getResource(), PIMINFO, value);
	}
  


    /**
     * Removes a value of property PimInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePimInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PIMINFO, value);
	}
	
    /**
     * Removes a value of property PimInfo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePimInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PIMINFO, value);
	}
    /**
     * Removes a value of property PimInfo given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePimInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PIMINFO, value);
	}
	
    /**
     * Removes a value of property PimInfo given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePimInfo(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PIMINFO, value);
	}
  
    /**
     * Removes all values of property PimInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPimInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PIMINFO);
	}
	
    /**
     * Removes all values of property PimInfo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPimInfo() {
		Base.removeAll(this.model, this.getResource(), PIMINFO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a422b86 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPimSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PIMSATURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a422b86 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPimSaturation() {
		return Base.has(this.model, this.getResource(), PIMSATURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a422b86 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPimSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PIMSATURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a422b86 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPimSaturation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PIMSATURATION);
	}

     /**
     * Get all values of property PimSaturation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimSaturation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PIMSATURATION);
	}
	
    /**
     * Get all values of property PimSaturation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimSaturation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMSATURATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PimSaturation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimSaturation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PIMSATURATION);
	}

    /**
     * Get all values of property PimSaturation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimSaturation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PIMSATURATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PimSaturation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPimSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PIMSATURATION, java.lang.String.class);
	}
	
    /**
     * Get all values of property PimSaturation as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPimSaturation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMSATURATION, java.lang.String.class);
	}

    /**
     * Get all values of property PimSaturation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPimSaturation() {
		return Base.getAll(this.model, this.getResource(), PIMSATURATION, java.lang.String.class);
	}

    /**
     * Get all values of property PimSaturation as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPimSaturation_as() {
		return Base.getAll_as(this.model, this.getResource(), PIMSATURATION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property PimSaturation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPimSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PIMSATURATION, value);
	}
	
    /**
     * Adds a value to property PimSaturation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPimSaturation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PIMSATURATION, value);
	}
    /**
     * Adds a value to property PimSaturation from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPimSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PIMSATURATION, value);
	}
	
    /**
     * Adds a value to property PimSaturation from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPimSaturation(java.lang.String value) {
		Base.add(this.model, this.getResource(), PIMSATURATION, value);
	}
  

    /**
     * Sets a value of property PimSaturation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPimSaturation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PIMSATURATION, value);
	}
	
    /**
     * Sets a value of property PimSaturation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPimSaturation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PIMSATURATION, value);
	}
    /**
     * Sets a value of property PimSaturation from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPimSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PIMSATURATION, value);
	}
	
    /**
     * Sets a value of property PimSaturation from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPimSaturation(java.lang.String value) {
		Base.set(this.model, this.getResource(), PIMSATURATION, value);
	}
  


    /**
     * Removes a value of property PimSaturation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePimSaturation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PIMSATURATION, value);
	}
	
    /**
     * Removes a value of property PimSaturation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePimSaturation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PIMSATURATION, value);
	}
    /**
     * Removes a value of property PimSaturation given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePimSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PIMSATURATION, value);
	}
	
    /**
     * Removes a value of property PimSaturation given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePimSaturation(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PIMSATURATION, value);
	}
  
    /**
     * Removes all values of property PimSaturation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPimSaturation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PIMSATURATION);
	}
	
    /**
     * Removes all values of property PimSaturation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPimSaturation() {
		Base.removeAll(this.model, this.getResource(), PIMSATURATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26b0158c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPimSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PIMSHARPNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26b0158c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPimSharpness() {
		return Base.has(this.model, this.getResource(), PIMSHARPNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26b0158c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPimSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PIMSHARPNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@26b0158c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPimSharpness( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PIMSHARPNESS);
	}

     /**
     * Get all values of property PimSharpness as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimSharpness_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PIMSHARPNESS);
	}
	
    /**
     * Get all values of property PimSharpness as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimSharpness_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMSHARPNESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PimSharpness as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPimSharpness_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PIMSHARPNESS);
	}

    /**
     * Get all values of property PimSharpness as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPimSharpness_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PIMSHARPNESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PimSharpness     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPimSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PIMSHARPNESS, java.lang.String.class);
	}
	
    /**
     * Get all values of property PimSharpness as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPimSharpness_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIMSHARPNESS, java.lang.String.class);
	}

    /**
     * Get all values of property PimSharpness     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPimSharpness() {
		return Base.getAll(this.model, this.getResource(), PIMSHARPNESS, java.lang.String.class);
	}

    /**
     * Get all values of property PimSharpness as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPimSharpness_as() {
		return Base.getAll_as(this.model, this.getResource(), PIMSHARPNESS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property PimSharpness as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPimSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PIMSHARPNESS, value);
	}
	
    /**
     * Adds a value to property PimSharpness as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPimSharpness( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PIMSHARPNESS, value);
	}
    /**
     * Adds a value to property PimSharpness from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPimSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PIMSHARPNESS, value);
	}
	
    /**
     * Adds a value to property PimSharpness from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPimSharpness(java.lang.String value) {
		Base.add(this.model, this.getResource(), PIMSHARPNESS, value);
	}
  

    /**
     * Sets a value of property PimSharpness from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPimSharpness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PIMSHARPNESS, value);
	}
	
    /**
     * Sets a value of property PimSharpness from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPimSharpness( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PIMSHARPNESS, value);
	}
    /**
     * Sets a value of property PimSharpness from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPimSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PIMSHARPNESS, value);
	}
	
    /**
     * Sets a value of property PimSharpness from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPimSharpness(java.lang.String value) {
		Base.set(this.model, this.getResource(), PIMSHARPNESS, value);
	}
  


    /**
     * Removes a value of property PimSharpness as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePimSharpness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PIMSHARPNESS, value);
	}
	
    /**
     * Removes a value of property PimSharpness as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePimSharpness( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PIMSHARPNESS, value);
	}
    /**
     * Removes a value of property PimSharpness given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePimSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PIMSHARPNESS, value);
	}
	
    /**
     * Removes a value of property PimSharpness given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePimSharpness(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PIMSHARPNESS, value);
	}
  
    /**
     * Removes all values of property PimSharpness     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPimSharpness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PIMSHARPNESS);
	}
	
    /**
     * Removes all values of property PimSharpness	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPimSharpness() {
		Base.removeAll(this.model, this.getResource(), PIMSHARPNESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29a76766 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPixelXDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PIXELXDIMENSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29a76766 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPixelXDimension() {
		return Base.has(this.model, this.getResource(), PIXELXDIMENSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29a76766 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPixelXDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PIXELXDIMENSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29a76766 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPixelXDimension( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PIXELXDIMENSION);
	}

     /**
     * Get all values of property PixelXDimension as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPixelXDimension_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PIXELXDIMENSION);
	}
	
    /**
     * Get all values of property PixelXDimension as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPixelXDimension_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIXELXDIMENSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PixelXDimension as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPixelXDimension_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PIXELXDIMENSION);
	}

    /**
     * Get all values of property PixelXDimension as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPixelXDimension_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PIXELXDIMENSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PixelXDimension     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPixelXDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PIXELXDIMENSION, java.lang.String.class);
	}
	
    /**
     * Get all values of property PixelXDimension as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPixelXDimension_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIXELXDIMENSION, java.lang.String.class);
	}

    /**
     * Get all values of property PixelXDimension     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPixelXDimension() {
		return Base.getAll(this.model, this.getResource(), PIXELXDIMENSION, java.lang.String.class);
	}

    /**
     * Get all values of property PixelXDimension as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPixelXDimension_as() {
		return Base.getAll_as(this.model, this.getResource(), PIXELXDIMENSION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property PixelXDimension as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPixelXDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PIXELXDIMENSION, value);
	}
	
    /**
     * Adds a value to property PixelXDimension as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPixelXDimension( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PIXELXDIMENSION, value);
	}
    /**
     * Adds a value to property PixelXDimension from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPixelXDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PIXELXDIMENSION, value);
	}
	
    /**
     * Adds a value to property PixelXDimension from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPixelXDimension(java.lang.String value) {
		Base.add(this.model, this.getResource(), PIXELXDIMENSION, value);
	}
  

    /**
     * Sets a value of property PixelXDimension from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPixelXDimension( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PIXELXDIMENSION, value);
	}
	
    /**
     * Sets a value of property PixelXDimension from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPixelXDimension( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PIXELXDIMENSION, value);
	}
    /**
     * Sets a value of property PixelXDimension from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPixelXDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PIXELXDIMENSION, value);
	}
	
    /**
     * Sets a value of property PixelXDimension from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPixelXDimension(java.lang.String value) {
		Base.set(this.model, this.getResource(), PIXELXDIMENSION, value);
	}
  


    /**
     * Removes a value of property PixelXDimension as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePixelXDimension( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PIXELXDIMENSION, value);
	}
	
    /**
     * Removes a value of property PixelXDimension as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePixelXDimension( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PIXELXDIMENSION, value);
	}
    /**
     * Removes a value of property PixelXDimension given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePixelXDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PIXELXDIMENSION, value);
	}
	
    /**
     * Removes a value of property PixelXDimension given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePixelXDimension(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PIXELXDIMENSION, value);
	}
  
    /**
     * Removes all values of property PixelXDimension     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPixelXDimension( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PIXELXDIMENSION);
	}
	
    /**
     * Removes all values of property PixelXDimension	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPixelXDimension() {
		Base.removeAll(this.model, this.getResource(), PIXELXDIMENSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4df20691 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPixelYDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PIXELYDIMENSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4df20691 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPixelYDimension() {
		return Base.has(this.model, this.getResource(), PIXELYDIMENSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4df20691 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPixelYDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PIXELYDIMENSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4df20691 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPixelYDimension( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PIXELYDIMENSION);
	}

     /**
     * Get all values of property PixelYDimension as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPixelYDimension_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PIXELYDIMENSION);
	}
	
    /**
     * Get all values of property PixelYDimension as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPixelYDimension_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIXELYDIMENSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PixelYDimension as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPixelYDimension_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PIXELYDIMENSION);
	}

    /**
     * Get all values of property PixelYDimension as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPixelYDimension_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PIXELYDIMENSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PixelYDimension     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllPixelYDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PIXELYDIMENSION, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property PixelYDimension as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllPixelYDimension_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PIXELYDIMENSION, java.lang.Integer.class);
	}

    /**
     * Get all values of property PixelYDimension     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllPixelYDimension() {
		return Base.getAll(this.model, this.getResource(), PIXELYDIMENSION, java.lang.Integer.class);
	}

    /**
     * Get all values of property PixelYDimension as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllPixelYDimension_as() {
		return Base.getAll_as(this.model, this.getResource(), PIXELYDIMENSION, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property PixelYDimension as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPixelYDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PIXELYDIMENSION, value);
	}
	
    /**
     * Adds a value to property PixelYDimension as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPixelYDimension( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PIXELYDIMENSION, value);
	}
    /**
     * Adds a value to property PixelYDimension from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPixelYDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, PIXELYDIMENSION, value);
	}
	
    /**
     * Adds a value to property PixelYDimension from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPixelYDimension(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), PIXELYDIMENSION, value);
	}
  

    /**
     * Sets a value of property PixelYDimension from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPixelYDimension( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PIXELYDIMENSION, value);
	}
	
    /**
     * Sets a value of property PixelYDimension from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPixelYDimension( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PIXELYDIMENSION, value);
	}
    /**
     * Sets a value of property PixelYDimension from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPixelYDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, PIXELYDIMENSION, value);
	}
	
    /**
     * Sets a value of property PixelYDimension from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPixelYDimension(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), PIXELYDIMENSION, value);
	}
  


    /**
     * Removes a value of property PixelYDimension as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePixelYDimension( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PIXELYDIMENSION, value);
	}
	
    /**
     * Removes a value of property PixelYDimension as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePixelYDimension( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PIXELYDIMENSION, value);
	}
    /**
     * Removes a value of property PixelYDimension given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePixelYDimension(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, PIXELYDIMENSION, value);
	}
	
    /**
     * Removes a value of property PixelYDimension given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePixelYDimension(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), PIXELYDIMENSION, value);
	}
  
    /**
     * Removes all values of property PixelYDimension     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPixelYDimension( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PIXELYDIMENSION);
	}
	
    /**
     * Removes all values of property PixelYDimension	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPixelYDimension() {
		Base.removeAll(this.model, this.getResource(), PIXELYDIMENSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40a71327 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPlanarConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PLANARCONFIGURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40a71327 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPlanarConfiguration() {
		return Base.has(this.model, this.getResource(), PLANARCONFIGURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40a71327 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPlanarConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PLANARCONFIGURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@40a71327 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPlanarConfiguration( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PLANARCONFIGURATION);
	}

     /**
     * Get all values of property PlanarConfiguration as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPlanarConfiguration_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PLANARCONFIGURATION);
	}
	
    /**
     * Get all values of property PlanarConfiguration as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPlanarConfiguration_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PLANARCONFIGURATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PlanarConfiguration as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPlanarConfiguration_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PLANARCONFIGURATION);
	}

    /**
     * Get all values of property PlanarConfiguration as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPlanarConfiguration_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PLANARCONFIGURATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PlanarConfiguration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPlanarConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PLANARCONFIGURATION, java.lang.String.class);
	}
	
    /**
     * Get all values of property PlanarConfiguration as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPlanarConfiguration_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PLANARCONFIGURATION, java.lang.String.class);
	}

    /**
     * Get all values of property PlanarConfiguration     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPlanarConfiguration() {
		return Base.getAll(this.model, this.getResource(), PLANARCONFIGURATION, java.lang.String.class);
	}

    /**
     * Get all values of property PlanarConfiguration as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPlanarConfiguration_as() {
		return Base.getAll_as(this.model, this.getResource(), PLANARCONFIGURATION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property PlanarConfiguration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPlanarConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PLANARCONFIGURATION, value);
	}
	
    /**
     * Adds a value to property PlanarConfiguration as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPlanarConfiguration( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PLANARCONFIGURATION, value);
	}
    /**
     * Adds a value to property PlanarConfiguration from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPlanarConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PLANARCONFIGURATION, value);
	}
	
    /**
     * Adds a value to property PlanarConfiguration from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPlanarConfiguration(java.lang.String value) {
		Base.add(this.model, this.getResource(), PLANARCONFIGURATION, value);
	}
  

    /**
     * Sets a value of property PlanarConfiguration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPlanarConfiguration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PLANARCONFIGURATION, value);
	}
	
    /**
     * Sets a value of property PlanarConfiguration from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPlanarConfiguration( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PLANARCONFIGURATION, value);
	}
    /**
     * Sets a value of property PlanarConfiguration from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPlanarConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PLANARCONFIGURATION, value);
	}
	
    /**
     * Sets a value of property PlanarConfiguration from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPlanarConfiguration(java.lang.String value) {
		Base.set(this.model, this.getResource(), PLANARCONFIGURATION, value);
	}
  


    /**
     * Removes a value of property PlanarConfiguration as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePlanarConfiguration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PLANARCONFIGURATION, value);
	}
	
    /**
     * Removes a value of property PlanarConfiguration as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePlanarConfiguration( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PLANARCONFIGURATION, value);
	}
    /**
     * Removes a value of property PlanarConfiguration given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePlanarConfiguration(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PLANARCONFIGURATION, value);
	}
	
    /**
     * Removes a value of property PlanarConfiguration given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePlanarConfiguration(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PLANARCONFIGURATION, value);
	}
  
    /**
     * Removes all values of property PlanarConfiguration     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPlanarConfiguration( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PLANARCONFIGURATION);
	}
	
    /**
     * Removes all values of property PlanarConfiguration	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPlanarConfiguration() {
		Base.removeAll(this.model, this.getResource(), PLANARCONFIGURATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e70c691 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPrimaryChromaticities(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRIMARYCHROMATICITIES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e70c691 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPrimaryChromaticities() {
		return Base.has(this.model, this.getResource(), PRIMARYCHROMATICITIES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e70c691 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPrimaryChromaticities(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRIMARYCHROMATICITIES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7e70c691 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPrimaryChromaticities( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRIMARYCHROMATICITIES);
	}

     /**
     * Get all values of property PrimaryChromaticities as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrimaryChromaticities_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRIMARYCHROMATICITIES);
	}
	
    /**
     * Get all values of property PrimaryChromaticities as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrimaryChromaticities_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIMARYCHROMATICITIES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PrimaryChromaticities as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrimaryChromaticities_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRIMARYCHROMATICITIES);
	}

    /**
     * Get all values of property PrimaryChromaticities as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrimaryChromaticities_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRIMARYCHROMATICITIES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PrimaryChromaticities     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllPrimaryChromaticities(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRIMARYCHROMATICITIES, java.lang.String.class);
	}
	
    /**
     * Get all values of property PrimaryChromaticities as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllPrimaryChromaticities_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIMARYCHROMATICITIES, java.lang.String.class);
	}

    /**
     * Get all values of property PrimaryChromaticities     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllPrimaryChromaticities() {
		return Base.getAll(this.model, this.getResource(), PRIMARYCHROMATICITIES, java.lang.String.class);
	}

    /**
     * Get all values of property PrimaryChromaticities as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllPrimaryChromaticities_as() {
		return Base.getAll_as(this.model, this.getResource(), PRIMARYCHROMATICITIES, java.lang.String.class);
	}
 
    /**
     * Adds a value to property PrimaryChromaticities as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPrimaryChromaticities(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRIMARYCHROMATICITIES, value);
	}
	
    /**
     * Adds a value to property PrimaryChromaticities as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPrimaryChromaticities( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRIMARYCHROMATICITIES, value);
	}
    /**
     * Adds a value to property PrimaryChromaticities from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPrimaryChromaticities(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PRIMARYCHROMATICITIES, value);
	}
	
    /**
     * Adds a value to property PrimaryChromaticities from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPrimaryChromaticities(java.lang.String value) {
		Base.add(this.model, this.getResource(), PRIMARYCHROMATICITIES, value);
	}
  

    /**
     * Sets a value of property PrimaryChromaticities from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPrimaryChromaticities( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRIMARYCHROMATICITIES, value);
	}
	
    /**
     * Sets a value of property PrimaryChromaticities from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPrimaryChromaticities( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRIMARYCHROMATICITIES, value);
	}
    /**
     * Sets a value of property PrimaryChromaticities from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPrimaryChromaticities(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PRIMARYCHROMATICITIES, value);
	}
	
    /**
     * Sets a value of property PrimaryChromaticities from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPrimaryChromaticities(java.lang.String value) {
		Base.set(this.model, this.getResource(), PRIMARYCHROMATICITIES, value);
	}
  


    /**
     * Removes a value of property PrimaryChromaticities as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePrimaryChromaticities( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRIMARYCHROMATICITIES, value);
	}
	
    /**
     * Removes a value of property PrimaryChromaticities as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePrimaryChromaticities( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRIMARYCHROMATICITIES, value);
	}
    /**
     * Removes a value of property PrimaryChromaticities given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePrimaryChromaticities(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PRIMARYCHROMATICITIES, value);
	}
	
    /**
     * Removes a value of property PrimaryChromaticities given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePrimaryChromaticities(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PRIMARYCHROMATICITIES, value);
	}
  
    /**
     * Removes all values of property PrimaryChromaticities     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPrimaryChromaticities( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRIMARYCHROMATICITIES);
	}
	
    /**
     * Removes all values of property PrimaryChromaticities	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPrimaryChromaticities() {
		Base.removeAll(this.model, this.getResource(), PRIMARYCHROMATICITIES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3794dd8a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPrintImageMatchingIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRINTIMAGEMATCHINGIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3794dd8a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPrintImageMatchingIFDPointer() {
		return Base.has(this.model, this.getResource(), PRINTIMAGEMATCHINGIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3794dd8a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPrintImageMatchingIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRINTIMAGEMATCHINGIFDPOINTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3794dd8a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPrintImageMatchingIFDPointer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRINTIMAGEMATCHINGIFDPOINTER);
	}

     /**
     * Get all values of property PrintImageMatchingIFDPointer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrintImageMatchingIFDPointer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRINTIMAGEMATCHINGIFDPOINTER);
	}
	
    /**
     * Get all values of property PrintImageMatchingIFDPointer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrintImageMatchingIFDPointer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRINTIMAGEMATCHINGIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PrintImageMatchingIFDPointer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrintImageMatchingIFDPointer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRINTIMAGEMATCHINGIFDPOINTER);
	}

    /**
     * Get all values of property PrintImageMatchingIFDPointer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrintImageMatchingIFDPointer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRINTIMAGEMATCHINGIFDPOINTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PrintImageMatchingIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nexif.Photo> getAllPrintImageMatchingIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRINTIMAGEMATCHINGIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}
	
    /**
     * Get all values of property PrintImageMatchingIFDPointer as a ReactorResult of Photo 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nexif.Photo> getAllPrintImageMatchingIFDPointer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRINTIMAGEMATCHINGIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}

    /**
     * Get all values of property PrintImageMatchingIFDPointer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nexif.Photo> getAllPrintImageMatchingIFDPointer() {
		return Base.getAll(this.model, this.getResource(), PRINTIMAGEMATCHINGIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}

    /**
     * Get all values of property PrintImageMatchingIFDPointer as a ReactorResult of Photo 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nexif.Photo> getAllPrintImageMatchingIFDPointer_as() {
		return Base.getAll_as(this.model, this.getResource(), PRINTIMAGEMATCHINGIFDPOINTER, eu.dime.ps.semantic.model.nexif.Photo.class);
	}
 
    /**
     * Adds a value to property PrintImageMatchingIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPrintImageMatchingIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRINTIMAGEMATCHINGIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property PrintImageMatchingIFDPointer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPrintImageMatchingIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRINTIMAGEMATCHINGIFDPOINTER, value);
	}
    /**
     * Adds a value to property PrintImageMatchingIFDPointer from an instance of Photo 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPrintImageMatchingIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.add(model, instanceResource, PRINTIMAGEMATCHINGIFDPOINTER, value);
	}
	
    /**
     * Adds a value to property PrintImageMatchingIFDPointer from an instance of Photo 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPrintImageMatchingIFDPointer(eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.add(this.model, this.getResource(), PRINTIMAGEMATCHINGIFDPOINTER, value);
	}
  

    /**
     * Sets a value of property PrintImageMatchingIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPrintImageMatchingIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRINTIMAGEMATCHINGIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property PrintImageMatchingIFDPointer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPrintImageMatchingIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRINTIMAGEMATCHINGIFDPOINTER, value);
	}
    /**
     * Sets a value of property PrintImageMatchingIFDPointer from an instance of Photo 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPrintImageMatchingIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.set(model, instanceResource, PRINTIMAGEMATCHINGIFDPOINTER, value);
	}
	
    /**
     * Sets a value of property PrintImageMatchingIFDPointer from an instance of Photo 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPrintImageMatchingIFDPointer(eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.set(this.model, this.getResource(), PRINTIMAGEMATCHINGIFDPOINTER, value);
	}
  


    /**
     * Removes a value of property PrintImageMatchingIFDPointer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePrintImageMatchingIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRINTIMAGEMATCHINGIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property PrintImageMatchingIFDPointer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePrintImageMatchingIFDPointer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRINTIMAGEMATCHINGIFDPOINTER, value);
	}
    /**
     * Removes a value of property PrintImageMatchingIFDPointer given as an instance of Photo 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePrintImageMatchingIFDPointer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.remove(model, instanceResource, PRINTIMAGEMATCHINGIFDPOINTER, value);
	}
	
    /**
     * Removes a value of property PrintImageMatchingIFDPointer given as an instance of Photo 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePrintImageMatchingIFDPointer(eu.dime.ps.semantic.model.nexif.Photo value) {
		Base.remove(this.model, this.getResource(), PRINTIMAGEMATCHINGIFDPOINTER, value);
	}
  
    /**
     * Removes all values of property PrintImageMatchingIFDPointer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPrintImageMatchingIFDPointer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRINTIMAGEMATCHINGIFDPOINTER);
	}
	
    /**
     * Removes all values of property PrintImageMatchingIFDPointer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPrintImageMatchingIFDPointer() {
		Base.removeAll(this.model, this.getResource(), PRINTIMAGEMATCHINGIFDPOINTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e8bcd60 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRecOffset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RECOFFSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e8bcd60 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRecOffset() {
		return Base.has(this.model, this.getResource(), RECOFFSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e8bcd60 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRecOffset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RECOFFSET);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e8bcd60 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRecOffset( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RECOFFSET);
	}

     /**
     * Get all values of property RecOffset as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRecOffset_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RECOFFSET);
	}
	
    /**
     * Get all values of property RecOffset as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRecOffset_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RECOFFSET, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RecOffset as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRecOffset_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RECOFFSET);
	}

    /**
     * Get all values of property RecOffset as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRecOffset_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RECOFFSET, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RecOffset     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllRecOffset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RECOFFSET, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property RecOffset as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllRecOffset_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RECOFFSET, java.lang.Integer.class);
	}

    /**
     * Get all values of property RecOffset     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllRecOffset() {
		return Base.getAll(this.model, this.getResource(), RECOFFSET, java.lang.Integer.class);
	}

    /**
     * Get all values of property RecOffset as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllRecOffset_as() {
		return Base.getAll_as(this.model, this.getResource(), RECOFFSET, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property RecOffset as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRecOffset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RECOFFSET, value);
	}
	
    /**
     * Adds a value to property RecOffset as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRecOffset( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RECOFFSET, value);
	}
    /**
     * Adds a value to property RecOffset from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRecOffset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, RECOFFSET, value);
	}
	
    /**
     * Adds a value to property RecOffset from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRecOffset(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), RECOFFSET, value);
	}
  

    /**
     * Sets a value of property RecOffset from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRecOffset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RECOFFSET, value);
	}
	
    /**
     * Sets a value of property RecOffset from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRecOffset( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RECOFFSET, value);
	}
    /**
     * Sets a value of property RecOffset from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRecOffset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, RECOFFSET, value);
	}
	
    /**
     * Sets a value of property RecOffset from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRecOffset(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), RECOFFSET, value);
	}
  


    /**
     * Removes a value of property RecOffset as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRecOffset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RECOFFSET, value);
	}
	
    /**
     * Removes a value of property RecOffset as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRecOffset( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RECOFFSET, value);
	}
    /**
     * Removes a value of property RecOffset given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRecOffset(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, RECOFFSET, value);
	}
	
    /**
     * Removes a value of property RecOffset given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRecOffset(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), RECOFFSET, value);
	}
  
    /**
     * Removes all values of property RecOffset     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRecOffset( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RECOFFSET);
	}
	
    /**
     * Removes all values of property RecOffset	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRecOffset() {
		Base.removeAll(this.model, this.getResource(), RECOFFSET);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@370ea56c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasReferenceBlackWhite(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REFERENCEBLACKWHITE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@370ea56c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasReferenceBlackWhite() {
		return Base.has(this.model, this.getResource(), REFERENCEBLACKWHITE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@370ea56c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasReferenceBlackWhite(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REFERENCEBLACKWHITE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@370ea56c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasReferenceBlackWhite( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REFERENCEBLACKWHITE);
	}

     /**
     * Get all values of property ReferenceBlackWhite as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReferenceBlackWhite_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REFERENCEBLACKWHITE);
	}
	
    /**
     * Get all values of property ReferenceBlackWhite as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReferenceBlackWhite_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REFERENCEBLACKWHITE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ReferenceBlackWhite as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReferenceBlackWhite_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REFERENCEBLACKWHITE);
	}

    /**
     * Get all values of property ReferenceBlackWhite as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllReferenceBlackWhite_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REFERENCEBLACKWHITE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ReferenceBlackWhite     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllReferenceBlackWhite(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REFERENCEBLACKWHITE, java.lang.String.class);
	}
	
    /**
     * Get all values of property ReferenceBlackWhite as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllReferenceBlackWhite_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REFERENCEBLACKWHITE, java.lang.String.class);
	}

    /**
     * Get all values of property ReferenceBlackWhite     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllReferenceBlackWhite() {
		return Base.getAll(this.model, this.getResource(), REFERENCEBLACKWHITE, java.lang.String.class);
	}

    /**
     * Get all values of property ReferenceBlackWhite as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllReferenceBlackWhite_as() {
		return Base.getAll_as(this.model, this.getResource(), REFERENCEBLACKWHITE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ReferenceBlackWhite as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addReferenceBlackWhite(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REFERENCEBLACKWHITE, value);
	}
	
    /**
     * Adds a value to property ReferenceBlackWhite as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addReferenceBlackWhite( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REFERENCEBLACKWHITE, value);
	}
    /**
     * Adds a value to property ReferenceBlackWhite from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addReferenceBlackWhite(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, REFERENCEBLACKWHITE, value);
	}
	
    /**
     * Adds a value to property ReferenceBlackWhite from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addReferenceBlackWhite(java.lang.String value) {
		Base.add(this.model, this.getResource(), REFERENCEBLACKWHITE, value);
	}
  

    /**
     * Sets a value of property ReferenceBlackWhite from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setReferenceBlackWhite( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REFERENCEBLACKWHITE, value);
	}
	
    /**
     * Sets a value of property ReferenceBlackWhite from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setReferenceBlackWhite( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REFERENCEBLACKWHITE, value);
	}
    /**
     * Sets a value of property ReferenceBlackWhite from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setReferenceBlackWhite(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, REFERENCEBLACKWHITE, value);
	}
	
    /**
     * Sets a value of property ReferenceBlackWhite from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setReferenceBlackWhite(java.lang.String value) {
		Base.set(this.model, this.getResource(), REFERENCEBLACKWHITE, value);
	}
  


    /**
     * Removes a value of property ReferenceBlackWhite as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeReferenceBlackWhite( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REFERENCEBLACKWHITE, value);
	}
	
    /**
     * Removes a value of property ReferenceBlackWhite as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeReferenceBlackWhite( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REFERENCEBLACKWHITE, value);
	}
    /**
     * Removes a value of property ReferenceBlackWhite given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeReferenceBlackWhite(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, REFERENCEBLACKWHITE, value);
	}
	
    /**
     * Removes a value of property ReferenceBlackWhite given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeReferenceBlackWhite(java.lang.String value) {
		Base.remove(this.model, this.getResource(), REFERENCEBLACKWHITE, value);
	}
  
    /**
     * Removes all values of property ReferenceBlackWhite     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllReferenceBlackWhite( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REFERENCEBLACKWHITE);
	}
	
    /**
     * Removes all values of property ReferenceBlackWhite	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllReferenceBlackWhite() {
		Base.removeAll(this.model, this.getResource(), REFERENCEBLACKWHITE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11528488 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRelatedFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELATEDFILE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11528488 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRelatedFile() {
		return Base.has(this.model, this.getResource(), RELATEDFILE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11528488 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRelatedFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELATEDFILE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11528488 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRelatedFile( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATEDFILE);
	}

     /**
     * Get all values of property RelatedFile as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedFile_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATEDFILE);
	}
	
    /**
     * Get all values of property RelatedFile as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedFile_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDFILE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RelatedFile as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedFile_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATEDFILE);
	}

    /**
     * Get all values of property RelatedFile as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedFile_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDFILE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RelatedFile     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllRelatedFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATEDFILE, java.lang.String.class);
	}
	
    /**
     * Get all values of property RelatedFile as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllRelatedFile_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDFILE, java.lang.String.class);
	}

    /**
     * Get all values of property RelatedFile     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllRelatedFile() {
		return Base.getAll(this.model, this.getResource(), RELATEDFILE, java.lang.String.class);
	}

    /**
     * Get all values of property RelatedFile as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllRelatedFile_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDFILE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property RelatedFile as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRelatedFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RELATEDFILE, value);
	}
	
    /**
     * Adds a value to property RelatedFile as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRelatedFile( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RELATEDFILE, value);
	}
    /**
     * Adds a value to property RelatedFile from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRelatedFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, RELATEDFILE, value);
	}
	
    /**
     * Adds a value to property RelatedFile from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRelatedFile(java.lang.String value) {
		Base.add(this.model, this.getResource(), RELATEDFILE, value);
	}
  

    /**
     * Sets a value of property RelatedFile from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRelatedFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELATEDFILE, value);
	}
	
    /**
     * Sets a value of property RelatedFile from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRelatedFile( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELATEDFILE, value);
	}
    /**
     * Sets a value of property RelatedFile from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRelatedFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, RELATEDFILE, value);
	}
	
    /**
     * Sets a value of property RelatedFile from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRelatedFile(java.lang.String value) {
		Base.set(this.model, this.getResource(), RELATEDFILE, value);
	}
  


    /**
     * Removes a value of property RelatedFile as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRelatedFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELATEDFILE, value);
	}
	
    /**
     * Removes a value of property RelatedFile as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRelatedFile( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELATEDFILE, value);
	}
    /**
     * Removes a value of property RelatedFile given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRelatedFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, RELATEDFILE, value);
	}
	
    /**
     * Removes a value of property RelatedFile given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRelatedFile(java.lang.String value) {
		Base.remove(this.model, this.getResource(), RELATEDFILE, value);
	}
  
    /**
     * Removes all values of property RelatedFile     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRelatedFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATEDFILE);
	}
	
    /**
     * Removes all values of property RelatedFile	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRelatedFile() {
		Base.removeAll(this.model, this.getResource(), RELATEDFILE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@65b35df9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRelatedImageFileFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELATEDIMAGEFILEFORMAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@65b35df9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRelatedImageFileFormat() {
		return Base.has(this.model, this.getResource(), RELATEDIMAGEFILEFORMAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@65b35df9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRelatedImageFileFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELATEDIMAGEFILEFORMAT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@65b35df9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRelatedImageFileFormat( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATEDIMAGEFILEFORMAT);
	}

     /**
     * Get all values of property RelatedImageFileFormat as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedImageFileFormat_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATEDIMAGEFILEFORMAT);
	}
	
    /**
     * Get all values of property RelatedImageFileFormat as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedImageFileFormat_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDIMAGEFILEFORMAT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RelatedImageFileFormat as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedImageFileFormat_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATEDIMAGEFILEFORMAT);
	}

    /**
     * Get all values of property RelatedImageFileFormat as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedImageFileFormat_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDIMAGEFILEFORMAT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RelatedImageFileFormat     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllRelatedImageFileFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATEDIMAGEFILEFORMAT, java.lang.String.class);
	}
	
    /**
     * Get all values of property RelatedImageFileFormat as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllRelatedImageFileFormat_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDIMAGEFILEFORMAT, java.lang.String.class);
	}

    /**
     * Get all values of property RelatedImageFileFormat     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllRelatedImageFileFormat() {
		return Base.getAll(this.model, this.getResource(), RELATEDIMAGEFILEFORMAT, java.lang.String.class);
	}

    /**
     * Get all values of property RelatedImageFileFormat as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllRelatedImageFileFormat_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDIMAGEFILEFORMAT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property RelatedImageFileFormat as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRelatedImageFileFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RELATEDIMAGEFILEFORMAT, value);
	}
	
    /**
     * Adds a value to property RelatedImageFileFormat as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRelatedImageFileFormat( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RELATEDIMAGEFILEFORMAT, value);
	}
    /**
     * Adds a value to property RelatedImageFileFormat from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRelatedImageFileFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, RELATEDIMAGEFILEFORMAT, value);
	}
	
    /**
     * Adds a value to property RelatedImageFileFormat from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRelatedImageFileFormat(java.lang.String value) {
		Base.add(this.model, this.getResource(), RELATEDIMAGEFILEFORMAT, value);
	}
  

    /**
     * Sets a value of property RelatedImageFileFormat from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRelatedImageFileFormat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELATEDIMAGEFILEFORMAT, value);
	}
	
    /**
     * Sets a value of property RelatedImageFileFormat from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRelatedImageFileFormat( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELATEDIMAGEFILEFORMAT, value);
	}
    /**
     * Sets a value of property RelatedImageFileFormat from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRelatedImageFileFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, RELATEDIMAGEFILEFORMAT, value);
	}
	
    /**
     * Sets a value of property RelatedImageFileFormat from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRelatedImageFileFormat(java.lang.String value) {
		Base.set(this.model, this.getResource(), RELATEDIMAGEFILEFORMAT, value);
	}
  


    /**
     * Removes a value of property RelatedImageFileFormat as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRelatedImageFileFormat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELATEDIMAGEFILEFORMAT, value);
	}
	
    /**
     * Removes a value of property RelatedImageFileFormat as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRelatedImageFileFormat( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELATEDIMAGEFILEFORMAT, value);
	}
    /**
     * Removes a value of property RelatedImageFileFormat given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRelatedImageFileFormat(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, RELATEDIMAGEFILEFORMAT, value);
	}
	
    /**
     * Removes a value of property RelatedImageFileFormat given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRelatedImageFileFormat(java.lang.String value) {
		Base.remove(this.model, this.getResource(), RELATEDIMAGEFILEFORMAT, value);
	}
  
    /**
     * Removes all values of property RelatedImageFileFormat     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRelatedImageFileFormat( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATEDIMAGEFILEFORMAT);
	}
	
    /**
     * Removes all values of property RelatedImageFileFormat	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRelatedImageFileFormat() {
		Base.removeAll(this.model, this.getResource(), RELATEDIMAGEFILEFORMAT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3509d541 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRelatedImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELATEDIMAGELENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3509d541 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRelatedImageLength() {
		return Base.has(this.model, this.getResource(), RELATEDIMAGELENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3509d541 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRelatedImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELATEDIMAGELENGTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3509d541 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRelatedImageLength( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATEDIMAGELENGTH);
	}

     /**
     * Get all values of property RelatedImageLength as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedImageLength_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATEDIMAGELENGTH);
	}
	
    /**
     * Get all values of property RelatedImageLength as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedImageLength_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDIMAGELENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RelatedImageLength as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedImageLength_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATEDIMAGELENGTH);
	}

    /**
     * Get all values of property RelatedImageLength as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedImageLength_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDIMAGELENGTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RelatedImageLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllRelatedImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATEDIMAGELENGTH, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property RelatedImageLength as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllRelatedImageLength_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDIMAGELENGTH, java.lang.Integer.class);
	}

    /**
     * Get all values of property RelatedImageLength     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllRelatedImageLength() {
		return Base.getAll(this.model, this.getResource(), RELATEDIMAGELENGTH, java.lang.Integer.class);
	}

    /**
     * Get all values of property RelatedImageLength as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllRelatedImageLength_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDIMAGELENGTH, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property RelatedImageLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRelatedImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RELATEDIMAGELENGTH, value);
	}
	
    /**
     * Adds a value to property RelatedImageLength as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRelatedImageLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RELATEDIMAGELENGTH, value);
	}
    /**
     * Adds a value to property RelatedImageLength from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRelatedImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, RELATEDIMAGELENGTH, value);
	}
	
    /**
     * Adds a value to property RelatedImageLength from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRelatedImageLength(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), RELATEDIMAGELENGTH, value);
	}
  

    /**
     * Sets a value of property RelatedImageLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRelatedImageLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELATEDIMAGELENGTH, value);
	}
	
    /**
     * Sets a value of property RelatedImageLength from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRelatedImageLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELATEDIMAGELENGTH, value);
	}
    /**
     * Sets a value of property RelatedImageLength from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRelatedImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, RELATEDIMAGELENGTH, value);
	}
	
    /**
     * Sets a value of property RelatedImageLength from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRelatedImageLength(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), RELATEDIMAGELENGTH, value);
	}
  


    /**
     * Removes a value of property RelatedImageLength as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRelatedImageLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELATEDIMAGELENGTH, value);
	}
	
    /**
     * Removes a value of property RelatedImageLength as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRelatedImageLength( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELATEDIMAGELENGTH, value);
	}
    /**
     * Removes a value of property RelatedImageLength given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRelatedImageLength(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, RELATEDIMAGELENGTH, value);
	}
	
    /**
     * Removes a value of property RelatedImageLength given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRelatedImageLength(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), RELATEDIMAGELENGTH, value);
	}
  
    /**
     * Removes all values of property RelatedImageLength     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRelatedImageLength( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATEDIMAGELENGTH);
	}
	
    /**
     * Removes all values of property RelatedImageLength	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRelatedImageLength() {
		Base.removeAll(this.model, this.getResource(), RELATEDIMAGELENGTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1615ab87 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRelatedImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELATEDIMAGEWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1615ab87 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRelatedImageWidth() {
		return Base.has(this.model, this.getResource(), RELATEDIMAGEWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1615ab87 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRelatedImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELATEDIMAGEWIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1615ab87 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRelatedImageWidth( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATEDIMAGEWIDTH);
	}

     /**
     * Get all values of property RelatedImageWidth as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedImageWidth_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATEDIMAGEWIDTH);
	}
	
    /**
     * Get all values of property RelatedImageWidth as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedImageWidth_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDIMAGEWIDTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RelatedImageWidth as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedImageWidth_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATEDIMAGEWIDTH);
	}

    /**
     * Get all values of property RelatedImageWidth as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedImageWidth_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDIMAGEWIDTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RelatedImageWidth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllRelatedImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATEDIMAGEWIDTH, java.lang.String.class);
	}
	
    /**
     * Get all values of property RelatedImageWidth as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllRelatedImageWidth_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDIMAGEWIDTH, java.lang.String.class);
	}

    /**
     * Get all values of property RelatedImageWidth     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllRelatedImageWidth() {
		return Base.getAll(this.model, this.getResource(), RELATEDIMAGEWIDTH, java.lang.String.class);
	}

    /**
     * Get all values of property RelatedImageWidth as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllRelatedImageWidth_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDIMAGEWIDTH, java.lang.String.class);
	}
 
    /**
     * Adds a value to property RelatedImageWidth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRelatedImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RELATEDIMAGEWIDTH, value);
	}
	
    /**
     * Adds a value to property RelatedImageWidth as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRelatedImageWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RELATEDIMAGEWIDTH, value);
	}
    /**
     * Adds a value to property RelatedImageWidth from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRelatedImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, RELATEDIMAGEWIDTH, value);
	}
	
    /**
     * Adds a value to property RelatedImageWidth from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRelatedImageWidth(java.lang.String value) {
		Base.add(this.model, this.getResource(), RELATEDIMAGEWIDTH, value);
	}
  

    /**
     * Sets a value of property RelatedImageWidth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRelatedImageWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELATEDIMAGEWIDTH, value);
	}
	
    /**
     * Sets a value of property RelatedImageWidth from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRelatedImageWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELATEDIMAGEWIDTH, value);
	}
    /**
     * Sets a value of property RelatedImageWidth from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRelatedImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, RELATEDIMAGEWIDTH, value);
	}
	
    /**
     * Sets a value of property RelatedImageWidth from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRelatedImageWidth(java.lang.String value) {
		Base.set(this.model, this.getResource(), RELATEDIMAGEWIDTH, value);
	}
  


    /**
     * Removes a value of property RelatedImageWidth as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRelatedImageWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELATEDIMAGEWIDTH, value);
	}
	
    /**
     * Removes a value of property RelatedImageWidth as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRelatedImageWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELATEDIMAGEWIDTH, value);
	}
    /**
     * Removes a value of property RelatedImageWidth given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRelatedImageWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, RELATEDIMAGEWIDTH, value);
	}
	
    /**
     * Removes a value of property RelatedImageWidth given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRelatedImageWidth(java.lang.String value) {
		Base.remove(this.model, this.getResource(), RELATEDIMAGEWIDTH, value);
	}
  
    /**
     * Removes all values of property RelatedImageWidth     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRelatedImageWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATEDIMAGEWIDTH);
	}
	
    /**
     * Removes all values of property RelatedImageWidth	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRelatedImageWidth() {
		Base.removeAll(this.model, this.getResource(), RELATEDIMAGEWIDTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1185fccc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRelatedSoundFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELATEDSOUNDFILE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1185fccc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRelatedSoundFile() {
		return Base.has(this.model, this.getResource(), RELATEDSOUNDFILE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1185fccc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRelatedSoundFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELATEDSOUNDFILE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1185fccc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRelatedSoundFile( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATEDSOUNDFILE);
	}

     /**
     * Get all values of property RelatedSoundFile as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedSoundFile_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATEDSOUNDFILE);
	}
	
    /**
     * Get all values of property RelatedSoundFile as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedSoundFile_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDSOUNDFILE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RelatedSoundFile as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedSoundFile_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATEDSOUNDFILE);
	}

    /**
     * Get all values of property RelatedSoundFile as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRelatedSoundFile_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDSOUNDFILE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RelatedSoundFile     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllRelatedSoundFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATEDSOUNDFILE, java.lang.String.class);
	}
	
    /**
     * Get all values of property RelatedSoundFile as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllRelatedSoundFile_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDSOUNDFILE, java.lang.String.class);
	}

    /**
     * Get all values of property RelatedSoundFile     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllRelatedSoundFile() {
		return Base.getAll(this.model, this.getResource(), RELATEDSOUNDFILE, java.lang.String.class);
	}

    /**
     * Get all values of property RelatedSoundFile as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllRelatedSoundFile_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDSOUNDFILE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property RelatedSoundFile as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRelatedSoundFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RELATEDSOUNDFILE, value);
	}
	
    /**
     * Adds a value to property RelatedSoundFile as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRelatedSoundFile( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RELATEDSOUNDFILE, value);
	}
    /**
     * Adds a value to property RelatedSoundFile from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRelatedSoundFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, RELATEDSOUNDFILE, value);
	}
	
    /**
     * Adds a value to property RelatedSoundFile from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRelatedSoundFile(java.lang.String value) {
		Base.add(this.model, this.getResource(), RELATEDSOUNDFILE, value);
	}
  

    /**
     * Sets a value of property RelatedSoundFile from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRelatedSoundFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELATEDSOUNDFILE, value);
	}
	
    /**
     * Sets a value of property RelatedSoundFile from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRelatedSoundFile( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELATEDSOUNDFILE, value);
	}
    /**
     * Sets a value of property RelatedSoundFile from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRelatedSoundFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, RELATEDSOUNDFILE, value);
	}
	
    /**
     * Sets a value of property RelatedSoundFile from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRelatedSoundFile(java.lang.String value) {
		Base.set(this.model, this.getResource(), RELATEDSOUNDFILE, value);
	}
  


    /**
     * Removes a value of property RelatedSoundFile as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRelatedSoundFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELATEDSOUNDFILE, value);
	}
	
    /**
     * Removes a value of property RelatedSoundFile as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRelatedSoundFile( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELATEDSOUNDFILE, value);
	}
    /**
     * Removes a value of property RelatedSoundFile given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRelatedSoundFile(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, RELATEDSOUNDFILE, value);
	}
	
    /**
     * Removes a value of property RelatedSoundFile given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRelatedSoundFile(java.lang.String value) {
		Base.remove(this.model, this.getResource(), RELATEDSOUNDFILE, value);
	}
  
    /**
     * Removes all values of property RelatedSoundFile     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRelatedSoundFile( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATEDSOUNDFILE);
	}
	
    /**
     * Removes all values of property RelatedSoundFile	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRelatedSoundFile() {
		Base.removeAll(this.model, this.getResource(), RELATEDSOUNDFILE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@214dbaf9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@214dbaf9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasResolution() {
		return Base.has(this.model, this.getResource(), RESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@214dbaf9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@214dbaf9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasResolution( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RESOLUTION);
	}

     /**
     * Get all values of property Resolution as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllResolution_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RESOLUTION);
	}
	
    /**
     * Get all values of property Resolution as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllResolution_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Resolution as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllResolution_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RESOLUTION);
	}

    /**
     * Get all values of property Resolution as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllResolution_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Resolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RESOLUTION, java.lang.Float.class);
	}
	
    /**
     * Get all values of property Resolution as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllResolution_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RESOLUTION, java.lang.Float.class);
	}

    /**
     * Get all values of property Resolution     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllResolution() {
		return Base.getAll(this.model, this.getResource(), RESOLUTION, java.lang.Float.class);
	}

    /**
     * Get all values of property Resolution as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllResolution_as() {
		return Base.getAll_as(this.model, this.getResource(), RESOLUTION, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property Resolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RESOLUTION, value);
	}
	
    /**
     * Adds a value to property Resolution as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RESOLUTION, value);
	}
    /**
     * Adds a value to property Resolution from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, RESOLUTION, value);
	}
	
    /**
     * Adds a value to property Resolution from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addResolution(java.lang.Float value) {
		Base.add(this.model, this.getResource(), RESOLUTION, value);
	}
  

    /**
     * Sets a value of property Resolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RESOLUTION, value);
	}
	
    /**
     * Sets a value of property Resolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RESOLUTION, value);
	}
    /**
     * Sets a value of property Resolution from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, RESOLUTION, value);
	}
	
    /**
     * Sets a value of property Resolution from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setResolution(java.lang.Float value) {
		Base.set(this.model, this.getResource(), RESOLUTION, value);
	}
  


    /**
     * Removes a value of property Resolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RESOLUTION, value);
	}
	
    /**
     * Removes a value of property Resolution as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RESOLUTION, value);
	}
    /**
     * Removes a value of property Resolution given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, RESOLUTION, value);
	}
	
    /**
     * Removes a value of property Resolution given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeResolution(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), RESOLUTION, value);
	}
  
    /**
     * Removes all values of property Resolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RESOLUTION);
	}
	
    /**
     * Removes all values of property Resolution	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllResolution() {
		Base.removeAll(this.model, this.getResource(), RESOLUTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20667dfa has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RESOLUTIONUNIT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20667dfa has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasResolutionUnit() {
		return Base.has(this.model, this.getResource(), RESOLUTIONUNIT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20667dfa has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RESOLUTIONUNIT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@20667dfa has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasResolutionUnit( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RESOLUTIONUNIT);
	}

     /**
     * Get all values of property ResolutionUnit as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllResolutionUnit_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RESOLUTIONUNIT);
	}
	
    /**
     * Get all values of property ResolutionUnit as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllResolutionUnit_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RESOLUTIONUNIT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ResolutionUnit as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllResolutionUnit_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RESOLUTIONUNIT);
	}

    /**
     * Get all values of property ResolutionUnit as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllResolutionUnit_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RESOLUTIONUNIT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ResolutionUnit     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RESOLUTIONUNIT, java.lang.String.class);
	}
	
    /**
     * Get all values of property ResolutionUnit as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllResolutionUnit_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RESOLUTIONUNIT, java.lang.String.class);
	}

    /**
     * Get all values of property ResolutionUnit     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllResolutionUnit() {
		return Base.getAll(this.model, this.getResource(), RESOLUTIONUNIT, java.lang.String.class);
	}

    /**
     * Get all values of property ResolutionUnit as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllResolutionUnit_as() {
		return Base.getAll_as(this.model, this.getResource(), RESOLUTIONUNIT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property ResolutionUnit as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RESOLUTIONUNIT, value);
	}
	
    /**
     * Adds a value to property ResolutionUnit as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addResolutionUnit( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RESOLUTIONUNIT, value);
	}
    /**
     * Adds a value to property ResolutionUnit from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, RESOLUTIONUNIT, value);
	}
	
    /**
     * Adds a value to property ResolutionUnit from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addResolutionUnit(java.lang.String value) {
		Base.add(this.model, this.getResource(), RESOLUTIONUNIT, value);
	}
  

    /**
     * Sets a value of property ResolutionUnit from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setResolutionUnit( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RESOLUTIONUNIT, value);
	}
	
    /**
     * Sets a value of property ResolutionUnit from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setResolutionUnit( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RESOLUTIONUNIT, value);
	}
    /**
     * Sets a value of property ResolutionUnit from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, RESOLUTIONUNIT, value);
	}
	
    /**
     * Sets a value of property ResolutionUnit from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setResolutionUnit(java.lang.String value) {
		Base.set(this.model, this.getResource(), RESOLUTIONUNIT, value);
	}
  


    /**
     * Removes a value of property ResolutionUnit as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeResolutionUnit( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RESOLUTIONUNIT, value);
	}
	
    /**
     * Removes a value of property ResolutionUnit as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeResolutionUnit( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RESOLUTIONUNIT, value);
	}
    /**
     * Removes a value of property ResolutionUnit given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeResolutionUnit(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, RESOLUTIONUNIT, value);
	}
	
    /**
     * Removes a value of property ResolutionUnit given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeResolutionUnit(java.lang.String value) {
		Base.remove(this.model, this.getResource(), RESOLUTIONUNIT, value);
	}
  
    /**
     * Removes all values of property ResolutionUnit     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllResolutionUnit( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RESOLUTIONUNIT);
	}
	
    /**
     * Removes all values of property ResolutionUnit	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllResolutionUnit() {
		Base.removeAll(this.model, this.getResource(), RESOLUTIONUNIT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b347ae9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRowsPerStrip(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ROWSPERSTRIP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b347ae9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRowsPerStrip() {
		return Base.has(this.model, this.getResource(), ROWSPERSTRIP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b347ae9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRowsPerStrip(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ROWSPERSTRIP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5b347ae9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRowsPerStrip( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ROWSPERSTRIP);
	}

     /**
     * Get all values of property RowsPerStrip as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRowsPerStrip_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ROWSPERSTRIP);
	}
	
    /**
     * Get all values of property RowsPerStrip as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRowsPerStrip_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ROWSPERSTRIP, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RowsPerStrip as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRowsPerStrip_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ROWSPERSTRIP);
	}

    /**
     * Get all values of property RowsPerStrip as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRowsPerStrip_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ROWSPERSTRIP, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RowsPerStrip     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllRowsPerStrip(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ROWSPERSTRIP, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property RowsPerStrip as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllRowsPerStrip_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ROWSPERSTRIP, java.lang.Integer.class);
	}

    /**
     * Get all values of property RowsPerStrip     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllRowsPerStrip() {
		return Base.getAll(this.model, this.getResource(), ROWSPERSTRIP, java.lang.Integer.class);
	}

    /**
     * Get all values of property RowsPerStrip as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllRowsPerStrip_as() {
		return Base.getAll_as(this.model, this.getResource(), ROWSPERSTRIP, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property RowsPerStrip as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRowsPerStrip(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ROWSPERSTRIP, value);
	}
	
    /**
     * Adds a value to property RowsPerStrip as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRowsPerStrip( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ROWSPERSTRIP, value);
	}
    /**
     * Adds a value to property RowsPerStrip from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRowsPerStrip(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, ROWSPERSTRIP, value);
	}
	
    /**
     * Adds a value to property RowsPerStrip from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRowsPerStrip(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), ROWSPERSTRIP, value);
	}
  

    /**
     * Sets a value of property RowsPerStrip from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRowsPerStrip( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ROWSPERSTRIP, value);
	}
	
    /**
     * Sets a value of property RowsPerStrip from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRowsPerStrip( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ROWSPERSTRIP, value);
	}
    /**
     * Sets a value of property RowsPerStrip from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRowsPerStrip(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, ROWSPERSTRIP, value);
	}
	
    /**
     * Sets a value of property RowsPerStrip from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRowsPerStrip(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), ROWSPERSTRIP, value);
	}
  


    /**
     * Removes a value of property RowsPerStrip as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRowsPerStrip( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ROWSPERSTRIP, value);
	}
	
    /**
     * Removes a value of property RowsPerStrip as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRowsPerStrip( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ROWSPERSTRIP, value);
	}
    /**
     * Removes a value of property RowsPerStrip given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRowsPerStrip(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, ROWSPERSTRIP, value);
	}
	
    /**
     * Removes a value of property RowsPerStrip given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRowsPerStrip(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), ROWSPERSTRIP, value);
	}
  
    /**
     * Removes all values of property RowsPerStrip     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRowsPerStrip( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ROWSPERSTRIP);
	}
	
    /**
     * Removes all values of property RowsPerStrip	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRowsPerStrip() {
		Base.removeAll(this.model, this.getResource(), ROWSPERSTRIP);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37931e06 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSamplesPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SAMPLESPERPIXEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37931e06 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSamplesPerPixel() {
		return Base.has(this.model, this.getResource(), SAMPLESPERPIXEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37931e06 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSamplesPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SAMPLESPERPIXEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37931e06 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSamplesPerPixel( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SAMPLESPERPIXEL);
	}

     /**
     * Get all values of property SamplesPerPixel as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSamplesPerPixel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SAMPLESPERPIXEL);
	}
	
    /**
     * Get all values of property SamplesPerPixel as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSamplesPerPixel_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SAMPLESPERPIXEL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SamplesPerPixel as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSamplesPerPixel_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SAMPLESPERPIXEL);
	}

    /**
     * Get all values of property SamplesPerPixel as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSamplesPerPixel_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SAMPLESPERPIXEL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SamplesPerPixel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllSamplesPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SAMPLESPERPIXEL, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property SamplesPerPixel as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllSamplesPerPixel_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SAMPLESPERPIXEL, java.lang.Integer.class);
	}

    /**
     * Get all values of property SamplesPerPixel     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllSamplesPerPixel() {
		return Base.getAll(this.model, this.getResource(), SAMPLESPERPIXEL, java.lang.Integer.class);
	}

    /**
     * Get all values of property SamplesPerPixel as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllSamplesPerPixel_as() {
		return Base.getAll_as(this.model, this.getResource(), SAMPLESPERPIXEL, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property SamplesPerPixel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSamplesPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SAMPLESPERPIXEL, value);
	}
	
    /**
     * Adds a value to property SamplesPerPixel as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSamplesPerPixel( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SAMPLESPERPIXEL, value);
	}
    /**
     * Adds a value to property SamplesPerPixel from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSamplesPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, SAMPLESPERPIXEL, value);
	}
	
    /**
     * Adds a value to property SamplesPerPixel from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSamplesPerPixel(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), SAMPLESPERPIXEL, value);
	}
  

    /**
     * Sets a value of property SamplesPerPixel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSamplesPerPixel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SAMPLESPERPIXEL, value);
	}
	
    /**
     * Sets a value of property SamplesPerPixel from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSamplesPerPixel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SAMPLESPERPIXEL, value);
	}
    /**
     * Sets a value of property SamplesPerPixel from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSamplesPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, SAMPLESPERPIXEL, value);
	}
	
    /**
     * Sets a value of property SamplesPerPixel from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSamplesPerPixel(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), SAMPLESPERPIXEL, value);
	}
  


    /**
     * Removes a value of property SamplesPerPixel as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSamplesPerPixel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SAMPLESPERPIXEL, value);
	}
	
    /**
     * Removes a value of property SamplesPerPixel as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSamplesPerPixel( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SAMPLESPERPIXEL, value);
	}
    /**
     * Removes a value of property SamplesPerPixel given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSamplesPerPixel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, SAMPLESPERPIXEL, value);
	}
	
    /**
     * Removes a value of property SamplesPerPixel given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSamplesPerPixel(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), SAMPLESPERPIXEL, value);
	}
  
    /**
     * Removes all values of property SamplesPerPixel     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSamplesPerPixel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SAMPLESPERPIXEL);
	}
	
    /**
     * Removes all values of property SamplesPerPixel	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSamplesPerPixel() {
		Base.removeAll(this.model, this.getResource(), SAMPLESPERPIXEL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@589e3112 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SATURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@589e3112 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSaturation() {
		return Base.has(this.model, this.getResource(), SATURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@589e3112 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SATURATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@589e3112 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSaturation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SATURATION);
	}

     /**
     * Get all values of property Saturation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSaturation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SATURATION);
	}
	
    /**
     * Get all values of property Saturation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSaturation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SATURATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Saturation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSaturation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SATURATION);
	}

    /**
     * Get all values of property Saturation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSaturation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SATURATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Saturation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SATURATION, java.lang.String.class);
	}
	
    /**
     * Get all values of property Saturation as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSaturation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SATURATION, java.lang.String.class);
	}

    /**
     * Get all values of property Saturation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSaturation() {
		return Base.getAll(this.model, this.getResource(), SATURATION, java.lang.String.class);
	}

    /**
     * Get all values of property Saturation as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSaturation_as() {
		return Base.getAll_as(this.model, this.getResource(), SATURATION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Saturation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SATURATION, value);
	}
	
    /**
     * Adds a value to property Saturation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSaturation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SATURATION, value);
	}
    /**
     * Adds a value to property Saturation from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SATURATION, value);
	}
	
    /**
     * Adds a value to property Saturation from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSaturation(java.lang.String value) {
		Base.add(this.model, this.getResource(), SATURATION, value);
	}
  

    /**
     * Sets a value of property Saturation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSaturation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SATURATION, value);
	}
	
    /**
     * Sets a value of property Saturation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSaturation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SATURATION, value);
	}
    /**
     * Sets a value of property Saturation from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SATURATION, value);
	}
	
    /**
     * Sets a value of property Saturation from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSaturation(java.lang.String value) {
		Base.set(this.model, this.getResource(), SATURATION, value);
	}
  


    /**
     * Removes a value of property Saturation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSaturation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SATURATION, value);
	}
	
    /**
     * Removes a value of property Saturation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSaturation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SATURATION, value);
	}
    /**
     * Removes a value of property Saturation given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSaturation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SATURATION, value);
	}
	
    /**
     * Removes a value of property Saturation given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSaturation(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SATURATION, value);
	}
  
    /**
     * Removes all values of property Saturation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSaturation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SATURATION);
	}
	
    /**
     * Removes all values of property Saturation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSaturation() {
		Base.removeAll(this.model, this.getResource(), SATURATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a9ffa5e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSceneCaptureType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SCENECAPTURETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a9ffa5e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSceneCaptureType() {
		return Base.has(this.model, this.getResource(), SCENECAPTURETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a9ffa5e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSceneCaptureType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SCENECAPTURETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a9ffa5e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSceneCaptureType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SCENECAPTURETYPE);
	}

     /**
     * Get all values of property SceneCaptureType as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSceneCaptureType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SCENECAPTURETYPE);
	}
	
    /**
     * Get all values of property SceneCaptureType as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSceneCaptureType_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCENECAPTURETYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SceneCaptureType as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSceneCaptureType_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SCENECAPTURETYPE);
	}

    /**
     * Get all values of property SceneCaptureType as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSceneCaptureType_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SCENECAPTURETYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SceneCaptureType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSceneCaptureType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SCENECAPTURETYPE, java.lang.String.class);
	}
	
    /**
     * Get all values of property SceneCaptureType as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSceneCaptureType_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCENECAPTURETYPE, java.lang.String.class);
	}

    /**
     * Get all values of property SceneCaptureType     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSceneCaptureType() {
		return Base.getAll(this.model, this.getResource(), SCENECAPTURETYPE, java.lang.String.class);
	}

    /**
     * Get all values of property SceneCaptureType as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSceneCaptureType_as() {
		return Base.getAll_as(this.model, this.getResource(), SCENECAPTURETYPE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property SceneCaptureType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSceneCaptureType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SCENECAPTURETYPE, value);
	}
	
    /**
     * Adds a value to property SceneCaptureType as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSceneCaptureType( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SCENECAPTURETYPE, value);
	}
    /**
     * Adds a value to property SceneCaptureType from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSceneCaptureType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SCENECAPTURETYPE, value);
	}
	
    /**
     * Adds a value to property SceneCaptureType from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSceneCaptureType(java.lang.String value) {
		Base.add(this.model, this.getResource(), SCENECAPTURETYPE, value);
	}
  

    /**
     * Sets a value of property SceneCaptureType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSceneCaptureType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SCENECAPTURETYPE, value);
	}
	
    /**
     * Sets a value of property SceneCaptureType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSceneCaptureType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SCENECAPTURETYPE, value);
	}
    /**
     * Sets a value of property SceneCaptureType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSceneCaptureType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SCENECAPTURETYPE, value);
	}
	
    /**
     * Sets a value of property SceneCaptureType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSceneCaptureType(java.lang.String value) {
		Base.set(this.model, this.getResource(), SCENECAPTURETYPE, value);
	}
  


    /**
     * Removes a value of property SceneCaptureType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSceneCaptureType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SCENECAPTURETYPE, value);
	}
	
    /**
     * Removes a value of property SceneCaptureType as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSceneCaptureType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SCENECAPTURETYPE, value);
	}
    /**
     * Removes a value of property SceneCaptureType given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSceneCaptureType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SCENECAPTURETYPE, value);
	}
	
    /**
     * Removes a value of property SceneCaptureType given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSceneCaptureType(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SCENECAPTURETYPE, value);
	}
  
    /**
     * Removes all values of property SceneCaptureType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSceneCaptureType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SCENECAPTURETYPE);
	}
	
    /**
     * Removes all values of property SceneCaptureType	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSceneCaptureType() {
		Base.removeAll(this.model, this.getResource(), SCENECAPTURETYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5734c25e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSceneType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SCENETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5734c25e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSceneType() {
		return Base.has(this.model, this.getResource(), SCENETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5734c25e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSceneType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SCENETYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5734c25e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSceneType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SCENETYPE);
	}

     /**
     * Get all values of property SceneType as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSceneType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SCENETYPE);
	}
	
    /**
     * Get all values of property SceneType as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSceneType_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCENETYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SceneType as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSceneType_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SCENETYPE);
	}

    /**
     * Get all values of property SceneType as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSceneType_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SCENETYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SceneType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSceneType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SCENETYPE, java.lang.String.class);
	}
	
    /**
     * Get all values of property SceneType as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSceneType_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCENETYPE, java.lang.String.class);
	}

    /**
     * Get all values of property SceneType     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSceneType() {
		return Base.getAll(this.model, this.getResource(), SCENETYPE, java.lang.String.class);
	}

    /**
     * Get all values of property SceneType as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSceneType_as() {
		return Base.getAll_as(this.model, this.getResource(), SCENETYPE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property SceneType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSceneType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SCENETYPE, value);
	}
	
    /**
     * Adds a value to property SceneType as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSceneType( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SCENETYPE, value);
	}
    /**
     * Adds a value to property SceneType from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSceneType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SCENETYPE, value);
	}
	
    /**
     * Adds a value to property SceneType from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSceneType(java.lang.String value) {
		Base.add(this.model, this.getResource(), SCENETYPE, value);
	}
  

    /**
     * Sets a value of property SceneType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSceneType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SCENETYPE, value);
	}
	
    /**
     * Sets a value of property SceneType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSceneType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SCENETYPE, value);
	}
    /**
     * Sets a value of property SceneType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSceneType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SCENETYPE, value);
	}
	
    /**
     * Sets a value of property SceneType from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSceneType(java.lang.String value) {
		Base.set(this.model, this.getResource(), SCENETYPE, value);
	}
  


    /**
     * Removes a value of property SceneType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSceneType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SCENETYPE, value);
	}
	
    /**
     * Removes a value of property SceneType as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSceneType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SCENETYPE, value);
	}
    /**
     * Removes a value of property SceneType given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSceneType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SCENETYPE, value);
	}
	
    /**
     * Removes a value of property SceneType given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSceneType(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SCENETYPE, value);
	}
  
    /**
     * Removes all values of property SceneType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSceneType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SCENETYPE);
	}
	
    /**
     * Removes all values of property SceneType	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSceneType() {
		Base.removeAll(this.model, this.getResource(), SCENETYPE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37c21afe has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSeconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SECONDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37c21afe has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSeconds() {
		return Base.has(this.model, this.getResource(), SECONDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37c21afe has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSeconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SECONDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37c21afe has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSeconds( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SECONDS);
	}

     /**
     * Get all values of property Seconds as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSeconds_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SECONDS);
	}
	
    /**
     * Get all values of property Seconds as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSeconds_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SECONDS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Seconds as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSeconds_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SECONDS);
	}

    /**
     * Get all values of property Seconds as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSeconds_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SECONDS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Seconds     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSeconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SECONDS, java.lang.String.class);
	}
	
    /**
     * Get all values of property Seconds as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSeconds_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SECONDS, java.lang.String.class);
	}

    /**
     * Get all values of property Seconds     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSeconds() {
		return Base.getAll(this.model, this.getResource(), SECONDS, java.lang.String.class);
	}

    /**
     * Get all values of property Seconds as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSeconds_as() {
		return Base.getAll_as(this.model, this.getResource(), SECONDS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Seconds as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSeconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SECONDS, value);
	}
	
    /**
     * Adds a value to property Seconds as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSeconds( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SECONDS, value);
	}
    /**
     * Adds a value to property Seconds from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSeconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SECONDS, value);
	}
	
    /**
     * Adds a value to property Seconds from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSeconds(java.lang.String value) {
		Base.add(this.model, this.getResource(), SECONDS, value);
	}
  

    /**
     * Sets a value of property Seconds from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSeconds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SECONDS, value);
	}
	
    /**
     * Sets a value of property Seconds from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSeconds( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SECONDS, value);
	}
    /**
     * Sets a value of property Seconds from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSeconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SECONDS, value);
	}
	
    /**
     * Sets a value of property Seconds from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSeconds(java.lang.String value) {
		Base.set(this.model, this.getResource(), SECONDS, value);
	}
  


    /**
     * Removes a value of property Seconds as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSeconds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SECONDS, value);
	}
	
    /**
     * Removes a value of property Seconds as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSeconds( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SECONDS, value);
	}
    /**
     * Removes a value of property Seconds given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSeconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SECONDS, value);
	}
	
    /**
     * Removes a value of property Seconds given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSeconds(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SECONDS, value);
	}
  
    /**
     * Removes all values of property Seconds     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSeconds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SECONDS);
	}
	
    /**
     * Removes all values of property Seconds	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSeconds() {
		Base.removeAll(this.model, this.getResource(), SECONDS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d635385 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSensingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SENSINGMETHOD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d635385 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSensingMethod() {
		return Base.has(this.model, this.getResource(), SENSINGMETHOD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d635385 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSensingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SENSINGMETHOD);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d635385 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSensingMethod( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SENSINGMETHOD);
	}

     /**
     * Get all values of property SensingMethod as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSensingMethod_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SENSINGMETHOD);
	}
	
    /**
     * Get all values of property SensingMethod as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSensingMethod_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SENSINGMETHOD, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SensingMethod as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSensingMethod_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SENSINGMETHOD);
	}

    /**
     * Get all values of property SensingMethod as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSensingMethod_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SENSINGMETHOD, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SensingMethod     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSensingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SENSINGMETHOD, java.lang.String.class);
	}
	
    /**
     * Get all values of property SensingMethod as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSensingMethod_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SENSINGMETHOD, java.lang.String.class);
	}

    /**
     * Get all values of property SensingMethod     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSensingMethod() {
		return Base.getAll(this.model, this.getResource(), SENSINGMETHOD, java.lang.String.class);
	}

    /**
     * Get all values of property SensingMethod as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSensingMethod_as() {
		return Base.getAll_as(this.model, this.getResource(), SENSINGMETHOD, java.lang.String.class);
	}
 
    /**
     * Adds a value to property SensingMethod as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSensingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SENSINGMETHOD, value);
	}
	
    /**
     * Adds a value to property SensingMethod as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSensingMethod( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SENSINGMETHOD, value);
	}
    /**
     * Adds a value to property SensingMethod from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSensingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SENSINGMETHOD, value);
	}
	
    /**
     * Adds a value to property SensingMethod from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSensingMethod(java.lang.String value) {
		Base.add(this.model, this.getResource(), SENSINGMETHOD, value);
	}
  

    /**
     * Sets a value of property SensingMethod from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSensingMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SENSINGMETHOD, value);
	}
	
    /**
     * Sets a value of property SensingMethod from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSensingMethod( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SENSINGMETHOD, value);
	}
    /**
     * Sets a value of property SensingMethod from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSensingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SENSINGMETHOD, value);
	}
	
    /**
     * Sets a value of property SensingMethod from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSensingMethod(java.lang.String value) {
		Base.set(this.model, this.getResource(), SENSINGMETHOD, value);
	}
  


    /**
     * Removes a value of property SensingMethod as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSensingMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SENSINGMETHOD, value);
	}
	
    /**
     * Removes a value of property SensingMethod as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSensingMethod( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SENSINGMETHOD, value);
	}
    /**
     * Removes a value of property SensingMethod given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSensingMethod(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SENSINGMETHOD, value);
	}
	
    /**
     * Removes a value of property SensingMethod given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSensingMethod(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SENSINGMETHOD, value);
	}
  
    /**
     * Removes all values of property SensingMethod     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSensingMethod( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SENSINGMETHOD);
	}
	
    /**
     * Removes all values of property SensingMethod	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSensingMethod() {
		Base.removeAll(this.model, this.getResource(), SENSINGMETHOD);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f0f8a6d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SHARPNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f0f8a6d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSharpness() {
		return Base.has(this.model, this.getResource(), SHARPNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f0f8a6d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SHARPNESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5f0f8a6d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSharpness( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SHARPNESS);
	}

     /**
     * Get all values of property Sharpness as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharpness_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SHARPNESS);
	}
	
    /**
     * Get all values of property Sharpness as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharpness_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHARPNESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sharpness as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSharpness_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SHARPNESS);
	}

    /**
     * Get all values of property Sharpness as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSharpness_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SHARPNESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sharpness     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SHARPNESS, java.lang.String.class);
	}
	
    /**
     * Get all values of property Sharpness as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSharpness_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHARPNESS, java.lang.String.class);
	}

    /**
     * Get all values of property Sharpness     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSharpness() {
		return Base.getAll(this.model, this.getResource(), SHARPNESS, java.lang.String.class);
	}

    /**
     * Get all values of property Sharpness as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSharpness_as() {
		return Base.getAll_as(this.model, this.getResource(), SHARPNESS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Sharpness as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SHARPNESS, value);
	}
	
    /**
     * Adds a value to property Sharpness as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSharpness( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SHARPNESS, value);
	}
    /**
     * Adds a value to property Sharpness from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SHARPNESS, value);
	}
	
    /**
     * Adds a value to property Sharpness from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSharpness(java.lang.String value) {
		Base.add(this.model, this.getResource(), SHARPNESS, value);
	}
  

    /**
     * Sets a value of property Sharpness from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSharpness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SHARPNESS, value);
	}
	
    /**
     * Sets a value of property Sharpness from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSharpness( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SHARPNESS, value);
	}
    /**
     * Sets a value of property Sharpness from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SHARPNESS, value);
	}
	
    /**
     * Sets a value of property Sharpness from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSharpness(java.lang.String value) {
		Base.set(this.model, this.getResource(), SHARPNESS, value);
	}
  


    /**
     * Removes a value of property Sharpness as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSharpness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SHARPNESS, value);
	}
	
    /**
     * Removes a value of property Sharpness as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSharpness( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SHARPNESS, value);
	}
    /**
     * Removes a value of property Sharpness given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSharpness(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SHARPNESS, value);
	}
	
    /**
     * Removes a value of property Sharpness given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSharpness(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SHARPNESS, value);
	}
  
    /**
     * Removes all values of property Sharpness     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSharpness( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SHARPNESS);
	}
	
    /**
     * Removes all values of property Sharpness	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSharpness() {
		Base.removeAll(this.model, this.getResource(), SHARPNESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7733c735 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasShutterSpeedValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SHUTTERSPEEDVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7733c735 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasShutterSpeedValue() {
		return Base.has(this.model, this.getResource(), SHUTTERSPEEDVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7733c735 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasShutterSpeedValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SHUTTERSPEEDVALUE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7733c735 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasShutterSpeedValue( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SHUTTERSPEEDVALUE);
	}

     /**
     * Get all values of property ShutterSpeedValue as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllShutterSpeedValue_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SHUTTERSPEEDVALUE);
	}
	
    /**
     * Get all values of property ShutterSpeedValue as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllShutterSpeedValue_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHUTTERSPEEDVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ShutterSpeedValue as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllShutterSpeedValue_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SHUTTERSPEEDVALUE);
	}

    /**
     * Get all values of property ShutterSpeedValue as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllShutterSpeedValue_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SHUTTERSPEEDVALUE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ShutterSpeedValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllShutterSpeedValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SHUTTERSPEEDVALUE, java.lang.Float.class);
	}
	
    /**
     * Get all values of property ShutterSpeedValue as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllShutterSpeedValue_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SHUTTERSPEEDVALUE, java.lang.Float.class);
	}

    /**
     * Get all values of property ShutterSpeedValue     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllShutterSpeedValue() {
		return Base.getAll(this.model, this.getResource(), SHUTTERSPEEDVALUE, java.lang.Float.class);
	}

    /**
     * Get all values of property ShutterSpeedValue as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllShutterSpeedValue_as() {
		return Base.getAll_as(this.model, this.getResource(), SHUTTERSPEEDVALUE, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property ShutterSpeedValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addShutterSpeedValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SHUTTERSPEEDVALUE, value);
	}
	
    /**
     * Adds a value to property ShutterSpeedValue as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addShutterSpeedValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SHUTTERSPEEDVALUE, value);
	}
    /**
     * Adds a value to property ShutterSpeedValue from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addShutterSpeedValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, SHUTTERSPEEDVALUE, value);
	}
	
    /**
     * Adds a value to property ShutterSpeedValue from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addShutterSpeedValue(java.lang.Float value) {
		Base.add(this.model, this.getResource(), SHUTTERSPEEDVALUE, value);
	}
  

    /**
     * Sets a value of property ShutterSpeedValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setShutterSpeedValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SHUTTERSPEEDVALUE, value);
	}
	
    /**
     * Sets a value of property ShutterSpeedValue from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setShutterSpeedValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SHUTTERSPEEDVALUE, value);
	}
    /**
     * Sets a value of property ShutterSpeedValue from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setShutterSpeedValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, SHUTTERSPEEDVALUE, value);
	}
	
    /**
     * Sets a value of property ShutterSpeedValue from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setShutterSpeedValue(java.lang.Float value) {
		Base.set(this.model, this.getResource(), SHUTTERSPEEDVALUE, value);
	}
  


    /**
     * Removes a value of property ShutterSpeedValue as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeShutterSpeedValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SHUTTERSPEEDVALUE, value);
	}
	
    /**
     * Removes a value of property ShutterSpeedValue as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeShutterSpeedValue( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SHUTTERSPEEDVALUE, value);
	}
    /**
     * Removes a value of property ShutterSpeedValue given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeShutterSpeedValue(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, SHUTTERSPEEDVALUE, value);
	}
	
    /**
     * Removes a value of property ShutterSpeedValue given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeShutterSpeedValue(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), SHUTTERSPEEDVALUE, value);
	}
  
    /**
     * Removes all values of property ShutterSpeedValue     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllShutterSpeedValue( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SHUTTERSPEEDVALUE);
	}
	
    /**
     * Removes all values of property ShutterSpeedValue	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllShutterSpeedValue() {
		Base.removeAll(this.model, this.getResource(), SHUTTERSPEEDVALUE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bad4a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSoftware(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOFTWARE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bad4a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSoftware() {
		return Base.has(this.model, this.getResource(), SOFTWARE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bad4a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSoftware(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOFTWARE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bad4a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSoftware( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOFTWARE);
	}

     /**
     * Get all values of property Software as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSoftware_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOFTWARE);
	}
	
    /**
     * Get all values of property Software as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSoftware_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOFTWARE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Software as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSoftware_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOFTWARE);
	}

    /**
     * Get all values of property Software as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSoftware_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOFTWARE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Software     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSoftware(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOFTWARE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Software as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSoftware_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOFTWARE, java.lang.String.class);
	}

    /**
     * Get all values of property Software     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSoftware() {
		return Base.getAll(this.model, this.getResource(), SOFTWARE, java.lang.String.class);
	}

    /**
     * Get all values of property Software as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSoftware_as() {
		return Base.getAll_as(this.model, this.getResource(), SOFTWARE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Software as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSoftware(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOFTWARE, value);
	}
	
    /**
     * Adds a value to property Software as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSoftware( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOFTWARE, value);
	}
    /**
     * Adds a value to property Software from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSoftware(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SOFTWARE, value);
	}
	
    /**
     * Adds a value to property Software from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSoftware(java.lang.String value) {
		Base.add(this.model, this.getResource(), SOFTWARE, value);
	}
  

    /**
     * Sets a value of property Software from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSoftware( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOFTWARE, value);
	}
	
    /**
     * Sets a value of property Software from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSoftware( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOFTWARE, value);
	}
    /**
     * Sets a value of property Software from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSoftware(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SOFTWARE, value);
	}
	
    /**
     * Sets a value of property Software from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSoftware(java.lang.String value) {
		Base.set(this.model, this.getResource(), SOFTWARE, value);
	}
  


    /**
     * Removes a value of property Software as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSoftware( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOFTWARE, value);
	}
	
    /**
     * Removes a value of property Software as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSoftware( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOFTWARE, value);
	}
    /**
     * Removes a value of property Software given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSoftware(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SOFTWARE, value);
	}
	
    /**
     * Removes a value of property Software given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSoftware(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SOFTWARE, value);
	}
  
    /**
     * Removes all values of property Software     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSoftware( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOFTWARE);
	}
	
    /**
     * Removes all values of property Software	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSoftware() {
		Base.removeAll(this.model, this.getResource(), SOFTWARE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fdc7a4e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSpatialFrequencyResponse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SPATIALFREQUENCYRESPONSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fdc7a4e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSpatialFrequencyResponse() {
		return Base.has(this.model, this.getResource(), SPATIALFREQUENCYRESPONSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fdc7a4e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSpatialFrequencyResponse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SPATIALFREQUENCYRESPONSE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fdc7a4e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSpatialFrequencyResponse( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SPATIALFREQUENCYRESPONSE);
	}

     /**
     * Get all values of property SpatialFrequencyResponse as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSpatialFrequencyResponse_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SPATIALFREQUENCYRESPONSE);
	}
	
    /**
     * Get all values of property SpatialFrequencyResponse as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSpatialFrequencyResponse_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPATIALFREQUENCYRESPONSE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SpatialFrequencyResponse as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSpatialFrequencyResponse_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SPATIALFREQUENCYRESPONSE);
	}

    /**
     * Get all values of property SpatialFrequencyResponse as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSpatialFrequencyResponse_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SPATIALFREQUENCYRESPONSE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SpatialFrequencyResponse     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSpatialFrequencyResponse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SPATIALFREQUENCYRESPONSE, java.lang.String.class);
	}
	
    /**
     * Get all values of property SpatialFrequencyResponse as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSpatialFrequencyResponse_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPATIALFREQUENCYRESPONSE, java.lang.String.class);
	}

    /**
     * Get all values of property SpatialFrequencyResponse     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSpatialFrequencyResponse() {
		return Base.getAll(this.model, this.getResource(), SPATIALFREQUENCYRESPONSE, java.lang.String.class);
	}

    /**
     * Get all values of property SpatialFrequencyResponse as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSpatialFrequencyResponse_as() {
		return Base.getAll_as(this.model, this.getResource(), SPATIALFREQUENCYRESPONSE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property SpatialFrequencyResponse as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSpatialFrequencyResponse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SPATIALFREQUENCYRESPONSE, value);
	}
	
    /**
     * Adds a value to property SpatialFrequencyResponse as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSpatialFrequencyResponse( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SPATIALFREQUENCYRESPONSE, value);
	}
    /**
     * Adds a value to property SpatialFrequencyResponse from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSpatialFrequencyResponse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SPATIALFREQUENCYRESPONSE, value);
	}
	
    /**
     * Adds a value to property SpatialFrequencyResponse from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSpatialFrequencyResponse(java.lang.String value) {
		Base.add(this.model, this.getResource(), SPATIALFREQUENCYRESPONSE, value);
	}
  

    /**
     * Sets a value of property SpatialFrequencyResponse from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSpatialFrequencyResponse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SPATIALFREQUENCYRESPONSE, value);
	}
	
    /**
     * Sets a value of property SpatialFrequencyResponse from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSpatialFrequencyResponse( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SPATIALFREQUENCYRESPONSE, value);
	}
    /**
     * Sets a value of property SpatialFrequencyResponse from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSpatialFrequencyResponse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SPATIALFREQUENCYRESPONSE, value);
	}
	
    /**
     * Sets a value of property SpatialFrequencyResponse from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSpatialFrequencyResponse(java.lang.String value) {
		Base.set(this.model, this.getResource(), SPATIALFREQUENCYRESPONSE, value);
	}
  


    /**
     * Removes a value of property SpatialFrequencyResponse as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSpatialFrequencyResponse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SPATIALFREQUENCYRESPONSE, value);
	}
	
    /**
     * Removes a value of property SpatialFrequencyResponse as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSpatialFrequencyResponse( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SPATIALFREQUENCYRESPONSE, value);
	}
    /**
     * Removes a value of property SpatialFrequencyResponse given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSpatialFrequencyResponse(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SPATIALFREQUENCYRESPONSE, value);
	}
	
    /**
     * Removes a value of property SpatialFrequencyResponse given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSpatialFrequencyResponse(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SPATIALFREQUENCYRESPONSE, value);
	}
  
    /**
     * Removes all values of property SpatialFrequencyResponse     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSpatialFrequencyResponse( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SPATIALFREQUENCYRESPONSE);
	}
	
    /**
     * Removes all values of property SpatialFrequencyResponse	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSpatialFrequencyResponse() {
		Base.removeAll(this.model, this.getResource(), SPATIALFREQUENCYRESPONSE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1241f8a6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSpectralSensitivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SPECTRALSENSITIVITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1241f8a6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSpectralSensitivity() {
		return Base.has(this.model, this.getResource(), SPECTRALSENSITIVITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1241f8a6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSpectralSensitivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SPECTRALSENSITIVITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1241f8a6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSpectralSensitivity( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SPECTRALSENSITIVITY);
	}

     /**
     * Get all values of property SpectralSensitivity as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSpectralSensitivity_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SPECTRALSENSITIVITY);
	}
	
    /**
     * Get all values of property SpectralSensitivity as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSpectralSensitivity_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPECTRALSENSITIVITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SpectralSensitivity as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSpectralSensitivity_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SPECTRALSENSITIVITY);
	}

    /**
     * Get all values of property SpectralSensitivity as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSpectralSensitivity_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SPECTRALSENSITIVITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SpectralSensitivity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSpectralSensitivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SPECTRALSENSITIVITY, java.lang.String.class);
	}
	
    /**
     * Get all values of property SpectralSensitivity as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSpectralSensitivity_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPECTRALSENSITIVITY, java.lang.String.class);
	}

    /**
     * Get all values of property SpectralSensitivity     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSpectralSensitivity() {
		return Base.getAll(this.model, this.getResource(), SPECTRALSENSITIVITY, java.lang.String.class);
	}

    /**
     * Get all values of property SpectralSensitivity as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSpectralSensitivity_as() {
		return Base.getAll_as(this.model, this.getResource(), SPECTRALSENSITIVITY, java.lang.String.class);
	}
 
    /**
     * Adds a value to property SpectralSensitivity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSpectralSensitivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SPECTRALSENSITIVITY, value);
	}
	
    /**
     * Adds a value to property SpectralSensitivity as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSpectralSensitivity( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SPECTRALSENSITIVITY, value);
	}
    /**
     * Adds a value to property SpectralSensitivity from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSpectralSensitivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SPECTRALSENSITIVITY, value);
	}
	
    /**
     * Adds a value to property SpectralSensitivity from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSpectralSensitivity(java.lang.String value) {
		Base.add(this.model, this.getResource(), SPECTRALSENSITIVITY, value);
	}
  

    /**
     * Sets a value of property SpectralSensitivity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSpectralSensitivity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SPECTRALSENSITIVITY, value);
	}
	
    /**
     * Sets a value of property SpectralSensitivity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSpectralSensitivity( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SPECTRALSENSITIVITY, value);
	}
    /**
     * Sets a value of property SpectralSensitivity from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSpectralSensitivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SPECTRALSENSITIVITY, value);
	}
	
    /**
     * Sets a value of property SpectralSensitivity from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSpectralSensitivity(java.lang.String value) {
		Base.set(this.model, this.getResource(), SPECTRALSENSITIVITY, value);
	}
  


    /**
     * Removes a value of property SpectralSensitivity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSpectralSensitivity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SPECTRALSENSITIVITY, value);
	}
	
    /**
     * Removes a value of property SpectralSensitivity as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSpectralSensitivity( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SPECTRALSENSITIVITY, value);
	}
    /**
     * Removes a value of property SpectralSensitivity given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSpectralSensitivity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SPECTRALSENSITIVITY, value);
	}
	
    /**
     * Removes a value of property SpectralSensitivity given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSpectralSensitivity(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SPECTRALSENSITIVITY, value);
	}
  
    /**
     * Removes all values of property SpectralSensitivity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSpectralSensitivity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SPECTRALSENSITIVITY);
	}
	
    /**
     * Removes all values of property SpectralSensitivity	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSpectralSensitivity() {
		Base.removeAll(this.model, this.getResource(), SPECTRALSENSITIVITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@154b5526 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasStripByteCounts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, STRIPBYTECOUNTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@154b5526 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasStripByteCounts() {
		return Base.has(this.model, this.getResource(), STRIPBYTECOUNTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@154b5526 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasStripByteCounts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, STRIPBYTECOUNTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@154b5526 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasStripByteCounts( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), STRIPBYTECOUNTS);
	}

     /**
     * Get all values of property StripByteCounts as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllStripByteCounts_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, STRIPBYTECOUNTS);
	}
	
    /**
     * Get all values of property StripByteCounts as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllStripByteCounts_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STRIPBYTECOUNTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property StripByteCounts as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllStripByteCounts_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), STRIPBYTECOUNTS);
	}

    /**
     * Get all values of property StripByteCounts as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllStripByteCounts_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), STRIPBYTECOUNTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property StripByteCounts     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllStripByteCounts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, STRIPBYTECOUNTS, java.lang.String.class);
	}
	
    /**
     * Get all values of property StripByteCounts as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllStripByteCounts_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STRIPBYTECOUNTS, java.lang.String.class);
	}

    /**
     * Get all values of property StripByteCounts     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllStripByteCounts() {
		return Base.getAll(this.model, this.getResource(), STRIPBYTECOUNTS, java.lang.String.class);
	}

    /**
     * Get all values of property StripByteCounts as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllStripByteCounts_as() {
		return Base.getAll_as(this.model, this.getResource(), STRIPBYTECOUNTS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property StripByteCounts as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addStripByteCounts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, STRIPBYTECOUNTS, value);
	}
	
    /**
     * Adds a value to property StripByteCounts as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addStripByteCounts( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), STRIPBYTECOUNTS, value);
	}
    /**
     * Adds a value to property StripByteCounts from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addStripByteCounts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, STRIPBYTECOUNTS, value);
	}
	
    /**
     * Adds a value to property StripByteCounts from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addStripByteCounts(java.lang.String value) {
		Base.add(this.model, this.getResource(), STRIPBYTECOUNTS, value);
	}
  

    /**
     * Sets a value of property StripByteCounts from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setStripByteCounts( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, STRIPBYTECOUNTS, value);
	}
	
    /**
     * Sets a value of property StripByteCounts from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setStripByteCounts( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), STRIPBYTECOUNTS, value);
	}
    /**
     * Sets a value of property StripByteCounts from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setStripByteCounts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, STRIPBYTECOUNTS, value);
	}
	
    /**
     * Sets a value of property StripByteCounts from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setStripByteCounts(java.lang.String value) {
		Base.set(this.model, this.getResource(), STRIPBYTECOUNTS, value);
	}
  


    /**
     * Removes a value of property StripByteCounts as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeStripByteCounts( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, STRIPBYTECOUNTS, value);
	}
	
    /**
     * Removes a value of property StripByteCounts as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeStripByteCounts( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), STRIPBYTECOUNTS, value);
	}
    /**
     * Removes a value of property StripByteCounts given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeStripByteCounts(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, STRIPBYTECOUNTS, value);
	}
	
    /**
     * Removes a value of property StripByteCounts given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeStripByteCounts(java.lang.String value) {
		Base.remove(this.model, this.getResource(), STRIPBYTECOUNTS, value);
	}
  
    /**
     * Removes all values of property StripByteCounts     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllStripByteCounts( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, STRIPBYTECOUNTS);
	}
	
    /**
     * Removes all values of property StripByteCounts	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllStripByteCounts() {
		Base.removeAll(this.model, this.getResource(), STRIPBYTECOUNTS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d8aba98 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasStripOffsets(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, STRIPOFFSETS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d8aba98 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasStripOffsets() {
		return Base.has(this.model, this.getResource(), STRIPOFFSETS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d8aba98 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasStripOffsets(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, STRIPOFFSETS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d8aba98 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasStripOffsets( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), STRIPOFFSETS);
	}

     /**
     * Get all values of property StripOffsets as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllStripOffsets_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, STRIPOFFSETS);
	}
	
    /**
     * Get all values of property StripOffsets as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllStripOffsets_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STRIPOFFSETS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property StripOffsets as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllStripOffsets_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), STRIPOFFSETS);
	}

    /**
     * Get all values of property StripOffsets as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllStripOffsets_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), STRIPOFFSETS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property StripOffsets     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllStripOffsets(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, STRIPOFFSETS, java.lang.String.class);
	}
	
    /**
     * Get all values of property StripOffsets as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllStripOffsets_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STRIPOFFSETS, java.lang.String.class);
	}

    /**
     * Get all values of property StripOffsets     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllStripOffsets() {
		return Base.getAll(this.model, this.getResource(), STRIPOFFSETS, java.lang.String.class);
	}

    /**
     * Get all values of property StripOffsets as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllStripOffsets_as() {
		return Base.getAll_as(this.model, this.getResource(), STRIPOFFSETS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property StripOffsets as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addStripOffsets(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, STRIPOFFSETS, value);
	}
	
    /**
     * Adds a value to property StripOffsets as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addStripOffsets( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), STRIPOFFSETS, value);
	}
    /**
     * Adds a value to property StripOffsets from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addStripOffsets(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, STRIPOFFSETS, value);
	}
	
    /**
     * Adds a value to property StripOffsets from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addStripOffsets(java.lang.String value) {
		Base.add(this.model, this.getResource(), STRIPOFFSETS, value);
	}
  

    /**
     * Sets a value of property StripOffsets from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setStripOffsets( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, STRIPOFFSETS, value);
	}
	
    /**
     * Sets a value of property StripOffsets from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setStripOffsets( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), STRIPOFFSETS, value);
	}
    /**
     * Sets a value of property StripOffsets from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setStripOffsets(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, STRIPOFFSETS, value);
	}
	
    /**
     * Sets a value of property StripOffsets from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setStripOffsets(java.lang.String value) {
		Base.set(this.model, this.getResource(), STRIPOFFSETS, value);
	}
  


    /**
     * Removes a value of property StripOffsets as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeStripOffsets( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, STRIPOFFSETS, value);
	}
	
    /**
     * Removes a value of property StripOffsets as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeStripOffsets( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), STRIPOFFSETS, value);
	}
    /**
     * Removes a value of property StripOffsets given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeStripOffsets(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, STRIPOFFSETS, value);
	}
	
    /**
     * Removes a value of property StripOffsets given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeStripOffsets(java.lang.String value) {
		Base.remove(this.model, this.getResource(), STRIPOFFSETS, value);
	}
  
    /**
     * Removes all values of property StripOffsets     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllStripOffsets( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, STRIPOFFSETS);
	}
	
    /**
     * Removes all values of property StripOffsets	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllStripOffsets() {
		Base.removeAll(this.model, this.getResource(), STRIPOFFSETS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22f9ab51 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubSecTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBSECTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22f9ab51 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubSecTime() {
		return Base.has(this.model, this.getResource(), SUBSECTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22f9ab51 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubSecTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBSECTIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22f9ab51 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubSecTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBSECTIME);
	}

     /**
     * Get all values of property SubSecTime as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubSecTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBSECTIME);
	}
	
    /**
     * Get all values of property SubSecTime as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubSecTime_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBSECTIME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SubSecTime as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubSecTime_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBSECTIME);
	}

    /**
     * Get all values of property SubSecTime as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubSecTime_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBSECTIME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SubSecTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSubSecTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBSECTIME, java.lang.String.class);
	}
	
    /**
     * Get all values of property SubSecTime as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSubSecTime_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBSECTIME, java.lang.String.class);
	}

    /**
     * Get all values of property SubSecTime     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSubSecTime() {
		return Base.getAll(this.model, this.getResource(), SUBSECTIME, java.lang.String.class);
	}

    /**
     * Get all values of property SubSecTime as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSubSecTime_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBSECTIME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property SubSecTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubSecTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBSECTIME, value);
	}
	
    /**
     * Adds a value to property SubSecTime as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubSecTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBSECTIME, value);
	}
    /**
     * Adds a value to property SubSecTime from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubSecTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SUBSECTIME, value);
	}
	
    /**
     * Adds a value to property SubSecTime from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubSecTime(java.lang.String value) {
		Base.add(this.model, this.getResource(), SUBSECTIME, value);
	}
  

    /**
     * Sets a value of property SubSecTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubSecTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBSECTIME, value);
	}
	
    /**
     * Sets a value of property SubSecTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubSecTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBSECTIME, value);
	}
    /**
     * Sets a value of property SubSecTime from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubSecTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SUBSECTIME, value);
	}
	
    /**
     * Sets a value of property SubSecTime from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubSecTime(java.lang.String value) {
		Base.set(this.model, this.getResource(), SUBSECTIME, value);
	}
  


    /**
     * Removes a value of property SubSecTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubSecTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBSECTIME, value);
	}
	
    /**
     * Removes a value of property SubSecTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubSecTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBSECTIME, value);
	}
    /**
     * Removes a value of property SubSecTime given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubSecTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SUBSECTIME, value);
	}
	
    /**
     * Removes a value of property SubSecTime given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubSecTime(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SUBSECTIME, value);
	}
  
    /**
     * Removes all values of property SubSecTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubSecTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBSECTIME);
	}
	
    /**
     * Removes all values of property SubSecTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubSecTime() {
		Base.removeAll(this.model, this.getResource(), SUBSECTIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@575da423 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubSecTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBSECTIMEDIGITIZED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@575da423 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubSecTimeDigitized() {
		return Base.has(this.model, this.getResource(), SUBSECTIMEDIGITIZED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@575da423 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubSecTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBSECTIMEDIGITIZED);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@575da423 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubSecTimeDigitized( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBSECTIMEDIGITIZED);
	}

     /**
     * Get all values of property SubSecTimeDigitized as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubSecTimeDigitized_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBSECTIMEDIGITIZED);
	}
	
    /**
     * Get all values of property SubSecTimeDigitized as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubSecTimeDigitized_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBSECTIMEDIGITIZED, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SubSecTimeDigitized as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubSecTimeDigitized_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBSECTIMEDIGITIZED);
	}

    /**
     * Get all values of property SubSecTimeDigitized as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubSecTimeDigitized_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBSECTIMEDIGITIZED, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SubSecTimeDigitized     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSubSecTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBSECTIMEDIGITIZED, java.lang.String.class);
	}
	
    /**
     * Get all values of property SubSecTimeDigitized as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSubSecTimeDigitized_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBSECTIMEDIGITIZED, java.lang.String.class);
	}

    /**
     * Get all values of property SubSecTimeDigitized     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSubSecTimeDigitized() {
		return Base.getAll(this.model, this.getResource(), SUBSECTIMEDIGITIZED, java.lang.String.class);
	}

    /**
     * Get all values of property SubSecTimeDigitized as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSubSecTimeDigitized_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBSECTIMEDIGITIZED, java.lang.String.class);
	}
 
    /**
     * Adds a value to property SubSecTimeDigitized as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubSecTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBSECTIMEDIGITIZED, value);
	}
	
    /**
     * Adds a value to property SubSecTimeDigitized as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubSecTimeDigitized( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBSECTIMEDIGITIZED, value);
	}
    /**
     * Adds a value to property SubSecTimeDigitized from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubSecTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SUBSECTIMEDIGITIZED, value);
	}
	
    /**
     * Adds a value to property SubSecTimeDigitized from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubSecTimeDigitized(java.lang.String value) {
		Base.add(this.model, this.getResource(), SUBSECTIMEDIGITIZED, value);
	}
  

    /**
     * Sets a value of property SubSecTimeDigitized from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubSecTimeDigitized( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBSECTIMEDIGITIZED, value);
	}
	
    /**
     * Sets a value of property SubSecTimeDigitized from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubSecTimeDigitized( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBSECTIMEDIGITIZED, value);
	}
    /**
     * Sets a value of property SubSecTimeDigitized from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubSecTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SUBSECTIMEDIGITIZED, value);
	}
	
    /**
     * Sets a value of property SubSecTimeDigitized from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubSecTimeDigitized(java.lang.String value) {
		Base.set(this.model, this.getResource(), SUBSECTIMEDIGITIZED, value);
	}
  


    /**
     * Removes a value of property SubSecTimeDigitized as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubSecTimeDigitized( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBSECTIMEDIGITIZED, value);
	}
	
    /**
     * Removes a value of property SubSecTimeDigitized as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubSecTimeDigitized( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBSECTIMEDIGITIZED, value);
	}
    /**
     * Removes a value of property SubSecTimeDigitized given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubSecTimeDigitized(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SUBSECTIMEDIGITIZED, value);
	}
	
    /**
     * Removes a value of property SubSecTimeDigitized given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubSecTimeDigitized(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SUBSECTIMEDIGITIZED, value);
	}
  
    /**
     * Removes all values of property SubSecTimeDigitized     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubSecTimeDigitized( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBSECTIMEDIGITIZED);
	}
	
    /**
     * Removes all values of property SubSecTimeDigitized	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubSecTimeDigitized() {
		Base.removeAll(this.model, this.getResource(), SUBSECTIMEDIGITIZED);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f2276f7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubSecTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBSECTIMEORIGINAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f2276f7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubSecTimeOriginal() {
		return Base.has(this.model, this.getResource(), SUBSECTIMEORIGINAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f2276f7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubSecTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBSECTIMEORIGINAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f2276f7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubSecTimeOriginal( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBSECTIMEORIGINAL);
	}

     /**
     * Get all values of property SubSecTimeOriginal as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubSecTimeOriginal_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBSECTIMEORIGINAL);
	}
	
    /**
     * Get all values of property SubSecTimeOriginal as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubSecTimeOriginal_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBSECTIMEORIGINAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SubSecTimeOriginal as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubSecTimeOriginal_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBSECTIMEORIGINAL);
	}

    /**
     * Get all values of property SubSecTimeOriginal as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubSecTimeOriginal_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBSECTIMEORIGINAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SubSecTimeOriginal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSubSecTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBSECTIMEORIGINAL, java.lang.String.class);
	}
	
    /**
     * Get all values of property SubSecTimeOriginal as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSubSecTimeOriginal_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBSECTIMEORIGINAL, java.lang.String.class);
	}

    /**
     * Get all values of property SubSecTimeOriginal     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSubSecTimeOriginal() {
		return Base.getAll(this.model, this.getResource(), SUBSECTIMEORIGINAL, java.lang.String.class);
	}

    /**
     * Get all values of property SubSecTimeOriginal as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSubSecTimeOriginal_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBSECTIMEORIGINAL, java.lang.String.class);
	}
 
    /**
     * Adds a value to property SubSecTimeOriginal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubSecTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBSECTIMEORIGINAL, value);
	}
	
    /**
     * Adds a value to property SubSecTimeOriginal as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubSecTimeOriginal( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBSECTIMEORIGINAL, value);
	}
    /**
     * Adds a value to property SubSecTimeOriginal from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubSecTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SUBSECTIMEORIGINAL, value);
	}
	
    /**
     * Adds a value to property SubSecTimeOriginal from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubSecTimeOriginal(java.lang.String value) {
		Base.add(this.model, this.getResource(), SUBSECTIMEORIGINAL, value);
	}
  

    /**
     * Sets a value of property SubSecTimeOriginal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubSecTimeOriginal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBSECTIMEORIGINAL, value);
	}
	
    /**
     * Sets a value of property SubSecTimeOriginal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubSecTimeOriginal( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBSECTIMEORIGINAL, value);
	}
    /**
     * Sets a value of property SubSecTimeOriginal from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubSecTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SUBSECTIMEORIGINAL, value);
	}
	
    /**
     * Sets a value of property SubSecTimeOriginal from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubSecTimeOriginal(java.lang.String value) {
		Base.set(this.model, this.getResource(), SUBSECTIMEORIGINAL, value);
	}
  


    /**
     * Removes a value of property SubSecTimeOriginal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubSecTimeOriginal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBSECTIMEORIGINAL, value);
	}
	
    /**
     * Removes a value of property SubSecTimeOriginal as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubSecTimeOriginal( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBSECTIMEORIGINAL, value);
	}
    /**
     * Removes a value of property SubSecTimeOriginal given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubSecTimeOriginal(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SUBSECTIMEORIGINAL, value);
	}
	
    /**
     * Removes a value of property SubSecTimeOriginal given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubSecTimeOriginal(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SUBSECTIMEORIGINAL, value);
	}
  
    /**
     * Removes all values of property SubSecTimeOriginal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubSecTimeOriginal( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBSECTIMEORIGINAL);
	}
	
    /**
     * Removes all values of property SubSecTimeOriginal	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubSecTimeOriginal() {
		Base.removeAll(this.model, this.getResource(), SUBSECTIMEORIGINAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14c63afe has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubjectArea(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBJECTAREA);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14c63afe has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubjectArea() {
		return Base.has(this.model, this.getResource(), SUBJECTAREA);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14c63afe has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubjectArea(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBJECTAREA);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14c63afe has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubjectArea( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBJECTAREA);
	}

     /**
     * Get all values of property SubjectArea as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubjectArea_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBJECTAREA);
	}
	
    /**
     * Get all values of property SubjectArea as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubjectArea_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECTAREA, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SubjectArea as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubjectArea_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBJECTAREA);
	}

    /**
     * Get all values of property SubjectArea as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubjectArea_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECTAREA, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SubjectArea     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSubjectArea(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBJECTAREA, java.lang.String.class);
	}
	
    /**
     * Get all values of property SubjectArea as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSubjectArea_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECTAREA, java.lang.String.class);
	}

    /**
     * Get all values of property SubjectArea     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSubjectArea() {
		return Base.getAll(this.model, this.getResource(), SUBJECTAREA, java.lang.String.class);
	}

    /**
     * Get all values of property SubjectArea as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSubjectArea_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECTAREA, java.lang.String.class);
	}
 
    /**
     * Adds a value to property SubjectArea as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubjectArea(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBJECTAREA, value);
	}
	
    /**
     * Adds a value to property SubjectArea as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubjectArea( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBJECTAREA, value);
	}
    /**
     * Adds a value to property SubjectArea from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubjectArea(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SUBJECTAREA, value);
	}
	
    /**
     * Adds a value to property SubjectArea from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubjectArea(java.lang.String value) {
		Base.add(this.model, this.getResource(), SUBJECTAREA, value);
	}
  

    /**
     * Sets a value of property SubjectArea from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubjectArea( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBJECTAREA, value);
	}
	
    /**
     * Sets a value of property SubjectArea from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubjectArea( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBJECTAREA, value);
	}
    /**
     * Sets a value of property SubjectArea from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubjectArea(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SUBJECTAREA, value);
	}
	
    /**
     * Sets a value of property SubjectArea from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubjectArea(java.lang.String value) {
		Base.set(this.model, this.getResource(), SUBJECTAREA, value);
	}
  


    /**
     * Removes a value of property SubjectArea as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubjectArea( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBJECTAREA, value);
	}
	
    /**
     * Removes a value of property SubjectArea as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubjectArea( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBJECTAREA, value);
	}
    /**
     * Removes a value of property SubjectArea given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubjectArea(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SUBJECTAREA, value);
	}
	
    /**
     * Removes a value of property SubjectArea given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubjectArea(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SUBJECTAREA, value);
	}
  
    /**
     * Removes all values of property SubjectArea     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubjectArea( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBJECTAREA);
	}
	
    /**
     * Removes all values of property SubjectArea	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubjectArea() {
		Base.removeAll(this.model, this.getResource(), SUBJECTAREA);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f4edcba has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubjectDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBJECTDISTANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f4edcba has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubjectDistance() {
		return Base.has(this.model, this.getResource(), SUBJECTDISTANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f4edcba has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubjectDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBJECTDISTANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f4edcba has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubjectDistance( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBJECTDISTANCE);
	}

     /**
     * Get all values of property SubjectDistance as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubjectDistance_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBJECTDISTANCE);
	}
	
    /**
     * Get all values of property SubjectDistance as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubjectDistance_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECTDISTANCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SubjectDistance as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubjectDistance_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBJECTDISTANCE);
	}

    /**
     * Get all values of property SubjectDistance as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubjectDistance_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECTDISTANCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SubjectDistance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllSubjectDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBJECTDISTANCE, java.lang.Float.class);
	}
	
    /**
     * Get all values of property SubjectDistance as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllSubjectDistance_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECTDISTANCE, java.lang.Float.class);
	}

    /**
     * Get all values of property SubjectDistance     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllSubjectDistance() {
		return Base.getAll(this.model, this.getResource(), SUBJECTDISTANCE, java.lang.Float.class);
	}

    /**
     * Get all values of property SubjectDistance as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllSubjectDistance_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECTDISTANCE, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property SubjectDistance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubjectDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBJECTDISTANCE, value);
	}
	
    /**
     * Adds a value to property SubjectDistance as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubjectDistance( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBJECTDISTANCE, value);
	}
    /**
     * Adds a value to property SubjectDistance from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubjectDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, SUBJECTDISTANCE, value);
	}
	
    /**
     * Adds a value to property SubjectDistance from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubjectDistance(java.lang.Float value) {
		Base.add(this.model, this.getResource(), SUBJECTDISTANCE, value);
	}
  

    /**
     * Sets a value of property SubjectDistance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubjectDistance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBJECTDISTANCE, value);
	}
	
    /**
     * Sets a value of property SubjectDistance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubjectDistance( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBJECTDISTANCE, value);
	}
    /**
     * Sets a value of property SubjectDistance from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubjectDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, SUBJECTDISTANCE, value);
	}
	
    /**
     * Sets a value of property SubjectDistance from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubjectDistance(java.lang.Float value) {
		Base.set(this.model, this.getResource(), SUBJECTDISTANCE, value);
	}
  


    /**
     * Removes a value of property SubjectDistance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubjectDistance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBJECTDISTANCE, value);
	}
	
    /**
     * Removes a value of property SubjectDistance as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubjectDistance( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBJECTDISTANCE, value);
	}
    /**
     * Removes a value of property SubjectDistance given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubjectDistance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, SUBJECTDISTANCE, value);
	}
	
    /**
     * Removes a value of property SubjectDistance given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubjectDistance(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), SUBJECTDISTANCE, value);
	}
  
    /**
     * Removes all values of property SubjectDistance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubjectDistance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBJECTDISTANCE);
	}
	
    /**
     * Removes all values of property SubjectDistance	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubjectDistance() {
		Base.removeAll(this.model, this.getResource(), SUBJECTDISTANCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e311db0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubjectDistanceRange(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBJECTDISTANCERANGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e311db0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubjectDistanceRange() {
		return Base.has(this.model, this.getResource(), SUBJECTDISTANCERANGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e311db0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubjectDistanceRange(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBJECTDISTANCERANGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e311db0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubjectDistanceRange( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBJECTDISTANCERANGE);
	}

     /**
     * Get all values of property SubjectDistanceRange as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubjectDistanceRange_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBJECTDISTANCERANGE);
	}
	
    /**
     * Get all values of property SubjectDistanceRange as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubjectDistanceRange_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECTDISTANCERANGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SubjectDistanceRange as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubjectDistanceRange_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBJECTDISTANCERANGE);
	}

    /**
     * Get all values of property SubjectDistanceRange as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubjectDistanceRange_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECTDISTANCERANGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SubjectDistanceRange     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSubjectDistanceRange(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBJECTDISTANCERANGE, java.lang.String.class);
	}
	
    /**
     * Get all values of property SubjectDistanceRange as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSubjectDistanceRange_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECTDISTANCERANGE, java.lang.String.class);
	}

    /**
     * Get all values of property SubjectDistanceRange     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSubjectDistanceRange() {
		return Base.getAll(this.model, this.getResource(), SUBJECTDISTANCERANGE, java.lang.String.class);
	}

    /**
     * Get all values of property SubjectDistanceRange as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSubjectDistanceRange_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECTDISTANCERANGE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property SubjectDistanceRange as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubjectDistanceRange(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBJECTDISTANCERANGE, value);
	}
	
    /**
     * Adds a value to property SubjectDistanceRange as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubjectDistanceRange( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBJECTDISTANCERANGE, value);
	}
    /**
     * Adds a value to property SubjectDistanceRange from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubjectDistanceRange(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SUBJECTDISTANCERANGE, value);
	}
	
    /**
     * Adds a value to property SubjectDistanceRange from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubjectDistanceRange(java.lang.String value) {
		Base.add(this.model, this.getResource(), SUBJECTDISTANCERANGE, value);
	}
  

    /**
     * Sets a value of property SubjectDistanceRange from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubjectDistanceRange( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBJECTDISTANCERANGE, value);
	}
	
    /**
     * Sets a value of property SubjectDistanceRange from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubjectDistanceRange( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBJECTDISTANCERANGE, value);
	}
    /**
     * Sets a value of property SubjectDistanceRange from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubjectDistanceRange(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SUBJECTDISTANCERANGE, value);
	}
	
    /**
     * Sets a value of property SubjectDistanceRange from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubjectDistanceRange(java.lang.String value) {
		Base.set(this.model, this.getResource(), SUBJECTDISTANCERANGE, value);
	}
  


    /**
     * Removes a value of property SubjectDistanceRange as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubjectDistanceRange( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBJECTDISTANCERANGE, value);
	}
	
    /**
     * Removes a value of property SubjectDistanceRange as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubjectDistanceRange( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBJECTDISTANCERANGE, value);
	}
    /**
     * Removes a value of property SubjectDistanceRange given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubjectDistanceRange(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SUBJECTDISTANCERANGE, value);
	}
	
    /**
     * Removes a value of property SubjectDistanceRange given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubjectDistanceRange(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SUBJECTDISTANCERANGE, value);
	}
  
    /**
     * Removes all values of property SubjectDistanceRange     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubjectDistanceRange( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBJECTDISTANCERANGE);
	}
	
    /**
     * Removes all values of property SubjectDistanceRange	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubjectDistanceRange() {
		Base.removeAll(this.model, this.getResource(), SUBJECTDISTANCERANGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bd2c1b4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubjectLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBJECTLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bd2c1b4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubjectLocation() {
		return Base.has(this.model, this.getResource(), SUBJECTLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bd2c1b4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubjectLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBJECTLOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bd2c1b4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubjectLocation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBJECTLOCATION);
	}

     /**
     * Get all values of property SubjectLocation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubjectLocation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBJECTLOCATION);
	}
	
    /**
     * Get all values of property SubjectLocation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubjectLocation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECTLOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SubjectLocation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubjectLocation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBJECTLOCATION);
	}

    /**
     * Get all values of property SubjectLocation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubjectLocation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECTLOCATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SubjectLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSubjectLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBJECTLOCATION, java.lang.String.class);
	}
	
    /**
     * Get all values of property SubjectLocation as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSubjectLocation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECTLOCATION, java.lang.String.class);
	}

    /**
     * Get all values of property SubjectLocation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSubjectLocation() {
		return Base.getAll(this.model, this.getResource(), SUBJECTLOCATION, java.lang.String.class);
	}

    /**
     * Get all values of property SubjectLocation as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSubjectLocation_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECTLOCATION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property SubjectLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubjectLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBJECTLOCATION, value);
	}
	
    /**
     * Adds a value to property SubjectLocation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubjectLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBJECTLOCATION, value);
	}
    /**
     * Adds a value to property SubjectLocation from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubjectLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SUBJECTLOCATION, value);
	}
	
    /**
     * Adds a value to property SubjectLocation from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubjectLocation(java.lang.String value) {
		Base.add(this.model, this.getResource(), SUBJECTLOCATION, value);
	}
  

    /**
     * Sets a value of property SubjectLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubjectLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBJECTLOCATION, value);
	}
	
    /**
     * Sets a value of property SubjectLocation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubjectLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBJECTLOCATION, value);
	}
    /**
     * Sets a value of property SubjectLocation from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubjectLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SUBJECTLOCATION, value);
	}
	
    /**
     * Sets a value of property SubjectLocation from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubjectLocation(java.lang.String value) {
		Base.set(this.model, this.getResource(), SUBJECTLOCATION, value);
	}
  


    /**
     * Removes a value of property SubjectLocation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubjectLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBJECTLOCATION, value);
	}
	
    /**
     * Removes a value of property SubjectLocation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubjectLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBJECTLOCATION, value);
	}
    /**
     * Removes a value of property SubjectLocation given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubjectLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SUBJECTLOCATION, value);
	}
	
    /**
     * Removes a value of property SubjectLocation given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubjectLocation(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SUBJECTLOCATION, value);
	}
  
    /**
     * Removes all values of property SubjectLocation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubjectLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBJECTLOCATION);
	}
	
    /**
     * Removes all values of property SubjectLocation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubjectLocation() {
		Base.removeAll(this.model, this.getResource(), SUBJECTLOCATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@374f063a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSubseconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBSECONDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@374f063a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSubseconds() {
		return Base.has(this.model, this.getResource(), SUBSECONDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@374f063a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSubseconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBSECONDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@374f063a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSubseconds( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBSECONDS);
	}

     /**
     * Get all values of property Subseconds as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubseconds_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBSECONDS);
	}
	
    /**
     * Get all values of property Subseconds as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubseconds_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBSECONDS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Subseconds as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubseconds_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBSECONDS);
	}

    /**
     * Get all values of property Subseconds as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSubseconds_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBSECONDS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Subseconds     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSubseconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBSECONDS, java.lang.String.class);
	}
	
    /**
     * Get all values of property Subseconds as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSubseconds_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBSECONDS, java.lang.String.class);
	}

    /**
     * Get all values of property Subseconds     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSubseconds() {
		return Base.getAll(this.model, this.getResource(), SUBSECONDS, java.lang.String.class);
	}

    /**
     * Get all values of property Subseconds as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSubseconds_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBSECONDS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Subseconds as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSubseconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBSECONDS, value);
	}
	
    /**
     * Adds a value to property Subseconds as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSubseconds( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBSECONDS, value);
	}
    /**
     * Adds a value to property Subseconds from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSubseconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SUBSECONDS, value);
	}
	
    /**
     * Adds a value to property Subseconds from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSubseconds(java.lang.String value) {
		Base.add(this.model, this.getResource(), SUBSECONDS, value);
	}
  

    /**
     * Sets a value of property Subseconds from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSubseconds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBSECONDS, value);
	}
	
    /**
     * Sets a value of property Subseconds from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSubseconds( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBSECONDS, value);
	}
    /**
     * Sets a value of property Subseconds from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSubseconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SUBSECONDS, value);
	}
	
    /**
     * Sets a value of property Subseconds from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSubseconds(java.lang.String value) {
		Base.set(this.model, this.getResource(), SUBSECONDS, value);
	}
  


    /**
     * Removes a value of property Subseconds as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSubseconds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBSECONDS, value);
	}
	
    /**
     * Removes a value of property Subseconds as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSubseconds( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBSECONDS, value);
	}
    /**
     * Removes a value of property Subseconds given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSubseconds(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SUBSECONDS, value);
	}
	
    /**
     * Removes a value of property Subseconds given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSubseconds(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SUBSECONDS, value);
	}
  
    /**
     * Removes all values of property Subseconds     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSubseconds( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBSECONDS);
	}
	
    /**
     * Removes all values of property Subseconds	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSubseconds() {
		Base.removeAll(this.model, this.getResource(), SUBSECONDS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c80fc5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTagNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TAGNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c80fc5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTagNumber() {
		return Base.has(this.model, this.getResource(), TAGNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c80fc5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTagNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TAGNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c80fc5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTagNumber( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TAGNUMBER);
	}

     /**
     * Get all values of property TagNumber as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTagNumber_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TAGNUMBER);
	}
	
    /**
     * Get all values of property TagNumber as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTagNumber_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TAGNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TagNumber as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTagNumber_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TAGNUMBER);
	}

    /**
     * Get all values of property TagNumber as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTagNumber_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TAGNUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TagNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllTagNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TAGNUMBER, java.lang.String.class);
	}
	
    /**
     * Get all values of property TagNumber as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllTagNumber_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TAGNUMBER, java.lang.String.class);
	}

    /**
     * Get all values of property TagNumber     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllTagNumber() {
		return Base.getAll(this.model, this.getResource(), TAGNUMBER, java.lang.String.class);
	}

    /**
     * Get all values of property TagNumber as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllTagNumber_as() {
		return Base.getAll_as(this.model, this.getResource(), TAGNUMBER, java.lang.String.class);
	}
 
    /**
     * Adds a value to property TagNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTagNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TAGNUMBER, value);
	}
	
    /**
     * Adds a value to property TagNumber as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTagNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TAGNUMBER, value);
	}
    /**
     * Adds a value to property TagNumber from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTagNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, TAGNUMBER, value);
	}
	
    /**
     * Adds a value to property TagNumber from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTagNumber(java.lang.String value) {
		Base.add(this.model, this.getResource(), TAGNUMBER, value);
	}
  

    /**
     * Sets a value of property TagNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTagNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TAGNUMBER, value);
	}
	
    /**
     * Sets a value of property TagNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTagNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TAGNUMBER, value);
	}
    /**
     * Sets a value of property TagNumber from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTagNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, TAGNUMBER, value);
	}
	
    /**
     * Sets a value of property TagNumber from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTagNumber(java.lang.String value) {
		Base.set(this.model, this.getResource(), TAGNUMBER, value);
	}
  


    /**
     * Removes a value of property TagNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTagNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TAGNUMBER, value);
	}
	
    /**
     * Removes a value of property TagNumber as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTagNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TAGNUMBER, value);
	}
    /**
     * Removes a value of property TagNumber given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTagNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, TAGNUMBER, value);
	}
	
    /**
     * Removes a value of property TagNumber given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTagNumber(java.lang.String value) {
		Base.remove(this.model, this.getResource(), TAGNUMBER, value);
	}
  
    /**
     * Removes all values of property TagNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTagNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TAGNUMBER);
	}
	
    /**
     * Removes all values of property TagNumber	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTagNumber() {
		Base.removeAll(this.model, this.getResource(), TAGNUMBER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5eae8a1a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTagid(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TAGID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5eae8a1a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTagid() {
		return Base.has(this.model, this.getResource(), TAGID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5eae8a1a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTagid(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TAGID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5eae8a1a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTagid( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TAGID);
	}

     /**
     * Get all values of property Tagid as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTagid_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TAGID);
	}
	
    /**
     * Get all values of property Tagid as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTagid_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TAGID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Tagid as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTagid_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TAGID);
	}

    /**
     * Get all values of property Tagid as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTagid_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TAGID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Tagid     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllTagid(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TAGID, java.lang.String.class);
	}
	
    /**
     * Get all values of property Tagid as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllTagid_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TAGID, java.lang.String.class);
	}

    /**
     * Get all values of property Tagid     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllTagid() {
		return Base.getAll(this.model, this.getResource(), TAGID, java.lang.String.class);
	}

    /**
     * Get all values of property Tagid as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllTagid_as() {
		return Base.getAll_as(this.model, this.getResource(), TAGID, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Tagid as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTagid(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TAGID, value);
	}
	
    /**
     * Adds a value to property Tagid as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTagid( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TAGID, value);
	}
    /**
     * Adds a value to property Tagid from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTagid(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, TAGID, value);
	}
	
    /**
     * Adds a value to property Tagid from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTagid(java.lang.String value) {
		Base.add(this.model, this.getResource(), TAGID, value);
	}
  

    /**
     * Sets a value of property Tagid from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTagid( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TAGID, value);
	}
	
    /**
     * Sets a value of property Tagid from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTagid( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TAGID, value);
	}
    /**
     * Sets a value of property Tagid from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTagid(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, TAGID, value);
	}
	
    /**
     * Sets a value of property Tagid from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTagid(java.lang.String value) {
		Base.set(this.model, this.getResource(), TAGID, value);
	}
  


    /**
     * Removes a value of property Tagid as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTagid( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TAGID, value);
	}
	
    /**
     * Removes a value of property Tagid as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTagid( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TAGID, value);
	}
    /**
     * Removes a value of property Tagid given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTagid(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, TAGID, value);
	}
	
    /**
     * Removes a value of property Tagid given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTagid(java.lang.String value) {
		Base.remove(this.model, this.getResource(), TAGID, value);
	}
  
    /**
     * Removes all values of property Tagid     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTagid( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TAGID);
	}
	
    /**
     * Removes all values of property Tagid	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTagid() {
		Base.removeAll(this.model, this.getResource(), TAGID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@577611da has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTransferFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TRANSFERFUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@577611da has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTransferFunction() {
		return Base.has(this.model, this.getResource(), TRANSFERFUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@577611da has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTransferFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TRANSFERFUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@577611da has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTransferFunction( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TRANSFERFUNCTION);
	}

     /**
     * Get all values of property TransferFunction as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTransferFunction_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TRANSFERFUNCTION);
	}
	
    /**
     * Get all values of property TransferFunction as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTransferFunction_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TRANSFERFUNCTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property TransferFunction as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTransferFunction_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TRANSFERFUNCTION);
	}

    /**
     * Get all values of property TransferFunction as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTransferFunction_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TRANSFERFUNCTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property TransferFunction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllTransferFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TRANSFERFUNCTION, java.lang.String.class);
	}
	
    /**
     * Get all values of property TransferFunction as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllTransferFunction_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TRANSFERFUNCTION, java.lang.String.class);
	}

    /**
     * Get all values of property TransferFunction     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllTransferFunction() {
		return Base.getAll(this.model, this.getResource(), TRANSFERFUNCTION, java.lang.String.class);
	}

    /**
     * Get all values of property TransferFunction as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllTransferFunction_as() {
		return Base.getAll_as(this.model, this.getResource(), TRANSFERFUNCTION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property TransferFunction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTransferFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TRANSFERFUNCTION, value);
	}
	
    /**
     * Adds a value to property TransferFunction as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTransferFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TRANSFERFUNCTION, value);
	}
    /**
     * Adds a value to property TransferFunction from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTransferFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, TRANSFERFUNCTION, value);
	}
	
    /**
     * Adds a value to property TransferFunction from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTransferFunction(java.lang.String value) {
		Base.add(this.model, this.getResource(), TRANSFERFUNCTION, value);
	}
  

    /**
     * Sets a value of property TransferFunction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTransferFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TRANSFERFUNCTION, value);
	}
	
    /**
     * Sets a value of property TransferFunction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTransferFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TRANSFERFUNCTION, value);
	}
    /**
     * Sets a value of property TransferFunction from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTransferFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, TRANSFERFUNCTION, value);
	}
	
    /**
     * Sets a value of property TransferFunction from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTransferFunction(java.lang.String value) {
		Base.set(this.model, this.getResource(), TRANSFERFUNCTION, value);
	}
  


    /**
     * Removes a value of property TransferFunction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTransferFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TRANSFERFUNCTION, value);
	}
	
    /**
     * Removes a value of property TransferFunction as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTransferFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TRANSFERFUNCTION, value);
	}
    /**
     * Removes a value of property TransferFunction given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTransferFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, TRANSFERFUNCTION, value);
	}
	
    /**
     * Removes a value of property TransferFunction given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTransferFunction(java.lang.String value) {
		Base.remove(this.model, this.getResource(), TRANSFERFUNCTION, value);
	}
  
    /**
     * Removes all values of property TransferFunction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTransferFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TRANSFERFUNCTION);
	}
	
    /**
     * Removes all values of property TransferFunction	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTransferFunction() {
		Base.removeAll(this.model, this.getResource(), TRANSFERFUNCTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73b552d4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUnknown(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, UNKNOWN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73b552d4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUnknown() {
		return Base.has(this.model, this.getResource(), UNKNOWN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73b552d4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUnknown(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, UNKNOWN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73b552d4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUnknown( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), UNKNOWN);
	}

     /**
     * Get all values of property Unknown as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnknown_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, UNKNOWN);
	}
	
    /**
     * Get all values of property Unknown as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnknown_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNKNOWN, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Unknown as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUnknown_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), UNKNOWN);
	}

    /**
     * Get all values of property Unknown as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUnknown_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), UNKNOWN, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Unknown     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllUnknown(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, UNKNOWN, java.lang.String.class);
	}
	
    /**
     * Get all values of property Unknown as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllUnknown_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UNKNOWN, java.lang.String.class);
	}

    /**
     * Get all values of property Unknown     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllUnknown() {
		return Base.getAll(this.model, this.getResource(), UNKNOWN, java.lang.String.class);
	}

    /**
     * Get all values of property Unknown as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllUnknown_as() {
		return Base.getAll_as(this.model, this.getResource(), UNKNOWN, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Unknown as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUnknown(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, UNKNOWN, value);
	}
	
    /**
     * Adds a value to property Unknown as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUnknown( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), UNKNOWN, value);
	}
    /**
     * Adds a value to property Unknown from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUnknown(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, UNKNOWN, value);
	}
	
    /**
     * Adds a value to property Unknown from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUnknown(java.lang.String value) {
		Base.add(this.model, this.getResource(), UNKNOWN, value);
	}
  

    /**
     * Sets a value of property Unknown from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUnknown( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, UNKNOWN, value);
	}
	
    /**
     * Sets a value of property Unknown from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUnknown( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), UNKNOWN, value);
	}
    /**
     * Sets a value of property Unknown from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUnknown(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, UNKNOWN, value);
	}
	
    /**
     * Sets a value of property Unknown from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUnknown(java.lang.String value) {
		Base.set(this.model, this.getResource(), UNKNOWN, value);
	}
  


    /**
     * Removes a value of property Unknown as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUnknown( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, UNKNOWN, value);
	}
	
    /**
     * Removes a value of property Unknown as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUnknown( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), UNKNOWN, value);
	}
    /**
     * Removes a value of property Unknown given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUnknown(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, UNKNOWN, value);
	}
	
    /**
     * Removes a value of property Unknown given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUnknown(java.lang.String value) {
		Base.remove(this.model, this.getResource(), UNKNOWN, value);
	}
  
    /**
     * Removes all values of property Unknown     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUnknown( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, UNKNOWN);
	}
	
    /**
     * Removes all values of property Unknown	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUnknown() {
		Base.removeAll(this.model, this.getResource(), UNKNOWN);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@709f9e28 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUserComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, USERCOMMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@709f9e28 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUserComment() {
		return Base.has(this.model, this.getResource(), USERCOMMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@709f9e28 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUserComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, USERCOMMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@709f9e28 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUserComment( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), USERCOMMENT);
	}

     /**
     * Get all values of property UserComment as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUserComment_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, USERCOMMENT);
	}
	
    /**
     * Get all values of property UserComment as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUserComment_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, USERCOMMENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property UserComment as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUserComment_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), USERCOMMENT);
	}

    /**
     * Get all values of property UserComment as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUserComment_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), USERCOMMENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property UserComment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllUserComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, USERCOMMENT, java.lang.String.class);
	}
	
    /**
     * Get all values of property UserComment as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllUserComment_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, USERCOMMENT, java.lang.String.class);
	}

    /**
     * Get all values of property UserComment     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllUserComment() {
		return Base.getAll(this.model, this.getResource(), USERCOMMENT, java.lang.String.class);
	}

    /**
     * Get all values of property UserComment as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllUserComment_as() {
		return Base.getAll_as(this.model, this.getResource(), USERCOMMENT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property UserComment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUserComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, USERCOMMENT, value);
	}
	
    /**
     * Adds a value to property UserComment as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUserComment( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), USERCOMMENT, value);
	}
    /**
     * Adds a value to property UserComment from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUserComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, USERCOMMENT, value);
	}
	
    /**
     * Adds a value to property UserComment from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUserComment(java.lang.String value) {
		Base.add(this.model, this.getResource(), USERCOMMENT, value);
	}
  

    /**
     * Sets a value of property UserComment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUserComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, USERCOMMENT, value);
	}
	
    /**
     * Sets a value of property UserComment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUserComment( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), USERCOMMENT, value);
	}
    /**
     * Sets a value of property UserComment from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUserComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, USERCOMMENT, value);
	}
	
    /**
     * Sets a value of property UserComment from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUserComment(java.lang.String value) {
		Base.set(this.model, this.getResource(), USERCOMMENT, value);
	}
  


    /**
     * Removes a value of property UserComment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUserComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, USERCOMMENT, value);
	}
	
    /**
     * Removes a value of property UserComment as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUserComment( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), USERCOMMENT, value);
	}
    /**
     * Removes a value of property UserComment given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUserComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, USERCOMMENT, value);
	}
	
    /**
     * Removes a value of property UserComment given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUserComment(java.lang.String value) {
		Base.remove(this.model, this.getResource(), USERCOMMENT, value);
	}
  
    /**
     * Removes all values of property UserComment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUserComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, USERCOMMENT);
	}
	
    /**
     * Removes all values of property UserComment	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUserComment() {
		Base.removeAll(this.model, this.getResource(), USERCOMMENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@370f5bdc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUserInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, USERINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@370f5bdc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUserInfo() {
		return Base.has(this.model, this.getResource(), USERINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@370f5bdc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUserInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, USERINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@370f5bdc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUserInfo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), USERINFO);
	}

     /**
     * Get all values of property UserInfo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUserInfo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, USERINFO);
	}
	
    /**
     * Get all values of property UserInfo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUserInfo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, USERINFO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property UserInfo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUserInfo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), USERINFO);
	}

    /**
     * Get all values of property UserInfo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUserInfo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), USERINFO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property UserInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllUserInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, USERINFO, java.lang.String.class);
	}
	
    /**
     * Get all values of property UserInfo as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllUserInfo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, USERINFO, java.lang.String.class);
	}

    /**
     * Get all values of property UserInfo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllUserInfo() {
		return Base.getAll(this.model, this.getResource(), USERINFO, java.lang.String.class);
	}

    /**
     * Get all values of property UserInfo as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllUserInfo_as() {
		return Base.getAll_as(this.model, this.getResource(), USERINFO, java.lang.String.class);
	}
 
    /**
     * Adds a value to property UserInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUserInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, USERINFO, value);
	}
	
    /**
     * Adds a value to property UserInfo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUserInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), USERINFO, value);
	}
    /**
     * Adds a value to property UserInfo from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUserInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, USERINFO, value);
	}
	
    /**
     * Adds a value to property UserInfo from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUserInfo(java.lang.String value) {
		Base.add(this.model, this.getResource(), USERINFO, value);
	}
  

    /**
     * Sets a value of property UserInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUserInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, USERINFO, value);
	}
	
    /**
     * Sets a value of property UserInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUserInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), USERINFO, value);
	}
    /**
     * Sets a value of property UserInfo from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUserInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, USERINFO, value);
	}
	
    /**
     * Sets a value of property UserInfo from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUserInfo(java.lang.String value) {
		Base.set(this.model, this.getResource(), USERINFO, value);
	}
  


    /**
     * Removes a value of property UserInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUserInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, USERINFO, value);
	}
	
    /**
     * Removes a value of property UserInfo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUserInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), USERINFO, value);
	}
    /**
     * Removes a value of property UserInfo given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUserInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, USERINFO, value);
	}
	
    /**
     * Removes a value of property UserInfo given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUserInfo(java.lang.String value) {
		Base.remove(this.model, this.getResource(), USERINFO, value);
	}
  
    /**
     * Removes all values of property UserInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUserInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, USERINFO);
	}
	
    /**
     * Removes all values of property UserInfo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUserInfo() {
		Base.removeAll(this.model, this.getResource(), USERINFO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6131ee9d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, VERSIONINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6131ee9d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasVersionInfo() {
		return Base.has(this.model, this.getResource(), VERSIONINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6131ee9d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, VERSIONINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6131ee9d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasVersionInfo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), VERSIONINFO);
	}

     /**
     * Get all values of property VersionInfo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllVersionInfo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, VERSIONINFO);
	}
	
    /**
     * Get all values of property VersionInfo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllVersionInfo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VERSIONINFO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property VersionInfo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllVersionInfo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), VERSIONINFO);
	}

    /**
     * Get all values of property VersionInfo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllVersionInfo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), VERSIONINFO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property VersionInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, VERSIONINFO, java.lang.String.class);
	}
	
    /**
     * Get all values of property VersionInfo as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllVersionInfo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VERSIONINFO, java.lang.String.class);
	}

    /**
     * Get all values of property VersionInfo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllVersionInfo() {
		return Base.getAll(this.model, this.getResource(), VERSIONINFO, java.lang.String.class);
	}

    /**
     * Get all values of property VersionInfo as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllVersionInfo_as() {
		return Base.getAll_as(this.model, this.getResource(), VERSIONINFO, java.lang.String.class);
	}
 
    /**
     * Adds a value to property VersionInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Adds a value to property VersionInfo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), VERSIONINFO, value);
	}
    /**
     * Adds a value to property VersionInfo from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Adds a value to property VersionInfo from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addVersionInfo(java.lang.String value) {
		Base.add(this.model, this.getResource(), VERSIONINFO, value);
	}
  

    /**
     * Sets a value of property VersionInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Sets a value of property VersionInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), VERSIONINFO, value);
	}
    /**
     * Sets a value of property VersionInfo from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Sets a value of property VersionInfo from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setVersionInfo(java.lang.String value) {
		Base.set(this.model, this.getResource(), VERSIONINFO, value);
	}
  


    /**
     * Removes a value of property VersionInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Removes a value of property VersionInfo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), VERSIONINFO, value);
	}
    /**
     * Removes a value of property VersionInfo given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Removes a value of property VersionInfo given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeVersionInfo(java.lang.String value) {
		Base.remove(this.model, this.getResource(), VERSIONINFO, value);
	}
  
    /**
     * Removes all values of property VersionInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, VERSIONINFO);
	}
	
    /**
     * Removes all values of property VersionInfo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllVersionInfo() {
		Base.removeAll(this.model, this.getResource(), VERSIONINFO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192054d8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWhiteBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WHITEBALANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192054d8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWhiteBalance() {
		return Base.has(this.model, this.getResource(), WHITEBALANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192054d8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWhiteBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WHITEBALANCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@192054d8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWhiteBalance( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WHITEBALANCE);
	}

     /**
     * Get all values of property WhiteBalance as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWhiteBalance_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WHITEBALANCE);
	}
	
    /**
     * Get all values of property WhiteBalance as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWhiteBalance_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WHITEBALANCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WhiteBalance as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWhiteBalance_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WHITEBALANCE);
	}

    /**
     * Get all values of property WhiteBalance as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWhiteBalance_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WHITEBALANCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WhiteBalance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllWhiteBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WHITEBALANCE, java.lang.String.class);
	}
	
    /**
     * Get all values of property WhiteBalance as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllWhiteBalance_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WHITEBALANCE, java.lang.String.class);
	}

    /**
     * Get all values of property WhiteBalance     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllWhiteBalance() {
		return Base.getAll(this.model, this.getResource(), WHITEBALANCE, java.lang.String.class);
	}

    /**
     * Get all values of property WhiteBalance as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllWhiteBalance_as() {
		return Base.getAll_as(this.model, this.getResource(), WHITEBALANCE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property WhiteBalance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWhiteBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WHITEBALANCE, value);
	}
	
    /**
     * Adds a value to property WhiteBalance as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWhiteBalance( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WHITEBALANCE, value);
	}
    /**
     * Adds a value to property WhiteBalance from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWhiteBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, WHITEBALANCE, value);
	}
	
    /**
     * Adds a value to property WhiteBalance from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWhiteBalance(java.lang.String value) {
		Base.add(this.model, this.getResource(), WHITEBALANCE, value);
	}
  

    /**
     * Sets a value of property WhiteBalance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWhiteBalance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WHITEBALANCE, value);
	}
	
    /**
     * Sets a value of property WhiteBalance from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWhiteBalance( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WHITEBALANCE, value);
	}
    /**
     * Sets a value of property WhiteBalance from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWhiteBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, WHITEBALANCE, value);
	}
	
    /**
     * Sets a value of property WhiteBalance from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWhiteBalance(java.lang.String value) {
		Base.set(this.model, this.getResource(), WHITEBALANCE, value);
	}
  


    /**
     * Removes a value of property WhiteBalance as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWhiteBalance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WHITEBALANCE, value);
	}
	
    /**
     * Removes a value of property WhiteBalance as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWhiteBalance( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WHITEBALANCE, value);
	}
    /**
     * Removes a value of property WhiteBalance given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWhiteBalance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, WHITEBALANCE, value);
	}
	
    /**
     * Removes a value of property WhiteBalance given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWhiteBalance(java.lang.String value) {
		Base.remove(this.model, this.getResource(), WHITEBALANCE, value);
	}
  
    /**
     * Removes all values of property WhiteBalance     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWhiteBalance( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WHITEBALANCE);
	}
	
    /**
     * Removes all values of property WhiteBalance	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWhiteBalance() {
		Base.removeAll(this.model, this.getResource(), WHITEBALANCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@557ed953 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWhitePoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WHITEPOINT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@557ed953 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWhitePoint() {
		return Base.has(this.model, this.getResource(), WHITEPOINT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@557ed953 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWhitePoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WHITEPOINT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@557ed953 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWhitePoint( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WHITEPOINT);
	}

     /**
     * Get all values of property WhitePoint as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWhitePoint_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WHITEPOINT);
	}
	
    /**
     * Get all values of property WhitePoint as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWhitePoint_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WHITEPOINT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WhitePoint as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWhitePoint_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WHITEPOINT);
	}

    /**
     * Get all values of property WhitePoint as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWhitePoint_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WHITEPOINT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WhitePoint     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllWhitePoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WHITEPOINT, java.lang.String.class);
	}
	
    /**
     * Get all values of property WhitePoint as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllWhitePoint_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WHITEPOINT, java.lang.String.class);
	}

    /**
     * Get all values of property WhitePoint     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllWhitePoint() {
		return Base.getAll(this.model, this.getResource(), WHITEPOINT, java.lang.String.class);
	}

    /**
     * Get all values of property WhitePoint as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllWhitePoint_as() {
		return Base.getAll_as(this.model, this.getResource(), WHITEPOINT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property WhitePoint as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWhitePoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WHITEPOINT, value);
	}
	
    /**
     * Adds a value to property WhitePoint as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWhitePoint( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WHITEPOINT, value);
	}
    /**
     * Adds a value to property WhitePoint from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWhitePoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, WHITEPOINT, value);
	}
	
    /**
     * Adds a value to property WhitePoint from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWhitePoint(java.lang.String value) {
		Base.add(this.model, this.getResource(), WHITEPOINT, value);
	}
  

    /**
     * Sets a value of property WhitePoint from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWhitePoint( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WHITEPOINT, value);
	}
	
    /**
     * Sets a value of property WhitePoint from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWhitePoint( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WHITEPOINT, value);
	}
    /**
     * Sets a value of property WhitePoint from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWhitePoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, WHITEPOINT, value);
	}
	
    /**
     * Sets a value of property WhitePoint from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWhitePoint(java.lang.String value) {
		Base.set(this.model, this.getResource(), WHITEPOINT, value);
	}
  


    /**
     * Removes a value of property WhitePoint as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWhitePoint( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WHITEPOINT, value);
	}
	
    /**
     * Removes a value of property WhitePoint as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWhitePoint( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WHITEPOINT, value);
	}
    /**
     * Removes a value of property WhitePoint given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWhitePoint(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, WHITEPOINT, value);
	}
	
    /**
     * Removes a value of property WhitePoint given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWhitePoint(java.lang.String value) {
		Base.remove(this.model, this.getResource(), WHITEPOINT, value);
	}
  
    /**
     * Removes all values of property WhitePoint     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWhitePoint( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WHITEPOINT);
	}
	
    /**
     * Removes all values of property WhitePoint	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWhitePoint() {
		Base.removeAll(this.model, this.getResource(), WHITEPOINT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f5884e0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f5884e0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWidth() {
		return Base.has(this.model, this.getResource(), WIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f5884e0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WIDTH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f5884e0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWidth( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WIDTH);
	}

     /**
     * Get all values of property Width as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWidth_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WIDTH);
	}
	
    /**
     * Get all values of property Width as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWidth_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WIDTH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Width as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWidth_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WIDTH);
	}

    /**
     * Get all values of property Width as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWidth_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WIDTH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Width     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WIDTH, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Width as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllWidth_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WIDTH, java.lang.Integer.class);
	}

    /**
     * Get all values of property Width     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllWidth() {
		return Base.getAll(this.model, this.getResource(), WIDTH, java.lang.Integer.class);
	}

    /**
     * Get all values of property Width as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllWidth_as() {
		return Base.getAll_as(this.model, this.getResource(), WIDTH, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Width as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WIDTH, value);
	}
	
    /**
     * Adds a value to property Width as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WIDTH, value);
	}
    /**
     * Adds a value to property Width from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, WIDTH, value);
	}
	
    /**
     * Adds a value to property Width from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWidth(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), WIDTH, value);
	}
  

    /**
     * Sets a value of property Width from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WIDTH, value);
	}
	
    /**
     * Sets a value of property Width from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WIDTH, value);
	}
    /**
     * Sets a value of property Width from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, WIDTH, value);
	}
	
    /**
     * Sets a value of property Width from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWidth(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), WIDTH, value);
	}
  


    /**
     * Removes a value of property Width as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WIDTH, value);
	}
	
    /**
     * Removes a value of property Width as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWidth( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WIDTH, value);
	}
    /**
     * Removes a value of property Width given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWidth(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, WIDTH, value);
	}
	
    /**
     * Removes a value of property Width given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWidth(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), WIDTH, value);
	}
  
    /**
     * Removes all values of property Width     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWidth( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WIDTH);
	}
	
    /**
     * Removes all values of property Width	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWidth() {
		Base.removeAll(this.model, this.getResource(), WIDTH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a39d896 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, XRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a39d896 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasXResolution() {
		return Base.has(this.model, this.getResource(), XRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a39d896 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, XRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a39d896 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasXResolution( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), XRESOLUTION);
	}

     /**
     * Get all values of property XResolution as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllXResolution_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, XRESOLUTION);
	}
	
    /**
     * Get all values of property XResolution as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllXResolution_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, XRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property XResolution as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllXResolution_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), XRESOLUTION);
	}

    /**
     * Get all values of property XResolution as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllXResolution_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), XRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property XResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, XRESOLUTION, java.lang.Float.class);
	}
	
    /**
     * Get all values of property XResolution as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllXResolution_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, XRESOLUTION, java.lang.Float.class);
	}

    /**
     * Get all values of property XResolution     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllXResolution() {
		return Base.getAll(this.model, this.getResource(), XRESOLUTION, java.lang.Float.class);
	}

    /**
     * Get all values of property XResolution as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllXResolution_as() {
		return Base.getAll_as(this.model, this.getResource(), XRESOLUTION, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property XResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, XRESOLUTION, value);
	}
	
    /**
     * Adds a value to property XResolution as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addXResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), XRESOLUTION, value);
	}
    /**
     * Adds a value to property XResolution from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, XRESOLUTION, value);
	}
	
    /**
     * Adds a value to property XResolution from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addXResolution(java.lang.Float value) {
		Base.add(this.model, this.getResource(), XRESOLUTION, value);
	}
  

    /**
     * Sets a value of property XResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setXResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, XRESOLUTION, value);
	}
	
    /**
     * Sets a value of property XResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setXResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), XRESOLUTION, value);
	}
    /**
     * Sets a value of property XResolution from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, XRESOLUTION, value);
	}
	
    /**
     * Sets a value of property XResolution from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setXResolution(java.lang.Float value) {
		Base.set(this.model, this.getResource(), XRESOLUTION, value);
	}
  


    /**
     * Removes a value of property XResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeXResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, XRESOLUTION, value);
	}
	
    /**
     * Removes a value of property XResolution as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeXResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), XRESOLUTION, value);
	}
    /**
     * Removes a value of property XResolution given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeXResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, XRESOLUTION, value);
	}
	
    /**
     * Removes a value of property XResolution given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeXResolution(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), XRESOLUTION, value);
	}
  
    /**
     * Removes all values of property XResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllXResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, XRESOLUTION);
	}
	
    /**
     * Removes all values of property XResolution	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllXResolution() {
		Base.removeAll(this.model, this.getResource(), XRESOLUTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84a268 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasYCbCrCoefficients(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, YCBCRCOEFFICIENTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84a268 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasYCbCrCoefficients() {
		return Base.has(this.model, this.getResource(), YCBCRCOEFFICIENTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84a268 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasYCbCrCoefficients(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, YCBCRCOEFFICIENTS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84a268 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasYCbCrCoefficients( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), YCBCRCOEFFICIENTS);
	}

     /**
     * Get all values of property YCbCrCoefficients as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllYCbCrCoefficients_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, YCBCRCOEFFICIENTS);
	}
	
    /**
     * Get all values of property YCbCrCoefficients as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllYCbCrCoefficients_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, YCBCRCOEFFICIENTS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property YCbCrCoefficients as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllYCbCrCoefficients_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), YCBCRCOEFFICIENTS);
	}

    /**
     * Get all values of property YCbCrCoefficients as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllYCbCrCoefficients_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), YCBCRCOEFFICIENTS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property YCbCrCoefficients     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllYCbCrCoefficients(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, YCBCRCOEFFICIENTS, java.lang.String.class);
	}
	
    /**
     * Get all values of property YCbCrCoefficients as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllYCbCrCoefficients_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, YCBCRCOEFFICIENTS, java.lang.String.class);
	}

    /**
     * Get all values of property YCbCrCoefficients     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllYCbCrCoefficients() {
		return Base.getAll(this.model, this.getResource(), YCBCRCOEFFICIENTS, java.lang.String.class);
	}

    /**
     * Get all values of property YCbCrCoefficients as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllYCbCrCoefficients_as() {
		return Base.getAll_as(this.model, this.getResource(), YCBCRCOEFFICIENTS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property YCbCrCoefficients as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addYCbCrCoefficients(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, YCBCRCOEFFICIENTS, value);
	}
	
    /**
     * Adds a value to property YCbCrCoefficients as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addYCbCrCoefficients( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), YCBCRCOEFFICIENTS, value);
	}
    /**
     * Adds a value to property YCbCrCoefficients from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addYCbCrCoefficients(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, YCBCRCOEFFICIENTS, value);
	}
	
    /**
     * Adds a value to property YCbCrCoefficients from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addYCbCrCoefficients(java.lang.String value) {
		Base.add(this.model, this.getResource(), YCBCRCOEFFICIENTS, value);
	}
  

    /**
     * Sets a value of property YCbCrCoefficients from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setYCbCrCoefficients( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, YCBCRCOEFFICIENTS, value);
	}
	
    /**
     * Sets a value of property YCbCrCoefficients from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setYCbCrCoefficients( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), YCBCRCOEFFICIENTS, value);
	}
    /**
     * Sets a value of property YCbCrCoefficients from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setYCbCrCoefficients(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, YCBCRCOEFFICIENTS, value);
	}
	
    /**
     * Sets a value of property YCbCrCoefficients from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setYCbCrCoefficients(java.lang.String value) {
		Base.set(this.model, this.getResource(), YCBCRCOEFFICIENTS, value);
	}
  


    /**
     * Removes a value of property YCbCrCoefficients as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeYCbCrCoefficients( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, YCBCRCOEFFICIENTS, value);
	}
	
    /**
     * Removes a value of property YCbCrCoefficients as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeYCbCrCoefficients( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), YCBCRCOEFFICIENTS, value);
	}
    /**
     * Removes a value of property YCbCrCoefficients given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeYCbCrCoefficients(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, YCBCRCOEFFICIENTS, value);
	}
	
    /**
     * Removes a value of property YCbCrCoefficients given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeYCbCrCoefficients(java.lang.String value) {
		Base.remove(this.model, this.getResource(), YCBCRCOEFFICIENTS, value);
	}
  
    /**
     * Removes all values of property YCbCrCoefficients     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllYCbCrCoefficients( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, YCBCRCOEFFICIENTS);
	}
	
    /**
     * Removes all values of property YCbCrCoefficients	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllYCbCrCoefficients() {
		Base.removeAll(this.model, this.getResource(), YCBCRCOEFFICIENTS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1092fe37 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasYCbCrPositioning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, YCBCRPOSITIONING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1092fe37 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasYCbCrPositioning() {
		return Base.has(this.model, this.getResource(), YCBCRPOSITIONING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1092fe37 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasYCbCrPositioning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, YCBCRPOSITIONING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1092fe37 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasYCbCrPositioning( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), YCBCRPOSITIONING);
	}

     /**
     * Get all values of property YCbCrPositioning as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllYCbCrPositioning_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, YCBCRPOSITIONING);
	}
	
    /**
     * Get all values of property YCbCrPositioning as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllYCbCrPositioning_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, YCBCRPOSITIONING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property YCbCrPositioning as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllYCbCrPositioning_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), YCBCRPOSITIONING);
	}

    /**
     * Get all values of property YCbCrPositioning as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllYCbCrPositioning_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), YCBCRPOSITIONING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property YCbCrPositioning     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllYCbCrPositioning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, YCBCRPOSITIONING, java.lang.String.class);
	}
	
    /**
     * Get all values of property YCbCrPositioning as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllYCbCrPositioning_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, YCBCRPOSITIONING, java.lang.String.class);
	}

    /**
     * Get all values of property YCbCrPositioning     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllYCbCrPositioning() {
		return Base.getAll(this.model, this.getResource(), YCBCRPOSITIONING, java.lang.String.class);
	}

    /**
     * Get all values of property YCbCrPositioning as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllYCbCrPositioning_as() {
		return Base.getAll_as(this.model, this.getResource(), YCBCRPOSITIONING, java.lang.String.class);
	}
 
    /**
     * Adds a value to property YCbCrPositioning as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addYCbCrPositioning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, YCBCRPOSITIONING, value);
	}
	
    /**
     * Adds a value to property YCbCrPositioning as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addYCbCrPositioning( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), YCBCRPOSITIONING, value);
	}
    /**
     * Adds a value to property YCbCrPositioning from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addYCbCrPositioning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, YCBCRPOSITIONING, value);
	}
	
    /**
     * Adds a value to property YCbCrPositioning from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addYCbCrPositioning(java.lang.String value) {
		Base.add(this.model, this.getResource(), YCBCRPOSITIONING, value);
	}
  

    /**
     * Sets a value of property YCbCrPositioning from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setYCbCrPositioning( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, YCBCRPOSITIONING, value);
	}
	
    /**
     * Sets a value of property YCbCrPositioning from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setYCbCrPositioning( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), YCBCRPOSITIONING, value);
	}
    /**
     * Sets a value of property YCbCrPositioning from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setYCbCrPositioning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, YCBCRPOSITIONING, value);
	}
	
    /**
     * Sets a value of property YCbCrPositioning from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setYCbCrPositioning(java.lang.String value) {
		Base.set(this.model, this.getResource(), YCBCRPOSITIONING, value);
	}
  


    /**
     * Removes a value of property YCbCrPositioning as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeYCbCrPositioning( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, YCBCRPOSITIONING, value);
	}
	
    /**
     * Removes a value of property YCbCrPositioning as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeYCbCrPositioning( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), YCBCRPOSITIONING, value);
	}
    /**
     * Removes a value of property YCbCrPositioning given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeYCbCrPositioning(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, YCBCRPOSITIONING, value);
	}
	
    /**
     * Removes a value of property YCbCrPositioning given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeYCbCrPositioning(java.lang.String value) {
		Base.remove(this.model, this.getResource(), YCBCRPOSITIONING, value);
	}
  
    /**
     * Removes all values of property YCbCrPositioning     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllYCbCrPositioning( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, YCBCRPOSITIONING);
	}
	
    /**
     * Removes all values of property YCbCrPositioning	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllYCbCrPositioning() {
		Base.removeAll(this.model, this.getResource(), YCBCRPOSITIONING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5df28026 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasYCbCrSubSampling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, YCBCRSUBSAMPLING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5df28026 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasYCbCrSubSampling() {
		return Base.has(this.model, this.getResource(), YCBCRSUBSAMPLING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5df28026 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasYCbCrSubSampling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, YCBCRSUBSAMPLING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5df28026 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasYCbCrSubSampling( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), YCBCRSUBSAMPLING);
	}

     /**
     * Get all values of property YCbCrSubSampling as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllYCbCrSubSampling_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, YCBCRSUBSAMPLING);
	}
	
    /**
     * Get all values of property YCbCrSubSampling as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllYCbCrSubSampling_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, YCBCRSUBSAMPLING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property YCbCrSubSampling as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllYCbCrSubSampling_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), YCBCRSUBSAMPLING);
	}

    /**
     * Get all values of property YCbCrSubSampling as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllYCbCrSubSampling_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), YCBCRSUBSAMPLING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property YCbCrSubSampling     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllYCbCrSubSampling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, YCBCRSUBSAMPLING, java.lang.String.class);
	}
	
    /**
     * Get all values of property YCbCrSubSampling as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllYCbCrSubSampling_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, YCBCRSUBSAMPLING, java.lang.String.class);
	}

    /**
     * Get all values of property YCbCrSubSampling     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllYCbCrSubSampling() {
		return Base.getAll(this.model, this.getResource(), YCBCRSUBSAMPLING, java.lang.String.class);
	}

    /**
     * Get all values of property YCbCrSubSampling as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllYCbCrSubSampling_as() {
		return Base.getAll_as(this.model, this.getResource(), YCBCRSUBSAMPLING, java.lang.String.class);
	}
 
    /**
     * Adds a value to property YCbCrSubSampling as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addYCbCrSubSampling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, YCBCRSUBSAMPLING, value);
	}
	
    /**
     * Adds a value to property YCbCrSubSampling as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addYCbCrSubSampling( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), YCBCRSUBSAMPLING, value);
	}
    /**
     * Adds a value to property YCbCrSubSampling from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addYCbCrSubSampling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, YCBCRSUBSAMPLING, value);
	}
	
    /**
     * Adds a value to property YCbCrSubSampling from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addYCbCrSubSampling(java.lang.String value) {
		Base.add(this.model, this.getResource(), YCBCRSUBSAMPLING, value);
	}
  

    /**
     * Sets a value of property YCbCrSubSampling from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setYCbCrSubSampling( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, YCBCRSUBSAMPLING, value);
	}
	
    /**
     * Sets a value of property YCbCrSubSampling from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setYCbCrSubSampling( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), YCBCRSUBSAMPLING, value);
	}
    /**
     * Sets a value of property YCbCrSubSampling from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setYCbCrSubSampling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, YCBCRSUBSAMPLING, value);
	}
	
    /**
     * Sets a value of property YCbCrSubSampling from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setYCbCrSubSampling(java.lang.String value) {
		Base.set(this.model, this.getResource(), YCBCRSUBSAMPLING, value);
	}
  


    /**
     * Removes a value of property YCbCrSubSampling as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeYCbCrSubSampling( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, YCBCRSUBSAMPLING, value);
	}
	
    /**
     * Removes a value of property YCbCrSubSampling as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeYCbCrSubSampling( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), YCBCRSUBSAMPLING, value);
	}
    /**
     * Removes a value of property YCbCrSubSampling given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeYCbCrSubSampling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, YCBCRSUBSAMPLING, value);
	}
	
    /**
     * Removes a value of property YCbCrSubSampling given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeYCbCrSubSampling(java.lang.String value) {
		Base.remove(this.model, this.getResource(), YCBCRSUBSAMPLING, value);
	}
  
    /**
     * Removes all values of property YCbCrSubSampling     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllYCbCrSubSampling( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, YCBCRSUBSAMPLING);
	}
	
    /**
     * Removes all values of property YCbCrSubSampling	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllYCbCrSubSampling() {
		Base.removeAll(this.model, this.getResource(), YCBCRSUBSAMPLING);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1209739c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, YRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1209739c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasYResolution() {
		return Base.has(this.model, this.getResource(), YRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1209739c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, YRESOLUTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1209739c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasYResolution( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), YRESOLUTION);
	}

     /**
     * Get all values of property YResolution as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllYResolution_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, YRESOLUTION);
	}
	
    /**
     * Get all values of property YResolution as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllYResolution_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, YRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property YResolution as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllYResolution_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), YRESOLUTION);
	}

    /**
     * Get all values of property YResolution as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllYResolution_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), YRESOLUTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property YResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, YRESOLUTION, java.lang.Float.class);
	}
	
    /**
     * Get all values of property YResolution as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllYResolution_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, YRESOLUTION, java.lang.Float.class);
	}

    /**
     * Get all values of property YResolution     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllYResolution() {
		return Base.getAll(this.model, this.getResource(), YRESOLUTION, java.lang.Float.class);
	}

    /**
     * Get all values of property YResolution as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllYResolution_as() {
		return Base.getAll_as(this.model, this.getResource(), YRESOLUTION, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property YResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, YRESOLUTION, value);
	}
	
    /**
     * Adds a value to property YResolution as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addYResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), YRESOLUTION, value);
	}
    /**
     * Adds a value to property YResolution from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, YRESOLUTION, value);
	}
	
    /**
     * Adds a value to property YResolution from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addYResolution(java.lang.Float value) {
		Base.add(this.model, this.getResource(), YRESOLUTION, value);
	}
  

    /**
     * Sets a value of property YResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setYResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, YRESOLUTION, value);
	}
	
    /**
     * Sets a value of property YResolution from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setYResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), YRESOLUTION, value);
	}
    /**
     * Sets a value of property YResolution from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, YRESOLUTION, value);
	}
	
    /**
     * Sets a value of property YResolution from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setYResolution(java.lang.Float value) {
		Base.set(this.model, this.getResource(), YRESOLUTION, value);
	}
  


    /**
     * Removes a value of property YResolution as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeYResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, YRESOLUTION, value);
	}
	
    /**
     * Removes a value of property YResolution as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeYResolution( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), YRESOLUTION, value);
	}
    /**
     * Removes a value of property YResolution given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeYResolution(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, YRESOLUTION, value);
	}
	
    /**
     * Removes a value of property YResolution given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeYResolution(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), YRESOLUTION, value);
	}
  
    /**
     * Removes all values of property YResolution     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllYResolution( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, YRESOLUTION);
	}
	
    /**
     * Removes all values of property YResolution	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllYResolution() {
		Base.removeAll(this.model, this.getResource(), YRESOLUTION);
	}
 }