/*
* Copyright 2013 by the digital.me project (http://www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.tmo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> ReceiveDateTime </li>
 *   <li> SendDateTime </li>
 *   <li> TransmissionFrom </li>
 *   <li> TransmissionState </li>
 *   <li> TransmissionTask </li>
 *   <li> TransmissionTo </li>
 *   <li> TransmissionType </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class TaskTransmission extends eu.dime.ps.semantic.model.RDFReactorThing {

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#TaskTransmission */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#TaskTransmission", false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#receiveDateTime */
    @SuppressWarnings("hiding")
	public static final URI RECEIVEDATETIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#receiveDateTime",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#sendDateTime */
    @SuppressWarnings("hiding")
	public static final URI SENDDATETIME = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#sendDateTime",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#transmissionFrom */
    @SuppressWarnings("hiding")
	public static final URI TRANSMISSIONFROM = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#transmissionFrom",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#transmissionState */
    @SuppressWarnings("hiding")
	public static final URI TRANSMISSIONSTATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#transmissionState",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#transmissionTask */
    @SuppressWarnings("hiding")
	public static final URI TRANSMISSIONTASK = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#transmissionTask",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#transmissionTo */
    @SuppressWarnings("hiding")
	public static final URI TRANSMISSIONTO = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#transmissionTo",false);

    /** http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#transmissionType */
    @SuppressWarnings("hiding")
	public static final URI TRANSMISSIONTYPE = new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#transmissionType",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#receiveDateTime",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#sendDateTime",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#transmissionFrom",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#transmissionState",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#transmissionTask",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#transmissionTo",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#transmissionType",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected TaskTransmission (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public TaskTransmission (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public TaskTransmission (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public TaskTransmission (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public TaskTransmission (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of TaskTransmission  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static TaskTransmission  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, TaskTransmission.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2008/05/20/tmo#TaskTransmission).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends TaskTransmission> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, TaskTransmission.class );
	}

    /**
	 * Remove rdf:type TaskTransmission from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TaskTransmission' to this TaskTransmission instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTaskTransmission_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.tmo.Task.TASKTRANSMISSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TaskTransmission' to this TaskTransmission instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTaskTransmission_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.tmo.Task.TASKTRANSMISSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TaskTransmission' to this TaskTransmission instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTaskTransmission_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.tmo.Task.TASKTRANSMISSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2671a0b8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasReceiveDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RECEIVEDATETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2671a0b8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasReceiveDateTime() {
		return Base.has(this.model, this.getResource(), RECEIVEDATETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2671a0b8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasReceiveDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RECEIVEDATETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2671a0b8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasReceiveDateTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RECEIVEDATETIME);
	}

    /**
     * Get single value of property ReceiveDateTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getReceiveDateTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, RECEIVEDATETIME);
	}
	
    /**
     * Get single value of property ReceiveDateTime as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getReceiveDateTime_asNode() {
		return Base.get_asNode(this.model, this.getResource(), RECEIVEDATETIME);
	}
     /**
     * Get single value of property ReceiveDateTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getReceiveDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, RECEIVEDATETIME, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property ReceiveDateTime  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getReceiveDateTime() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), RECEIVEDATETIME, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property ReceiveDateTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addReceiveDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, RECEIVEDATETIME, value, 1);
	}
	
    /**
     * Adds a value to property ReceiveDateTime as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addReceiveDateTime( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), RECEIVEDATETIME, value, 1);
	}
    /**
     * Adds a value to property ReceiveDateTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addReceiveDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, RECEIVEDATETIME, value, 1);
	}
	
    /**
     * Adds a value to property ReceiveDateTime from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addReceiveDateTime(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), RECEIVEDATETIME, value, 1);
	}
 
 

    /**
     * Sets a value of property ReceiveDateTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setReceiveDateTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RECEIVEDATETIME, value);
	}
	
    /**
     * Sets a value of property ReceiveDateTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setReceiveDateTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RECEIVEDATETIME, value);
	}
    /**
     * Sets a value of property ReceiveDateTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setReceiveDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, RECEIVEDATETIME, value);
	}
	
    /**
     * Sets a value of property ReceiveDateTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setReceiveDateTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), RECEIVEDATETIME, value);
	}
  


    /**
     * Removes a value of property ReceiveDateTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeReceiveDateTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RECEIVEDATETIME, value);
	}
	
    /**
     * Removes a value of property ReceiveDateTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeReceiveDateTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RECEIVEDATETIME, value);
	}
    /**
     * Removes a value of property ReceiveDateTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeReceiveDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, RECEIVEDATETIME, value);
	}
	
    /**
     * Removes a value of property ReceiveDateTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeReceiveDateTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), RECEIVEDATETIME, value);
	}
  
    /**
     * Removes all values of property ReceiveDateTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllReceiveDateTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RECEIVEDATETIME);
	}
	
    /**
     * Removes all values of property ReceiveDateTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllReceiveDateTime() {
		Base.removeAll(this.model, this.getResource(), RECEIVEDATETIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@720d058d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSendDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SENDDATETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@720d058d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSendDateTime() {
		return Base.has(this.model, this.getResource(), SENDDATETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@720d058d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSendDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SENDDATETIME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@720d058d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSendDateTime( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SENDDATETIME);
	}

    /**
     * Get single value of property SendDateTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getSendDateTime_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, SENDDATETIME);
	}
	
    /**
     * Get single value of property SendDateTime as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getSendDateTime_asNode() {
		return Base.get_asNode(this.model, this.getResource(), SENDDATETIME);
	}
     /**
     * Get single value of property SendDateTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getSendDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, SENDDATETIME, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property SendDateTime  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getSendDateTime() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), SENDDATETIME, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property SendDateTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addSendDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, SENDDATETIME, value, 1);
	}
	
    /**
     * Adds a value to property SendDateTime as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addSendDateTime( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SENDDATETIME, value, 1);
	}
    /**
     * Adds a value to property SendDateTime from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addSendDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, SENDDATETIME, value, 1);
	}
	
    /**
     * Adds a value to property SendDateTime from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addSendDateTime(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SENDDATETIME, value, 1);
	}
 
 

    /**
     * Sets a value of property SendDateTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSendDateTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SENDDATETIME, value);
	}
	
    /**
     * Sets a value of property SendDateTime from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSendDateTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SENDDATETIME, value);
	}
    /**
     * Sets a value of property SendDateTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSendDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, SENDDATETIME, value);
	}
	
    /**
     * Sets a value of property SendDateTime from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSendDateTime(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), SENDDATETIME, value);
	}
  


    /**
     * Removes a value of property SendDateTime as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSendDateTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SENDDATETIME, value);
	}
	
    /**
     * Removes a value of property SendDateTime as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSendDateTime( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SENDDATETIME, value);
	}
    /**
     * Removes a value of property SendDateTime given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSendDateTime(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, SENDDATETIME, value);
	}
	
    /**
     * Removes a value of property SendDateTime given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSendDateTime(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), SENDDATETIME, value);
	}
  
    /**
     * Removes all values of property SendDateTime     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSendDateTime( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SENDDATETIME);
	}
	
    /**
     * Removes all values of property SendDateTime	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSendDateTime() {
		Base.removeAll(this.model, this.getResource(), SENDDATETIME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f309962 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTransmissionFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TRANSMISSIONFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f309962 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTransmissionFrom() {
		return Base.has(this.model, this.getResource(), TRANSMISSIONFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f309962 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTransmissionFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TRANSMISSIONFROM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f309962 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTransmissionFrom( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TRANSMISSIONFROM);
	}

    /**
     * Get single value of property TransmissionFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTransmissionFrom_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TRANSMISSIONFROM);
	}
	
    /**
     * Get single value of property TransmissionFrom as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTransmissionFrom_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TRANSMISSIONFROM);
	}
     /**
     * Get single value of property TransmissionFrom     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.pimo.Person getTransmissionFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.pimo.Person) Base.get(model, instanceResource, TRANSMISSIONFROM, eu.dime.ps.semantic.model.pimo.Person.class);
	}
	
    /**
     * Get single value of property TransmissionFrom  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.pimo.Person getTransmissionFrom() {
		return (eu.dime.ps.semantic.model.pimo.Person) Base.get(this.model, this.getResource(), TRANSMISSIONFROM, eu.dime.ps.semantic.model.pimo.Person.class);
	}
  
    /**
     * Adds a value to property TransmissionFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTransmissionFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TRANSMISSIONFROM, value, 1);
	}
	
    /**
     * Adds a value to property TransmissionFrom as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTransmissionFrom( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRANSMISSIONFROM, value, 1);
	}
    /**
     * Adds a value to property TransmissionFrom from an instance of Person 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTransmissionFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Person value)
    throws CardinalityException {
		Base.add(model, instanceResource, TRANSMISSIONFROM, value, 1);
	}
	
    /**
     * Adds a value to property TransmissionFrom from an instance of Person 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTransmissionFrom(eu.dime.ps.semantic.model.pimo.Person value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRANSMISSIONFROM, value, 1);
	}
 
 

    /**
     * Sets a value of property TransmissionFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTransmissionFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TRANSMISSIONFROM, value);
	}
	
    /**
     * Sets a value of property TransmissionFrom from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTransmissionFrom( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TRANSMISSIONFROM, value);
	}
    /**
     * Sets a value of property TransmissionFrom from an instance of Person 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTransmissionFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Person value) {
		Base.set(model, instanceResource, TRANSMISSIONFROM, value);
	}
	
    /**
     * Sets a value of property TransmissionFrom from an instance of Person 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTransmissionFrom(eu.dime.ps.semantic.model.pimo.Person value) {
		Base.set(this.model, this.getResource(), TRANSMISSIONFROM, value);
	}
  


    /**
     * Removes a value of property TransmissionFrom as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove5static] 
     */
	public static void removeTransmissionFrom( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(model, instanceResource, TRANSMISSIONFROM, value, 1);
	}
	
    /**
     * Removes a value of property TransmissionFrom as an RDF2Go node 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove6dynamic] 
     */
	public void removeTransmissionFrom( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), TRANSMISSIONFROM, value, 1);
	}
    /**
     * Removes a value of property TransmissionFrom from an instance of Person 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove7static] 
     */
	public static void removeTransmissionFrom(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Person value)
    throws CardinalityException {
		Base.remove(model, instanceResource, TRANSMISSIONFROM, value, 1);
	}
	
    /**
     * Removes a value of property TransmissionFrom from an instance of Person 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove8dynamic] 
     */
	public void removeTransmissionFrom(eu.dime.ps.semantic.model.pimo.Person value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), TRANSMISSIONFROM, value, 1);
	}
 
      /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44a0001 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTransmissionState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TRANSMISSIONSTATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44a0001 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTransmissionState() {
		return Base.has(this.model, this.getResource(), TRANSMISSIONSTATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44a0001 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTransmissionState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TRANSMISSIONSTATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@44a0001 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTransmissionState( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TRANSMISSIONSTATE);
	}

    /**
     * Get single value of property TransmissionState as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTransmissionState_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TRANSMISSIONSTATE);
	}
	
    /**
     * Get single value of property TransmissionState as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTransmissionState_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TRANSMISSIONSTATE);
	}
     /**
     * Get single value of property TransmissionState     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.tmo.TransmissionState getTransmissionState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.tmo.TransmissionState) Base.get(model, instanceResource, TRANSMISSIONSTATE, eu.dime.ps.semantic.model.tmo.TransmissionState.class);
	}
	
    /**
     * Get single value of property TransmissionState  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.tmo.TransmissionState getTransmissionState() {
		return (eu.dime.ps.semantic.model.tmo.TransmissionState) Base.get(this.model, this.getResource(), TRANSMISSIONSTATE, eu.dime.ps.semantic.model.tmo.TransmissionState.class);
	}
  
    /**
     * Adds a value to property TransmissionState as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTransmissionState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TRANSMISSIONSTATE, value, 1);
	}
	
    /**
     * Adds a value to property TransmissionState as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTransmissionState( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRANSMISSIONSTATE, value, 1);
	}
    /**
     * Adds a value to property TransmissionState from an instance of TransmissionState 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTransmissionState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TransmissionState value)
    throws CardinalityException {
		Base.add(model, instanceResource, TRANSMISSIONSTATE, value, 1);
	}
	
    /**
     * Adds a value to property TransmissionState from an instance of TransmissionState 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTransmissionState(eu.dime.ps.semantic.model.tmo.TransmissionState value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRANSMISSIONSTATE, value, 1);
	}
 
 

    /**
     * Sets a value of property TransmissionState from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTransmissionState( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TRANSMISSIONSTATE, value);
	}
	
    /**
     * Sets a value of property TransmissionState from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTransmissionState( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TRANSMISSIONSTATE, value);
	}
    /**
     * Sets a value of property TransmissionState from an instance of TransmissionState 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTransmissionState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TransmissionState value) {
		Base.set(model, instanceResource, TRANSMISSIONSTATE, value);
	}
	
    /**
     * Sets a value of property TransmissionState from an instance of TransmissionState 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTransmissionState(eu.dime.ps.semantic.model.tmo.TransmissionState value) {
		Base.set(this.model, this.getResource(), TRANSMISSIONSTATE, value);
	}
  


    /**
     * Removes a value of property TransmissionState as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove5static] 
     */
	public static void removeTransmissionState( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(model, instanceResource, TRANSMISSIONSTATE, value, 1);
	}
	
    /**
     * Removes a value of property TransmissionState as an RDF2Go node 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove6dynamic] 
     */
	public void removeTransmissionState( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), TRANSMISSIONSTATE, value, 1);
	}
    /**
     * Removes a value of property TransmissionState from an instance of TransmissionState 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove7static] 
     */
	public static void removeTransmissionState(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TransmissionState value)
    throws CardinalityException {
		Base.remove(model, instanceResource, TRANSMISSIONSTATE, value, 1);
	}
	
    /**
     * Removes a value of property TransmissionState from an instance of TransmissionState 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove8dynamic] 
     */
	public void removeTransmissionState(eu.dime.ps.semantic.model.tmo.TransmissionState value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), TRANSMISSIONSTATE, value, 1);
	}
 
      /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a123ad4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTransmissionTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TRANSMISSIONTASK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a123ad4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTransmissionTask() {
		return Base.has(this.model, this.getResource(), TRANSMISSIONTASK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a123ad4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTransmissionTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TRANSMISSIONTASK);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4a123ad4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTransmissionTask( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TRANSMISSIONTASK);
	}

    /**
     * Get single value of property TransmissionTask as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTransmissionTask_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TRANSMISSIONTASK);
	}
	
    /**
     * Get single value of property TransmissionTask as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTransmissionTask_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TRANSMISSIONTASK);
	}
     /**
     * Get single value of property TransmissionTask     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.tmo.Task getTransmissionTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.tmo.Task) Base.get(model, instanceResource, TRANSMISSIONTASK, eu.dime.ps.semantic.model.tmo.Task.class);
	}
	
    /**
     * Get single value of property TransmissionTask  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.tmo.Task getTransmissionTask() {
		return (eu.dime.ps.semantic.model.tmo.Task) Base.get(this.model, this.getResource(), TRANSMISSIONTASK, eu.dime.ps.semantic.model.tmo.Task.class);
	}
  
    /**
     * Adds a value to property TransmissionTask as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTransmissionTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TRANSMISSIONTASK, value, 1);
	}
	
    /**
     * Adds a value to property TransmissionTask as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTransmissionTask( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRANSMISSIONTASK, value, 1);
	}
    /**
     * Adds a value to property TransmissionTask from an instance of Task 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTransmissionTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Task value)
    throws CardinalityException {
		Base.add(model, instanceResource, TRANSMISSIONTASK, value, 1);
	}
	
    /**
     * Adds a value to property TransmissionTask from an instance of Task 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTransmissionTask(eu.dime.ps.semantic.model.tmo.Task value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRANSMISSIONTASK, value, 1);
	}
 
 

    /**
     * Sets a value of property TransmissionTask from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTransmissionTask( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TRANSMISSIONTASK, value);
	}
	
    /**
     * Sets a value of property TransmissionTask from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTransmissionTask( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TRANSMISSIONTASK, value);
	}
    /**
     * Sets a value of property TransmissionTask from an instance of Task 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTransmissionTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Task value) {
		Base.set(model, instanceResource, TRANSMISSIONTASK, value);
	}
	
    /**
     * Sets a value of property TransmissionTask from an instance of Task 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTransmissionTask(eu.dime.ps.semantic.model.tmo.Task value) {
		Base.set(this.model, this.getResource(), TRANSMISSIONTASK, value);
	}
  


    /**
     * Removes a value of property TransmissionTask as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove5static] 
     */
	public static void removeTransmissionTask( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(model, instanceResource, TRANSMISSIONTASK, value, 1);
	}
	
    /**
     * Removes a value of property TransmissionTask as an RDF2Go node 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove6dynamic] 
     */
	public void removeTransmissionTask( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), TRANSMISSIONTASK, value, 1);
	}
    /**
     * Removes a value of property TransmissionTask from an instance of Task 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove7static] 
     */
	public static void removeTransmissionTask(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.Task value)
    throws CardinalityException {
		Base.remove(model, instanceResource, TRANSMISSIONTASK, value, 1);
	}
	
    /**
     * Removes a value of property TransmissionTask from an instance of Task 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove8dynamic] 
     */
	public void removeTransmissionTask(eu.dime.ps.semantic.model.tmo.Task value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), TRANSMISSIONTASK, value, 1);
	}
 
      /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56f0631 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTransmissionTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TRANSMISSIONTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56f0631 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTransmissionTo() {
		return Base.has(this.model, this.getResource(), TRANSMISSIONTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56f0631 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTransmissionTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TRANSMISSIONTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@56f0631 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTransmissionTo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TRANSMISSIONTO);
	}

    /**
     * Get single value of property TransmissionTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTransmissionTo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TRANSMISSIONTO);
	}
	
    /**
     * Get single value of property TransmissionTo as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTransmissionTo_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TRANSMISSIONTO);
	}
     /**
     * Get single value of property TransmissionTo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.pimo.Person getTransmissionTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.pimo.Person) Base.get(model, instanceResource, TRANSMISSIONTO, eu.dime.ps.semantic.model.pimo.Person.class);
	}
	
    /**
     * Get single value of property TransmissionTo  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.pimo.Person getTransmissionTo() {
		return (eu.dime.ps.semantic.model.pimo.Person) Base.get(this.model, this.getResource(), TRANSMISSIONTO, eu.dime.ps.semantic.model.pimo.Person.class);
	}
  
    /**
     * Adds a value to property TransmissionTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTransmissionTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TRANSMISSIONTO, value, 1);
	}
	
    /**
     * Adds a value to property TransmissionTo as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTransmissionTo( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRANSMISSIONTO, value, 1);
	}
    /**
     * Adds a value to property TransmissionTo from an instance of Person 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTransmissionTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Person value)
    throws CardinalityException {
		Base.add(model, instanceResource, TRANSMISSIONTO, value, 1);
	}
	
    /**
     * Adds a value to property TransmissionTo from an instance of Person 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTransmissionTo(eu.dime.ps.semantic.model.pimo.Person value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRANSMISSIONTO, value, 1);
	}
 
 

    /**
     * Sets a value of property TransmissionTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTransmissionTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TRANSMISSIONTO, value);
	}
	
    /**
     * Sets a value of property TransmissionTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTransmissionTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TRANSMISSIONTO, value);
	}
    /**
     * Sets a value of property TransmissionTo from an instance of Person 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTransmissionTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Person value) {
		Base.set(model, instanceResource, TRANSMISSIONTO, value);
	}
	
    /**
     * Sets a value of property TransmissionTo from an instance of Person 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTransmissionTo(eu.dime.ps.semantic.model.pimo.Person value) {
		Base.set(this.model, this.getResource(), TRANSMISSIONTO, value);
	}
  


    /**
     * Removes a value of property TransmissionTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove5static] 
     */
	public static void removeTransmissionTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(model, instanceResource, TRANSMISSIONTO, value, 1);
	}
	
    /**
     * Removes a value of property TransmissionTo as an RDF2Go node 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove6dynamic] 
     */
	public void removeTransmissionTo( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), TRANSMISSIONTO, value, 1);
	}
    /**
     * Removes a value of property TransmissionTo from an instance of Person 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove7static] 
     */
	public static void removeTransmissionTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.pimo.Person value)
    throws CardinalityException {
		Base.remove(model, instanceResource, TRANSMISSIONTO, value, 1);
	}
	
    /**
     * Removes a value of property TransmissionTo from an instance of Person 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove8dynamic] 
     */
	public void removeTransmissionTo(eu.dime.ps.semantic.model.pimo.Person value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), TRANSMISSIONTO, value, 1);
	}
 
      /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e2cd56d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTransmissionType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TRANSMISSIONTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e2cd56d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTransmissionType() {
		return Base.has(this.model, this.getResource(), TRANSMISSIONTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e2cd56d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTransmissionType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TRANSMISSIONTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1e2cd56d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTransmissionType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TRANSMISSIONTYPE);
	}

    /**
     * Get single value of property TransmissionType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTransmissionType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TRANSMISSIONTYPE);
	}
	
    /**
     * Get single value of property TransmissionType as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTransmissionType_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TRANSMISSIONTYPE);
	}
     /**
     * Get single value of property TransmissionType     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.tmo.TransmissionType getTransmissionType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.tmo.TransmissionType) Base.get(model, instanceResource, TRANSMISSIONTYPE, eu.dime.ps.semantic.model.tmo.TransmissionType.class);
	}
	
    /**
     * Get single value of property TransmissionType  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.tmo.TransmissionType getTransmissionType() {
		return (eu.dime.ps.semantic.model.tmo.TransmissionType) Base.get(this.model, this.getResource(), TRANSMISSIONTYPE, eu.dime.ps.semantic.model.tmo.TransmissionType.class);
	}
  
    /**
     * Adds a value to property TransmissionType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTransmissionType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TRANSMISSIONTYPE, value, 1);
	}
	
    /**
     * Adds a value to property TransmissionType as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTransmissionType( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRANSMISSIONTYPE, value, 1);
	}
    /**
     * Adds a value to property TransmissionType from an instance of TransmissionType 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTransmissionType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TransmissionType value)
    throws CardinalityException {
		Base.add(model, instanceResource, TRANSMISSIONTYPE, value, 1);
	}
	
    /**
     * Adds a value to property TransmissionType from an instance of TransmissionType 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTransmissionType(eu.dime.ps.semantic.model.tmo.TransmissionType value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRANSMISSIONTYPE, value, 1);
	}
 
 

    /**
     * Sets a value of property TransmissionType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTransmissionType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TRANSMISSIONTYPE, value);
	}
	
    /**
     * Sets a value of property TransmissionType from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTransmissionType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TRANSMISSIONTYPE, value);
	}
    /**
     * Sets a value of property TransmissionType from an instance of TransmissionType 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTransmissionType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TransmissionType value) {
		Base.set(model, instanceResource, TRANSMISSIONTYPE, value);
	}
	
    /**
     * Sets a value of property TransmissionType from an instance of TransmissionType 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTransmissionType(eu.dime.ps.semantic.model.tmo.TransmissionType value) {
		Base.set(this.model, this.getResource(), TRANSMISSIONTYPE, value);
	}
  


    /**
     * Removes a value of property TransmissionType as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove5static] 
     */
	public static void removeTransmissionType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(model, instanceResource, TRANSMISSIONTYPE, value, 1);
	}
	
    /**
     * Removes a value of property TransmissionType as an RDF2Go node 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove6dynamic] 
     */
	public void removeTransmissionType( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), TRANSMISSIONTYPE, value, 1);
	}
    /**
     * Removes a value of property TransmissionType from an instance of TransmissionType 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove7static] 
     */
	public static void removeTransmissionType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.tmo.TransmissionType value)
    throws CardinalityException {
		Base.remove(model, instanceResource, TRANSMISSIONTYPE, value, 1);
	}
	
    /**
     * Removes a value of property TransmissionType from an instance of TransmissionType 
	 * @param value the value to be removed
	 * @throws CardinalityException if removing a value would bring the number 
	 *            of property values below the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #remove8dynamic] 
     */
	public void removeTransmissionType(eu.dime.ps.semantic.model.tmo.TransmissionType value) 
    throws CardinalityException {
		Base.remove(this.model, this.getResource(), TRANSMISSIONTYPE, value, 1);
	}
 
  }