package eu.dime.ps.semantic.model.ncal;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Attach </li>
 *   <li> DescriptionAltRep </li>
 *   <li> NcalDescription </li>
 *   <li> Summary </li>
 *   <li> SummaryAltRep </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class UnionOfAlarmEventJournalTodo extends eu.dime.ps.semantic.model.ncal.UnionParentClass {

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#UnionOfAlarmEventJournalTodo */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#UnionOfAlarmEventJournalTodo", false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#attach */
    @SuppressWarnings("hiding")
	public static final URI ATTACH = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#attach",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#descriptionAltRep */
    @SuppressWarnings("hiding")
	public static final URI DESCRIPTIONALTREP = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#descriptionAltRep",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#description */
    @SuppressWarnings("hiding")
	public static final URI NCALDESCRIPTION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#description",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#summary */
    @SuppressWarnings("hiding")
	public static final URI SUMMARY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#summary",false);

    /** http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#summaryAltRep */
    @SuppressWarnings("hiding")
	public static final URI SUMMARYALTREP = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#summaryAltRep",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#attach",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#descriptionAltRep",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#description",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#summary",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#summaryAltRep",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected UnionOfAlarmEventJournalTodo (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public UnionOfAlarmEventJournalTodo (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public UnionOfAlarmEventJournalTodo (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public UnionOfAlarmEventJournalTodo (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public UnionOfAlarmEventJournalTodo (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of UnionOfAlarmEventJournalTodo  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static UnionOfAlarmEventJournalTodo  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, UnionOfAlarmEventJournalTodo.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#UnionOfAlarmEventJournalTodo).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends UnionOfAlarmEventJournalTodo> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, UnionOfAlarmEventJournalTodo.class );
	}

    /**
	 * Remove rdf:type UnionOfAlarmEventJournalTodo from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@294d1a3a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAttach(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ATTACH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@294d1a3a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAttach() {
		return Base.has(this.model, this.getResource(), ATTACH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@294d1a3a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAttach(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ATTACH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@294d1a3a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAttach( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ATTACH);
	}

     /**
     * Get all values of property Attach as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAttach_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ATTACH);
	}
	
    /**
     * Get all values of property Attach as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAttach_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATTACH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Attach as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAttach_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ATTACH);
	}

    /**
     * Get all values of property Attach as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAttach_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ATTACH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Attach     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.ncal.Attachment> getAllAttach(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ATTACH, eu.dime.ps.semantic.model.ncal.Attachment.class);
	}
	
    /**
     * Get all values of property Attach as a ReactorResult of Attachment 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.ncal.Attachment> getAllAttach_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATTACH, eu.dime.ps.semantic.model.ncal.Attachment.class);
	}

    /**
     * Get all values of property Attach     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.ncal.Attachment> getAllAttach() {
		return Base.getAll(this.model, this.getResource(), ATTACH, eu.dime.ps.semantic.model.ncal.Attachment.class);
	}

    /**
     * Get all values of property Attach as a ReactorResult of Attachment 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.ncal.Attachment> getAllAttach_as() {
		return Base.getAll_as(this.model, this.getResource(), ATTACH, eu.dime.ps.semantic.model.ncal.Attachment.class);
	}
 
    /**
     * Adds a value to property Attach as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAttach(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ATTACH, value);
	}
	
    /**
     * Adds a value to property Attach as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAttach( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ATTACH, value);
	}
    /**
     * Adds a value to property Attach from an instance of Attachment 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAttach(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.Attachment value) {
		Base.add(model, instanceResource, ATTACH, value);
	}
	
    /**
     * Adds a value to property Attach from an instance of Attachment 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAttach(eu.dime.ps.semantic.model.ncal.Attachment value) {
		Base.add(this.model, this.getResource(), ATTACH, value);
	}
  

    /**
     * Sets a value of property Attach from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAttach( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ATTACH, value);
	}
	
    /**
     * Sets a value of property Attach from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAttach( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ATTACH, value);
	}
    /**
     * Sets a value of property Attach from an instance of Attachment 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAttach(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.Attachment value) {
		Base.set(model, instanceResource, ATTACH, value);
	}
	
    /**
     * Sets a value of property Attach from an instance of Attachment 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAttach(eu.dime.ps.semantic.model.ncal.Attachment value) {
		Base.set(this.model, this.getResource(), ATTACH, value);
	}
  


    /**
     * Removes a value of property Attach as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAttach( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ATTACH, value);
	}
	
    /**
     * Removes a value of property Attach as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAttach( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ATTACH, value);
	}
    /**
     * Removes a value of property Attach given as an instance of Attachment 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAttach(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ncal.Attachment value) {
		Base.remove(model, instanceResource, ATTACH, value);
	}
	
    /**
     * Removes a value of property Attach given as an instance of Attachment 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAttach(eu.dime.ps.semantic.model.ncal.Attachment value) {
		Base.remove(this.model, this.getResource(), ATTACH, value);
	}
  
    /**
     * Removes all values of property Attach     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAttach( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ATTACH);
	}
	
    /**
     * Removes all values of property Attach	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAttach() {
		Base.removeAll(this.model, this.getResource(), ATTACH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173941dd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasDescriptionAltRep(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DESCRIPTIONALTREP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173941dd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasDescriptionAltRep() {
		return Base.has(this.model, this.getResource(), DESCRIPTIONALTREP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173941dd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasDescriptionAltRep(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DESCRIPTIONALTREP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173941dd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasDescriptionAltRep( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DESCRIPTIONALTREP);
	}

     /**
     * Get all values of property DescriptionAltRep as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescriptionAltRep_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DESCRIPTIONALTREP);
	}
	
    /**
     * Get all values of property DescriptionAltRep as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDescriptionAltRep_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTIONALTREP, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DescriptionAltRep as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescriptionAltRep_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DESCRIPTIONALTREP);
	}

    /**
     * Get all values of property DescriptionAltRep as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDescriptionAltRep_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTIONALTREP, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DescriptionAltRep     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllDescriptionAltRep(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DESCRIPTIONALTREP, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property DescriptionAltRep as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllDescriptionAltRep_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTIONALTREP, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property DescriptionAltRep     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllDescriptionAltRep() {
		return Base.getAll(this.model, this.getResource(), DESCRIPTIONALTREP, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property DescriptionAltRep as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllDescriptionAltRep_as() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTIONALTREP, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property DescriptionAltRep as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addDescriptionAltRep(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DESCRIPTIONALTREP, value);
	}
	
    /**
     * Adds a value to property DescriptionAltRep as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addDescriptionAltRep( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DESCRIPTIONALTREP, value);
	}
    /**
     * Adds a value to property DescriptionAltRep from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addDescriptionAltRep(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, DESCRIPTIONALTREP, value);
	}
	
    /**
     * Adds a value to property DescriptionAltRep from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addDescriptionAltRep(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), DESCRIPTIONALTREP, value);
	}
  

    /**
     * Sets a value of property DescriptionAltRep from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setDescriptionAltRep( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DESCRIPTIONALTREP, value);
	}
	
    /**
     * Sets a value of property DescriptionAltRep from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setDescriptionAltRep( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DESCRIPTIONALTREP, value);
	}
    /**
     * Sets a value of property DescriptionAltRep from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setDescriptionAltRep(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, DESCRIPTIONALTREP, value);
	}
	
    /**
     * Sets a value of property DescriptionAltRep from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setDescriptionAltRep(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), DESCRIPTIONALTREP, value);
	}
  


    /**
     * Removes a value of property DescriptionAltRep as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeDescriptionAltRep( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DESCRIPTIONALTREP, value);
	}
	
    /**
     * Removes a value of property DescriptionAltRep as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeDescriptionAltRep( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DESCRIPTIONALTREP, value);
	}
    /**
     * Removes a value of property DescriptionAltRep given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeDescriptionAltRep(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, DESCRIPTIONALTREP, value);
	}
	
    /**
     * Removes a value of property DescriptionAltRep given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeDescriptionAltRep(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), DESCRIPTIONALTREP, value);
	}
  
    /**
     * Removes all values of property DescriptionAltRep     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllDescriptionAltRep( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DESCRIPTIONALTREP);
	}
	
    /**
     * Removes all values of property DescriptionAltRep	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllDescriptionAltRep() {
		Base.removeAll(this.model, this.getResource(), DESCRIPTIONALTREP);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3aa3c1a8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNcalDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NCALDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3aa3c1a8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNcalDescription() {
		return Base.has(this.model, this.getResource(), NCALDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3aa3c1a8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNcalDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NCALDESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3aa3c1a8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNcalDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NCALDESCRIPTION);
	}

     /**
     * Get all values of property NcalDescription as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNcalDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NCALDESCRIPTION);
	}
	
    /**
     * Get all values of property NcalDescription as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNcalDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NCALDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property NcalDescription as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNcalDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NCALDESCRIPTION);
	}

    /**
     * Get all values of property NcalDescription as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNcalDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NCALDESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property NcalDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllNcalDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NCALDESCRIPTION, java.lang.String.class);
	}
	
    /**
     * Get all values of property NcalDescription as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllNcalDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NCALDESCRIPTION, java.lang.String.class);
	}

    /**
     * Get all values of property NcalDescription     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllNcalDescription() {
		return Base.getAll(this.model, this.getResource(), NCALDESCRIPTION, java.lang.String.class);
	}

    /**
     * Get all values of property NcalDescription as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllNcalDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), NCALDESCRIPTION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property NcalDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNcalDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NCALDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property NcalDescription as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNcalDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NCALDESCRIPTION, value);
	}
    /**
     * Adds a value to property NcalDescription from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNcalDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NCALDESCRIPTION, value);
	}
	
    /**
     * Adds a value to property NcalDescription from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNcalDescription(java.lang.String value) {
		Base.add(this.model, this.getResource(), NCALDESCRIPTION, value);
	}
  

    /**
     * Sets a value of property NcalDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNcalDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NCALDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property NcalDescription from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNcalDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NCALDESCRIPTION, value);
	}
    /**
     * Sets a value of property NcalDescription from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNcalDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NCALDESCRIPTION, value);
	}
	
    /**
     * Sets a value of property NcalDescription from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNcalDescription(java.lang.String value) {
		Base.set(this.model, this.getResource(), NCALDESCRIPTION, value);
	}
  


    /**
     * Removes a value of property NcalDescription as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNcalDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NCALDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property NcalDescription as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNcalDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NCALDESCRIPTION, value);
	}
    /**
     * Removes a value of property NcalDescription given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNcalDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NCALDESCRIPTION, value);
	}
	
    /**
     * Removes a value of property NcalDescription given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNcalDescription(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NCALDESCRIPTION, value);
	}
  
    /**
     * Removes all values of property NcalDescription     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNcalDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NCALDESCRIPTION);
	}
	
    /**
     * Removes all values of property NcalDescription	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNcalDescription() {
		Base.removeAll(this.model, this.getResource(), NCALDESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b1d6a5a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSummary(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUMMARY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b1d6a5a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSummary() {
		return Base.has(this.model, this.getResource(), SUMMARY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b1d6a5a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSummary(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUMMARY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@b1d6a5a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSummary( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUMMARY);
	}

     /**
     * Get all values of property Summary as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSummary_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUMMARY);
	}
	
    /**
     * Get all values of property Summary as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSummary_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUMMARY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Summary as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSummary_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUMMARY);
	}

    /**
     * Get all values of property Summary as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSummary_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUMMARY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Summary     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSummary(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUMMARY, java.lang.String.class);
	}
	
    /**
     * Get all values of property Summary as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSummary_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUMMARY, java.lang.String.class);
	}

    /**
     * Get all values of property Summary     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSummary() {
		return Base.getAll(this.model, this.getResource(), SUMMARY, java.lang.String.class);
	}

    /**
     * Get all values of property Summary as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSummary_as() {
		return Base.getAll_as(this.model, this.getResource(), SUMMARY, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Summary as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSummary(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUMMARY, value);
	}
	
    /**
     * Adds a value to property Summary as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSummary( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUMMARY, value);
	}
    /**
     * Adds a value to property Summary from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSummary(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SUMMARY, value);
	}
	
    /**
     * Adds a value to property Summary from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSummary(java.lang.String value) {
		Base.add(this.model, this.getResource(), SUMMARY, value);
	}
  

    /**
     * Sets a value of property Summary from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSummary( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUMMARY, value);
	}
	
    /**
     * Sets a value of property Summary from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSummary( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUMMARY, value);
	}
    /**
     * Sets a value of property Summary from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSummary(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SUMMARY, value);
	}
	
    /**
     * Sets a value of property Summary from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSummary(java.lang.String value) {
		Base.set(this.model, this.getResource(), SUMMARY, value);
	}
  


    /**
     * Removes a value of property Summary as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSummary( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUMMARY, value);
	}
	
    /**
     * Removes a value of property Summary as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSummary( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUMMARY, value);
	}
    /**
     * Removes a value of property Summary given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSummary(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SUMMARY, value);
	}
	
    /**
     * Removes a value of property Summary given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSummary(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SUMMARY, value);
	}
  
    /**
     * Removes all values of property Summary     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSummary( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUMMARY);
	}
	
    /**
     * Removes all values of property Summary	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSummary() {
		Base.removeAll(this.model, this.getResource(), SUMMARY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@470cfc1f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSummaryAltRep(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUMMARYALTREP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@470cfc1f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSummaryAltRep() {
		return Base.has(this.model, this.getResource(), SUMMARYALTREP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@470cfc1f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSummaryAltRep(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUMMARYALTREP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@470cfc1f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSummaryAltRep( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUMMARYALTREP);
	}

     /**
     * Get all values of property SummaryAltRep as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSummaryAltRep_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUMMARYALTREP);
	}
	
    /**
     * Get all values of property SummaryAltRep as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSummaryAltRep_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUMMARYALTREP, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SummaryAltRep as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSummaryAltRep_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUMMARYALTREP);
	}

    /**
     * Get all values of property SummaryAltRep as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSummaryAltRep_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUMMARYALTREP, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SummaryAltRep     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSummaryAltRep(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUMMARYALTREP, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property SummaryAltRep as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSummaryAltRep_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUMMARYALTREP, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property SummaryAltRep     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSummaryAltRep() {
		return Base.getAll(this.model, this.getResource(), SUMMARYALTREP, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property SummaryAltRep as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllSummaryAltRep_as() {
		return Base.getAll_as(this.model, this.getResource(), SUMMARYALTREP, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property SummaryAltRep as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSummaryAltRep(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUMMARYALTREP, value);
	}
	
    /**
     * Adds a value to property SummaryAltRep as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSummaryAltRep( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUMMARYALTREP, value);
	}
    /**
     * Adds a value to property SummaryAltRep from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSummaryAltRep(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, SUMMARYALTREP, value);
	}
	
    /**
     * Adds a value to property SummaryAltRep from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSummaryAltRep(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), SUMMARYALTREP, value);
	}
  

    /**
     * Sets a value of property SummaryAltRep from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSummaryAltRep( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUMMARYALTREP, value);
	}
	
    /**
     * Sets a value of property SummaryAltRep from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSummaryAltRep( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUMMARYALTREP, value);
	}
    /**
     * Sets a value of property SummaryAltRep from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSummaryAltRep(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, SUMMARYALTREP, value);
	}
	
    /**
     * Sets a value of property SummaryAltRep from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSummaryAltRep(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), SUMMARYALTREP, value);
	}
  


    /**
     * Removes a value of property SummaryAltRep as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSummaryAltRep( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUMMARYALTREP, value);
	}
	
    /**
     * Removes a value of property SummaryAltRep as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSummaryAltRep( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUMMARYALTREP, value);
	}
    /**
     * Removes a value of property SummaryAltRep given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSummaryAltRep(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, SUMMARYALTREP, value);
	}
	
    /**
     * Removes a value of property SummaryAltRep given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSummaryAltRep(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), SUMMARYALTREP, value);
	}
  
    /**
     * Removes all values of property SummaryAltRep     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSummaryAltRep( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUMMARYALTREP);
	}
	
    /**
     * Removes all values of property SummaryAltRep	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSummaryAltRep() {
		Base.removeAll(this.model, this.getResource(), SUMMARYALTREP);
	}
 }