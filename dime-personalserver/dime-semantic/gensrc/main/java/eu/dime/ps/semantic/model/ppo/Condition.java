/*
* Copyright 2013 by the digital.me project (http:\\www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.ppo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> ClassAsObject </li>
 *   <li> ClassAsSubject </li>
 *   <li> Literal </li>
 *   <li> Property </li>
 *   <li> ResourceAsObject </li>
 *   <li> ResourceAsSubject </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Condition extends eu.dime.ps.semantic.model.RDFReactorThing {

    /** http://vocab.deri.ie/ppo#Condition */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://vocab.deri.ie/ppo#Condition", false);

    /** http://vocab.deri.ie/ppo#classAsObject */
    @SuppressWarnings("hiding")
	public static final URI CLASSASOBJECT = new URIImpl("http://vocab.deri.ie/ppo#classAsObject",false);

    /** http://vocab.deri.ie/ppo#classAsSubject */
    @SuppressWarnings("hiding")
	public static final URI CLASSASSUBJECT = new URIImpl("http://vocab.deri.ie/ppo#classAsSubject",false);

    /** http://vocab.deri.ie/ppo#hasLiteral */
    @SuppressWarnings("hiding")
	public static final URI LITERAL = new URIImpl("http://vocab.deri.ie/ppo#hasLiteral",false);

    /** http://vocab.deri.ie/ppo#hasProperty */
    @SuppressWarnings("hiding")
	public static final URI PROPERTY = new URIImpl("http://vocab.deri.ie/ppo#hasProperty",false);

    /** http://vocab.deri.ie/ppo#resourceAsObject */
    @SuppressWarnings("hiding")
	public static final URI RESOURCEASOBJECT = new URIImpl("http://vocab.deri.ie/ppo#resourceAsObject",false);

    /** http://vocab.deri.ie/ppo#resourceAsSubject */
    @SuppressWarnings("hiding")
	public static final URI RESOURCEASSUBJECT = new URIImpl("http://vocab.deri.ie/ppo#resourceAsSubject",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://vocab.deri.ie/ppo#classAsObject",false),
      new URIImpl("http://vocab.deri.ie/ppo#classAsSubject",false),
      new URIImpl("http://vocab.deri.ie/ppo#hasLiteral",false),
      new URIImpl("http://vocab.deri.ie/ppo#hasProperty",false),
      new URIImpl("http://vocab.deri.ie/ppo#resourceAsObject",false),
      new URIImpl("http://vocab.deri.ie/ppo#resourceAsSubject",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Condition (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Condition (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Condition (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Condition (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Condition (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Condition  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Condition  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Condition.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://vocab.deri.ie/ppo#Condition).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Condition> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Condition.class );
	}

    /**
	 * Remove rdf:type Condition from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Condition' to this Condition instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCondition_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.ppo.PrivacyPreference.CONDITION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Condition' to this Condition instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCondition_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.ppo.PrivacyPreference.CONDITION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Condition' to this Condition instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCondition_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.ppo.PrivacyPreference.CONDITION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79eddf07 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasClassAsObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CLASSASOBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79eddf07 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasClassAsObject() {
		return Base.has(this.model, this.getResource(), CLASSASOBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79eddf07 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasClassAsObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CLASSASOBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@79eddf07 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasClassAsObject( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CLASSASOBJECT);
	}

     /**
     * Get all values of property ClassAsObject as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllClassAsObject_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CLASSASOBJECT);
	}
	
    /**
     * Get all values of property ClassAsObject as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllClassAsObject_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CLASSASOBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ClassAsObject as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllClassAsObject_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CLASSASOBJECT);
	}

    /**
     * Get all values of property ClassAsObject as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllClassAsObject_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CLASSASOBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ClassAsObject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Class> getAllClassAsObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CLASSASOBJECT, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}
	
    /**
     * Get all values of property ClassAsObject as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Class> getAllClassAsObject_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CLASSASOBJECT, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}

    /**
     * Get all values of property ClassAsObject     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Class> getAllClassAsObject() {
		return Base.getAll(this.model, this.getResource(), CLASSASOBJECT, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}

    /**
     * Get all values of property ClassAsObject as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Class> getAllClassAsObject_as() {
		return Base.getAll_as(this.model, this.getResource(), CLASSASOBJECT, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}
 
    /**
     * Adds a value to property ClassAsObject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addClassAsObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CLASSASOBJECT, value);
	}
	
    /**
     * Adds a value to property ClassAsObject as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addClassAsObject( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CLASSASOBJECT, value);
	}
    /**
     * Adds a value to property ClassAsObject from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addClassAsObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.add(model, instanceResource, CLASSASOBJECT, value);
	}
	
    /**
     * Adds a value to property ClassAsObject from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addClassAsObject(org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.add(this.model, this.getResource(), CLASSASOBJECT, value);
	}
  

    /**
     * Sets a value of property ClassAsObject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setClassAsObject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CLASSASOBJECT, value);
	}
	
    /**
     * Sets a value of property ClassAsObject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setClassAsObject( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CLASSASOBJECT, value);
	}
    /**
     * Sets a value of property ClassAsObject from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setClassAsObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.set(model, instanceResource, CLASSASOBJECT, value);
	}
	
    /**
     * Sets a value of property ClassAsObject from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setClassAsObject(org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.set(this.model, this.getResource(), CLASSASOBJECT, value);
	}
  


    /**
     * Removes a value of property ClassAsObject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeClassAsObject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CLASSASOBJECT, value);
	}
	
    /**
     * Removes a value of property ClassAsObject as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeClassAsObject( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CLASSASOBJECT, value);
	}
    /**
     * Removes a value of property ClassAsObject given as an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeClassAsObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.remove(model, instanceResource, CLASSASOBJECT, value);
	}
	
    /**
     * Removes a value of property ClassAsObject given as an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeClassAsObject(org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.remove(this.model, this.getResource(), CLASSASOBJECT, value);
	}
  
    /**
     * Removes all values of property ClassAsObject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllClassAsObject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CLASSASOBJECT);
	}
	
    /**
     * Removes all values of property ClassAsObject	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllClassAsObject() {
		Base.removeAll(this.model, this.getResource(), CLASSASOBJECT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f6a04e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasClassAsSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CLASSASSUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f6a04e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasClassAsSubject() {
		return Base.has(this.model, this.getResource(), CLASSASSUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f6a04e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasClassAsSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CLASSASSUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@f6a04e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasClassAsSubject( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CLASSASSUBJECT);
	}

     /**
     * Get all values of property ClassAsSubject as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllClassAsSubject_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CLASSASSUBJECT);
	}
	
    /**
     * Get all values of property ClassAsSubject as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllClassAsSubject_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CLASSASSUBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ClassAsSubject as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllClassAsSubject_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CLASSASSUBJECT);
	}

    /**
     * Get all values of property ClassAsSubject as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllClassAsSubject_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CLASSASSUBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ClassAsSubject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Class> getAllClassAsSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CLASSASSUBJECT, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}
	
    /**
     * Get all values of property ClassAsSubject as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Class> getAllClassAsSubject_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CLASSASSUBJECT, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}

    /**
     * Get all values of property ClassAsSubject     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Class> getAllClassAsSubject() {
		return Base.getAll(this.model, this.getResource(), CLASSASSUBJECT, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}

    /**
     * Get all values of property ClassAsSubject as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Class> getAllClassAsSubject_as() {
		return Base.getAll_as(this.model, this.getResource(), CLASSASSUBJECT, org.ontoware.rdfreactor.schema.rdfs.Class.class);
	}
 
    /**
     * Adds a value to property ClassAsSubject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addClassAsSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CLASSASSUBJECT, value);
	}
	
    /**
     * Adds a value to property ClassAsSubject as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addClassAsSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CLASSASSUBJECT, value);
	}
    /**
     * Adds a value to property ClassAsSubject from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addClassAsSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.add(model, instanceResource, CLASSASSUBJECT, value);
	}
	
    /**
     * Adds a value to property ClassAsSubject from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addClassAsSubject(org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.add(this.model, this.getResource(), CLASSASSUBJECT, value);
	}
  

    /**
     * Sets a value of property ClassAsSubject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setClassAsSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CLASSASSUBJECT, value);
	}
	
    /**
     * Sets a value of property ClassAsSubject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setClassAsSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CLASSASSUBJECT, value);
	}
    /**
     * Sets a value of property ClassAsSubject from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setClassAsSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.set(model, instanceResource, CLASSASSUBJECT, value);
	}
	
    /**
     * Sets a value of property ClassAsSubject from an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setClassAsSubject(org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.set(this.model, this.getResource(), CLASSASSUBJECT, value);
	}
  


    /**
     * Removes a value of property ClassAsSubject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeClassAsSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CLASSASSUBJECT, value);
	}
	
    /**
     * Removes a value of property ClassAsSubject as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeClassAsSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CLASSASSUBJECT, value);
	}
    /**
     * Removes a value of property ClassAsSubject given as an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeClassAsSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.remove(model, instanceResource, CLASSASSUBJECT, value);
	}
	
    /**
     * Removes a value of property ClassAsSubject given as an instance of org.ontoware.rdfreactor.schema.rdfs.Class 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeClassAsSubject(org.ontoware.rdfreactor.schema.rdfs.Class value) {
		Base.remove(this.model, this.getResource(), CLASSASSUBJECT, value);
	}
  
    /**
     * Removes all values of property ClassAsSubject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllClassAsSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CLASSASSUBJECT);
	}
	
    /**
     * Removes all values of property ClassAsSubject	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllClassAsSubject() {
		Base.removeAll(this.model, this.getResource(), CLASSASSUBJECT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b57cbc2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLiteral(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LITERAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b57cbc2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLiteral() {
		return Base.has(this.model, this.getResource(), LITERAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b57cbc2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLiteral(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LITERAL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b57cbc2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLiteral( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LITERAL);
	}

     /**
     * Get all values of property Literal as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLiteral_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LITERAL);
	}
	
    /**
     * Get all values of property Literal as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLiteral_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LITERAL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Literal as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLiteral_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LITERAL);
	}

    /**
     * Get all values of property Literal as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLiteral_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LITERAL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Literal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllLiteral(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LITERAL, java.lang.String.class);
	}
	
    /**
     * Get all values of property Literal as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllLiteral_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LITERAL, java.lang.String.class);
	}

    /**
     * Get all values of property Literal     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllLiteral() {
		return Base.getAll(this.model, this.getResource(), LITERAL, java.lang.String.class);
	}

    /**
     * Get all values of property Literal as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllLiteral_as() {
		return Base.getAll_as(this.model, this.getResource(), LITERAL, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Literal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLiteral(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LITERAL, value);
	}
	
    /**
     * Adds a value to property Literal as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLiteral( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LITERAL, value);
	}
    /**
     * Adds a value to property Literal from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLiteral(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LITERAL, value);
	}
	
    /**
     * Adds a value to property Literal from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLiteral(java.lang.String value) {
		Base.add(this.model, this.getResource(), LITERAL, value);
	}
  

    /**
     * Sets a value of property Literal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLiteral( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LITERAL, value);
	}
	
    /**
     * Sets a value of property Literal from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLiteral( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LITERAL, value);
	}
    /**
     * Sets a value of property Literal from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLiteral(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LITERAL, value);
	}
	
    /**
     * Sets a value of property Literal from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLiteral(java.lang.String value) {
		Base.set(this.model, this.getResource(), LITERAL, value);
	}
  


    /**
     * Removes a value of property Literal as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLiteral( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LITERAL, value);
	}
	
    /**
     * Removes a value of property Literal as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLiteral( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LITERAL, value);
	}
    /**
     * Removes a value of property Literal given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLiteral(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LITERAL, value);
	}
	
    /**
     * Removes a value of property Literal given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLiteral(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LITERAL, value);
	}
  
    /**
     * Removes all values of property Literal     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLiteral( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LITERAL);
	}
	
    /**
     * Removes all values of property Literal	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLiteral() {
		Base.removeAll(this.model, this.getResource(), LITERAL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fea07bc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fea07bc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasProperty() {
		return Base.has(this.model, this.getResource(), PROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fea07bc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fea07bc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasProperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PROPERTY);
	}

     /**
     * Get all values of property Property as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllProperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PROPERTY);
	}
	
    /**
     * Get all values of property Property as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllProperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Property as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllProperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PROPERTY);
	}

    /**
     * Get all values of property Property as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllProperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Property     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
	
    /**
     * Get all values of property Property as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllProperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property Property     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Property> getAllProperty() {
		return Base.getAll(this.model, this.getResource(), PROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}

    /**
     * Get all values of property Property as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Property> getAllProperty_as() {
		return Base.getAll_as(this.model, this.getResource(), PROPERTY, org.ontoware.rdfreactor.schema.rdfs.Property.class);
	}
 
    /**
     * Adds a value to property Property as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PROPERTY, value);
	}
	
    /**
     * Adds a value to property Property as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PROPERTY, value);
	}
    /**
     * Adds a value to property Property from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(model, instanceResource, PROPERTY, value);
	}
	
    /**
     * Adds a value to property Property from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addProperty(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.add(this.model, this.getResource(), PROPERTY, value);
	}
  

    /**
     * Sets a value of property Property from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PROPERTY, value);
	}
	
    /**
     * Sets a value of property Property from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PROPERTY, value);
	}
    /**
     * Sets a value of property Property from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(model, instanceResource, PROPERTY, value);
	}
	
    /**
     * Sets a value of property Property from an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setProperty(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.set(this.model, this.getResource(), PROPERTY, value);
	}
  


    /**
     * Removes a value of property Property as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PROPERTY, value);
	}
	
    /**
     * Removes a value of property Property as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PROPERTY, value);
	}
    /**
     * Removes a value of property Property given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(model, instanceResource, PROPERTY, value);
	}
	
    /**
     * Removes a value of property Property given as an instance of org.ontoware.rdfreactor.schema.rdfs.Property 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeProperty(org.ontoware.rdfreactor.schema.rdfs.Property value) {
		Base.remove(this.model, this.getResource(), PROPERTY, value);
	}
  
    /**
     * Removes all values of property Property     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PROPERTY);
	}
	
    /**
     * Removes all values of property Property	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllProperty() {
		Base.removeAll(this.model, this.getResource(), PROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31f96545 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasResourceAsObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RESOURCEASOBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31f96545 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasResourceAsObject() {
		return Base.has(this.model, this.getResource(), RESOURCEASOBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31f96545 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasResourceAsObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RESOURCEASOBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31f96545 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasResourceAsObject( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RESOURCEASOBJECT);
	}

     /**
     * Get all values of property ResourceAsObject as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllResourceAsObject_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RESOURCEASOBJECT);
	}
	
    /**
     * Get all values of property ResourceAsObject as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllResourceAsObject_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RESOURCEASOBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ResourceAsObject as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllResourceAsObject_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RESOURCEASOBJECT);
	}

    /**
     * Get all values of property ResourceAsObject as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllResourceAsObject_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RESOURCEASOBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ResourceAsObject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllResourceAsObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RESOURCEASOBJECT, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property ResourceAsObject as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllResourceAsObject_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RESOURCEASOBJECT, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property ResourceAsObject     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllResourceAsObject() {
		return Base.getAll(this.model, this.getResource(), RESOURCEASOBJECT, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property ResourceAsObject as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllResourceAsObject_as() {
		return Base.getAll_as(this.model, this.getResource(), RESOURCEASOBJECT, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property ResourceAsObject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addResourceAsObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RESOURCEASOBJECT, value);
	}
	
    /**
     * Adds a value to property ResourceAsObject as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addResourceAsObject( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RESOURCEASOBJECT, value);
	}
    /**
     * Adds a value to property ResourceAsObject from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addResourceAsObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, RESOURCEASOBJECT, value);
	}
	
    /**
     * Adds a value to property ResourceAsObject from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addResourceAsObject(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), RESOURCEASOBJECT, value);
	}
  

    /**
     * Sets a value of property ResourceAsObject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setResourceAsObject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RESOURCEASOBJECT, value);
	}
	
    /**
     * Sets a value of property ResourceAsObject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setResourceAsObject( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RESOURCEASOBJECT, value);
	}
    /**
     * Sets a value of property ResourceAsObject from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setResourceAsObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, RESOURCEASOBJECT, value);
	}
	
    /**
     * Sets a value of property ResourceAsObject from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setResourceAsObject(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), RESOURCEASOBJECT, value);
	}
  


    /**
     * Removes a value of property ResourceAsObject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeResourceAsObject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RESOURCEASOBJECT, value);
	}
	
    /**
     * Removes a value of property ResourceAsObject as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeResourceAsObject( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RESOURCEASOBJECT, value);
	}
    /**
     * Removes a value of property ResourceAsObject given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeResourceAsObject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, RESOURCEASOBJECT, value);
	}
	
    /**
     * Removes a value of property ResourceAsObject given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeResourceAsObject(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), RESOURCEASOBJECT, value);
	}
  
    /**
     * Removes all values of property ResourceAsObject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllResourceAsObject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RESOURCEASOBJECT);
	}
	
    /**
     * Removes all values of property ResourceAsObject	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllResourceAsObject() {
		Base.removeAll(this.model, this.getResource(), RESOURCEASOBJECT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f361e1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasResourceAsSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RESOURCEASSUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f361e1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasResourceAsSubject() {
		return Base.has(this.model, this.getResource(), RESOURCEASSUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f361e1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasResourceAsSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RESOURCEASSUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2f361e1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasResourceAsSubject( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RESOURCEASSUBJECT);
	}

     /**
     * Get all values of property ResourceAsSubject as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllResourceAsSubject_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RESOURCEASSUBJECT);
	}
	
    /**
     * Get all values of property ResourceAsSubject as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllResourceAsSubject_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RESOURCEASSUBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ResourceAsSubject as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllResourceAsSubject_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RESOURCEASSUBJECT);
	}

    /**
     * Get all values of property ResourceAsSubject as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllResourceAsSubject_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RESOURCEASSUBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ResourceAsSubject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllResourceAsSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RESOURCEASSUBJECT, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property ResourceAsSubject as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllResourceAsSubject_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RESOURCEASSUBJECT, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property ResourceAsSubject     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllResourceAsSubject() {
		return Base.getAll(this.model, this.getResource(), RESOURCEASSUBJECT, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property ResourceAsSubject as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllResourceAsSubject_as() {
		return Base.getAll_as(this.model, this.getResource(), RESOURCEASSUBJECT, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property ResourceAsSubject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addResourceAsSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RESOURCEASSUBJECT, value);
	}
	
    /**
     * Adds a value to property ResourceAsSubject as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addResourceAsSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RESOURCEASSUBJECT, value);
	}
    /**
     * Adds a value to property ResourceAsSubject from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addResourceAsSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, RESOURCEASSUBJECT, value);
	}
	
    /**
     * Adds a value to property ResourceAsSubject from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addResourceAsSubject(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), RESOURCEASSUBJECT, value);
	}
  

    /**
     * Sets a value of property ResourceAsSubject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setResourceAsSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RESOURCEASSUBJECT, value);
	}
	
    /**
     * Sets a value of property ResourceAsSubject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setResourceAsSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RESOURCEASSUBJECT, value);
	}
    /**
     * Sets a value of property ResourceAsSubject from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setResourceAsSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, RESOURCEASSUBJECT, value);
	}
	
    /**
     * Sets a value of property ResourceAsSubject from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setResourceAsSubject(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), RESOURCEASSUBJECT, value);
	}
  


    /**
     * Removes a value of property ResourceAsSubject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeResourceAsSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RESOURCEASSUBJECT, value);
	}
	
    /**
     * Removes a value of property ResourceAsSubject as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeResourceAsSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RESOURCEASSUBJECT, value);
	}
    /**
     * Removes a value of property ResourceAsSubject given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeResourceAsSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, RESOURCEASSUBJECT, value);
	}
	
    /**
     * Removes a value of property ResourceAsSubject given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeResourceAsSubject(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), RESOURCEASSUBJECT, value);
	}
  
    /**
     * Removes all values of property ResourceAsSubject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllResourceAsSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RESOURCEASSUBJECT);
	}
	
    /**
     * Removes all values of property ResourceAsSubject	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllResourceAsSubject() {
		Base.removeAll(this.model, this.getResource(), RESOURCEASSUBJECT);
	}
 }