package eu.dime.ps.semantic.model.dpo;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Cloudcover </li>
 *   <li> Fogfactor </li>
 *   <li> Humidity </li>
 *   <li> Precipitation </li>
 *   <li> Snowfalldegree </li>
 *   <li> Stormdegree </li>
 *   <li> Temperature </li>
 *   <li> Uvindex </li>
 *   <li> Windscale </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class WeatherConditions extends eu.dime.ps.semantic.model.RDFReactorThing {

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dpo#WeatherConditions */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dpo#WeatherConditions", false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#cloudcover */
    @SuppressWarnings("hiding")
	public static final URI CLOUDCOVER = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#cloudcover",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#fogfactor */
    @SuppressWarnings("hiding")
	public static final URI FOGFACTOR = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#fogfactor",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#humidity */
    @SuppressWarnings("hiding")
	public static final URI HUMIDITY = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#humidity",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#precipitation */
    @SuppressWarnings("hiding")
	public static final URI PRECIPITATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#precipitation",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#snowfalldegree */
    @SuppressWarnings("hiding")
	public static final URI SNOWFALLDEGREE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#snowfalldegree",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#stormdegree */
    @SuppressWarnings("hiding")
	public static final URI STORMDEGREE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#stormdegree",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#temperature */
    @SuppressWarnings("hiding")
	public static final URI TEMPERATURE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#temperature",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#uvindex */
    @SuppressWarnings("hiding")
	public static final URI UVINDEX = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#uvindex",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#windscale */
    @SuppressWarnings("hiding")
	public static final URI WINDSCALE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#windscale",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#cloudcover",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#fogfactor",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#humidity",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#precipitation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#snowfalldegree",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#stormdegree",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#temperature",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#uvindex",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#windscale",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected WeatherConditions (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public WeatherConditions (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public WeatherConditions (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public WeatherConditions (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public WeatherConditions (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of WeatherConditions  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static WeatherConditions  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, WeatherConditions.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2011/10/05/dpo#WeatherConditions).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends WeatherConditions> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, WeatherConditions.class );
	}

    /**
	 * Remove rdf:type WeatherConditions from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'CurrentWeather' to this WeatherConditions instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCurrentWeather_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.dcon.Environment.CURRENTWEATHER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'CurrentWeather' to this WeatherConditions instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCurrentWeather_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.dcon.Environment.CURRENTWEATHER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'CurrentWeather' to this WeatherConditions instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCurrentWeather_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.dcon.Environment.CURRENTWEATHER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ForecastWeather' to this WeatherConditions instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllForecastWeather_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.dcon.Environment.FORECASTWEATHER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ForecastWeather' to this WeatherConditions instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllForecastWeather_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.dcon.Environment.FORECASTWEATHER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ForecastWeather' to this WeatherConditions instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllForecastWeather_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.dcon.Environment.FORECASTWEATHER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@899a9c3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCloudcover(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CLOUDCOVER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@899a9c3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCloudcover() {
		return Base.has(this.model, this.getResource(), CLOUDCOVER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@899a9c3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCloudcover(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CLOUDCOVER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@899a9c3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCloudcover( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CLOUDCOVER);
	}

     /**
     * Get all values of property Cloudcover as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCloudcover_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CLOUDCOVER);
	}
	
    /**
     * Get all values of property Cloudcover as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCloudcover_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CLOUDCOVER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Cloudcover as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCloudcover_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CLOUDCOVER);
	}

    /**
     * Get all values of property Cloudcover as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCloudcover_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CLOUDCOVER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Cloudcover     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllCloudcover(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CLOUDCOVER, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Cloudcover as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllCloudcover_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CLOUDCOVER, java.lang.Integer.class);
	}

    /**
     * Get all values of property Cloudcover     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllCloudcover() {
		return Base.getAll(this.model, this.getResource(), CLOUDCOVER, java.lang.Integer.class);
	}

    /**
     * Get all values of property Cloudcover as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllCloudcover_as() {
		return Base.getAll_as(this.model, this.getResource(), CLOUDCOVER, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Cloudcover as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCloudcover(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CLOUDCOVER, value);
	}
	
    /**
     * Adds a value to property Cloudcover as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCloudcover( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CLOUDCOVER, value);
	}
    /**
     * Adds a value to property Cloudcover from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCloudcover(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, CLOUDCOVER, value);
	}
	
    /**
     * Adds a value to property Cloudcover from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCloudcover(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), CLOUDCOVER, value);
	}
  

    /**
     * Sets a value of property Cloudcover from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCloudcover( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CLOUDCOVER, value);
	}
	
    /**
     * Sets a value of property Cloudcover from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCloudcover( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CLOUDCOVER, value);
	}
    /**
     * Sets a value of property Cloudcover from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCloudcover(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, CLOUDCOVER, value);
	}
	
    /**
     * Sets a value of property Cloudcover from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCloudcover(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), CLOUDCOVER, value);
	}
  


    /**
     * Removes a value of property Cloudcover as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCloudcover( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CLOUDCOVER, value);
	}
	
    /**
     * Removes a value of property Cloudcover as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCloudcover( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CLOUDCOVER, value);
	}
    /**
     * Removes a value of property Cloudcover given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCloudcover(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, CLOUDCOVER, value);
	}
	
    /**
     * Removes a value of property Cloudcover given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCloudcover(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), CLOUDCOVER, value);
	}
  
    /**
     * Removes all values of property Cloudcover     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCloudcover( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CLOUDCOVER);
	}
	
    /**
     * Removes all values of property Cloudcover	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCloudcover() {
		Base.removeAll(this.model, this.getResource(), CLOUDCOVER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1aee06b3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFogfactor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FOGFACTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1aee06b3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFogfactor() {
		return Base.has(this.model, this.getResource(), FOGFACTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1aee06b3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFogfactor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FOGFACTOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1aee06b3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFogfactor( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FOGFACTOR);
	}

     /**
     * Get all values of property Fogfactor as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFogfactor_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FOGFACTOR);
	}
	
    /**
     * Get all values of property Fogfactor as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFogfactor_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOGFACTOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Fogfactor as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFogfactor_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FOGFACTOR);
	}

    /**
     * Get all values of property Fogfactor as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFogfactor_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FOGFACTOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Fogfactor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllFogfactor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FOGFACTOR, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Fogfactor as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllFogfactor_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOGFACTOR, java.lang.Integer.class);
	}

    /**
     * Get all values of property Fogfactor     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllFogfactor() {
		return Base.getAll(this.model, this.getResource(), FOGFACTOR, java.lang.Integer.class);
	}

    /**
     * Get all values of property Fogfactor as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllFogfactor_as() {
		return Base.getAll_as(this.model, this.getResource(), FOGFACTOR, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Fogfactor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFogfactor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FOGFACTOR, value);
	}
	
    /**
     * Adds a value to property Fogfactor as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFogfactor( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FOGFACTOR, value);
	}
    /**
     * Adds a value to property Fogfactor from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFogfactor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, FOGFACTOR, value);
	}
	
    /**
     * Adds a value to property Fogfactor from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFogfactor(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), FOGFACTOR, value);
	}
  

    /**
     * Sets a value of property Fogfactor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFogfactor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FOGFACTOR, value);
	}
	
    /**
     * Sets a value of property Fogfactor from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFogfactor( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FOGFACTOR, value);
	}
    /**
     * Sets a value of property Fogfactor from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFogfactor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, FOGFACTOR, value);
	}
	
    /**
     * Sets a value of property Fogfactor from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFogfactor(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), FOGFACTOR, value);
	}
  


    /**
     * Removes a value of property Fogfactor as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFogfactor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FOGFACTOR, value);
	}
	
    /**
     * Removes a value of property Fogfactor as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFogfactor( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FOGFACTOR, value);
	}
    /**
     * Removes a value of property Fogfactor given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFogfactor(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, FOGFACTOR, value);
	}
	
    /**
     * Removes a value of property Fogfactor given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFogfactor(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), FOGFACTOR, value);
	}
  
    /**
     * Removes all values of property Fogfactor     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFogfactor( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FOGFACTOR);
	}
	
    /**
     * Removes all values of property Fogfactor	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFogfactor() {
		Base.removeAll(this.model, this.getResource(), FOGFACTOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18e107ee has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHumidity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HUMIDITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18e107ee has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHumidity() {
		return Base.has(this.model, this.getResource(), HUMIDITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18e107ee has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHumidity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HUMIDITY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18e107ee has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHumidity( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HUMIDITY);
	}

     /**
     * Get all values of property Humidity as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHumidity_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HUMIDITY);
	}
	
    /**
     * Get all values of property Humidity as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHumidity_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HUMIDITY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Humidity as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHumidity_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HUMIDITY);
	}

    /**
     * Get all values of property Humidity as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHumidity_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HUMIDITY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Humidity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllHumidity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HUMIDITY, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Humidity as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllHumidity_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HUMIDITY, java.lang.Integer.class);
	}

    /**
     * Get all values of property Humidity     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllHumidity() {
		return Base.getAll(this.model, this.getResource(), HUMIDITY, java.lang.Integer.class);
	}

    /**
     * Get all values of property Humidity as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllHumidity_as() {
		return Base.getAll_as(this.model, this.getResource(), HUMIDITY, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Humidity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHumidity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HUMIDITY, value);
	}
	
    /**
     * Adds a value to property Humidity as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHumidity( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HUMIDITY, value);
	}
    /**
     * Adds a value to property Humidity from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHumidity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, HUMIDITY, value);
	}
	
    /**
     * Adds a value to property Humidity from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHumidity(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), HUMIDITY, value);
	}
  

    /**
     * Sets a value of property Humidity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHumidity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HUMIDITY, value);
	}
	
    /**
     * Sets a value of property Humidity from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHumidity( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HUMIDITY, value);
	}
    /**
     * Sets a value of property Humidity from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHumidity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, HUMIDITY, value);
	}
	
    /**
     * Sets a value of property Humidity from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHumidity(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), HUMIDITY, value);
	}
  


    /**
     * Removes a value of property Humidity as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHumidity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HUMIDITY, value);
	}
	
    /**
     * Removes a value of property Humidity as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHumidity( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HUMIDITY, value);
	}
    /**
     * Removes a value of property Humidity given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHumidity(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, HUMIDITY, value);
	}
	
    /**
     * Removes a value of property Humidity given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHumidity(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), HUMIDITY, value);
	}
  
    /**
     * Removes all values of property Humidity     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHumidity( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HUMIDITY);
	}
	
    /**
     * Removes all values of property Humidity	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHumidity() {
		Base.removeAll(this.model, this.getResource(), HUMIDITY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b55c859 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPrecipitation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRECIPITATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b55c859 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPrecipitation() {
		return Base.has(this.model, this.getResource(), PRECIPITATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b55c859 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPrecipitation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRECIPITATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7b55c859 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPrecipitation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRECIPITATION);
	}

     /**
     * Get all values of property Precipitation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrecipitation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRECIPITATION);
	}
	
    /**
     * Get all values of property Precipitation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrecipitation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRECIPITATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Precipitation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrecipitation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRECIPITATION);
	}

    /**
     * Get all values of property Precipitation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrecipitation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRECIPITATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Precipitation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllPrecipitation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRECIPITATION, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Precipitation as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllPrecipitation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRECIPITATION, java.lang.Integer.class);
	}

    /**
     * Get all values of property Precipitation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllPrecipitation() {
		return Base.getAll(this.model, this.getResource(), PRECIPITATION, java.lang.Integer.class);
	}

    /**
     * Get all values of property Precipitation as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllPrecipitation_as() {
		return Base.getAll_as(this.model, this.getResource(), PRECIPITATION, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Precipitation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPrecipitation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRECIPITATION, value);
	}
	
    /**
     * Adds a value to property Precipitation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPrecipitation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRECIPITATION, value);
	}
    /**
     * Adds a value to property Precipitation from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPrecipitation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, PRECIPITATION, value);
	}
	
    /**
     * Adds a value to property Precipitation from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPrecipitation(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), PRECIPITATION, value);
	}
  

    /**
     * Sets a value of property Precipitation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPrecipitation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRECIPITATION, value);
	}
	
    /**
     * Sets a value of property Precipitation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPrecipitation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRECIPITATION, value);
	}
    /**
     * Sets a value of property Precipitation from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPrecipitation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, PRECIPITATION, value);
	}
	
    /**
     * Sets a value of property Precipitation from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPrecipitation(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), PRECIPITATION, value);
	}
  


    /**
     * Removes a value of property Precipitation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePrecipitation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRECIPITATION, value);
	}
	
    /**
     * Removes a value of property Precipitation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePrecipitation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRECIPITATION, value);
	}
    /**
     * Removes a value of property Precipitation given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePrecipitation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, PRECIPITATION, value);
	}
	
    /**
     * Removes a value of property Precipitation given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePrecipitation(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), PRECIPITATION, value);
	}
  
    /**
     * Removes all values of property Precipitation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPrecipitation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRECIPITATION);
	}
	
    /**
     * Removes all values of property Precipitation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPrecipitation() {
		Base.removeAll(this.model, this.getResource(), PRECIPITATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@100dfa54 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSnowfalldegree(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SNOWFALLDEGREE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@100dfa54 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSnowfalldegree() {
		return Base.has(this.model, this.getResource(), SNOWFALLDEGREE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@100dfa54 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSnowfalldegree(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SNOWFALLDEGREE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@100dfa54 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSnowfalldegree( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SNOWFALLDEGREE);
	}

     /**
     * Get all values of property Snowfalldegree as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSnowfalldegree_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SNOWFALLDEGREE);
	}
	
    /**
     * Get all values of property Snowfalldegree as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSnowfalldegree_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SNOWFALLDEGREE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Snowfalldegree as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSnowfalldegree_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SNOWFALLDEGREE);
	}

    /**
     * Get all values of property Snowfalldegree as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSnowfalldegree_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SNOWFALLDEGREE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Snowfalldegree     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllSnowfalldegree(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SNOWFALLDEGREE, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Snowfalldegree as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllSnowfalldegree_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SNOWFALLDEGREE, java.lang.Integer.class);
	}

    /**
     * Get all values of property Snowfalldegree     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllSnowfalldegree() {
		return Base.getAll(this.model, this.getResource(), SNOWFALLDEGREE, java.lang.Integer.class);
	}

    /**
     * Get all values of property Snowfalldegree as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllSnowfalldegree_as() {
		return Base.getAll_as(this.model, this.getResource(), SNOWFALLDEGREE, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Snowfalldegree as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSnowfalldegree(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SNOWFALLDEGREE, value);
	}
	
    /**
     * Adds a value to property Snowfalldegree as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSnowfalldegree( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SNOWFALLDEGREE, value);
	}
    /**
     * Adds a value to property Snowfalldegree from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSnowfalldegree(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, SNOWFALLDEGREE, value);
	}
	
    /**
     * Adds a value to property Snowfalldegree from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSnowfalldegree(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), SNOWFALLDEGREE, value);
	}
  

    /**
     * Sets a value of property Snowfalldegree from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSnowfalldegree( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SNOWFALLDEGREE, value);
	}
	
    /**
     * Sets a value of property Snowfalldegree from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSnowfalldegree( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SNOWFALLDEGREE, value);
	}
    /**
     * Sets a value of property Snowfalldegree from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSnowfalldegree(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, SNOWFALLDEGREE, value);
	}
	
    /**
     * Sets a value of property Snowfalldegree from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSnowfalldegree(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), SNOWFALLDEGREE, value);
	}
  


    /**
     * Removes a value of property Snowfalldegree as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSnowfalldegree( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SNOWFALLDEGREE, value);
	}
	
    /**
     * Removes a value of property Snowfalldegree as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSnowfalldegree( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SNOWFALLDEGREE, value);
	}
    /**
     * Removes a value of property Snowfalldegree given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSnowfalldegree(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, SNOWFALLDEGREE, value);
	}
	
    /**
     * Removes a value of property Snowfalldegree given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSnowfalldegree(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), SNOWFALLDEGREE, value);
	}
  
    /**
     * Removes all values of property Snowfalldegree     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSnowfalldegree( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SNOWFALLDEGREE);
	}
	
    /**
     * Removes all values of property Snowfalldegree	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSnowfalldegree() {
		Base.removeAll(this.model, this.getResource(), SNOWFALLDEGREE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55cfa00b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasStormdegree(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, STORMDEGREE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55cfa00b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasStormdegree() {
		return Base.has(this.model, this.getResource(), STORMDEGREE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55cfa00b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasStormdegree(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, STORMDEGREE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55cfa00b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasStormdegree( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), STORMDEGREE);
	}

     /**
     * Get all values of property Stormdegree as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllStormdegree_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, STORMDEGREE);
	}
	
    /**
     * Get all values of property Stormdegree as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllStormdegree_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STORMDEGREE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Stormdegree as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllStormdegree_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), STORMDEGREE);
	}

    /**
     * Get all values of property Stormdegree as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllStormdegree_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), STORMDEGREE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Stormdegree     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllStormdegree(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, STORMDEGREE, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Stormdegree as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllStormdegree_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, STORMDEGREE, java.lang.Integer.class);
	}

    /**
     * Get all values of property Stormdegree     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllStormdegree() {
		return Base.getAll(this.model, this.getResource(), STORMDEGREE, java.lang.Integer.class);
	}

    /**
     * Get all values of property Stormdegree as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllStormdegree_as() {
		return Base.getAll_as(this.model, this.getResource(), STORMDEGREE, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Stormdegree as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addStormdegree(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, STORMDEGREE, value);
	}
	
    /**
     * Adds a value to property Stormdegree as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addStormdegree( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), STORMDEGREE, value);
	}
    /**
     * Adds a value to property Stormdegree from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addStormdegree(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, STORMDEGREE, value);
	}
	
    /**
     * Adds a value to property Stormdegree from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addStormdegree(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), STORMDEGREE, value);
	}
  

    /**
     * Sets a value of property Stormdegree from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setStormdegree( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, STORMDEGREE, value);
	}
	
    /**
     * Sets a value of property Stormdegree from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setStormdegree( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), STORMDEGREE, value);
	}
    /**
     * Sets a value of property Stormdegree from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setStormdegree(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, STORMDEGREE, value);
	}
	
    /**
     * Sets a value of property Stormdegree from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setStormdegree(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), STORMDEGREE, value);
	}
  


    /**
     * Removes a value of property Stormdegree as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeStormdegree( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, STORMDEGREE, value);
	}
	
    /**
     * Removes a value of property Stormdegree as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeStormdegree( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), STORMDEGREE, value);
	}
    /**
     * Removes a value of property Stormdegree given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeStormdegree(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, STORMDEGREE, value);
	}
	
    /**
     * Removes a value of property Stormdegree given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeStormdegree(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), STORMDEGREE, value);
	}
  
    /**
     * Removes all values of property Stormdegree     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllStormdegree( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, STORMDEGREE);
	}
	
    /**
     * Removes all values of property Stormdegree	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllStormdegree() {
		Base.removeAll(this.model, this.getResource(), STORMDEGREE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11f81a6e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTemperature(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TEMPERATURE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11f81a6e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTemperature() {
		return Base.has(this.model, this.getResource(), TEMPERATURE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11f81a6e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTemperature(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TEMPERATURE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@11f81a6e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTemperature( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TEMPERATURE);
	}

     /**
     * Get all values of property Temperature as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTemperature_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TEMPERATURE);
	}
	
    /**
     * Get all values of property Temperature as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTemperature_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TEMPERATURE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Temperature as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTemperature_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TEMPERATURE);
	}

    /**
     * Get all values of property Temperature as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTemperature_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TEMPERATURE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Temperature     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Float> getAllTemperature(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TEMPERATURE, java.lang.Float.class);
	}
	
    /**
     * Get all values of property Temperature as a ReactorResult of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Float> getAllTemperature_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TEMPERATURE, java.lang.Float.class);
	}

    /**
     * Get all values of property Temperature     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Float> getAllTemperature() {
		return Base.getAll(this.model, this.getResource(), TEMPERATURE, java.lang.Float.class);
	}

    /**
     * Get all values of property Temperature as a ReactorResult of java.lang.Float 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Float> getAllTemperature_as() {
		return Base.getAll_as(this.model, this.getResource(), TEMPERATURE, java.lang.Float.class);
	}
 
    /**
     * Adds a value to property Temperature as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTemperature(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TEMPERATURE, value);
	}
	
    /**
     * Adds a value to property Temperature as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTemperature( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TEMPERATURE, value);
	}
    /**
     * Adds a value to property Temperature from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTemperature(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.add(model, instanceResource, TEMPERATURE, value);
	}
	
    /**
     * Adds a value to property Temperature from an instance of java.lang.Float 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTemperature(java.lang.Float value) {
		Base.add(this.model, this.getResource(), TEMPERATURE, value);
	}
  

    /**
     * Sets a value of property Temperature from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTemperature( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TEMPERATURE, value);
	}
	
    /**
     * Sets a value of property Temperature from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTemperature( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TEMPERATURE, value);
	}
    /**
     * Sets a value of property Temperature from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTemperature(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, TEMPERATURE, value);
	}
	
    /**
     * Sets a value of property Temperature from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTemperature(java.lang.Float value) {
		Base.set(this.model, this.getResource(), TEMPERATURE, value);
	}
  


    /**
     * Removes a value of property Temperature as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTemperature( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TEMPERATURE, value);
	}
	
    /**
     * Removes a value of property Temperature as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTemperature( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TEMPERATURE, value);
	}
    /**
     * Removes a value of property Temperature given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTemperature(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, TEMPERATURE, value);
	}
	
    /**
     * Removes a value of property Temperature given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTemperature(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), TEMPERATURE, value);
	}
  
    /**
     * Removes all values of property Temperature     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTemperature( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TEMPERATURE);
	}
	
    /**
     * Removes all values of property Temperature	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTemperature() {
		Base.removeAll(this.model, this.getResource(), TEMPERATURE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@790563c9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUvindex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, UVINDEX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@790563c9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUvindex() {
		return Base.has(this.model, this.getResource(), UVINDEX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@790563c9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUvindex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, UVINDEX);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@790563c9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUvindex( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), UVINDEX);
	}

     /**
     * Get all values of property Uvindex as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUvindex_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, UVINDEX);
	}
	
    /**
     * Get all values of property Uvindex as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUvindex_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UVINDEX, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Uvindex as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUvindex_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), UVINDEX);
	}

    /**
     * Get all values of property Uvindex as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUvindex_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), UVINDEX, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Uvindex     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.xmlschema.NonNegativeIntveger> getAllUvindex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, UVINDEX, eu.dime.ps.semantic.model.xmlschema.NonNegativeIntveger.class);
	}
	
    /**
     * Get all values of property Uvindex as a ReactorResult of NonNegativeIntveger 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.xmlschema.NonNegativeIntveger> getAllUvindex_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, UVINDEX, eu.dime.ps.semantic.model.xmlschema.NonNegativeIntveger.class);
	}

    /**
     * Get all values of property Uvindex     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.xmlschema.NonNegativeIntveger> getAllUvindex() {
		return Base.getAll(this.model, this.getResource(), UVINDEX, eu.dime.ps.semantic.model.xmlschema.NonNegativeIntveger.class);
	}

    /**
     * Get all values of property Uvindex as a ReactorResult of NonNegativeIntveger 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.xmlschema.NonNegativeIntveger> getAllUvindex_as() {
		return Base.getAll_as(this.model, this.getResource(), UVINDEX, eu.dime.ps.semantic.model.xmlschema.NonNegativeIntveger.class);
	}
 
    /**
     * Adds a value to property Uvindex as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUvindex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, UVINDEX, value);
	}
	
    /**
     * Adds a value to property Uvindex as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUvindex( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), UVINDEX, value);
	}
    /**
     * Adds a value to property Uvindex from an instance of NonNegativeIntveger 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUvindex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.xmlschema.NonNegativeIntveger value) {
		Base.add(model, instanceResource, UVINDEX, value);
	}
	
    /**
     * Adds a value to property Uvindex from an instance of NonNegativeIntveger 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUvindex(eu.dime.ps.semantic.model.xmlschema.NonNegativeIntveger value) {
		Base.add(this.model, this.getResource(), UVINDEX, value);
	}
  

    /**
     * Sets a value of property Uvindex from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUvindex( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, UVINDEX, value);
	}
	
    /**
     * Sets a value of property Uvindex from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUvindex( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), UVINDEX, value);
	}
    /**
     * Sets a value of property Uvindex from an instance of NonNegativeIntveger 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUvindex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.xmlschema.NonNegativeIntveger value) {
		Base.set(model, instanceResource, UVINDEX, value);
	}
	
    /**
     * Sets a value of property Uvindex from an instance of NonNegativeIntveger 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUvindex(eu.dime.ps.semantic.model.xmlschema.NonNegativeIntveger value) {
		Base.set(this.model, this.getResource(), UVINDEX, value);
	}
  


    /**
     * Removes a value of property Uvindex as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUvindex( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, UVINDEX, value);
	}
	
    /**
     * Removes a value of property Uvindex as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUvindex( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), UVINDEX, value);
	}
    /**
     * Removes a value of property Uvindex given as an instance of NonNegativeIntveger 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUvindex(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.xmlschema.NonNegativeIntveger value) {
		Base.remove(model, instanceResource, UVINDEX, value);
	}
	
    /**
     * Removes a value of property Uvindex given as an instance of NonNegativeIntveger 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUvindex(eu.dime.ps.semantic.model.xmlschema.NonNegativeIntveger value) {
		Base.remove(this.model, this.getResource(), UVINDEX, value);
	}
  
    /**
     * Removes all values of property Uvindex     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUvindex( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, UVINDEX);
	}
	
    /**
     * Removes all values of property Uvindex	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUvindex() {
		Base.removeAll(this.model, this.getResource(), UVINDEX);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63a23e5c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWindscale(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WINDSCALE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63a23e5c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWindscale() {
		return Base.has(this.model, this.getResource(), WINDSCALE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63a23e5c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWindscale(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WINDSCALE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63a23e5c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWindscale( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WINDSCALE);
	}

     /**
     * Get all values of property Windscale as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWindscale_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WINDSCALE);
	}
	
    /**
     * Get all values of property Windscale as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWindscale_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WINDSCALE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Windscale as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWindscale_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WINDSCALE);
	}

    /**
     * Get all values of property Windscale as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWindscale_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WINDSCALE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Windscale     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllWindscale(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WINDSCALE, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Windscale as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllWindscale_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WINDSCALE, java.lang.Integer.class);
	}

    /**
     * Get all values of property Windscale     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllWindscale() {
		return Base.getAll(this.model, this.getResource(), WINDSCALE, java.lang.Integer.class);
	}

    /**
     * Get all values of property Windscale as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllWindscale_as() {
		return Base.getAll_as(this.model, this.getResource(), WINDSCALE, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Windscale as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWindscale(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WINDSCALE, value);
	}
	
    /**
     * Adds a value to property Windscale as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWindscale( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WINDSCALE, value);
	}
    /**
     * Adds a value to property Windscale from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWindscale(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, WINDSCALE, value);
	}
	
    /**
     * Adds a value to property Windscale from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWindscale(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), WINDSCALE, value);
	}
  

    /**
     * Sets a value of property Windscale from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWindscale( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WINDSCALE, value);
	}
	
    /**
     * Sets a value of property Windscale from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWindscale( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WINDSCALE, value);
	}
    /**
     * Sets a value of property Windscale from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWindscale(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, WINDSCALE, value);
	}
	
    /**
     * Sets a value of property Windscale from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWindscale(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), WINDSCALE, value);
	}
  


    /**
     * Removes a value of property Windscale as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWindscale( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WINDSCALE, value);
	}
	
    /**
     * Removes a value of property Windscale as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWindscale( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WINDSCALE, value);
	}
    /**
     * Removes a value of property Windscale given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWindscale(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, WINDSCALE, value);
	}
	
    /**
     * Removes a value of property Windscale given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWindscale(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), WINDSCALE, value);
	}
  
    /**
     * Removes all values of property Windscale     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWindscale( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WINDSCALE);
	}
	
    /**
     * Removes all values of property Windscale	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWindscale() {
		Base.removeAll(this.model, this.getResource(), WINDSCALE);
	}
 }