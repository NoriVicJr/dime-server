/*
* Copyright 2013 by the digital.me project (http:\\www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.nmm;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> BeatsPerMinute </li>
 *   <li> Composer </li>
 *   <li> Lyricist </li>
 *   <li> MusicAlbum </li>
 *   <li> MusicBrainzTrackID </li>
 *   <li> Performer </li>
 *   <li> SetNumber </li>
 *   <li> SetSize </li>
 *   <li> TrackGain </li>
 *   <li> TrackNumber </li>
 *   <li> TrackPeakGain </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class MusicPiece extends eu.dime.ps.semantic.model.nfo.Audio {

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#MusicPiece */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#MusicPiece", false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#beatsPerMinute */
    @SuppressWarnings("hiding")
	public static final URI BEATSPERMINUTE = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#beatsPerMinute",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#composer */
    @SuppressWarnings("hiding")
	public static final URI COMPOSER = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#composer",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#lyricist */
    @SuppressWarnings("hiding")
	public static final URI LYRICIST = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#lyricist",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#musicAlbum */
    @SuppressWarnings("hiding")
	public static final URI MUSICALBUM = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#musicAlbum",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#musicBrainzTrackID */
    @SuppressWarnings("hiding")
	public static final URI MUSICBRAINZTRACKID = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#musicBrainzTrackID",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#performer */
    @SuppressWarnings("hiding")
	public static final URI PERFORMER = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#performer",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#setNumber */
    @SuppressWarnings("hiding")
	public static final URI SETNUMBER = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#setNumber",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#setSize */
    @SuppressWarnings("hiding")
	public static final URI SETSIZE = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#setSize",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#trackGain */
    @SuppressWarnings("hiding")
	public static final URI TRACKGAIN = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#trackGain",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#trackNumber */
    @SuppressWarnings("hiding")
	public static final URI TRACKNUMBER = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#trackNumber",false);

    /** http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#trackPeakGain */
    @SuppressWarnings("hiding")
	public static final URI TRACKPEAKGAIN = new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#trackPeakGain",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#beatsPerMinute",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#composer",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#lyricist",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#musicAlbum",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#musicBrainzTrackID",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#performer",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#setNumber",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#setSize",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#trackGain",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#trackNumber",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#trackPeakGain",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected MusicPiece (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public MusicPiece (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public MusicPiece (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public MusicPiece (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public MusicPiece (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of MusicPiece  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static MusicPiece  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, MusicPiece.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#MusicPiece).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends MusicPiece> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, MusicPiece.class );
	}

    /**
	 * Remove rdf:type MusicPiece from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53ca621b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBeatsPerMinute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BEATSPERMINUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53ca621b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBeatsPerMinute() {
		return Base.has(this.model, this.getResource(), BEATSPERMINUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53ca621b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBeatsPerMinute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BEATSPERMINUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53ca621b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBeatsPerMinute( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BEATSPERMINUTE);
	}

     /**
     * Get all values of property BeatsPerMinute as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBeatsPerMinute_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BEATSPERMINUTE);
	}
	
    /**
     * Get all values of property BeatsPerMinute as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBeatsPerMinute_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BEATSPERMINUTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BeatsPerMinute as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBeatsPerMinute_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BEATSPERMINUTE);
	}

    /**
     * Get all values of property BeatsPerMinute as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBeatsPerMinute_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BEATSPERMINUTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BeatsPerMinute     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllBeatsPerMinute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BEATSPERMINUTE, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property BeatsPerMinute as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllBeatsPerMinute_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BEATSPERMINUTE, java.lang.Integer.class);
	}

    /**
     * Get all values of property BeatsPerMinute     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllBeatsPerMinute() {
		return Base.getAll(this.model, this.getResource(), BEATSPERMINUTE, java.lang.Integer.class);
	}

    /**
     * Get all values of property BeatsPerMinute as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllBeatsPerMinute_as() {
		return Base.getAll_as(this.model, this.getResource(), BEATSPERMINUTE, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property BeatsPerMinute as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBeatsPerMinute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BEATSPERMINUTE, value);
	}
	
    /**
     * Adds a value to property BeatsPerMinute as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBeatsPerMinute( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BEATSPERMINUTE, value);
	}
    /**
     * Adds a value to property BeatsPerMinute from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBeatsPerMinute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, BEATSPERMINUTE, value);
	}
	
    /**
     * Adds a value to property BeatsPerMinute from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBeatsPerMinute(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), BEATSPERMINUTE, value);
	}
  

    /**
     * Sets a value of property BeatsPerMinute from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBeatsPerMinute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BEATSPERMINUTE, value);
	}
	
    /**
     * Sets a value of property BeatsPerMinute from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBeatsPerMinute( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BEATSPERMINUTE, value);
	}
    /**
     * Sets a value of property BeatsPerMinute from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBeatsPerMinute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, BEATSPERMINUTE, value);
	}
	
    /**
     * Sets a value of property BeatsPerMinute from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBeatsPerMinute(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), BEATSPERMINUTE, value);
	}
  


    /**
     * Removes a value of property BeatsPerMinute as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBeatsPerMinute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BEATSPERMINUTE, value);
	}
	
    /**
     * Removes a value of property BeatsPerMinute as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBeatsPerMinute( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BEATSPERMINUTE, value);
	}
    /**
     * Removes a value of property BeatsPerMinute given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBeatsPerMinute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, BEATSPERMINUTE, value);
	}
	
    /**
     * Removes a value of property BeatsPerMinute given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBeatsPerMinute(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), BEATSPERMINUTE, value);
	}
  
    /**
     * Removes all values of property BeatsPerMinute     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBeatsPerMinute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BEATSPERMINUTE);
	}
	
    /**
     * Removes all values of property BeatsPerMinute	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBeatsPerMinute() {
		Base.removeAll(this.model, this.getResource(), BEATSPERMINUTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1713522f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasComposer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COMPOSER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1713522f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasComposer() {
		return Base.has(this.model, this.getResource(), COMPOSER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1713522f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasComposer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COMPOSER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1713522f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasComposer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COMPOSER);
	}

     /**
     * Get all values of property Composer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComposer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COMPOSER);
	}
	
    /**
     * Get all values of property Composer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComposer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMPOSER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Composer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllComposer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COMPOSER);
	}

    /**
     * Get all values of property Composer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllComposer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COMPOSER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Composer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllComposer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COMPOSER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Composer as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllComposer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMPOSER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Composer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllComposer() {
		return Base.getAll(this.model, this.getResource(), COMPOSER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Composer as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllComposer_as() {
		return Base.getAll_as(this.model, this.getResource(), COMPOSER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Composer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addComposer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COMPOSER, value);
	}
	
    /**
     * Adds a value to property Composer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addComposer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COMPOSER, value);
	}
    /**
     * Adds a value to property Composer from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addComposer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, COMPOSER, value);
	}
	
    /**
     * Adds a value to property Composer from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addComposer(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), COMPOSER, value);
	}
  

    /**
     * Sets a value of property Composer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setComposer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COMPOSER, value);
	}
	
    /**
     * Sets a value of property Composer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setComposer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COMPOSER, value);
	}
    /**
     * Sets a value of property Composer from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setComposer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, COMPOSER, value);
	}
	
    /**
     * Sets a value of property Composer from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setComposer(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), COMPOSER, value);
	}
  


    /**
     * Removes a value of property Composer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeComposer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COMPOSER, value);
	}
	
    /**
     * Removes a value of property Composer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeComposer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COMPOSER, value);
	}
    /**
     * Removes a value of property Composer given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeComposer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, COMPOSER, value);
	}
	
    /**
     * Removes a value of property Composer given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeComposer(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), COMPOSER, value);
	}
  
    /**
     * Removes all values of property Composer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllComposer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COMPOSER);
	}
	
    /**
     * Removes all values of property Composer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllComposer() {
		Base.removeAll(this.model, this.getResource(), COMPOSER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@471164ef has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLyricist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LYRICIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@471164ef has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLyricist() {
		return Base.has(this.model, this.getResource(), LYRICIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@471164ef has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLyricist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LYRICIST);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@471164ef has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLyricist( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LYRICIST);
	}

     /**
     * Get all values of property Lyricist as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLyricist_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LYRICIST);
	}
	
    /**
     * Get all values of property Lyricist as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLyricist_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LYRICIST, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Lyricist as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLyricist_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LYRICIST);
	}

    /**
     * Get all values of property Lyricist as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllLyricist_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LYRICIST, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Lyricist     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllLyricist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LYRICIST, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Lyricist as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllLyricist_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LYRICIST, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Lyricist     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllLyricist() {
		return Base.getAll(this.model, this.getResource(), LYRICIST, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Lyricist as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllLyricist_as() {
		return Base.getAll_as(this.model, this.getResource(), LYRICIST, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Lyricist as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addLyricist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LYRICIST, value);
	}
	
    /**
     * Adds a value to property Lyricist as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addLyricist( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LYRICIST, value);
	}
    /**
     * Adds a value to property Lyricist from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addLyricist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, LYRICIST, value);
	}
	
    /**
     * Adds a value to property Lyricist from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addLyricist(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), LYRICIST, value);
	}
  

    /**
     * Sets a value of property Lyricist from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLyricist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LYRICIST, value);
	}
	
    /**
     * Sets a value of property Lyricist from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLyricist( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LYRICIST, value);
	}
    /**
     * Sets a value of property Lyricist from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLyricist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, LYRICIST, value);
	}
	
    /**
     * Sets a value of property Lyricist from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLyricist(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), LYRICIST, value);
	}
  


    /**
     * Removes a value of property Lyricist as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLyricist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LYRICIST, value);
	}
	
    /**
     * Removes a value of property Lyricist as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLyricist( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LYRICIST, value);
	}
    /**
     * Removes a value of property Lyricist given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLyricist(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, LYRICIST, value);
	}
	
    /**
     * Removes a value of property Lyricist given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLyricist(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), LYRICIST, value);
	}
  
    /**
     * Removes all values of property Lyricist     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLyricist( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LYRICIST);
	}
	
    /**
     * Removes all values of property Lyricist	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLyricist() {
		Base.removeAll(this.model, this.getResource(), LYRICIST);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ec1f48c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMusicAlbum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MUSICALBUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ec1f48c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMusicAlbum() {
		return Base.has(this.model, this.getResource(), MUSICALBUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ec1f48c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMusicAlbum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MUSICALBUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3ec1f48c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMusicAlbum( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MUSICALBUM);
	}

    /**
     * Get single value of property MusicAlbum as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getMusicAlbum_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, MUSICALBUM);
	}
	
    /**
     * Get single value of property MusicAlbum as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getMusicAlbum_asNode() {
		return Base.get_asNode(this.model, this.getResource(), MUSICALBUM);
	}
     /**
     * Get single value of property MusicAlbum     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.nmm.MusicAlbum getMusicAlbum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.nmm.MusicAlbum) Base.get(model, instanceResource, MUSICALBUM, eu.dime.ps.semantic.model.nmm.MusicAlbum.class);
	}
	
    /**
     * Get single value of property MusicAlbum  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.nmm.MusicAlbum getMusicAlbum() {
		return (eu.dime.ps.semantic.model.nmm.MusicAlbum) Base.get(this.model, this.getResource(), MUSICALBUM, eu.dime.ps.semantic.model.nmm.MusicAlbum.class);
	}
  
    /**
     * Adds a value to property MusicAlbum as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addMusicAlbum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, MUSICALBUM, value, 1);
	}
	
    /**
     * Adds a value to property MusicAlbum as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addMusicAlbum( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MUSICALBUM, value, 1);
	}
    /**
     * Adds a value to property MusicAlbum from an instance of MusicAlbum 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addMusicAlbum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nmm.MusicAlbum value)
    throws CardinalityException {
		Base.add(model, instanceResource, MUSICALBUM, value, 1);
	}
	
    /**
     * Adds a value to property MusicAlbum from an instance of MusicAlbum 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addMusicAlbum(eu.dime.ps.semantic.model.nmm.MusicAlbum value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MUSICALBUM, value, 1);
	}
 
 

    /**
     * Sets a value of property MusicAlbum from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMusicAlbum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MUSICALBUM, value);
	}
	
    /**
     * Sets a value of property MusicAlbum from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMusicAlbum( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MUSICALBUM, value);
	}
    /**
     * Sets a value of property MusicAlbum from an instance of MusicAlbum 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMusicAlbum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nmm.MusicAlbum value) {
		Base.set(model, instanceResource, MUSICALBUM, value);
	}
	
    /**
     * Sets a value of property MusicAlbum from an instance of MusicAlbum 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMusicAlbum(eu.dime.ps.semantic.model.nmm.MusicAlbum value) {
		Base.set(this.model, this.getResource(), MUSICALBUM, value);
	}
  


    /**
     * Removes a value of property MusicAlbum as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMusicAlbum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MUSICALBUM, value);
	}
	
    /**
     * Removes a value of property MusicAlbum as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMusicAlbum( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MUSICALBUM, value);
	}
    /**
     * Removes a value of property MusicAlbum given as an instance of MusicAlbum 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMusicAlbum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nmm.MusicAlbum value) {
		Base.remove(model, instanceResource, MUSICALBUM, value);
	}
	
    /**
     * Removes a value of property MusicAlbum given as an instance of MusicAlbum 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMusicAlbum(eu.dime.ps.semantic.model.nmm.MusicAlbum value) {
		Base.remove(this.model, this.getResource(), MUSICALBUM, value);
	}
  
    /**
     * Removes all values of property MusicAlbum     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMusicAlbum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MUSICALBUM);
	}
	
    /**
     * Removes all values of property MusicAlbum	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMusicAlbum() {
		Base.removeAll(this.model, this.getResource(), MUSICALBUM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cdf3533 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasMusicBrainzTrackID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MUSICBRAINZTRACKID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cdf3533 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasMusicBrainzTrackID() {
		return Base.has(this.model, this.getResource(), MUSICBRAINZTRACKID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cdf3533 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasMusicBrainzTrackID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MUSICBRAINZTRACKID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cdf3533 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasMusicBrainzTrackID( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MUSICBRAINZTRACKID);
	}

    /**
     * Get single value of property MusicBrainzTrackID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getMusicBrainzTrackID_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, MUSICBRAINZTRACKID);
	}
	
    /**
     * Get single value of property MusicBrainzTrackID as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getMusicBrainzTrackID_asNode() {
		return Base.get_asNode(this.model, this.getResource(), MUSICBRAINZTRACKID);
	}
     /**
     * Get single value of property MusicBrainzTrackID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getMusicBrainzTrackID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, MUSICBRAINZTRACKID, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property MusicBrainzTrackID  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getMusicBrainzTrackID() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), MUSICBRAINZTRACKID, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property MusicBrainzTrackID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addMusicBrainzTrackID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, MUSICBRAINZTRACKID, value, 1);
	}
	
    /**
     * Adds a value to property MusicBrainzTrackID as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addMusicBrainzTrackID( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MUSICBRAINZTRACKID, value, 1);
	}
    /**
     * Adds a value to property MusicBrainzTrackID from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addMusicBrainzTrackID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, MUSICBRAINZTRACKID, value, 1);
	}
	
    /**
     * Adds a value to property MusicBrainzTrackID from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addMusicBrainzTrackID(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), MUSICBRAINZTRACKID, value, 1);
	}
 
 

    /**
     * Sets a value of property MusicBrainzTrackID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setMusicBrainzTrackID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MUSICBRAINZTRACKID, value);
	}
	
    /**
     * Sets a value of property MusicBrainzTrackID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setMusicBrainzTrackID( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MUSICBRAINZTRACKID, value);
	}
    /**
     * Sets a value of property MusicBrainzTrackID from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setMusicBrainzTrackID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, MUSICBRAINZTRACKID, value);
	}
	
    /**
     * Sets a value of property MusicBrainzTrackID from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setMusicBrainzTrackID(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), MUSICBRAINZTRACKID, value);
	}
  


    /**
     * Removes a value of property MusicBrainzTrackID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeMusicBrainzTrackID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MUSICBRAINZTRACKID, value);
	}
	
    /**
     * Removes a value of property MusicBrainzTrackID as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeMusicBrainzTrackID( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MUSICBRAINZTRACKID, value);
	}
    /**
     * Removes a value of property MusicBrainzTrackID given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeMusicBrainzTrackID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, MUSICBRAINZTRACKID, value);
	}
	
    /**
     * Removes a value of property MusicBrainzTrackID given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeMusicBrainzTrackID(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), MUSICBRAINZTRACKID, value);
	}
  
    /**
     * Removes all values of property MusicBrainzTrackID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllMusicBrainzTrackID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MUSICBRAINZTRACKID);
	}
	
    /**
     * Removes all values of property MusicBrainzTrackID	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllMusicBrainzTrackID() {
		Base.removeAll(this.model, this.getResource(), MUSICBRAINZTRACKID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47eefbf6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPerformer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PERFORMER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47eefbf6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPerformer() {
		return Base.has(this.model, this.getResource(), PERFORMER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47eefbf6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPerformer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PERFORMER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47eefbf6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPerformer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PERFORMER);
	}

     /**
     * Get all values of property Performer as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPerformer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PERFORMER);
	}
	
    /**
     * Get all values of property Performer as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPerformer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PERFORMER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Performer as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPerformer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PERFORMER);
	}

    /**
     * Get all values of property Performer as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPerformer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PERFORMER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Performer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllPerformer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PERFORMER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Performer as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllPerformer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PERFORMER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Performer     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllPerformer() {
		return Base.getAll(this.model, this.getResource(), PERFORMER, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Performer as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllPerformer_as() {
		return Base.getAll_as(this.model, this.getResource(), PERFORMER, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Performer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPerformer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PERFORMER, value);
	}
	
    /**
     * Adds a value to property Performer as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPerformer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PERFORMER, value);
	}
    /**
     * Adds a value to property Performer from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPerformer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, PERFORMER, value);
	}
	
    /**
     * Adds a value to property Performer from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPerformer(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), PERFORMER, value);
	}
  

    /**
     * Sets a value of property Performer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPerformer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PERFORMER, value);
	}
	
    /**
     * Sets a value of property Performer from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPerformer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PERFORMER, value);
	}
    /**
     * Sets a value of property Performer from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPerformer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, PERFORMER, value);
	}
	
    /**
     * Sets a value of property Performer from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPerformer(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), PERFORMER, value);
	}
  


    /**
     * Removes a value of property Performer as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePerformer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PERFORMER, value);
	}
	
    /**
     * Removes a value of property Performer as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePerformer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PERFORMER, value);
	}
    /**
     * Removes a value of property Performer given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePerformer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, PERFORMER, value);
	}
	
    /**
     * Removes a value of property Performer given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePerformer(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), PERFORMER, value);
	}
  
    /**
     * Removes all values of property Performer     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPerformer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PERFORMER);
	}
	
    /**
     * Removes all values of property Performer	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPerformer() {
		Base.removeAll(this.model, this.getResource(), PERFORMER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@132b618b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSetNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SETNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@132b618b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSetNumber() {
		return Base.has(this.model, this.getResource(), SETNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@132b618b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSetNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SETNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@132b618b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSetNumber( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SETNUMBER);
	}

    /**
     * Get single value of property SetNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getSetNumber_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, SETNUMBER);
	}
	
    /**
     * Get single value of property SetNumber as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getSetNumber_asNode() {
		return Base.get_asNode(this.model, this.getResource(), SETNUMBER);
	}
     /**
     * Get single value of property SetNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getSetNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, SETNUMBER, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property SetNumber  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getSetNumber() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), SETNUMBER, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property SetNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addSetNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, SETNUMBER, value, 1);
	}
	
    /**
     * Adds a value to property SetNumber as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addSetNumber( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SETNUMBER, value, 1);
	}
    /**
     * Adds a value to property SetNumber from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addSetNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, SETNUMBER, value, 1);
	}
	
    /**
     * Adds a value to property SetNumber from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addSetNumber(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SETNUMBER, value, 1);
	}
 
 

    /**
     * Sets a value of property SetNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSetNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SETNUMBER, value);
	}
	
    /**
     * Sets a value of property SetNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSetNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SETNUMBER, value);
	}
    /**
     * Sets a value of property SetNumber from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSetNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, SETNUMBER, value);
	}
	
    /**
     * Sets a value of property SetNumber from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSetNumber(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), SETNUMBER, value);
	}
  


    /**
     * Removes a value of property SetNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSetNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SETNUMBER, value);
	}
	
    /**
     * Removes a value of property SetNumber as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSetNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SETNUMBER, value);
	}
    /**
     * Removes a value of property SetNumber given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSetNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, SETNUMBER, value);
	}
	
    /**
     * Removes a value of property SetNumber given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSetNumber(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), SETNUMBER, value);
	}
  
    /**
     * Removes all values of property SetNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSetNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SETNUMBER);
	}
	
    /**
     * Removes all values of property SetNumber	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSetNumber() {
		Base.removeAll(this.model, this.getResource(), SETNUMBER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fcb345b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSetSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SETSIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fcb345b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSetSize() {
		return Base.has(this.model, this.getResource(), SETSIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fcb345b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSetSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SETSIZE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@fcb345b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSetSize( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SETSIZE);
	}

    /**
     * Get single value of property SetSize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getSetSize_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, SETSIZE);
	}
	
    /**
     * Get single value of property SetSize as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getSetSize_asNode() {
		return Base.get_asNode(this.model, this.getResource(), SETSIZE);
	}
     /**
     * Get single value of property SetSize     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getSetSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, SETSIZE, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property SetSize  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getSetSize() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), SETSIZE, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property SetSize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addSetSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, SETSIZE, value, 1);
	}
	
    /**
     * Adds a value to property SetSize as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addSetSize( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SETSIZE, value, 1);
	}
    /**
     * Adds a value to property SetSize from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addSetSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, SETSIZE, value, 1);
	}
	
    /**
     * Adds a value to property SetSize from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addSetSize(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), SETSIZE, value, 1);
	}
 
 

    /**
     * Sets a value of property SetSize from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSetSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SETSIZE, value);
	}
	
    /**
     * Sets a value of property SetSize from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSetSize( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SETSIZE, value);
	}
    /**
     * Sets a value of property SetSize from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSetSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, SETSIZE, value);
	}
	
    /**
     * Sets a value of property SetSize from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSetSize(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), SETSIZE, value);
	}
  


    /**
     * Removes a value of property SetSize as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSetSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SETSIZE, value);
	}
	
    /**
     * Removes a value of property SetSize as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSetSize( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SETSIZE, value);
	}
    /**
     * Removes a value of property SetSize given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSetSize(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, SETSIZE, value);
	}
	
    /**
     * Removes a value of property SetSize given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSetSize(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), SETSIZE, value);
	}
  
    /**
     * Removes all values of property SetSize     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSetSize( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SETSIZE);
	}
	
    /**
     * Removes all values of property SetSize	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSetSize() {
		Base.removeAll(this.model, this.getResource(), SETSIZE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fc8b88e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTrackGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TRACKGAIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fc8b88e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTrackGain() {
		return Base.has(this.model, this.getResource(), TRACKGAIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fc8b88e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTrackGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TRACKGAIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fc8b88e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTrackGain( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TRACKGAIN);
	}

    /**
     * Get single value of property TrackGain as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTrackGain_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TRACKGAIN);
	}
	
    /**
     * Get single value of property TrackGain as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTrackGain_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TRACKGAIN);
	}
     /**
     * Get single value of property TrackGain     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Float getTrackGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Float) Base.get(model, instanceResource, TRACKGAIN, java.lang.Float.class);
	}
	
    /**
     * Get single value of property TrackGain  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Float getTrackGain() {
		return (java.lang.Float) Base.get(this.model, this.getResource(), TRACKGAIN, java.lang.Float.class);
	}
  
    /**
     * Adds a value to property TrackGain as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTrackGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TRACKGAIN, value, 1);
	}
	
    /**
     * Adds a value to property TrackGain as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTrackGain( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRACKGAIN, value, 1);
	}
    /**
     * Adds a value to property TrackGain from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTrackGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value)
    throws CardinalityException {
		Base.add(model, instanceResource, TRACKGAIN, value, 1);
	}
	
    /**
     * Adds a value to property TrackGain from an instance of java.lang.Float 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTrackGain(java.lang.Float value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRACKGAIN, value, 1);
	}
 
 

    /**
     * Sets a value of property TrackGain from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTrackGain( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TRACKGAIN, value);
	}
	
    /**
     * Sets a value of property TrackGain from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTrackGain( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TRACKGAIN, value);
	}
    /**
     * Sets a value of property TrackGain from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTrackGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, TRACKGAIN, value);
	}
	
    /**
     * Sets a value of property TrackGain from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTrackGain(java.lang.Float value) {
		Base.set(this.model, this.getResource(), TRACKGAIN, value);
	}
  


    /**
     * Removes a value of property TrackGain as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTrackGain( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TRACKGAIN, value);
	}
	
    /**
     * Removes a value of property TrackGain as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTrackGain( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TRACKGAIN, value);
	}
    /**
     * Removes a value of property TrackGain given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTrackGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, TRACKGAIN, value);
	}
	
    /**
     * Removes a value of property TrackGain given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTrackGain(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), TRACKGAIN, value);
	}
  
    /**
     * Removes all values of property TrackGain     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTrackGain( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TRACKGAIN);
	}
	
    /**
     * Removes all values of property TrackGain	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTrackGain() {
		Base.removeAll(this.model, this.getResource(), TRACKGAIN);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a68b4a2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTrackNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TRACKNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a68b4a2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTrackNumber() {
		return Base.has(this.model, this.getResource(), TRACKNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a68b4a2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTrackNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TRACKNUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a68b4a2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTrackNumber( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TRACKNUMBER);
	}

    /**
     * Get single value of property TrackNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTrackNumber_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TRACKNUMBER);
	}
	
    /**
     * Get single value of property TrackNumber as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTrackNumber_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TRACKNUMBER);
	}
     /**
     * Get single value of property TrackNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Integer getTrackNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Integer) Base.get(model, instanceResource, TRACKNUMBER, java.lang.Integer.class);
	}
	
    /**
     * Get single value of property TrackNumber  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Integer getTrackNumber() {
		return (java.lang.Integer) Base.get(this.model, this.getResource(), TRACKNUMBER, java.lang.Integer.class);
	}
  
    /**
     * Adds a value to property TrackNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTrackNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TRACKNUMBER, value, 1);
	}
	
    /**
     * Adds a value to property TrackNumber as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTrackNumber( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRACKNUMBER, value, 1);
	}
    /**
     * Adds a value to property TrackNumber from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTrackNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value)
    throws CardinalityException {
		Base.add(model, instanceResource, TRACKNUMBER, value, 1);
	}
	
    /**
     * Adds a value to property TrackNumber from an instance of java.lang.Integer 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTrackNumber(java.lang.Integer value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRACKNUMBER, value, 1);
	}
 
 

    /**
     * Sets a value of property TrackNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTrackNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TRACKNUMBER, value);
	}
	
    /**
     * Sets a value of property TrackNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTrackNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TRACKNUMBER, value);
	}
    /**
     * Sets a value of property TrackNumber from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTrackNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, TRACKNUMBER, value);
	}
	
    /**
     * Sets a value of property TrackNumber from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTrackNumber(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), TRACKNUMBER, value);
	}
  


    /**
     * Removes a value of property TrackNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTrackNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TRACKNUMBER, value);
	}
	
    /**
     * Removes a value of property TrackNumber as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTrackNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TRACKNUMBER, value);
	}
    /**
     * Removes a value of property TrackNumber given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTrackNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, TRACKNUMBER, value);
	}
	
    /**
     * Removes a value of property TrackNumber given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTrackNumber(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), TRACKNUMBER, value);
	}
  
    /**
     * Removes all values of property TrackNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTrackNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TRACKNUMBER);
	}
	
    /**
     * Removes all values of property TrackNumber	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTrackNumber() {
		Base.removeAll(this.model, this.getResource(), TRACKNUMBER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@744c2cdd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTrackPeakGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TRACKPEAKGAIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@744c2cdd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTrackPeakGain() {
		return Base.has(this.model, this.getResource(), TRACKPEAKGAIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@744c2cdd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTrackPeakGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TRACKPEAKGAIN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@744c2cdd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTrackPeakGain( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TRACKPEAKGAIN);
	}

    /**
     * Get single value of property TrackPeakGain as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getTrackPeakGain_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, TRACKPEAKGAIN);
	}
	
    /**
     * Get single value of property TrackPeakGain as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getTrackPeakGain_asNode() {
		return Base.get_asNode(this.model, this.getResource(), TRACKPEAKGAIN);
	}
     /**
     * Get single value of property TrackPeakGain     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.Float getTrackPeakGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.Float) Base.get(model, instanceResource, TRACKPEAKGAIN, java.lang.Float.class);
	}
	
    /**
     * Get single value of property TrackPeakGain  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.Float getTrackPeakGain() {
		return (java.lang.Float) Base.get(this.model, this.getResource(), TRACKPEAKGAIN, java.lang.Float.class);
	}
  
    /**
     * Adds a value to property TrackPeakGain as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addTrackPeakGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, TRACKPEAKGAIN, value, 1);
	}
	
    /**
     * Adds a value to property TrackPeakGain as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addTrackPeakGain( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRACKPEAKGAIN, value, 1);
	}
    /**
     * Adds a value to property TrackPeakGain from an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addTrackPeakGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value)
    throws CardinalityException {
		Base.add(model, instanceResource, TRACKPEAKGAIN, value, 1);
	}
	
    /**
     * Adds a value to property TrackPeakGain from an instance of java.lang.Float 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addTrackPeakGain(java.lang.Float value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), TRACKPEAKGAIN, value, 1);
	}
 
 

    /**
     * Sets a value of property TrackPeakGain from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTrackPeakGain( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TRACKPEAKGAIN, value);
	}
	
    /**
     * Sets a value of property TrackPeakGain from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTrackPeakGain( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TRACKPEAKGAIN, value);
	}
    /**
     * Sets a value of property TrackPeakGain from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTrackPeakGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.set(model, instanceResource, TRACKPEAKGAIN, value);
	}
	
    /**
     * Sets a value of property TrackPeakGain from an instance of java.lang.Float 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTrackPeakGain(java.lang.Float value) {
		Base.set(this.model, this.getResource(), TRACKPEAKGAIN, value);
	}
  


    /**
     * Removes a value of property TrackPeakGain as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTrackPeakGain( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TRACKPEAKGAIN, value);
	}
	
    /**
     * Removes a value of property TrackPeakGain as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTrackPeakGain( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TRACKPEAKGAIN, value);
	}
    /**
     * Removes a value of property TrackPeakGain given as an instance of java.lang.Float 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTrackPeakGain(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Float value) {
		Base.remove(model, instanceResource, TRACKPEAKGAIN, value);
	}
	
    /**
     * Removes a value of property TrackPeakGain given as an instance of java.lang.Float 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTrackPeakGain(java.lang.Float value) {
		Base.remove(this.model, this.getResource(), TRACKPEAKGAIN, value);
	}
  
    /**
     * Removes all values of property TrackPeakGain     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTrackPeakGain( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TRACKPEAKGAIN);
	}
	
    /**
     * Removes all values of property TrackPeakGain	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTrackPeakGain() {
		Base.removeAll(this.model, this.getResource(), TRACKPEAKGAIN);
	}
 }