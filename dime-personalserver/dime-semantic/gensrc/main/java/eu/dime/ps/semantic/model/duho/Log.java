/*
* Copyright 2013 by the digital.me project (http:\\www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.duho;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> PrivacyPreference </li>
 *   <li> Situation </li>
 *   <li> Timestamp </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Log extends eu.dime.ps.semantic.model.RDFReactorThing {

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/duho#Log */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/duho#Log", false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/duho#hasPrivacyPreference */
    @SuppressWarnings("hiding")
	public static final URI PRIVACYPREFERENCE = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/duho#hasPrivacyPreference",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasSituation */
    @SuppressWarnings("hiding")
	public static final URI SITUATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasSituation",false);

    /** http://www.semanticdesktop.org/ontologies/2011/10/05/duho#timestamp */
    @SuppressWarnings("hiding")
	public static final URI TIMESTAMP = new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/duho#timestamp",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/duho#hasPrivacyPreference",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/dcon#hasSituation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2011/10/05/duho#timestamp",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Log (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Log (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Log (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Log (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Log (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Log  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Log  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Log.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2011/10/05/duho#Log).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Log> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Log.class );
	}

    /**
	 * Remove rdf:type Log from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@248f6e08 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPrivacyPreference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRIVACYPREFERENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@248f6e08 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPrivacyPreference() {
		return Base.has(this.model, this.getResource(), PRIVACYPREFERENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@248f6e08 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPrivacyPreference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRIVACYPREFERENCE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@248f6e08 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPrivacyPreference( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRIVACYPREFERENCE);
	}

     /**
     * Get all values of property PrivacyPreference as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrivacyPreference_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRIVACYPREFERENCE);
	}
	
    /**
     * Get all values of property PrivacyPreference as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrivacyPreference_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIVACYPREFERENCE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PrivacyPreference as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrivacyPreference_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRIVACYPREFERENCE);
	}

    /**
     * Get all values of property PrivacyPreference as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrivacyPreference_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRIVACYPREFERENCE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PrivacyPreference     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.ppo.PrivacyPreference> getAllPrivacyPreference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRIVACYPREFERENCE, eu.dime.ps.semantic.model.ppo.PrivacyPreference.class);
	}
	
    /**
     * Get all values of property PrivacyPreference as a ReactorResult of PrivacyPreference 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.ppo.PrivacyPreference> getAllPrivacyPreference_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIVACYPREFERENCE, eu.dime.ps.semantic.model.ppo.PrivacyPreference.class);
	}

    /**
     * Get all values of property PrivacyPreference     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.ppo.PrivacyPreference> getAllPrivacyPreference() {
		return Base.getAll(this.model, this.getResource(), PRIVACYPREFERENCE, eu.dime.ps.semantic.model.ppo.PrivacyPreference.class);
	}

    /**
     * Get all values of property PrivacyPreference as a ReactorResult of PrivacyPreference 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.ppo.PrivacyPreference> getAllPrivacyPreference_as() {
		return Base.getAll_as(this.model, this.getResource(), PRIVACYPREFERENCE, eu.dime.ps.semantic.model.ppo.PrivacyPreference.class);
	}
 
    /**
     * Adds a value to property PrivacyPreference as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPrivacyPreference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRIVACYPREFERENCE, value);
	}
	
    /**
     * Adds a value to property PrivacyPreference as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPrivacyPreference( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRIVACYPREFERENCE, value);
	}
    /**
     * Adds a value to property PrivacyPreference from an instance of PrivacyPreference 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPrivacyPreference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ppo.PrivacyPreference value) {
		Base.add(model, instanceResource, PRIVACYPREFERENCE, value);
	}
	
    /**
     * Adds a value to property PrivacyPreference from an instance of PrivacyPreference 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPrivacyPreference(eu.dime.ps.semantic.model.ppo.PrivacyPreference value) {
		Base.add(this.model, this.getResource(), PRIVACYPREFERENCE, value);
	}
  

    /**
     * Sets a value of property PrivacyPreference from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPrivacyPreference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRIVACYPREFERENCE, value);
	}
	
    /**
     * Sets a value of property PrivacyPreference from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPrivacyPreference( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRIVACYPREFERENCE, value);
	}
    /**
     * Sets a value of property PrivacyPreference from an instance of PrivacyPreference 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPrivacyPreference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ppo.PrivacyPreference value) {
		Base.set(model, instanceResource, PRIVACYPREFERENCE, value);
	}
	
    /**
     * Sets a value of property PrivacyPreference from an instance of PrivacyPreference 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPrivacyPreference(eu.dime.ps.semantic.model.ppo.PrivacyPreference value) {
		Base.set(this.model, this.getResource(), PRIVACYPREFERENCE, value);
	}
  


    /**
     * Removes a value of property PrivacyPreference as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePrivacyPreference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRIVACYPREFERENCE, value);
	}
	
    /**
     * Removes a value of property PrivacyPreference as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePrivacyPreference( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRIVACYPREFERENCE, value);
	}
    /**
     * Removes a value of property PrivacyPreference given as an instance of PrivacyPreference 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePrivacyPreference(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.ppo.PrivacyPreference value) {
		Base.remove(model, instanceResource, PRIVACYPREFERENCE, value);
	}
	
    /**
     * Removes a value of property PrivacyPreference given as an instance of PrivacyPreference 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePrivacyPreference(eu.dime.ps.semantic.model.ppo.PrivacyPreference value) {
		Base.remove(this.model, this.getResource(), PRIVACYPREFERENCE, value);
	}
  
    /**
     * Removes all values of property PrivacyPreference     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPrivacyPreference( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRIVACYPREFERENCE);
	}
	
    /**
     * Removes all values of property PrivacyPreference	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPrivacyPreference() {
		Base.removeAll(this.model, this.getResource(), PRIVACYPREFERENCE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7dae7a58 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSituation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SITUATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7dae7a58 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSituation() {
		return Base.has(this.model, this.getResource(), SITUATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7dae7a58 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSituation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SITUATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7dae7a58 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSituation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SITUATION);
	}

     /**
     * Get all values of property Situation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSituation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SITUATION);
	}
	
    /**
     * Get all values of property Situation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSituation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SITUATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Situation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSituation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SITUATION);
	}

    /**
     * Get all values of property Situation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSituation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SITUATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Situation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.dcon.Situation> getAllSituation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SITUATION, eu.dime.ps.semantic.model.dcon.Situation.class);
	}
	
    /**
     * Get all values of property Situation as a ReactorResult of Situation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.dcon.Situation> getAllSituation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SITUATION, eu.dime.ps.semantic.model.dcon.Situation.class);
	}

    /**
     * Get all values of property Situation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.dcon.Situation> getAllSituation() {
		return Base.getAll(this.model, this.getResource(), SITUATION, eu.dime.ps.semantic.model.dcon.Situation.class);
	}

    /**
     * Get all values of property Situation as a ReactorResult of Situation 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.dcon.Situation> getAllSituation_as() {
		return Base.getAll_as(this.model, this.getResource(), SITUATION, eu.dime.ps.semantic.model.dcon.Situation.class);
	}
 
    /**
     * Adds a value to property Situation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSituation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SITUATION, value);
	}
	
    /**
     * Adds a value to property Situation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSituation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SITUATION, value);
	}
    /**
     * Adds a value to property Situation from an instance of Situation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSituation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Situation value) {
		Base.add(model, instanceResource, SITUATION, value);
	}
	
    /**
     * Adds a value to property Situation from an instance of Situation 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSituation(eu.dime.ps.semantic.model.dcon.Situation value) {
		Base.add(this.model, this.getResource(), SITUATION, value);
	}
  

    /**
     * Sets a value of property Situation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSituation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SITUATION, value);
	}
	
    /**
     * Sets a value of property Situation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSituation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SITUATION, value);
	}
    /**
     * Sets a value of property Situation from an instance of Situation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSituation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Situation value) {
		Base.set(model, instanceResource, SITUATION, value);
	}
	
    /**
     * Sets a value of property Situation from an instance of Situation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSituation(eu.dime.ps.semantic.model.dcon.Situation value) {
		Base.set(this.model, this.getResource(), SITUATION, value);
	}
  


    /**
     * Removes a value of property Situation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSituation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SITUATION, value);
	}
	
    /**
     * Removes a value of property Situation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSituation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SITUATION, value);
	}
    /**
     * Removes a value of property Situation given as an instance of Situation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSituation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.dcon.Situation value) {
		Base.remove(model, instanceResource, SITUATION, value);
	}
	
    /**
     * Removes a value of property Situation given as an instance of Situation 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSituation(eu.dime.ps.semantic.model.dcon.Situation value) {
		Base.remove(this.model, this.getResource(), SITUATION, value);
	}
  
    /**
     * Removes all values of property Situation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSituation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SITUATION);
	}
	
    /**
     * Removes all values of property Situation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSituation() {
		Base.removeAll(this.model, this.getResource(), SITUATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@616001af has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasTimestamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TIMESTAMP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@616001af has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasTimestamp() {
		return Base.has(this.model, this.getResource(), TIMESTAMP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@616001af has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasTimestamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TIMESTAMP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@616001af has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasTimestamp( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TIMESTAMP);
	}

     /**
     * Get all values of property Timestamp as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTimestamp_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TIMESTAMP);
	}
	
    /**
     * Get all values of property Timestamp as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTimestamp_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TIMESTAMP, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Timestamp as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTimestamp_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TIMESTAMP);
	}

    /**
     * Get all values of property Timestamp as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllTimestamp_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TIMESTAMP, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Timestamp     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.util.Calendar> getAllTimestamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TIMESTAMP, java.util.Calendar.class);
	}
	
    /**
     * Get all values of property Timestamp as a ReactorResult of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.util.Calendar> getAllTimestamp_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TIMESTAMP, java.util.Calendar.class);
	}

    /**
     * Get all values of property Timestamp     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.util.Calendar> getAllTimestamp() {
		return Base.getAll(this.model, this.getResource(), TIMESTAMP, java.util.Calendar.class);
	}

    /**
     * Get all values of property Timestamp as a ReactorResult of java.util.Calendar 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.util.Calendar> getAllTimestamp_as() {
		return Base.getAll_as(this.model, this.getResource(), TIMESTAMP, java.util.Calendar.class);
	}
 
    /**
     * Adds a value to property Timestamp as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addTimestamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TIMESTAMP, value);
	}
	
    /**
     * Adds a value to property Timestamp as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addTimestamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TIMESTAMP, value);
	}
    /**
     * Adds a value to property Timestamp from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addTimestamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.add(model, instanceResource, TIMESTAMP, value);
	}
	
    /**
     * Adds a value to property Timestamp from an instance of java.util.Calendar 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addTimestamp(java.util.Calendar value) {
		Base.add(this.model, this.getResource(), TIMESTAMP, value);
	}
  

    /**
     * Sets a value of property Timestamp from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setTimestamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TIMESTAMP, value);
	}
	
    /**
     * Sets a value of property Timestamp from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setTimestamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TIMESTAMP, value);
	}
    /**
     * Sets a value of property Timestamp from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setTimestamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, TIMESTAMP, value);
	}
	
    /**
     * Sets a value of property Timestamp from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setTimestamp(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), TIMESTAMP, value);
	}
  


    /**
     * Removes a value of property Timestamp as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeTimestamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TIMESTAMP, value);
	}
	
    /**
     * Removes a value of property Timestamp as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeTimestamp( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TIMESTAMP, value);
	}
    /**
     * Removes a value of property Timestamp given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeTimestamp(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, TIMESTAMP, value);
	}
	
    /**
     * Removes a value of property Timestamp given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeTimestamp(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), TIMESTAMP, value);
	}
  
    /**
     * Removes all values of property Timestamp     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllTimestamp( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TIMESTAMP);
	}
	
    /**
     * Removes all values of property Timestamp	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllTimestamp() {
		Base.removeAll(this.model, this.getResource(), TIMESTAMP);
	}
 }