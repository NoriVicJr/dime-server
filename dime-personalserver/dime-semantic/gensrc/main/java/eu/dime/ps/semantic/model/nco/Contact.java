/*
* Copyright 2013 by the digital.me project (http://www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.nco;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> BelongsToGroup </li>
 *   <li> ContactUID </li>
 *   <li> CustomAttribute </li>
 *   <li> Key </li>
 *   <li> Location </li>
 *   <li> Name </li>
 *   <li> Note </li>
 *   <li> Photo </li>
 *   <li> Representative </li>
 *   <li> Sound </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Contact extends eu.dime.ps.semantic.model.nco.Role {

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Contact */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Contact", false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#belongsToGroup */
    @SuppressWarnings("hiding")
	public static final URI BELONGSTOGROUP = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#belongsToGroup",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contactUID */
    @SuppressWarnings("hiding")
	public static final URI CONTACTUID = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contactUID",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasCustomAttribute */
    @SuppressWarnings("hiding")
	public static final URI CUSTOMATTRIBUTE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasCustomAttribute",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#key */
    @SuppressWarnings("hiding")
	public static final URI KEY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#key",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasLocation */
    @SuppressWarnings("hiding")
	public static final URI LOCATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasLocation",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasName */
    @SuppressWarnings("hiding")
	public static final URI NAME = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasName",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#note */
    @SuppressWarnings("hiding")
	public static final URI NOTE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#note",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#photo */
    @SuppressWarnings("hiding")
	public static final URI PHOTO = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#photo",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#representative */
    @SuppressWarnings("hiding")
	public static final URI REPRESENTATIVE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#representative",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#sound */
    @SuppressWarnings("hiding")
	public static final URI SOUND = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#sound",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#belongsToGroup",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#contactUID",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasCustomAttribute",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#key",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasLocation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasName",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#note",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#photo",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#representative",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#sound",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Contact (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Contact (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Contact (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Contact (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Contact (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Contact  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Contact  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Contact.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Contact).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Contact> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Contact.class );
	}

    /**
	 * Remove rdf:type Contact from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Ontologies20070510nid3FileOwner' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOntologies20070510nid3FileOwner_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.ONTOLOGIES20070510NID3FILEOWNER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Ontologies20070510nid3FileOwner' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOntologies20070510nid3FileOwner_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.ONTOLOGIES20070510NID3FILEOWNER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Ontologies20070510nid3FileOwner' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllOntologies20070510nid3FileOwner_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.ONTOLOGIES20070510NID3FILEOWNER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SharedWithContact' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSharedWithContact_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.RDFReactorThing.SHAREDWITHCONTACT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SharedWithContact' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSharedWithContact_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.RDFReactorThing.SHAREDWITHCONTACT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SharedWithContact' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSharedWithContact_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.RDFReactorThing.SHAREDWITHCONTACT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InvolvedContact' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInvolvedContact_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.ncal.AttendeeOrOrganizer.INVOLVEDCONTACT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InvolvedContact' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInvolvedContact_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.ncal.AttendeeOrOrganizer.INVOLVEDCONTACT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InvolvedContact' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInvolvedContact_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.ncal.AttendeeOrOrganizer.INVOLVEDCONTACT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SentBy' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSentBy_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.ncal.AttendeeOrOrganizer.SENTBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SentBy' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSentBy_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.ncal.AttendeeOrOrganizer.SENTBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SentBy' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSentBy_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.ncal.AttendeeOrOrganizer.SENTBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DelegatedFrom' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDelegatedFrom_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.ncal.Attendee.DELEGATEDFROM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DelegatedFrom' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDelegatedFrom_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.ncal.Attendee.DELEGATEDFROM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DelegatedFrom' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDelegatedFrom_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.ncal.Attendee.DELEGATEDFROM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DelegatedTo' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDelegatedTo_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.ncal.Attendee.DELEGATEDTO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DelegatedTo' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDelegatedTo_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.ncal.Attendee.DELEGATEDTO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DelegatedTo' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDelegatedTo_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.ncal.Attendee.DELEGATEDTO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Member' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMember_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.ncal.Attendee.MEMBER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Member' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMember_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.ncal.Attendee.MEMBER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Member' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllMember_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.ncal.Attendee.MEMBER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Representative' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRepresentative_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nco.Contact.REPRESENTATIVE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Representative' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRepresentative_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nco.Contact.REPRESENTATIVE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Representative' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRepresentative_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nco.Contact.REPRESENTATIVE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Artist' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllArtist_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nexif.Photo.ARTIST, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Artist' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllArtist_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nexif.Photo.ARTIST, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Artist' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllArtist_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nexif.Photo.ARTIST, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Actor' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllActor_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nfo.Video.ACTOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Actor' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllActor_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nfo.Video.ACTOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Actor' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllActor_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nfo.Video.ACTOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'AssistantDirector' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAssistantDirector_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nfo.Video.ASSISTANTDIRECTOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'AssistantDirector' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAssistantDirector_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nfo.Video.ASSISTANTDIRECTOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'AssistantDirector' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllAssistantDirector_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nfo.Video.ASSISTANTDIRECTOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Cinematographer' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCinematographer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nfo.Video.CINEMATOGRAPHER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Cinematographer' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCinematographer_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nfo.Video.CINEMATOGRAPHER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Cinematographer' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCinematographer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nfo.Video.CINEMATOGRAPHER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Director' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDirector_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nfo.Video.DIRECTOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Director' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDirector_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nfo.Video.DIRECTOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Director' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDirector_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nfo.Video.DIRECTOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Producer' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllProducer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nfo.Video.PRODUCER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Producer' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllProducer_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nfo.Video.PRODUCER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Producer' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllProducer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nfo.Video.PRODUCER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Writer' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWriter_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nfo.Video.WRITER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Writer' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWriter_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nfo.Video.WRITER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Writer' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllWriter_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nfo.Video.WRITER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'FileOwner' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFileOwner_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nfo.FileDataObject.FILEOWNER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'FileOwner' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFileOwner_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nfo.FileDataObject.FILEOWNER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'FileOwner' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFileOwner_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nfo.FileDataObject.FILEOWNER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Foundry' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFoundry_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nfo.Font.FOUNDRY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Foundry' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFoundry_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nfo.Font.FOUNDRY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Foundry' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFoundry_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nfo.Font.FOUNDRY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'BackgroundArtist' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBackgroundArtist_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nid3.ID3Audio.BACKGROUNDARTIST, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'BackgroundArtist' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBackgroundArtist_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nid3.ID3Audio.BACKGROUNDARTIST, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'BackgroundArtist' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllBackgroundArtist_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nid3.ID3Audio.BACKGROUNDARTIST, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Composer' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllComposer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nid3.ID3Audio.COMPOSER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Composer' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllComposer_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nid3.ID3Audio.COMPOSER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Composer' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllComposer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nid3.ID3Audio.COMPOSER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Conductor' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllConductor_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nid3.ID3Audio.CONDUCTOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Conductor' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllConductor_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nid3.ID3Audio.CONDUCTOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Conductor' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllConductor_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nid3.ID3Audio.CONDUCTOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EncodedBy' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEncodedBy_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nid3.ID3Audio.ENCODEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EncodedBy' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEncodedBy_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nid3.ID3Audio.ENCODEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EncodedBy' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllEncodedBy_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nid3.ID3Audio.ENCODEDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InternetRadioStationOwner' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInternetRadioStationOwner_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nid3.ID3Audio.INTERNETRADIOSTATIONOWNER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InternetRadioStationOwner' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInternetRadioStationOwner_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nid3.ID3Audio.INTERNETRADIOSTATIONOWNER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InternetRadioStationOwner' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInternetRadioStationOwner_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nid3.ID3Audio.INTERNETRADIOSTATIONOWNER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InterpretedBy' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInterpretedBy_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nid3.ID3Audio.INTERPRETEDBY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InterpretedBy' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInterpretedBy_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nid3.ID3Audio.INTERPRETEDBY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InterpretedBy' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInterpretedBy_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nid3.ID3Audio.INTERPRETEDBY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'LeadArtist' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLeadArtist_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nid3.ID3Audio.LEADARTIST, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'LeadArtist' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLeadArtist_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nid3.ID3Audio.LEADARTIST, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'LeadArtist' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllLeadArtist_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nid3.ID3Audio.LEADARTIST, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Licensee' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLicensee_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nid3.ID3Audio.LICENSEE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Licensee' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLicensee_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nid3.ID3Audio.LICENSEE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Licensee' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllLicensee_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nid3.ID3Audio.LICENSEE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Ontologies20070510nid3Publisher' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOntologies20070510nid3Publisher_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nid3.ID3Audio.ONTOLOGIES20070510NID3PUBLISHER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Ontologies20070510nid3Publisher' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOntologies20070510nid3Publisher_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nid3.ID3Audio.ONTOLOGIES20070510NID3PUBLISHER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Ontologies20070510nid3Publisher' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllOntologies20070510nid3Publisher_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nid3.ID3Audio.ONTOLOGIES20070510NID3PUBLISHER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'OriginalArtist' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOriginalArtist_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nid3.ID3Audio.ORIGINALARTIST, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'OriginalArtist' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOriginalArtist_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nid3.ID3Audio.ORIGINALARTIST, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'OriginalArtist' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllOriginalArtist_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nid3.ID3Audio.ORIGINALARTIST, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'OriginalTextWriter' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOriginalTextWriter_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nid3.ID3Audio.ORIGINALTEXTWRITER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'OriginalTextWriter' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOriginalTextWriter_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nid3.ID3Audio.ORIGINALTEXTWRITER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'OriginalTextWriter' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllOriginalTextWriter_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nid3.ID3Audio.ORIGINALTEXTWRITER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'TextWriter' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTextWriter_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nid3.ID3Audio.TEXTWRITER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'TextWriter' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTextWriter_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nid3.ID3Audio.TEXTWRITER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'TextWriter' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTextWriter_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nid3.ID3Audio.TEXTWRITER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InvolvedPersonContact' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInvolvedPersonContact_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nid3.InvolvedPerson.INVOLVEDPERSONCONTACT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InvolvedPersonContact' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInvolvedPersonContact_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nid3.InvolvedPerson.INVOLVEDPERSONCONTACT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InvolvedPersonContact' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllInvolvedPersonContact_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nid3.InvolvedPerson.INVOLVEDPERSONCONTACT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'NcoContributor' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNcoContributor_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nie.InformationElement.NCOCONTRIBUTOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'NcoContributor' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNcoContributor_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nie.InformationElement.NCOCONTRIBUTOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'NcoContributor' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNcoContributor_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nie.InformationElement.NCOCONTRIBUTOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'NcoCreator' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNcoCreator_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nie.InformationElement.NCOCREATOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'NcoCreator' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNcoCreator_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nie.InformationElement.NCOCREATOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'NcoCreator' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllNcoCreator_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nie.InformationElement.NCOCREATOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Publisher' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPublisher_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nie.InformationElement.PUBLISHER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Publisher' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPublisher_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nie.InformationElement.PUBLISHER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Publisher' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPublisher_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nie.InformationElement.PUBLISHER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Lyricist' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLyricist_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nmm.MusicPiece.LYRICIST, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Lyricist' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLyricist_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nmm.MusicPiece.LYRICIST, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Lyricist' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllLyricist_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nmm.MusicPiece.LYRICIST, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Performer' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPerformer_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nmm.MusicPiece.PERFORMER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Performer' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPerformer_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nmm.MusicPiece.PERFORMER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Performer' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPerformer_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nmm.MusicPiece.PERFORMER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'From' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFrom_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nmo.Message.FROM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'From' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFrom_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nmo.Message.FROM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'From' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFrom_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nmo.Message.FROM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'PrimaryRecipient' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrimaryRecipient_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nmo.Message.PRIMARYRECIPIENT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'PrimaryRecipient' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrimaryRecipient_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nmo.Message.PRIMARYRECIPIENT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'PrimaryRecipient' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPrimaryRecipient_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nmo.Message.PRIMARYRECIPIENT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Recipient' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRecipient_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nmo.Message.RECIPIENT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Recipient' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRecipient_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nmo.Message.RECIPIENT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Recipient' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllRecipient_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nmo.Message.RECIPIENT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'ReplyTo' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReplyTo_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nmo.Message.REPLYTO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'ReplyTo' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReplyTo_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nmo.Message.REPLYTO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'ReplyTo' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllReplyTo_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nmo.Message.REPLYTO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'SecondaryRecipient' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSecondaryRecipient_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nmo.Message.SECONDARYRECIPIENT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'SecondaryRecipient' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSecondaryRecipient_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nmo.Message.SECONDARYRECIPIENT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'SecondaryRecipient' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSecondaryRecipient_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nmo.Message.SECONDARYRECIPIENT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Sender' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSender_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nmo.Message.SENDER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Sender' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSender_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nmo.Message.SENDER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Sender' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSender_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nmo.Message.SENDER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Bcc' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBcc_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nmo.Email.BCC, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Bcc' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllBcc_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nmo.Email.BCC, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Bcc' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllBcc_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nmo.Email.BCC, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Cc' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCc_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nmo.Email.CC, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Cc' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCc_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nmo.Email.CC, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Cc' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllCc_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nmo.Email.CC, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'To' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTo_Inverse(Model model, Object objectValue) {
		return Base.getAll_Inverse(model, eu.dime.ps.semantic.model.nmo.Email.TO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'To' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTo_Inverse() {
		return Base.getAll_Inverse(this.model, eu.dime.ps.semantic.model.nmo.Email.TO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'To' to this Contact instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllTo_Inverse_as(Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, eu.dime.ps.semantic.model.nmo.Email.TO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389b7b33 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBelongsToGroup(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BELONGSTOGROUP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389b7b33 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBelongsToGroup() {
		return Base.has(this.model, this.getResource(), BELONGSTOGROUP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389b7b33 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBelongsToGroup(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BELONGSTOGROUP);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389b7b33 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBelongsToGroup( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BELONGSTOGROUP);
	}

     /**
     * Get all values of property BelongsToGroup as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBelongsToGroup_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BELONGSTOGROUP);
	}
	
    /**
     * Get all values of property BelongsToGroup as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBelongsToGroup_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BELONGSTOGROUP, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BelongsToGroup as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBelongsToGroup_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BELONGSTOGROUP);
	}

    /**
     * Get all values of property BelongsToGroup as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBelongsToGroup_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BELONGSTOGROUP, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BelongsToGroup     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.ContactGroup> getAllBelongsToGroup(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BELONGSTOGROUP, eu.dime.ps.semantic.model.nco.ContactGroup.class);
	}
	
    /**
     * Get all values of property BelongsToGroup as a ReactorResult of ContactGroup 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.ContactGroup> getAllBelongsToGroup_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BELONGSTOGROUP, eu.dime.ps.semantic.model.nco.ContactGroup.class);
	}

    /**
     * Get all values of property BelongsToGroup     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.ContactGroup> getAllBelongsToGroup() {
		return Base.getAll(this.model, this.getResource(), BELONGSTOGROUP, eu.dime.ps.semantic.model.nco.ContactGroup.class);
	}

    /**
     * Get all values of property BelongsToGroup as a ReactorResult of ContactGroup 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.ContactGroup> getAllBelongsToGroup_as() {
		return Base.getAll_as(this.model, this.getResource(), BELONGSTOGROUP, eu.dime.ps.semantic.model.nco.ContactGroup.class);
	}
 
    /**
     * Adds a value to property BelongsToGroup as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBelongsToGroup(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BELONGSTOGROUP, value);
	}
	
    /**
     * Adds a value to property BelongsToGroup as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBelongsToGroup( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BELONGSTOGROUP, value);
	}
    /**
     * Adds a value to property BelongsToGroup from an instance of ContactGroup 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBelongsToGroup(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactGroup value) {
		Base.add(model, instanceResource, BELONGSTOGROUP, value);
	}
	
    /**
     * Adds a value to property BelongsToGroup from an instance of ContactGroup 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBelongsToGroup(eu.dime.ps.semantic.model.nco.ContactGroup value) {
		Base.add(this.model, this.getResource(), BELONGSTOGROUP, value);
	}
  

    /**
     * Sets a value of property BelongsToGroup from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBelongsToGroup( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BELONGSTOGROUP, value);
	}
	
    /**
     * Sets a value of property BelongsToGroup from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBelongsToGroup( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BELONGSTOGROUP, value);
	}
    /**
     * Sets a value of property BelongsToGroup from an instance of ContactGroup 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBelongsToGroup(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactGroup value) {
		Base.set(model, instanceResource, BELONGSTOGROUP, value);
	}
	
    /**
     * Sets a value of property BelongsToGroup from an instance of ContactGroup 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBelongsToGroup(eu.dime.ps.semantic.model.nco.ContactGroup value) {
		Base.set(this.model, this.getResource(), BELONGSTOGROUP, value);
	}
  


    /**
     * Removes a value of property BelongsToGroup as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBelongsToGroup( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BELONGSTOGROUP, value);
	}
	
    /**
     * Removes a value of property BelongsToGroup as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBelongsToGroup( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BELONGSTOGROUP, value);
	}
    /**
     * Removes a value of property BelongsToGroup given as an instance of ContactGroup 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBelongsToGroup(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactGroup value) {
		Base.remove(model, instanceResource, BELONGSTOGROUP, value);
	}
	
    /**
     * Removes a value of property BelongsToGroup given as an instance of ContactGroup 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBelongsToGroup(eu.dime.ps.semantic.model.nco.ContactGroup value) {
		Base.remove(this.model, this.getResource(), BELONGSTOGROUP, value);
	}
  
    /**
     * Removes all values of property BelongsToGroup     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBelongsToGroup( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BELONGSTOGROUP);
	}
	
    /**
     * Removes all values of property BelongsToGroup	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBelongsToGroup() {
		Base.removeAll(this.model, this.getResource(), BELONGSTOGROUP);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@152883e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContactUID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTACTUID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@152883e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContactUID() {
		return Base.has(this.model, this.getResource(), CONTACTUID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@152883e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContactUID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTACTUID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@152883e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContactUID( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTACTUID);
	}

    /**
     * Get single value of property ContactUID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getContactUID_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, CONTACTUID);
	}
	
    /**
     * Get single value of property ContactUID as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getContactUID_asNode() {
		return Base.get_asNode(this.model, this.getResource(), CONTACTUID);
	}
     /**
     * Get single value of property ContactUID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.lang.String getContactUID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.lang.String) Base.get(model, instanceResource, CONTACTUID, java.lang.String.class);
	}
	
    /**
     * Get single value of property ContactUID  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.lang.String getContactUID() {
		return (java.lang.String) Base.get(this.model, this.getResource(), CONTACTUID, java.lang.String.class);
	}
  
    /**
     * Adds a value to property ContactUID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addContactUID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, CONTACTUID, value, 1);
	}
	
    /**
     * Adds a value to property ContactUID as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addContactUID( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTACTUID, value, 1);
	}
    /**
     * Adds a value to property ContactUID from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addContactUID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value)
    throws CardinalityException {
		Base.add(model, instanceResource, CONTACTUID, value, 1);
	}
	
    /**
     * Adds a value to property ContactUID from an instance of java.lang.String 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addContactUID(java.lang.String value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), CONTACTUID, value, 1);
	}
 
 

    /**
     * Sets a value of property ContactUID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContactUID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTACTUID, value);
	}
	
    /**
     * Sets a value of property ContactUID from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContactUID( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTACTUID, value);
	}
    /**
     * Sets a value of property ContactUID from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContactUID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, CONTACTUID, value);
	}
	
    /**
     * Sets a value of property ContactUID from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContactUID(java.lang.String value) {
		Base.set(this.model, this.getResource(), CONTACTUID, value);
	}
  


    /**
     * Removes a value of property ContactUID as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContactUID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTACTUID, value);
	}
	
    /**
     * Removes a value of property ContactUID as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContactUID( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTACTUID, value);
	}
    /**
     * Removes a value of property ContactUID given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContactUID(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, CONTACTUID, value);
	}
	
    /**
     * Removes a value of property ContactUID given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContactUID(java.lang.String value) {
		Base.remove(this.model, this.getResource(), CONTACTUID, value);
	}
  
    /**
     * Removes all values of property ContactUID     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContactUID( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTACTUID);
	}
	
    /**
     * Removes all values of property ContactUID	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContactUID() {
		Base.removeAll(this.model, this.getResource(), CONTACTUID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@624fb1d4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasCustomAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CUSTOMATTRIBUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@624fb1d4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasCustomAttribute() {
		return Base.has(this.model, this.getResource(), CUSTOMATTRIBUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@624fb1d4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasCustomAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CUSTOMATTRIBUTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@624fb1d4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasCustomAttribute( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CUSTOMATTRIBUTE);
	}

     /**
     * Get all values of property CustomAttribute as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCustomAttribute_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CUSTOMATTRIBUTE);
	}
	
    /**
     * Get all values of property CustomAttribute as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCustomAttribute_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CUSTOMATTRIBUTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property CustomAttribute as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCustomAttribute_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CUSTOMATTRIBUTE);
	}

    /**
     * Get all values of property CustomAttribute as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllCustomAttribute_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CUSTOMATTRIBUTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property CustomAttribute     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllCustomAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CUSTOMATTRIBUTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
	
    /**
     * Get all values of property CustomAttribute as a ReactorResult of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllCustomAttribute_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CUSTOMATTRIBUTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property CustomAttribute     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.RDFReactorThing> getAllCustomAttribute() {
		return Base.getAll(this.model, this.getResource(), CUSTOMATTRIBUTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}

    /**
     * Get all values of property CustomAttribute as a ReactorResult of RDFReactorThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.RDFReactorThing> getAllCustomAttribute_as() {
		return Base.getAll_as(this.model, this.getResource(), CUSTOMATTRIBUTE, eu.dime.ps.semantic.model.RDFReactorThing.class);
	}
 
    /**
     * Adds a value to property CustomAttribute as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addCustomAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CUSTOMATTRIBUTE, value);
	}
	
    /**
     * Adds a value to property CustomAttribute as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addCustomAttribute( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CUSTOMATTRIBUTE, value);
	}
    /**
     * Adds a value to property CustomAttribute from an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addCustomAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(model, instanceResource, CUSTOMATTRIBUTE, value);
	}
	
    /**
     * Adds a value to property CustomAttribute from an instance of RDFReactorThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addCustomAttribute(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.add(this.model, this.getResource(), CUSTOMATTRIBUTE, value);
	}
  

    /**
     * Sets a value of property CustomAttribute from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setCustomAttribute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CUSTOMATTRIBUTE, value);
	}
	
    /**
     * Sets a value of property CustomAttribute from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setCustomAttribute( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CUSTOMATTRIBUTE, value);
	}
    /**
     * Sets a value of property CustomAttribute from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setCustomAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(model, instanceResource, CUSTOMATTRIBUTE, value);
	}
	
    /**
     * Sets a value of property CustomAttribute from an instance of RDFReactorThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setCustomAttribute(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.set(this.model, this.getResource(), CUSTOMATTRIBUTE, value);
	}
  


    /**
     * Removes a value of property CustomAttribute as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeCustomAttribute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CUSTOMATTRIBUTE, value);
	}
	
    /**
     * Removes a value of property CustomAttribute as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeCustomAttribute( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CUSTOMATTRIBUTE, value);
	}
    /**
     * Removes a value of property CustomAttribute given as an instance of RDFReactorThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeCustomAttribute(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(model, instanceResource, CUSTOMATTRIBUTE, value);
	}
	
    /**
     * Removes a value of property CustomAttribute given as an instance of RDFReactorThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeCustomAttribute(eu.dime.ps.semantic.model.RDFReactorThing value) {
		Base.remove(this.model, this.getResource(), CUSTOMATTRIBUTE, value);
	}
  
    /**
     * Removes all values of property CustomAttribute     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllCustomAttribute( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CUSTOMATTRIBUTE);
	}
	
    /**
     * Removes all values of property CustomAttribute	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllCustomAttribute() {
		Base.removeAll(this.model, this.getResource(), CUSTOMATTRIBUTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53379d6a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, KEY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53379d6a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasKey() {
		return Base.has(this.model, this.getResource(), KEY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53379d6a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, KEY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@53379d6a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasKey( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), KEY);
	}

     /**
     * Get all values of property Key as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllKey_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, KEY);
	}
	
    /**
     * Get all values of property Key as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllKey_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, KEY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Key as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllKey_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), KEY);
	}

    /**
     * Get all values of property Key as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllKey_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), KEY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Key     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, KEY, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
	
    /**
     * Get all values of property Key as a ReactorResult of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllKey_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, KEY, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property Key     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllKey() {
		return Base.getAll(this.model, this.getResource(), KEY, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property Key as a ReactorResult of DataObject 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllKey_as() {
		return Base.getAll_as(this.model, this.getResource(), KEY, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
 
    /**
     * Adds a value to property Key as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, KEY, value);
	}
	
    /**
     * Adds a value to property Key as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addKey( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), KEY, value);
	}
    /**
     * Adds a value to property Key from an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(model, instanceResource, KEY, value);
	}
	
    /**
     * Adds a value to property Key from an instance of DataObject 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addKey(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(this.model, this.getResource(), KEY, value);
	}
  

    /**
     * Sets a value of property Key from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setKey( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, KEY, value);
	}
	
    /**
     * Sets a value of property Key from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setKey( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), KEY, value);
	}
    /**
     * Sets a value of property Key from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(model, instanceResource, KEY, value);
	}
	
    /**
     * Sets a value of property Key from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setKey(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(this.model, this.getResource(), KEY, value);
	}
  


    /**
     * Removes a value of property Key as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeKey( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, KEY, value);
	}
	
    /**
     * Removes a value of property Key as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeKey( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), KEY, value);
	}
    /**
     * Removes a value of property Key given as an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeKey(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(model, instanceResource, KEY, value);
	}
	
    /**
     * Removes a value of property Key given as an instance of DataObject 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeKey(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(this.model, this.getResource(), KEY, value);
	}
  
    /**
     * Removes all values of property Key     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllKey( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, KEY);
	}
	
    /**
     * Removes all values of property Key	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllKey() {
		Base.removeAll(this.model, this.getResource(), KEY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2412c49e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2412c49e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasLocation() {
		return Base.has(this.model, this.getResource(), LOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2412c49e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LOCATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2412c49e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasLocation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LOCATION);
	}

    /**
     * Get single value of property Location as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getLocation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, LOCATION);
	}
	
    /**
     * Get single value of property Location as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getLocation_asNode() {
		return Base.get_asNode(this.model, this.getResource(), LOCATION);
	}
     /**
     * Get single value of property Location     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.geo.Point getLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.geo.Point) Base.get(model, instanceResource, LOCATION, eu.dime.ps.semantic.model.geo.Point.class);
	}
	
    /**
     * Get single value of property Location  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.geo.Point getLocation() {
		return (eu.dime.ps.semantic.model.geo.Point) Base.get(this.model, this.getResource(), LOCATION, eu.dime.ps.semantic.model.geo.Point.class);
	}
  
    /**
     * Adds a value to property Location as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, LOCATION, value, 1);
	}
	
    /**
     * Adds a value to property Location as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addLocation( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LOCATION, value, 1);
	}
    /**
     * Adds a value to property Location from an instance of Point 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.geo.Point value)
    throws CardinalityException {
		Base.add(model, instanceResource, LOCATION, value, 1);
	}
	
    /**
     * Adds a value to property Location from an instance of Point 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addLocation(eu.dime.ps.semantic.model.geo.Point value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), LOCATION, value, 1);
	}
 
 

    /**
     * Sets a value of property Location from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LOCATION, value);
	}
	
    /**
     * Sets a value of property Location from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LOCATION, value);
	}
    /**
     * Sets a value of property Location from an instance of Point 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.geo.Point value) {
		Base.set(model, instanceResource, LOCATION, value);
	}
	
    /**
     * Sets a value of property Location from an instance of Point 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setLocation(eu.dime.ps.semantic.model.geo.Point value) {
		Base.set(this.model, this.getResource(), LOCATION, value);
	}
  


    /**
     * Removes a value of property Location as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LOCATION, value);
	}
	
    /**
     * Removes a value of property Location as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeLocation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LOCATION, value);
	}
    /**
     * Removes a value of property Location given as an instance of Point 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeLocation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.geo.Point value) {
		Base.remove(model, instanceResource, LOCATION, value);
	}
	
    /**
     * Removes a value of property Location given as an instance of Point 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeLocation(eu.dime.ps.semantic.model.geo.Point value) {
		Base.remove(this.model, this.getResource(), LOCATION, value);
	}
  
    /**
     * Removes all values of property Location     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllLocation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LOCATION);
	}
	
    /**
     * Removes all values of property Location	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllLocation() {
		Base.removeAll(this.model, this.getResource(), LOCATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c59562f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c59562f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasName() {
		return Base.has(this.model, this.getResource(), NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c59562f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6c59562f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NAME);
	}

     /**
     * Get all values of property Name as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NAME);
	}
	
    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NAME);
	}

    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Name     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Name> getAllName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NAME, eu.dime.ps.semantic.model.nco.Name.class);
	}
	
    /**
     * Get all values of property Name as a ReactorResult of Name 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Name> getAllName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAME, eu.dime.ps.semantic.model.nco.Name.class);
	}

    /**
     * Get all values of property Name     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Name> getAllName() {
		return Base.getAll(this.model, this.getResource(), NAME, eu.dime.ps.semantic.model.nco.Name.class);
	}

    /**
     * Get all values of property Name as a ReactorResult of Name 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Name> getAllName_as() {
		return Base.getAll_as(this.model, this.getResource(), NAME, eu.dime.ps.semantic.model.nco.Name.class);
	}
 
    /**
     * Adds a value to property Name as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NAME, value);
	}
	
    /**
     * Adds a value to property Name as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NAME, value);
	}
    /**
     * Adds a value to property Name from an instance of Name 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Name value) {
		Base.add(model, instanceResource, NAME, value);
	}
	
    /**
     * Adds a value to property Name from an instance of Name 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addName(eu.dime.ps.semantic.model.nco.Name value) {
		Base.add(this.model, this.getResource(), NAME, value);
	}
  

    /**
     * Sets a value of property Name from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NAME, value);
	}
	
    /**
     * Sets a value of property Name from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NAME, value);
	}
    /**
     * Sets a value of property Name from an instance of Name 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Name value) {
		Base.set(model, instanceResource, NAME, value);
	}
	
    /**
     * Sets a value of property Name from an instance of Name 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setName(eu.dime.ps.semantic.model.nco.Name value) {
		Base.set(this.model, this.getResource(), NAME, value);
	}
  


    /**
     * Removes a value of property Name as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NAME, value);
	}
	
    /**
     * Removes a value of property Name as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NAME, value);
	}
    /**
     * Removes a value of property Name given as an instance of Name 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Name value) {
		Base.remove(model, instanceResource, NAME, value);
	}
	
    /**
     * Removes a value of property Name given as an instance of Name 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeName(eu.dime.ps.semantic.model.nco.Name value) {
		Base.remove(this.model, this.getResource(), NAME, value);
	}
  
    /**
     * Removes all values of property Name     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NAME);
	}
	
    /**
     * Removes all values of property Name	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllName() {
		Base.removeAll(this.model, this.getResource(), NAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@667d09c1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@667d09c1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasNote() {
		return Base.has(this.model, this.getResource(), NOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@667d09c1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@667d09c1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasNote( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NOTE);
	}

     /**
     * Get all values of property Note as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNote_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NOTE);
	}
	
    /**
     * Get all values of property Note as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNote_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NOTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Note as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNote_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NOTE);
	}

    /**
     * Get all values of property Note as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllNote_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NOTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Note     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NOTE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Note as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllNote_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NOTE, java.lang.String.class);
	}

    /**
     * Get all values of property Note     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllNote() {
		return Base.getAll(this.model, this.getResource(), NOTE, java.lang.String.class);
	}

    /**
     * Get all values of property Note as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllNote_as() {
		return Base.getAll_as(this.model, this.getResource(), NOTE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Note as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NOTE, value);
	}
	
    /**
     * Adds a value to property Note as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NOTE, value);
	}
    /**
     * Adds a value to property Note from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NOTE, value);
	}
	
    /**
     * Adds a value to property Note from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addNote(java.lang.String value) {
		Base.add(this.model, this.getResource(), NOTE, value);
	}
  

    /**
     * Sets a value of property Note from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NOTE, value);
	}
	
    /**
     * Sets a value of property Note from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NOTE, value);
	}
    /**
     * Sets a value of property Note from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NOTE, value);
	}
	
    /**
     * Sets a value of property Note from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setNote(java.lang.String value) {
		Base.set(this.model, this.getResource(), NOTE, value);
	}
  


    /**
     * Removes a value of property Note as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NOTE, value);
	}
	
    /**
     * Removes a value of property Note as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NOTE, value);
	}
    /**
     * Removes a value of property Note given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NOTE, value);
	}
	
    /**
     * Removes a value of property Note given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeNote(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NOTE, value);
	}
  
    /**
     * Removes all values of property Note     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NOTE);
	}
	
    /**
     * Removes all values of property Note	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllNote() {
		Base.removeAll(this.model, this.getResource(), NOTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@267efa66 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPhoto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PHOTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@267efa66 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPhoto() {
		return Base.has(this.model, this.getResource(), PHOTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@267efa66 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPhoto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PHOTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@267efa66 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPhoto( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PHOTO);
	}

     /**
     * Get all values of property Photo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPhoto_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PHOTO);
	}
	
    /**
     * Get all values of property Photo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPhoto_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PHOTO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Photo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPhoto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PHOTO);
	}

    /**
     * Get all values of property Photo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPhoto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PHOTO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Photo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllPhoto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PHOTO, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
	
    /**
     * Get all values of property Photo as a ReactorResult of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllPhoto_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PHOTO, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property Photo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllPhoto() {
		return Base.getAll(this.model, this.getResource(), PHOTO, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property Photo as a ReactorResult of DataObject 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllPhoto_as() {
		return Base.getAll_as(this.model, this.getResource(), PHOTO, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
 
    /**
     * Adds a value to property Photo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPhoto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PHOTO, value);
	}
	
    /**
     * Adds a value to property Photo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPhoto( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PHOTO, value);
	}
    /**
     * Adds a value to property Photo from an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPhoto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(model, instanceResource, PHOTO, value);
	}
	
    /**
     * Adds a value to property Photo from an instance of DataObject 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPhoto(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(this.model, this.getResource(), PHOTO, value);
	}
  

    /**
     * Sets a value of property Photo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPhoto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PHOTO, value);
	}
	
    /**
     * Sets a value of property Photo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPhoto( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PHOTO, value);
	}
    /**
     * Sets a value of property Photo from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPhoto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(model, instanceResource, PHOTO, value);
	}
	
    /**
     * Sets a value of property Photo from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPhoto(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(this.model, this.getResource(), PHOTO, value);
	}
  


    /**
     * Removes a value of property Photo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePhoto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PHOTO, value);
	}
	
    /**
     * Removes a value of property Photo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePhoto( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PHOTO, value);
	}
    /**
     * Removes a value of property Photo given as an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePhoto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(model, instanceResource, PHOTO, value);
	}
	
    /**
     * Removes a value of property Photo given as an instance of DataObject 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePhoto(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(this.model, this.getResource(), PHOTO, value);
	}
  
    /**
     * Removes all values of property Photo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPhoto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PHOTO);
	}
	
    /**
     * Removes all values of property Photo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPhoto() {
		Base.removeAll(this.model, this.getResource(), PHOTO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cf806eb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasRepresentative(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REPRESENTATIVE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cf806eb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasRepresentative() {
		return Base.has(this.model, this.getResource(), REPRESENTATIVE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cf806eb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasRepresentative(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REPRESENTATIVE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7cf806eb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasRepresentative( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REPRESENTATIVE);
	}

     /**
     * Get all values of property Representative as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRepresentative_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REPRESENTATIVE);
	}
	
    /**
     * Get all values of property Representative as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRepresentative_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPRESENTATIVE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Representative as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRepresentative_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REPRESENTATIVE);
	}

    /**
     * Get all values of property Representative as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllRepresentative_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REPRESENTATIVE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Representative     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllRepresentative(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REPRESENTATIVE, eu.dime.ps.semantic.model.nco.Contact.class);
	}
	
    /**
     * Get all values of property Representative as a ReactorResult of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllRepresentative_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPRESENTATIVE, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Representative     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Contact> getAllRepresentative() {
		return Base.getAll(this.model, this.getResource(), REPRESENTATIVE, eu.dime.ps.semantic.model.nco.Contact.class);
	}

    /**
     * Get all values of property Representative as a ReactorResult of Contact 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Contact> getAllRepresentative_as() {
		return Base.getAll_as(this.model, this.getResource(), REPRESENTATIVE, eu.dime.ps.semantic.model.nco.Contact.class);
	}
 
    /**
     * Adds a value to property Representative as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addRepresentative(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REPRESENTATIVE, value);
	}
	
    /**
     * Adds a value to property Representative as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addRepresentative( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REPRESENTATIVE, value);
	}
    /**
     * Adds a value to property Representative from an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addRepresentative(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(model, instanceResource, REPRESENTATIVE, value);
	}
	
    /**
     * Adds a value to property Representative from an instance of Contact 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addRepresentative(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.add(this.model, this.getResource(), REPRESENTATIVE, value);
	}
  

    /**
     * Sets a value of property Representative from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setRepresentative( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REPRESENTATIVE, value);
	}
	
    /**
     * Sets a value of property Representative from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setRepresentative( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REPRESENTATIVE, value);
	}
    /**
     * Sets a value of property Representative from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setRepresentative(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(model, instanceResource, REPRESENTATIVE, value);
	}
	
    /**
     * Sets a value of property Representative from an instance of Contact 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setRepresentative(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.set(this.model, this.getResource(), REPRESENTATIVE, value);
	}
  


    /**
     * Removes a value of property Representative as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeRepresentative( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REPRESENTATIVE, value);
	}
	
    /**
     * Removes a value of property Representative as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeRepresentative( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REPRESENTATIVE, value);
	}
    /**
     * Removes a value of property Representative given as an instance of Contact 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeRepresentative(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(model, instanceResource, REPRESENTATIVE, value);
	}
	
    /**
     * Removes a value of property Representative given as an instance of Contact 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeRepresentative(eu.dime.ps.semantic.model.nco.Contact value) {
		Base.remove(this.model, this.getResource(), REPRESENTATIVE, value);
	}
  
    /**
     * Removes all values of property Representative     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllRepresentative( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REPRESENTATIVE);
	}
	
    /**
     * Removes all values of property Representative	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllRepresentative() {
		Base.removeAll(this.model, this.getResource(), REPRESENTATIVE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32844cb3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSound(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SOUND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32844cb3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSound() {
		return Base.has(this.model, this.getResource(), SOUND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32844cb3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSound(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SOUND);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@32844cb3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSound( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SOUND);
	}

     /**
     * Get all values of property Sound as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSound_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SOUND);
	}
	
    /**
     * Get all values of property Sound as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSound_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOUND, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sound as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSound_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SOUND);
	}

    /**
     * Get all values of property Sound as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSound_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SOUND, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sound     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllSound(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SOUND, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
	
    /**
     * Get all values of property Sound as a ReactorResult of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllSound_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SOUND, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property Sound     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nie.DataObject> getAllSound() {
		return Base.getAll(this.model, this.getResource(), SOUND, eu.dime.ps.semantic.model.nie.DataObject.class);
	}

    /**
     * Get all values of property Sound as a ReactorResult of DataObject 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nie.DataObject> getAllSound_as() {
		return Base.getAll_as(this.model, this.getResource(), SOUND, eu.dime.ps.semantic.model.nie.DataObject.class);
	}
 
    /**
     * Adds a value to property Sound as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSound(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SOUND, value);
	}
	
    /**
     * Adds a value to property Sound as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSound( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SOUND, value);
	}
    /**
     * Adds a value to property Sound from an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSound(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(model, instanceResource, SOUND, value);
	}
	
    /**
     * Adds a value to property Sound from an instance of DataObject 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSound(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.add(this.model, this.getResource(), SOUND, value);
	}
  

    /**
     * Sets a value of property Sound from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSound( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SOUND, value);
	}
	
    /**
     * Sets a value of property Sound from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSound( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SOUND, value);
	}
    /**
     * Sets a value of property Sound from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSound(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(model, instanceResource, SOUND, value);
	}
	
    /**
     * Sets a value of property Sound from an instance of DataObject 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSound(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.set(this.model, this.getResource(), SOUND, value);
	}
  


    /**
     * Removes a value of property Sound as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSound( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SOUND, value);
	}
	
    /**
     * Removes a value of property Sound as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSound( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SOUND, value);
	}
    /**
     * Removes a value of property Sound given as an instance of DataObject 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSound(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(model, instanceResource, SOUND, value);
	}
	
    /**
     * Removes a value of property Sound given as an instance of DataObject 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSound(eu.dime.ps.semantic.model.nie.DataObject value) {
		Base.remove(this.model, this.getResource(), SOUND, value);
	}
  
    /**
     * Removes all values of property Sound     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSound( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SOUND);
	}
	
    /**
     * Removes all values of property Sound	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSound() {
		Base.removeAll(this.model, this.getResource(), SOUND);
	}
 }