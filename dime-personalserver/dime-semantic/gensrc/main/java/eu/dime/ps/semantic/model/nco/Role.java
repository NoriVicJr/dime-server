/*
* Copyright 2013 by the digital.me project (http:\\www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.nco;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> BlogUrl </li>
 *   <li> ContactMedium </li>
 *   <li> EmailAddress </li>
 *   <li> End </li>
 *   <li> FoafUrl </li>
 *   <li> IMAccount </li>
 *   <li> PhoneNumber </li>
 *   <li> PostalAddress </li>
 *   <li> Start </li>
 *   <li> Url </li>
 *   <li> WebsiteUrl </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class Role extends eu.dime.ps.semantic.model.RDFReactorThing {

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Role */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Role", false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#blogUrl */
    @SuppressWarnings("hiding")
	public static final URI BLOGURL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#blogUrl",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasContactMedium */
    @SuppressWarnings("hiding")
	public static final URI CONTACTMEDIUM = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasContactMedium",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasEmailAddress */
    @SuppressWarnings("hiding")
	public static final URI EMAILADDRESS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasEmailAddress",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#end */
    @SuppressWarnings("hiding")
	public static final URI END = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#end",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#foafUrl */
    @SuppressWarnings("hiding")
	public static final URI FOAFURL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#foafUrl",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasIMAccount */
    @SuppressWarnings("hiding")
	public static final URI IMACCOUNT = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasIMAccount",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPhoneNumber */
    @SuppressWarnings("hiding")
	public static final URI PHONENUMBER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPhoneNumber",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPostalAddress */
    @SuppressWarnings("hiding")
	public static final URI POSTALADDRESS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPostalAddress",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#start */
    @SuppressWarnings("hiding")
	public static final URI START = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#start",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#url */
    @SuppressWarnings("hiding")
	public static final URI URL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#url",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#websiteUrl */
    @SuppressWarnings("hiding")
	public static final URI WEBSITEURL = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#websiteUrl",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#blogUrl",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasContactMedium",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasEmailAddress",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#end",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#foafUrl",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasIMAccount",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPhoneNumber",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPostalAddress",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#start",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#url",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#websiteUrl",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Role (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Role (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Role (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Role (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Role (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Role  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Role  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Role.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Role).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Role> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Role.class );
	}

    /**
	 * Remove rdf:type Role from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@28ae11cb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBlogUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BLOGURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@28ae11cb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBlogUrl() {
		return Base.has(this.model, this.getResource(), BLOGURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@28ae11cb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBlogUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BLOGURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@28ae11cb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBlogUrl( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BLOGURL);
	}

     /**
     * Get all values of property BlogUrl as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBlogUrl_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BLOGURL);
	}
	
    /**
     * Get all values of property BlogUrl as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBlogUrl_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BLOGURL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BlogUrl as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBlogUrl_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BLOGURL);
	}

    /**
     * Get all values of property BlogUrl as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBlogUrl_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BLOGURL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BlogUrl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllBlogUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BLOGURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property BlogUrl as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllBlogUrl_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BLOGURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property BlogUrl     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllBlogUrl() {
		return Base.getAll(this.model, this.getResource(), BLOGURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property BlogUrl as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllBlogUrl_as() {
		return Base.getAll_as(this.model, this.getResource(), BLOGURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property BlogUrl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBlogUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BLOGURL, value);
	}
	
    /**
     * Adds a value to property BlogUrl as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBlogUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BLOGURL, value);
	}
    /**
     * Adds a value to property BlogUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBlogUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, BLOGURL, value);
	}
	
    /**
     * Adds a value to property BlogUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBlogUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), BLOGURL, value);
	}
  

    /**
     * Sets a value of property BlogUrl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBlogUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BLOGURL, value);
	}
	
    /**
     * Sets a value of property BlogUrl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBlogUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BLOGURL, value);
	}
    /**
     * Sets a value of property BlogUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBlogUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, BLOGURL, value);
	}
	
    /**
     * Sets a value of property BlogUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBlogUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), BLOGURL, value);
	}
  


    /**
     * Removes a value of property BlogUrl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBlogUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BLOGURL, value);
	}
	
    /**
     * Removes a value of property BlogUrl as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBlogUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BLOGURL, value);
	}
    /**
     * Removes a value of property BlogUrl given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBlogUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, BLOGURL, value);
	}
	
    /**
     * Removes a value of property BlogUrl given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBlogUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), BLOGURL, value);
	}
  
    /**
     * Removes all values of property BlogUrl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBlogUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BLOGURL);
	}
	
    /**
     * Removes all values of property BlogUrl	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBlogUrl() {
		Base.removeAll(this.model, this.getResource(), BLOGURL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33bf0b4a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasContactMedium(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTACTMEDIUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33bf0b4a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasContactMedium() {
		return Base.has(this.model, this.getResource(), CONTACTMEDIUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33bf0b4a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasContactMedium(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTACTMEDIUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33bf0b4a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasContactMedium( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTACTMEDIUM);
	}

     /**
     * Get all values of property ContactMedium as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContactMedium_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTACTMEDIUM);
	}
	
    /**
     * Get all values of property ContactMedium as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContactMedium_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTACTMEDIUM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property ContactMedium as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContactMedium_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTACTMEDIUM);
	}

    /**
     * Get all values of property ContactMedium as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllContactMedium_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTACTMEDIUM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property ContactMedium     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.ContactMedium> getAllContactMedium(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTACTMEDIUM, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
	
    /**
     * Get all values of property ContactMedium as a ReactorResult of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.ContactMedium> getAllContactMedium_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTACTMEDIUM, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}

    /**
     * Get all values of property ContactMedium     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.ContactMedium> getAllContactMedium() {
		return Base.getAll(this.model, this.getResource(), CONTACTMEDIUM, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}

    /**
     * Get all values of property ContactMedium as a ReactorResult of ContactMedium 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.ContactMedium> getAllContactMedium_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTACTMEDIUM, eu.dime.ps.semantic.model.nco.ContactMedium.class);
	}
 
    /**
     * Adds a value to property ContactMedium as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addContactMedium(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTACTMEDIUM, value);
	}
	
    /**
     * Adds a value to property ContactMedium as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addContactMedium( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTACTMEDIUM, value);
	}
    /**
     * Adds a value to property ContactMedium from an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addContactMedium(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.add(model, instanceResource, CONTACTMEDIUM, value);
	}
	
    /**
     * Adds a value to property ContactMedium from an instance of ContactMedium 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addContactMedium(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.add(this.model, this.getResource(), CONTACTMEDIUM, value);
	}
  

    /**
     * Sets a value of property ContactMedium from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setContactMedium( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTACTMEDIUM, value);
	}
	
    /**
     * Sets a value of property ContactMedium from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setContactMedium( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTACTMEDIUM, value);
	}
    /**
     * Sets a value of property ContactMedium from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setContactMedium(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(model, instanceResource, CONTACTMEDIUM, value);
	}
	
    /**
     * Sets a value of property ContactMedium from an instance of ContactMedium 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setContactMedium(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.set(this.model, this.getResource(), CONTACTMEDIUM, value);
	}
  


    /**
     * Removes a value of property ContactMedium as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeContactMedium( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTACTMEDIUM, value);
	}
	
    /**
     * Removes a value of property ContactMedium as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeContactMedium( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTACTMEDIUM, value);
	}
    /**
     * Removes a value of property ContactMedium given as an instance of ContactMedium 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeContactMedium(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(model, instanceResource, CONTACTMEDIUM, value);
	}
	
    /**
     * Removes a value of property ContactMedium given as an instance of ContactMedium 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeContactMedium(eu.dime.ps.semantic.model.nco.ContactMedium value) {
		Base.remove(this.model, this.getResource(), CONTACTMEDIUM, value);
	}
  
    /**
     * Removes all values of property ContactMedium     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllContactMedium( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTACTMEDIUM);
	}
	
    /**
     * Removes all values of property ContactMedium	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllContactMedium() {
		Base.removeAll(this.model, this.getResource(), CONTACTMEDIUM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e093ee2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEmailAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EMAILADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e093ee2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEmailAddress() {
		return Base.has(this.model, this.getResource(), EMAILADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e093ee2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEmailAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EMAILADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e093ee2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEmailAddress( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EMAILADDRESS);
	}

     /**
     * Get all values of property EmailAddress as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEmailAddress_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EMAILADDRESS);
	}
	
    /**
     * Get all values of property EmailAddress as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEmailAddress_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EMAILADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EmailAddress as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEmailAddress_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EMAILADDRESS);
	}

    /**
     * Get all values of property EmailAddress as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllEmailAddress_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EMAILADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EmailAddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.EmailAddress> getAllEmailAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EMAILADDRESS, eu.dime.ps.semantic.model.nco.EmailAddress.class);
	}
	
    /**
     * Get all values of property EmailAddress as a ReactorResult of EmailAddress 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.EmailAddress> getAllEmailAddress_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EMAILADDRESS, eu.dime.ps.semantic.model.nco.EmailAddress.class);
	}

    /**
     * Get all values of property EmailAddress     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.EmailAddress> getAllEmailAddress() {
		return Base.getAll(this.model, this.getResource(), EMAILADDRESS, eu.dime.ps.semantic.model.nco.EmailAddress.class);
	}

    /**
     * Get all values of property EmailAddress as a ReactorResult of EmailAddress 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.EmailAddress> getAllEmailAddress_as() {
		return Base.getAll_as(this.model, this.getResource(), EMAILADDRESS, eu.dime.ps.semantic.model.nco.EmailAddress.class);
	}
 
    /**
     * Adds a value to property EmailAddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addEmailAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EMAILADDRESS, value);
	}
	
    /**
     * Adds a value to property EmailAddress as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addEmailAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EMAILADDRESS, value);
	}
    /**
     * Adds a value to property EmailAddress from an instance of EmailAddress 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addEmailAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.EmailAddress value) {
		Base.add(model, instanceResource, EMAILADDRESS, value);
	}
	
    /**
     * Adds a value to property EmailAddress from an instance of EmailAddress 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addEmailAddress(eu.dime.ps.semantic.model.nco.EmailAddress value) {
		Base.add(this.model, this.getResource(), EMAILADDRESS, value);
	}
  

    /**
     * Sets a value of property EmailAddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEmailAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EMAILADDRESS, value);
	}
	
    /**
     * Sets a value of property EmailAddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEmailAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EMAILADDRESS, value);
	}
    /**
     * Sets a value of property EmailAddress from an instance of EmailAddress 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEmailAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.EmailAddress value) {
		Base.set(model, instanceResource, EMAILADDRESS, value);
	}
	
    /**
     * Sets a value of property EmailAddress from an instance of EmailAddress 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEmailAddress(eu.dime.ps.semantic.model.nco.EmailAddress value) {
		Base.set(this.model, this.getResource(), EMAILADDRESS, value);
	}
  


    /**
     * Removes a value of property EmailAddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEmailAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EMAILADDRESS, value);
	}
	
    /**
     * Removes a value of property EmailAddress as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEmailAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EMAILADDRESS, value);
	}
    /**
     * Removes a value of property EmailAddress given as an instance of EmailAddress 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEmailAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.EmailAddress value) {
		Base.remove(model, instanceResource, EMAILADDRESS, value);
	}
	
    /**
     * Removes a value of property EmailAddress given as an instance of EmailAddress 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEmailAddress(eu.dime.ps.semantic.model.nco.EmailAddress value) {
		Base.remove(this.model, this.getResource(), EMAILADDRESS, value);
	}
  
    /**
     * Removes all values of property EmailAddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEmailAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EMAILADDRESS);
	}
	
    /**
     * Removes all values of property EmailAddress	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEmailAddress() {
		Base.removeAll(this.model, this.getResource(), EMAILADDRESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@952f842 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasEnd(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, END);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@952f842 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasEnd() {
		return Base.has(this.model, this.getResource(), END);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@952f842 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasEnd(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, END);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@952f842 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasEnd( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), END);
	}

    /**
     * Get single value of property End as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getEnd_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, END);
	}
	
    /**
     * Get single value of property End as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getEnd_asNode() {
		return Base.get_asNode(this.model, this.getResource(), END);
	}
     /**
     * Get single value of property End     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getEnd(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, END, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property End  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getEnd() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), END, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property End as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addEnd(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, END, value, 1);
	}
	
    /**
     * Adds a value to property End as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addEnd( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), END, value, 1);
	}
    /**
     * Adds a value to property End from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addEnd(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, END, value, 1);
	}
	
    /**
     * Adds a value to property End from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addEnd(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), END, value, 1);
	}
 
 

    /**
     * Sets a value of property End from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setEnd( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, END, value);
	}
	
    /**
     * Sets a value of property End from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setEnd( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), END, value);
	}
    /**
     * Sets a value of property End from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setEnd(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, END, value);
	}
	
    /**
     * Sets a value of property End from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setEnd(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), END, value);
	}
  


    /**
     * Removes a value of property End as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeEnd( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, END, value);
	}
	
    /**
     * Removes a value of property End as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeEnd( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), END, value);
	}
    /**
     * Removes a value of property End given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeEnd(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, END, value);
	}
	
    /**
     * Removes a value of property End given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeEnd(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), END, value);
	}
  
    /**
     * Removes all values of property End     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllEnd( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, END);
	}
	
    /**
     * Removes all values of property End	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllEnd() {
		Base.removeAll(this.model, this.getResource(), END);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5974f812 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFoafUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FOAFURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5974f812 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFoafUrl() {
		return Base.has(this.model, this.getResource(), FOAFURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5974f812 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFoafUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FOAFURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5974f812 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFoafUrl( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FOAFURL);
	}

     /**
     * Get all values of property FoafUrl as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFoafUrl_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FOAFURL);
	}
	
    /**
     * Get all values of property FoafUrl as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFoafUrl_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOAFURL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FoafUrl as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFoafUrl_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FOAFURL);
	}

    /**
     * Get all values of property FoafUrl as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFoafUrl_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FOAFURL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FoafUrl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllFoafUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FOAFURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property FoafUrl as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllFoafUrl_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOAFURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property FoafUrl     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllFoafUrl() {
		return Base.getAll(this.model, this.getResource(), FOAFURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property FoafUrl as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllFoafUrl_as() {
		return Base.getAll_as(this.model, this.getResource(), FOAFURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property FoafUrl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFoafUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FOAFURL, value);
	}
	
    /**
     * Adds a value to property FoafUrl as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFoafUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FOAFURL, value);
	}
    /**
     * Adds a value to property FoafUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFoafUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, FOAFURL, value);
	}
	
    /**
     * Adds a value to property FoafUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFoafUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), FOAFURL, value);
	}
  

    /**
     * Sets a value of property FoafUrl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFoafUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FOAFURL, value);
	}
	
    /**
     * Sets a value of property FoafUrl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFoafUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FOAFURL, value);
	}
    /**
     * Sets a value of property FoafUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFoafUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, FOAFURL, value);
	}
	
    /**
     * Sets a value of property FoafUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFoafUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), FOAFURL, value);
	}
  


    /**
     * Removes a value of property FoafUrl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFoafUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FOAFURL, value);
	}
	
    /**
     * Removes a value of property FoafUrl as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFoafUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FOAFURL, value);
	}
    /**
     * Removes a value of property FoafUrl given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFoafUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, FOAFURL, value);
	}
	
    /**
     * Removes a value of property FoafUrl given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFoafUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), FOAFURL, value);
	}
  
    /**
     * Removes all values of property FoafUrl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFoafUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FOAFURL);
	}
	
    /**
     * Removes all values of property FoafUrl	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFoafUrl() {
		Base.removeAll(this.model, this.getResource(), FOAFURL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c48d711 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasIMAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMACCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c48d711 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasIMAccount() {
		return Base.has(this.model, this.getResource(), IMACCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c48d711 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasIMAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMACCOUNT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c48d711 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasIMAccount( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMACCOUNT);
	}

     /**
     * Get all values of property IMAccount as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIMAccount_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMACCOUNT);
	}
	
    /**
     * Get all values of property IMAccount as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIMAccount_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMACCOUNT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property IMAccount as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIMAccount_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMACCOUNT);
	}

    /**
     * Get all values of property IMAccount as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllIMAccount_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMACCOUNT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property IMAccount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.IMAccount> getAllIMAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMACCOUNT, eu.dime.ps.semantic.model.nco.IMAccount.class);
	}
	
    /**
     * Get all values of property IMAccount as a ReactorResult of IMAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.IMAccount> getAllIMAccount_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMACCOUNT, eu.dime.ps.semantic.model.nco.IMAccount.class);
	}

    /**
     * Get all values of property IMAccount     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.IMAccount> getAllIMAccount() {
		return Base.getAll(this.model, this.getResource(), IMACCOUNT, eu.dime.ps.semantic.model.nco.IMAccount.class);
	}

    /**
     * Get all values of property IMAccount as a ReactorResult of IMAccount 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.IMAccount> getAllIMAccount_as() {
		return Base.getAll_as(this.model, this.getResource(), IMACCOUNT, eu.dime.ps.semantic.model.nco.IMAccount.class);
	}
 
    /**
     * Adds a value to property IMAccount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addIMAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMACCOUNT, value);
	}
	
    /**
     * Adds a value to property IMAccount as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addIMAccount( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMACCOUNT, value);
	}
    /**
     * Adds a value to property IMAccount from an instance of IMAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addIMAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.IMAccount value) {
		Base.add(model, instanceResource, IMACCOUNT, value);
	}
	
    /**
     * Adds a value to property IMAccount from an instance of IMAccount 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addIMAccount(eu.dime.ps.semantic.model.nco.IMAccount value) {
		Base.add(this.model, this.getResource(), IMACCOUNT, value);
	}
  

    /**
     * Sets a value of property IMAccount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setIMAccount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMACCOUNT, value);
	}
	
    /**
     * Sets a value of property IMAccount from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setIMAccount( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMACCOUNT, value);
	}
    /**
     * Sets a value of property IMAccount from an instance of IMAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setIMAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.IMAccount value) {
		Base.set(model, instanceResource, IMACCOUNT, value);
	}
	
    /**
     * Sets a value of property IMAccount from an instance of IMAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setIMAccount(eu.dime.ps.semantic.model.nco.IMAccount value) {
		Base.set(this.model, this.getResource(), IMACCOUNT, value);
	}
  


    /**
     * Removes a value of property IMAccount as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeIMAccount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMACCOUNT, value);
	}
	
    /**
     * Removes a value of property IMAccount as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeIMAccount( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMACCOUNT, value);
	}
    /**
     * Removes a value of property IMAccount given as an instance of IMAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeIMAccount(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.IMAccount value) {
		Base.remove(model, instanceResource, IMACCOUNT, value);
	}
	
    /**
     * Removes a value of property IMAccount given as an instance of IMAccount 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeIMAccount(eu.dime.ps.semantic.model.nco.IMAccount value) {
		Base.remove(this.model, this.getResource(), IMACCOUNT, value);
	}
  
    /**
     * Removes all values of property IMAccount     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllIMAccount( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMACCOUNT);
	}
	
    /**
     * Removes all values of property IMAccount	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllIMAccount() {
		Base.removeAll(this.model, this.getResource(), IMACCOUNT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64cff6b7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPhoneNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PHONENUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64cff6b7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPhoneNumber() {
		return Base.has(this.model, this.getResource(), PHONENUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64cff6b7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPhoneNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PHONENUMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64cff6b7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPhoneNumber( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PHONENUMBER);
	}

     /**
     * Get all values of property PhoneNumber as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPhoneNumber_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PHONENUMBER);
	}
	
    /**
     * Get all values of property PhoneNumber as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPhoneNumber_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PHONENUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PhoneNumber as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPhoneNumber_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PHONENUMBER);
	}

    /**
     * Get all values of property PhoneNumber as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPhoneNumber_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PHONENUMBER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PhoneNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.PhoneNumber> getAllPhoneNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PHONENUMBER, eu.dime.ps.semantic.model.nco.PhoneNumber.class);
	}
	
    /**
     * Get all values of property PhoneNumber as a ReactorResult of PhoneNumber 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.PhoneNumber> getAllPhoneNumber_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PHONENUMBER, eu.dime.ps.semantic.model.nco.PhoneNumber.class);
	}

    /**
     * Get all values of property PhoneNumber     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.PhoneNumber> getAllPhoneNumber() {
		return Base.getAll(this.model, this.getResource(), PHONENUMBER, eu.dime.ps.semantic.model.nco.PhoneNumber.class);
	}

    /**
     * Get all values of property PhoneNumber as a ReactorResult of PhoneNumber 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.PhoneNumber> getAllPhoneNumber_as() {
		return Base.getAll_as(this.model, this.getResource(), PHONENUMBER, eu.dime.ps.semantic.model.nco.PhoneNumber.class);
	}
 
    /**
     * Adds a value to property PhoneNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPhoneNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PHONENUMBER, value);
	}
	
    /**
     * Adds a value to property PhoneNumber as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPhoneNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PHONENUMBER, value);
	}
    /**
     * Adds a value to property PhoneNumber from an instance of PhoneNumber 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPhoneNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.PhoneNumber value) {
		Base.add(model, instanceResource, PHONENUMBER, value);
	}
	
    /**
     * Adds a value to property PhoneNumber from an instance of PhoneNumber 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPhoneNumber(eu.dime.ps.semantic.model.nco.PhoneNumber value) {
		Base.add(this.model, this.getResource(), PHONENUMBER, value);
	}
  

    /**
     * Sets a value of property PhoneNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPhoneNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PHONENUMBER, value);
	}
	
    /**
     * Sets a value of property PhoneNumber from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPhoneNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PHONENUMBER, value);
	}
    /**
     * Sets a value of property PhoneNumber from an instance of PhoneNumber 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPhoneNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.PhoneNumber value) {
		Base.set(model, instanceResource, PHONENUMBER, value);
	}
	
    /**
     * Sets a value of property PhoneNumber from an instance of PhoneNumber 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPhoneNumber(eu.dime.ps.semantic.model.nco.PhoneNumber value) {
		Base.set(this.model, this.getResource(), PHONENUMBER, value);
	}
  


    /**
     * Removes a value of property PhoneNumber as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePhoneNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PHONENUMBER, value);
	}
	
    /**
     * Removes a value of property PhoneNumber as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePhoneNumber( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PHONENUMBER, value);
	}
    /**
     * Removes a value of property PhoneNumber given as an instance of PhoneNumber 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePhoneNumber(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.PhoneNumber value) {
		Base.remove(model, instanceResource, PHONENUMBER, value);
	}
	
    /**
     * Removes a value of property PhoneNumber given as an instance of PhoneNumber 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePhoneNumber(eu.dime.ps.semantic.model.nco.PhoneNumber value) {
		Base.remove(this.model, this.getResource(), PHONENUMBER, value);
	}
  
    /**
     * Removes all values of property PhoneNumber     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPhoneNumber( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PHONENUMBER);
	}
	
    /**
     * Removes all values of property PhoneNumber	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPhoneNumber() {
		Base.removeAll(this.model, this.getResource(), PHONENUMBER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@488eaf44 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPostalAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, POSTALADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@488eaf44 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPostalAddress() {
		return Base.has(this.model, this.getResource(), POSTALADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@488eaf44 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPostalAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, POSTALADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@488eaf44 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPostalAddress( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), POSTALADDRESS);
	}

     /**
     * Get all values of property PostalAddress as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPostalAddress_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, POSTALADDRESS);
	}
	
    /**
     * Get all values of property PostalAddress as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPostalAddress_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POSTALADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PostalAddress as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPostalAddress_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), POSTALADDRESS);
	}

    /**
     * Get all values of property PostalAddress as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPostalAddress_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), POSTALADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PostalAddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.PostalAddress> getAllPostalAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, POSTALADDRESS, eu.dime.ps.semantic.model.nco.PostalAddress.class);
	}
	
    /**
     * Get all values of property PostalAddress as a ReactorResult of PostalAddress 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.PostalAddress> getAllPostalAddress_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, POSTALADDRESS, eu.dime.ps.semantic.model.nco.PostalAddress.class);
	}

    /**
     * Get all values of property PostalAddress     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.PostalAddress> getAllPostalAddress() {
		return Base.getAll(this.model, this.getResource(), POSTALADDRESS, eu.dime.ps.semantic.model.nco.PostalAddress.class);
	}

    /**
     * Get all values of property PostalAddress as a ReactorResult of PostalAddress 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.PostalAddress> getAllPostalAddress_as() {
		return Base.getAll_as(this.model, this.getResource(), POSTALADDRESS, eu.dime.ps.semantic.model.nco.PostalAddress.class);
	}
 
    /**
     * Adds a value to property PostalAddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPostalAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, POSTALADDRESS, value);
	}
	
    /**
     * Adds a value to property PostalAddress as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPostalAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), POSTALADDRESS, value);
	}
    /**
     * Adds a value to property PostalAddress from an instance of PostalAddress 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPostalAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.PostalAddress value) {
		Base.add(model, instanceResource, POSTALADDRESS, value);
	}
	
    /**
     * Adds a value to property PostalAddress from an instance of PostalAddress 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPostalAddress(eu.dime.ps.semantic.model.nco.PostalAddress value) {
		Base.add(this.model, this.getResource(), POSTALADDRESS, value);
	}
  

    /**
     * Sets a value of property PostalAddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPostalAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, POSTALADDRESS, value);
	}
	
    /**
     * Sets a value of property PostalAddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPostalAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), POSTALADDRESS, value);
	}
    /**
     * Sets a value of property PostalAddress from an instance of PostalAddress 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPostalAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.PostalAddress value) {
		Base.set(model, instanceResource, POSTALADDRESS, value);
	}
	
    /**
     * Sets a value of property PostalAddress from an instance of PostalAddress 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPostalAddress(eu.dime.ps.semantic.model.nco.PostalAddress value) {
		Base.set(this.model, this.getResource(), POSTALADDRESS, value);
	}
  


    /**
     * Removes a value of property PostalAddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePostalAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, POSTALADDRESS, value);
	}
	
    /**
     * Removes a value of property PostalAddress as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePostalAddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), POSTALADDRESS, value);
	}
    /**
     * Removes a value of property PostalAddress given as an instance of PostalAddress 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePostalAddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.PostalAddress value) {
		Base.remove(model, instanceResource, POSTALADDRESS, value);
	}
	
    /**
     * Removes a value of property PostalAddress given as an instance of PostalAddress 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePostalAddress(eu.dime.ps.semantic.model.nco.PostalAddress value) {
		Base.remove(this.model, this.getResource(), POSTALADDRESS, value);
	}
  
    /**
     * Removes all values of property PostalAddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPostalAddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, POSTALADDRESS);
	}
	
    /**
     * Removes all values of property PostalAddress	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPostalAddress() {
		Base.removeAll(this.model, this.getResource(), POSTALADDRESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ea939d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasStart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, START);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ea939d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasStart() {
		return Base.has(this.model, this.getResource(), START);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ea939d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasStart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, START);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6ea939d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasStart( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), START);
	}

    /**
     * Get single value of property Start as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getStart_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, START);
	}
	
    /**
     * Get single value of property Start as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getStart_asNode() {
		return Base.get_asNode(this.model, this.getResource(), START);
	}
     /**
     * Get single value of property Start     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static java.util.Calendar getStart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (java.util.Calendar) Base.get(model, instanceResource, START, java.util.Calendar.class);
	}
	
    /**
     * Get single value of property Start  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public java.util.Calendar getStart() {
		return (java.util.Calendar) Base.get(this.model, this.getResource(), START, java.util.Calendar.class);
	}
  
    /**
     * Adds a value to property Start as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addStart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, START, value, 1);
	}
	
    /**
     * Adds a value to property Start as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addStart( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), START, value, 1);
	}
    /**
     * Adds a value to property Start from an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addStart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value)
    throws CardinalityException {
		Base.add(model, instanceResource, START, value, 1);
	}
	
    /**
     * Adds a value to property Start from an instance of java.util.Calendar 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addStart(java.util.Calendar value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), START, value, 1);
	}
 
 

    /**
     * Sets a value of property Start from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setStart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, START, value);
	}
	
    /**
     * Sets a value of property Start from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setStart( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), START, value);
	}
    /**
     * Sets a value of property Start from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setStart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.set(model, instanceResource, START, value);
	}
	
    /**
     * Sets a value of property Start from an instance of java.util.Calendar 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setStart(java.util.Calendar value) {
		Base.set(this.model, this.getResource(), START, value);
	}
  


    /**
     * Removes a value of property Start as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeStart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, START, value);
	}
	
    /**
     * Removes a value of property Start as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeStart( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), START, value);
	}
    /**
     * Removes a value of property Start given as an instance of java.util.Calendar 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeStart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.util.Calendar value) {
		Base.remove(model, instanceResource, START, value);
	}
	
    /**
     * Removes a value of property Start given as an instance of java.util.Calendar 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeStart(java.util.Calendar value) {
		Base.remove(this.model, this.getResource(), START, value);
	}
  
    /**
     * Removes all values of property Start     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllStart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, START);
	}
	
    /**
     * Removes all values of property Start	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllStart() {
		Base.removeAll(this.model, this.getResource(), START);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7603670d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, URL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7603670d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasUrl() {
		return Base.has(this.model, this.getResource(), URL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7603670d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, URL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7603670d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasUrl( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), URL);
	}

     /**
     * Get all values of property Url as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUrl_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, URL);
	}
	
    /**
     * Get all values of property Url as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUrl_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, URL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Url as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllUrl_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), URL);
	}

    /**
     * Get all values of property Url as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllUrl_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), URL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Url     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, URL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property Url as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllUrl_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, URL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Url     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllUrl() {
		return Base.getAll(this.model, this.getResource(), URL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property Url as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllUrl_as() {
		return Base.getAll_as(this.model, this.getResource(), URL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property Url as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, URL, value);
	}
	
    /**
     * Adds a value to property Url as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), URL, value);
	}
    /**
     * Adds a value to property Url from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, URL, value);
	}
	
    /**
     * Adds a value to property Url from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), URL, value);
	}
  

    /**
     * Sets a value of property Url from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, URL, value);
	}
	
    /**
     * Sets a value of property Url from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), URL, value);
	}
    /**
     * Sets a value of property Url from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, URL, value);
	}
	
    /**
     * Sets a value of property Url from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), URL, value);
	}
  


    /**
     * Removes a value of property Url as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, URL, value);
	}
	
    /**
     * Removes a value of property Url as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), URL, value);
	}
    /**
     * Removes a value of property Url given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, URL, value);
	}
	
    /**
     * Removes a value of property Url given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), URL, value);
	}
  
    /**
     * Removes all values of property Url     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, URL);
	}
	
    /**
     * Removes all values of property Url	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllUrl() {
		Base.removeAll(this.model, this.getResource(), URL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a104790 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasWebsiteUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WEBSITEURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a104790 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasWebsiteUrl() {
		return Base.has(this.model, this.getResource(), WEBSITEURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a104790 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasWebsiteUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WEBSITEURL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1a104790 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasWebsiteUrl( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WEBSITEURL);
	}

     /**
     * Get all values of property WebsiteUrl as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWebsiteUrl_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WEBSITEURL);
	}
	
    /**
     * Get all values of property WebsiteUrl as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWebsiteUrl_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WEBSITEURL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property WebsiteUrl as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWebsiteUrl_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WEBSITEURL);
	}

    /**
     * Get all values of property WebsiteUrl as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllWebsiteUrl_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WEBSITEURL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property WebsiteUrl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllWebsiteUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WEBSITEURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property WebsiteUrl as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllWebsiteUrl_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WEBSITEURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property WebsiteUrl     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllWebsiteUrl() {
		return Base.getAll(this.model, this.getResource(), WEBSITEURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property WebsiteUrl as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllWebsiteUrl_as() {
		return Base.getAll_as(this.model, this.getResource(), WEBSITEURL, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property WebsiteUrl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addWebsiteUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WEBSITEURL, value);
	}
	
    /**
     * Adds a value to property WebsiteUrl as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addWebsiteUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WEBSITEURL, value);
	}
    /**
     * Adds a value to property WebsiteUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addWebsiteUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, WEBSITEURL, value);
	}
	
    /**
     * Adds a value to property WebsiteUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addWebsiteUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), WEBSITEURL, value);
	}
  

    /**
     * Sets a value of property WebsiteUrl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setWebsiteUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WEBSITEURL, value);
	}
	
    /**
     * Sets a value of property WebsiteUrl from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setWebsiteUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WEBSITEURL, value);
	}
    /**
     * Sets a value of property WebsiteUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setWebsiteUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, WEBSITEURL, value);
	}
	
    /**
     * Sets a value of property WebsiteUrl from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setWebsiteUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), WEBSITEURL, value);
	}
  


    /**
     * Removes a value of property WebsiteUrl as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeWebsiteUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WEBSITEURL, value);
	}
	
    /**
     * Removes a value of property WebsiteUrl as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeWebsiteUrl( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WEBSITEURL, value);
	}
    /**
     * Removes a value of property WebsiteUrl given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeWebsiteUrl(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, WEBSITEURL, value);
	}
	
    /**
     * Removes a value of property WebsiteUrl given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeWebsiteUrl(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), WEBSITEURL, value);
	}
  
    /**
     * Removes all values of property WebsiteUrl     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllWebsiteUrl( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WEBSITEURL);
	}
	
    /**
     * Removes all values of property WebsiteUrl	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllWebsiteUrl() {
		Base.removeAll(this.model, this.getResource(), WEBSITEURL);
	}
 }