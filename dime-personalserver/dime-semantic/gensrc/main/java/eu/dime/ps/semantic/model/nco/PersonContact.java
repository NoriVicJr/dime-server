/*
* Copyright 2013 by the digital.me project (http:\\www.dime-project.eu).
*
* Licensed under the EUPL, Version 1.1 only (the "Licence");
* You may not use this work except in compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
*
* Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the Licence for the specific language governing permissions and limitations under the Licence.
*/

package eu.dime.ps.semantic.model.nco;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.runtime.CardinalityException;


/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Affiliation </li>
 *   <li> BirthDate </li>
 *   <li> Gender </li>
 *   <li> Hobby </li>
 *   <li> PersonName </li>
 * </ul>
 *
 * class- This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> */
public class PersonContact extends eu.dime.ps.semantic.model.nco.Contact {

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PersonContact */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PersonContact", false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasAffiliation */
    @SuppressWarnings("hiding")
	public static final URI AFFILIATION = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasAffiliation",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasBirthDate */
    @SuppressWarnings("hiding")
	public static final URI BIRTHDATE = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasBirthDate",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender */
    @SuppressWarnings("hiding")
	public static final URI GENDER = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hobby */
    @SuppressWarnings("hiding")
	public static final URI HOBBY = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hobby",false);

    /** http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPersonName */
    @SuppressWarnings("hiding")
	public static final URI PERSONNAME = new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPersonName",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasAffiliation",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasBirthDate",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#gender",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hobby",false),
      new URIImpl("http://www.semanticdesktop.org/ontologies/2007/03/22/nco#hasPersonName",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected PersonContact (Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public PersonContact (Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public PersonContact (Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public PersonContact (Model model, BlankNode bnode, boolean write) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public PersonContact (Model model, boolean write) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of PersonContact  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static PersonContact  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, PersonContact.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PersonContact).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends PersonContact> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, PersonContact.class );
	}

    /**
	 * Remove rdf:type PersonContact from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@292e48e2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasAffiliation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, AFFILIATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@292e48e2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasAffiliation() {
		return Base.has(this.model, this.getResource(), AFFILIATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@292e48e2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasAffiliation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, AFFILIATION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@292e48e2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasAffiliation( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), AFFILIATION);
	}

     /**
     * Get all values of property Affiliation as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAffiliation_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, AFFILIATION);
	}
	
    /**
     * Get all values of property Affiliation as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAffiliation_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AFFILIATION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Affiliation as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAffiliation_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), AFFILIATION);
	}

    /**
     * Get all values of property Affiliation as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllAffiliation_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), AFFILIATION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Affiliation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.Affiliation> getAllAffiliation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, AFFILIATION, eu.dime.ps.semantic.model.nco.Affiliation.class);
	}
	
    /**
     * Get all values of property Affiliation as a ReactorResult of Affiliation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.Affiliation> getAllAffiliation_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AFFILIATION, eu.dime.ps.semantic.model.nco.Affiliation.class);
	}

    /**
     * Get all values of property Affiliation     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.Affiliation> getAllAffiliation() {
		return Base.getAll(this.model, this.getResource(), AFFILIATION, eu.dime.ps.semantic.model.nco.Affiliation.class);
	}

    /**
     * Get all values of property Affiliation as a ReactorResult of Affiliation 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.Affiliation> getAllAffiliation_as() {
		return Base.getAll_as(this.model, this.getResource(), AFFILIATION, eu.dime.ps.semantic.model.nco.Affiliation.class);
	}
 
    /**
     * Adds a value to property Affiliation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addAffiliation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, AFFILIATION, value);
	}
	
    /**
     * Adds a value to property Affiliation as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addAffiliation( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), AFFILIATION, value);
	}
    /**
     * Adds a value to property Affiliation from an instance of Affiliation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addAffiliation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Affiliation value) {
		Base.add(model, instanceResource, AFFILIATION, value);
	}
	
    /**
     * Adds a value to property Affiliation from an instance of Affiliation 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addAffiliation(eu.dime.ps.semantic.model.nco.Affiliation value) {
		Base.add(this.model, this.getResource(), AFFILIATION, value);
	}
  

    /**
     * Sets a value of property Affiliation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setAffiliation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, AFFILIATION, value);
	}
	
    /**
     * Sets a value of property Affiliation from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setAffiliation( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), AFFILIATION, value);
	}
    /**
     * Sets a value of property Affiliation from an instance of Affiliation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setAffiliation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Affiliation value) {
		Base.set(model, instanceResource, AFFILIATION, value);
	}
	
    /**
     * Sets a value of property Affiliation from an instance of Affiliation 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setAffiliation(eu.dime.ps.semantic.model.nco.Affiliation value) {
		Base.set(this.model, this.getResource(), AFFILIATION, value);
	}
  


    /**
     * Removes a value of property Affiliation as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeAffiliation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, AFFILIATION, value);
	}
	
    /**
     * Removes a value of property Affiliation as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeAffiliation( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), AFFILIATION, value);
	}
    /**
     * Removes a value of property Affiliation given as an instance of Affiliation 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeAffiliation(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Affiliation value) {
		Base.remove(model, instanceResource, AFFILIATION, value);
	}
	
    /**
     * Removes a value of property Affiliation given as an instance of Affiliation 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeAffiliation(eu.dime.ps.semantic.model.nco.Affiliation value) {
		Base.remove(this.model, this.getResource(), AFFILIATION, value);
	}
  
    /**
     * Removes all values of property Affiliation     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllAffiliation( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, AFFILIATION);
	}
	
    /**
     * Removes all values of property Affiliation	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllAffiliation() {
		Base.removeAll(this.model, this.getResource(), AFFILIATION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d4c330b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBirthDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BIRTHDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d4c330b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBirthDate() {
		return Base.has(this.model, this.getResource(), BIRTHDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d4c330b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBirthDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BIRTHDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@d4c330b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBirthDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BIRTHDATE);
	}

     /**
     * Get all values of property BirthDate as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBirthDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BIRTHDATE);
	}
	
    /**
     * Get all values of property BirthDate as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBirthDate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BIRTHDATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property BirthDate as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBirthDate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BIRTHDATE);
	}

    /**
     * Get all values of property BirthDate as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBirthDate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BIRTHDATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property BirthDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.BirthDate> getAllBirthDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BIRTHDATE, eu.dime.ps.semantic.model.nco.BirthDate.class);
	}
	
    /**
     * Get all values of property BirthDate as a ReactorResult of BirthDate 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.BirthDate> getAllBirthDate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BIRTHDATE, eu.dime.ps.semantic.model.nco.BirthDate.class);
	}

    /**
     * Get all values of property BirthDate     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.BirthDate> getAllBirthDate() {
		return Base.getAll(this.model, this.getResource(), BIRTHDATE, eu.dime.ps.semantic.model.nco.BirthDate.class);
	}

    /**
     * Get all values of property BirthDate as a ReactorResult of BirthDate 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.BirthDate> getAllBirthDate_as() {
		return Base.getAll_as(this.model, this.getResource(), BIRTHDATE, eu.dime.ps.semantic.model.nco.BirthDate.class);
	}
 
    /**
     * Adds a value to property BirthDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBirthDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BIRTHDATE, value);
	}
	
    /**
     * Adds a value to property BirthDate as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBirthDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BIRTHDATE, value);
	}
    /**
     * Adds a value to property BirthDate from an instance of BirthDate 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBirthDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.BirthDate value) {
		Base.add(model, instanceResource, BIRTHDATE, value);
	}
	
    /**
     * Adds a value to property BirthDate from an instance of BirthDate 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBirthDate(eu.dime.ps.semantic.model.nco.BirthDate value) {
		Base.add(this.model, this.getResource(), BIRTHDATE, value);
	}
  

    /**
     * Sets a value of property BirthDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBirthDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BIRTHDATE, value);
	}
	
    /**
     * Sets a value of property BirthDate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBirthDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BIRTHDATE, value);
	}
    /**
     * Sets a value of property BirthDate from an instance of BirthDate 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBirthDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.BirthDate value) {
		Base.set(model, instanceResource, BIRTHDATE, value);
	}
	
    /**
     * Sets a value of property BirthDate from an instance of BirthDate 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBirthDate(eu.dime.ps.semantic.model.nco.BirthDate value) {
		Base.set(this.model, this.getResource(), BIRTHDATE, value);
	}
  


    /**
     * Removes a value of property BirthDate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBirthDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BIRTHDATE, value);
	}
	
    /**
     * Removes a value of property BirthDate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBirthDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BIRTHDATE, value);
	}
    /**
     * Removes a value of property BirthDate given as an instance of BirthDate 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBirthDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.BirthDate value) {
		Base.remove(model, instanceResource, BIRTHDATE, value);
	}
	
    /**
     * Removes a value of property BirthDate given as an instance of BirthDate 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBirthDate(eu.dime.ps.semantic.model.nco.BirthDate value) {
		Base.remove(this.model, this.getResource(), BIRTHDATE, value);
	}
  
    /**
     * Removes all values of property BirthDate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBirthDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BIRTHDATE);
	}
	
    /**
     * Removes all values of property BirthDate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBirthDate() {
		Base.removeAll(this.model, this.getResource(), BIRTHDATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7a94eda6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasGender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GENDER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7a94eda6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasGender() {
		return Base.has(this.model, this.getResource(), GENDER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7a94eda6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasGender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GENDER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7a94eda6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasGender( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GENDER);
	}

    /**
     * Get single value of property Gender as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException at runtime, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get1static] 
     */
	public static org.ontoware.rdf2go.model.node.Node getGender_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.get_asNode(model, instanceResource, GENDER);
	}
	
    /**
     * Get single value of property Gender as an RDF2Go node 
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get2dynamic] 
     */
	public org.ontoware.rdf2go.model.node.Node getGender_asNode() {
		return Base.get_asNode(this.model, this.getResource(), GENDER);
	}
     /**
     * Get single value of property Gender     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get5static] 
     */
	public static eu.dime.ps.semantic.model.nco.Gender getGender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return (eu.dime.ps.semantic.model.nco.Gender) Base.get(model, instanceResource, GENDER, eu.dime.ps.semantic.model.nco.Gender.class);
	}
	
    /**
     * Get single value of property Gender  .
     * This property has maxCardinality=1, that means the property takes only
     * a single value.
     * @return the single value or null if no value is found
     * @throws RDFDataException, if the property has multiple values
	 *
	 * [Generated from RDFReactor template rule #get6dynamic] 
     */
	public eu.dime.ps.semantic.model.nco.Gender getGender() {
		return (eu.dime.ps.semantic.model.nco.Gender) Base.get(this.model, this.getResource(), GENDER, eu.dime.ps.semantic.model.nco.Gender.class);
	}
  
    /**
     * Adds a value to property Gender as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add5static] 
     */
	public static void addGender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(model, instanceResource, GENDER, value, 1);
	}
	
    /**
     * Adds a value to property Gender as an RDF2Go node 
	 * @param value the value to be added
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add6dynamic] 
     */
	public void addGender( org.ontoware.rdf2go.model.node.Node value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), GENDER, value, 1);
	}
    /**
     * Adds a value to property Gender from an instance of Gender 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add7static] 
     */
	public static void addGender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Gender value)
    throws CardinalityException {
		Base.add(model, instanceResource, GENDER, value, 1);
	}
	
    /**
     * Adds a value to property Gender from an instance of Gender 
	 * @throws CardinalityException if adding a value would bring the number 
	 *            of property values above the cardinality constraint.
	 *
	 * [Generated from RDFReactor template rule #add8dynamic] 
     */
	public void addGender(eu.dime.ps.semantic.model.nco.Gender value) 
    throws CardinalityException {
		Base.add(this.model, this.getResource(), GENDER, value, 1);
	}
 
 

    /**
     * Sets a value of property Gender from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setGender( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GENDER, value);
	}
	
    /**
     * Sets a value of property Gender from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setGender( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GENDER, value);
	}
    /**
     * Sets a value of property Gender from an instance of Gender 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setGender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Gender value) {
		Base.set(model, instanceResource, GENDER, value);
	}
	
    /**
     * Sets a value of property Gender from an instance of Gender 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setGender(eu.dime.ps.semantic.model.nco.Gender value) {
		Base.set(this.model, this.getResource(), GENDER, value);
	}
  


    /**
     * Removes a value of property Gender as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeGender( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GENDER, value);
	}
	
    /**
     * Removes a value of property Gender as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeGender( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GENDER, value);
	}
    /**
     * Removes a value of property Gender given as an instance of Gender 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeGender(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.Gender value) {
		Base.remove(model, instanceResource, GENDER, value);
	}
	
    /**
     * Removes a value of property Gender given as an instance of Gender 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeGender(eu.dime.ps.semantic.model.nco.Gender value) {
		Base.remove(this.model, this.getResource(), GENDER, value);
	}
  
    /**
     * Removes all values of property Gender     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllGender( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GENDER);
	}
	
    /**
     * Removes all values of property Gender	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllGender() {
		Base.removeAll(this.model, this.getResource(), GENDER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19cb28c5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasHobby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HOBBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19cb28c5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasHobby() {
		return Base.has(this.model, this.getResource(), HOBBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19cb28c5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasHobby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HOBBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@19cb28c5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasHobby( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HOBBY);
	}

     /**
     * Get all values of property Hobby as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHobby_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HOBBY);
	}
	
    /**
     * Get all values of property Hobby as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHobby_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HOBBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Hobby as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHobby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HOBBY);
	}

    /**
     * Get all values of property Hobby as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllHobby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HOBBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Hobby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllHobby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HOBBY, java.lang.String.class);
	}
	
    /**
     * Get all values of property Hobby as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllHobby_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HOBBY, java.lang.String.class);
	}

    /**
     * Get all values of property Hobby     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllHobby() {
		return Base.getAll(this.model, this.getResource(), HOBBY, java.lang.String.class);
	}

    /**
     * Get all values of property Hobby as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllHobby_as() {
		return Base.getAll_as(this.model, this.getResource(), HOBBY, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Hobby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addHobby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HOBBY, value);
	}
	
    /**
     * Adds a value to property Hobby as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addHobby( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HOBBY, value);
	}
    /**
     * Adds a value to property Hobby from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addHobby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, HOBBY, value);
	}
	
    /**
     * Adds a value to property Hobby from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addHobby(java.lang.String value) {
		Base.add(this.model, this.getResource(), HOBBY, value);
	}
  

    /**
     * Sets a value of property Hobby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setHobby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HOBBY, value);
	}
	
    /**
     * Sets a value of property Hobby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setHobby( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HOBBY, value);
	}
    /**
     * Sets a value of property Hobby from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setHobby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, HOBBY, value);
	}
	
    /**
     * Sets a value of property Hobby from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setHobby(java.lang.String value) {
		Base.set(this.model, this.getResource(), HOBBY, value);
	}
  


    /**
     * Removes a value of property Hobby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeHobby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HOBBY, value);
	}
	
    /**
     * Removes a value of property Hobby as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeHobby( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HOBBY, value);
	}
    /**
     * Removes a value of property Hobby given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeHobby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, HOBBY, value);
	}
	
    /**
     * Removes a value of property Hobby given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeHobby(java.lang.String value) {
		Base.remove(this.model, this.getResource(), HOBBY, value);
	}
  
    /**
     * Removes all values of property Hobby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllHobby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HOBBY);
	}
	
    /**
     * Removes all values of property Hobby	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllHobby() {
		Base.removeAll(this.model, this.getResource(), HOBBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@764b9981 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPersonName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PERSONNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@764b9981 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPersonName() {
		return Base.has(this.model, this.getResource(), PERSONNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@764b9981 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPersonName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PERSONNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@764b9981 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPersonName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PERSONNAME);
	}

     /**
     * Get all values of property PersonName as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPersonName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PERSONNAME);
	}
	
    /**
     * Get all values of property PersonName as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPersonName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PERSONNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property PersonName as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPersonName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PERSONNAME);
	}

    /**
     * Get all values of property PersonName as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPersonName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PERSONNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property PersonName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<eu.dime.ps.semantic.model.nco.PersonName> getAllPersonName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PERSONNAME, eu.dime.ps.semantic.model.nco.PersonName.class);
	}
	
    /**
     * Get all values of property PersonName as a ReactorResult of PersonName 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<eu.dime.ps.semantic.model.nco.PersonName> getAllPersonName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PERSONNAME, eu.dime.ps.semantic.model.nco.PersonName.class);
	}

    /**
     * Get all values of property PersonName     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<eu.dime.ps.semantic.model.nco.PersonName> getAllPersonName() {
		return Base.getAll(this.model, this.getResource(), PERSONNAME, eu.dime.ps.semantic.model.nco.PersonName.class);
	}

    /**
     * Get all values of property PersonName as a ReactorResult of PersonName 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<eu.dime.ps.semantic.model.nco.PersonName> getAllPersonName_as() {
		return Base.getAll_as(this.model, this.getResource(), PERSONNAME, eu.dime.ps.semantic.model.nco.PersonName.class);
	}
 
    /**
     * Adds a value to property PersonName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPersonName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PERSONNAME, value);
	}
	
    /**
     * Adds a value to property PersonName as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPersonName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PERSONNAME, value);
	}
    /**
     * Adds a value to property PersonName from an instance of PersonName 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPersonName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.PersonName value) {
		Base.add(model, instanceResource, PERSONNAME, value);
	}
	
    /**
     * Adds a value to property PersonName from an instance of PersonName 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPersonName(eu.dime.ps.semantic.model.nco.PersonName value) {
		Base.add(this.model, this.getResource(), PERSONNAME, value);
	}
  

    /**
     * Sets a value of property PersonName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPersonName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PERSONNAME, value);
	}
	
    /**
     * Sets a value of property PersonName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPersonName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PERSONNAME, value);
	}
    /**
     * Sets a value of property PersonName from an instance of PersonName 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPersonName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.PersonName value) {
		Base.set(model, instanceResource, PERSONNAME, value);
	}
	
    /**
     * Sets a value of property PersonName from an instance of PersonName 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPersonName(eu.dime.ps.semantic.model.nco.PersonName value) {
		Base.set(this.model, this.getResource(), PERSONNAME, value);
	}
  


    /**
     * Removes a value of property PersonName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePersonName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PERSONNAME, value);
	}
	
    /**
     * Removes a value of property PersonName as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePersonName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PERSONNAME, value);
	}
    /**
     * Removes a value of property PersonName given as an instance of PersonName 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePersonName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, eu.dime.ps.semantic.model.nco.PersonName value) {
		Base.remove(model, instanceResource, PERSONNAME, value);
	}
	
    /**
     * Removes a value of property PersonName given as an instance of PersonName 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePersonName(eu.dime.ps.semantic.model.nco.PersonName value) {
		Base.remove(this.model, this.getResource(), PERSONNAME, value);
	}
  
    /**
     * Removes all values of property PersonName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPersonName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PERSONNAME);
	}
	
    /**
     * Removes all values of property PersonName	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPersonName() {
		Base.removeAll(this.model, this.getResource(), PERSONNAME);
	}
 }