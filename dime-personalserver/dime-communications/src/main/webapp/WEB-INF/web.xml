<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
        http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">

	<display-name>Dime PersonalServer API</display-name>

	<!-- Loading Dime Spring Context -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/webContext.xml
		</param-value>
	</context-param>


	<!-- LISTENERS -->

	<!-- <listener> -->
	<!-- <listener-class>eu.dime.ps.storage.util.DBUtil</listener-class> -->
	<!-- </listener> -->

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<listener>
		<listener-class>
			org.springframework.web.context.request.RequestContextListener
		</listener-class>
	</listener>

	<!-- SERVLETS -->

	<!-- Handles REST/API requests -->
	<servlet>
		<servlet-name>dime-personalserver-api</servlet-name>
		<servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
		<init-param>
			<param-name>com.sun.jersey.config.property.resourceConfigClass</param-name>
			<param-value>com.sun.jersey.api.core.PackagesResourceConfig</param-value>
		</init-param>
		<init-param>
			<param-name>com.sun.jersey.config.property.packages</param-name>
			<param-value>eu.dime.ps.communications.requestbroker</param-value>
		</init-param>
		<init-param>
			<param-name>com.sun.jersey.api.json.POJOMappingFeature</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>com.sun.jersey.spi.container.ContainerResponseFilters</param-name>
			<param-value>eu.dime.ps.communications.filter.TenantUnsetFilter</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- Atmosphere Servlet -->
	<servlet>
		<description>AtmosphereServlet</description>
		<servlet-name>AtmosphereServlet</servlet-name>
		<servlet-class>org.atmosphere.cpr.AtmosphereServlet</servlet-class>
		<!-- Uncomment if you want to use Servlet 3.0 Async Support <async-supported>true</async-supported> -->
		<!-- <async-supported>true</async-supported> -->
		<!-- init-param are optional -->
		<!-- <init-param> -->
		<!-- <param-name>org.atmosphere.core.servlet-mapping</param-name> -->
		<!-- <param-value>/PSNotificationDispacher</param-value> -->
		<!-- </init-param> -->
		<init-param>
			<param-name>com.sun.jersey.config.property.resourceConfigClass</param-name>
			<param-value>com.sun.jersey.api.core.PackagesResourceConfig</param-value>
		</init-param>
		<init-param>
			<param-name>com.sun.jersey.config.property.packages</param-name>
			<param-value>eu.dime.ps.communications.requestbroker.pubsub</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.broadcaster.maxProcessingThreads</param-name>
			<param-value>10</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.Broadcaster.supportOutOfOrderBroadcast</param-name>
			<param-value>true</param-value>
		</init-param>
		<!-- <init-param> -->
		<!-- <param-name>com.sun.jersey.spi.container.ResourceFilters</param-name> -->
		<!-- <param-value>org.atmosphere.core.AtmosphereFilter</param-value> -->
		<!-- </init-param> -->
		<load-on-startup>2</load-on-startup>
	</servlet>

	<!-- Handles Static requests -->
	<servlet>
		<servlet-name>dime-personalserver-static</servlet-name>
		<servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
		<!-- <init-param> -->
		<!-- <param-name>com.sun.jersey.config.property.resourceConfigClass</param-name> -->
		<!-- <param-value>com.sun.jersey.api.core.PackagesResourceConfig</param-value> -->
		<!-- </init-param> -->
		<!-- <init-param> -->
		<!-- <param-name>com.sun.jersey.config.property.packages</param-name> -->
		<!-- <param-value>eu.dime.ps.communications.ui</param-value> -->
		<!-- </init-param> -->
		<load-on-startup>3</load-on-startup>
	</servlet>

	<!-- Servlet for Web Controllers -->
	<servlet>
		<servlet-name>dime-web-pages</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>50</load-on-startup>
	</servlet>

	<!-- Servlet Mappings -->
	<servlet-mapping>
		<servlet-name>dime-web-pages</servlet-name>
		<url-pattern>/web/*</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>dime-personalserver-api</servlet-name>
		<url-pattern>/api/*</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>dime-personalserver-static</servlet-name>
		<url-pattern>/static/*</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>AtmosphereServlet</servlet-name>
		<url-pattern>/push/*</url-pattern>
	</servlet-mapping>

	<!-- FILTERS -->

	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>

	<!-- Enables Spring Security -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<!-- Enables Access Filter -->
	<filter>
		<filter-name>AccessFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<!-- Enable TenantSetFilter -->
	<filter>
		<filter-name>TenantSetFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<!-- Filter Mappings -->

	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>AccessFilter</filter-name>
		<url-pattern>/api/dime/rest/*</url-pattern>
		<url-pattern>/push/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>TenantSetFilter</filter-name>
		<url-pattern>/api/dime/rest/*</url-pattern>
		<url-pattern>/push/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<mime-mapping>
		<extension>js</extension>
		<mime-type>application/javascript</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>css</extension>
		<mime-type>text/css</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>png</extension>
		<mime-type>image/png</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>jpg</extension>
		<mime-type>image/jpeg</mime-type>
	</mime-mapping>

</web-app>
